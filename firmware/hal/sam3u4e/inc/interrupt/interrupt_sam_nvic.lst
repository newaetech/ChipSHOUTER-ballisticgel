   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"interrupt_sam_nvic.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.cpu_irq_enter_critical,"ax",%progbits
  19              		.align	2
  20              		.global	cpu_irq_enter_critical
  21              		.thumb
  22              		.thumb_func
  24              	cpu_irq_enter_critical:
  25              	.LFB66:
  26              		.file 1 "../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c"
   1:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** /**
   2:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * \file
   3:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
   4:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
   6:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
   8:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * \asf_license_start
   9:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  10:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * \page License
  11:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  12:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * Redistribution and use in source and binary forms, with or without
  13:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * modification, are permitted provided that the following conditions are met:
  14:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  15:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *    this list of conditions and the following disclaimer.
  17:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  18:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *    and/or other materials provided with the distribution.
  21:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  22:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *    from this software without specific prior written permission.
  24:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  25:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *    Atmel microcontroller product.
  27:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  28:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  40:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * \asf_license_stop
  41:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  42:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  */
  43:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  44:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** #include "interrupt_sam_nvic.h"
  45:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  46:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** #if !defined(__DOXYGEN__)
  47:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** /* Deprecated - global flag to determine the global interrupt state. Required by
  48:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * QTouch library, however new applications should use cpu_irq_is_enabled()
  49:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  * which probes the true global interrupt state from the CPU special registers.
  50:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c ****  */
  51:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** volatile bool g_interrupt_enabled = true;
  52:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** #endif
  53:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  54:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** void cpu_irq_enter_critical(void)
  55:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** {
  27              		.loc 1 55 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  56:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	if (cpu_irq_critical_section_counter == 0) {
  32              		.loc 1 56 0
  33 0000 0B4B     		ldr	r3, .L4
  34 0002 1B68     		ldr	r3, [r3]
  35 0004 7BB9     		cbnz	r3, .L2
  36              	.LBB12:
  37              	.LBB13:
  38              		.file 2 "../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h"
   1:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @version  V3.00
   5:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @date     19. January 2012
   6:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  *
   7:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @note
   8:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  *
  10:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @par
  11:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  *
  15:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * @par
  16:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  *
  22:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  23:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  24:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  27:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  28:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   @{
  32:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
  33:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  34:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  36:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  37:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #endif
  40:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  41:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  44:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  45:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  46:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  48:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  49:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
  50:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
  52:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  54:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
  55:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  56:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  57:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  58:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  59:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  61:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
  63:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
  65:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regControl = control;
  67:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
  68:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  69:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  70:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  72:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  74:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               IPSR Register value
  75:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
  76:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
  78:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  80:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
  81:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  82:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  83:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  84:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  85:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  87:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
  88:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
  89:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
  91:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
  93:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
  94:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  95:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  96:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
  98:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 100:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 101:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 102:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 104:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 106:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 107:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 108:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 109:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 111:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 113:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 114:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 115:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 117:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 120:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 121:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 122:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 124:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 126:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 128:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 130:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 133:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 134:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 135:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 137:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 139:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 140:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 141:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 143:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 145:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 146:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 147:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 148:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 150:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 152:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 154:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 156:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 159:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 160:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 161:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 163:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 165:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 166:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 167:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 169:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 171:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 172:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 173:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 174:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 176:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 178:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 180:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 182:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 184:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 185:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  
 186:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 187:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 189:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 190:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 191:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 194:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 196:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 197:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 198:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 199:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 202:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 204:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 205:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 206:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 207:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 209:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 210:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 211:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 213:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 215:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 216:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 217:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 218:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 219:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 220:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 222:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 224:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 226:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 229:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  
 230:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 231:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 233:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 235:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 236:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 237:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 239:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 241:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 242:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 243:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 244:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 246:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 248:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 250:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 252:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 255:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 256:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 258:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 259:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 261:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 262:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 263:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 265:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 267:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 269:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 272:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #else
 273:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****    return(0);
 274:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #endif
 275:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 276:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 277:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 278:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 279:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 280:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 282:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 284:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 286:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #endif
 290:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 291:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 292:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 294:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 295:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 298:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 299:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 300:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 301:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* TI CCS specific functions */
 303:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 304:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 306:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 307:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 309:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 310:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 312:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 315:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 317:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 319:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 320:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 321:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 323:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 326:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 328:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 329:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 330:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 331:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 332:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
 333:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 334:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
 335:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 336:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
 337:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 338:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 339:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 340:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 341:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 342:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 343:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(result);
 344:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 345:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 346:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 347:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
 348:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 349:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 350:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 351:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 352:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 353:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 354:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 355:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 356:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 357:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 358:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 359:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get IPSR Register
 360:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 361:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 362:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 363:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               IPSR Register value
 364:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 365:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 366:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 367:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 368:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 369:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 370:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(result);
 371:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 372:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 373:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 374:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
 375:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 376:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 377:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 378:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 379:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 380:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 381:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 382:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 383:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 384:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 385:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(result);
 386:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 387:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 388:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 389:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 390:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 391:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 392:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 393:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 394:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 395:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 396:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 397:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 398:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 399:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 400:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(result);
 401:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 402:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 403:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 404:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 405:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 406:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 407:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 408:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 409:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 410:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 411:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 412:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 413:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 414:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 415:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(result);
 416:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 417:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  
 418:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 419:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 420:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 421:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 422:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 423:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 424:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 425:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 426:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 427:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 428:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 429:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 430:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 431:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 432:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 433:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 434:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 435:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 436:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 437:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 438:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 439:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 440:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 441:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 442:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   return(result);
 443:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 444:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  
 445:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 446:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 447:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 448:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 449:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 450:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 451:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 452:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 453:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 454:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 455:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 456:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 457:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 458:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 459:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 460:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 461:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 462:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 463:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****  */
 464:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 465:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** {
 466:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 467:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** 
 468:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
  39              		.loc 2 468 0
  40              	@ 468 "../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h" 1
  41 0006 EFF31083 		MRS r3, primask
  42              	@ 0 "" 2
  43              	.LVL0:
  44              		.thumb
  45              	.LBE13:
  46              	.LBE12:
  57:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 		if (cpu_irq_is_enabled()) {
  47              		.loc 1 57 0
  48 000a 4BB9     		cbnz	r3, .L3
  49              	.LBB14:
  50              	.LBB15:
 328:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
  51              		.loc 2 328 0
  52              	@ 328 "../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h" 1
  53 000c 72B6     		cpsid i
  54              	@ 0 "" 2
  55              		.thumb
  56              	.LBE15:
  57              	.LBE14:
  58              	.LBB16:
  59              	.LBB17:
  60              		.file 3 "../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h"
   1:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @version  V3.00
   5:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @date     07. February 2012
   6:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  *
   7:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @note
   8:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  *
  10:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @par
  11:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  *
  15:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * @par
  16:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  *
  22:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  24:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  27:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  28:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   @{
  32:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** */
  33:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  34:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  37:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #endif
  40:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  41:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  42:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  44:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  46:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  48:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  49:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  51:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  54:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  56:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  57:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  59:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  62:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  64:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  65:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  67:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  69:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  71:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  72:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  74:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  78:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  80:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  81:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  83:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  86:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  88:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  89:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  91:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
  94:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  96:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  97:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
  99:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 101:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 104:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 106:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 107:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 109:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 111:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 114:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 116:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 119:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 120:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 121:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 123:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 125:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 128:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 130:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 133:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 134:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 135:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 137:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 139:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 142:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 143:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 144:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 145:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 146:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 148:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 150:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 152:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 154:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 155:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 157:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 158:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 160:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 162:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 165:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 167:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 168:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 170:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 172:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 175:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 177:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 178:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 180:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 182:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 185:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 187:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 188:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 190:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 192:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 196:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 197:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 199:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 200:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 202:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 204:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 208:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 209:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 211:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 212:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 214:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 216:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 220:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 221:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 223:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 224:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 226:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 228:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 229:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 231:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 232:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 234:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 235:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 236:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 240:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 242:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 243:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 245:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 247:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 250:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 251:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 252:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 253:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 254:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 256:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 258:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 261:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 263:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 265:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 266:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 267:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 270:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 272:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 273:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 276:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 278:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 279:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 282:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 283:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 284:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 286:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 288:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 290:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 291:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 292:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 294:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 297:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 299:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 301:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 302:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 303:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 305:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 308:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 310:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 312:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 313:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 314:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 315:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 316:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 318:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 320:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 322:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 323:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 324:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 326:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 330:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 332:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 334:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 335:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 336:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 338:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 341:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 343:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** }
 345:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 346:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 347:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** 
 349:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****  */
 352:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h **** {
 354:../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
  61              		.loc 3 354 0
  62              	@ 354 "../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h" 1
  63 000e BFF35F8F 		dmb
  64              	@ 0 "" 2
  65              		.thumb
  66              	.LBE17:
  67              	.LBE16:
  58:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 			cpu_irq_disable();
  68              		.loc 1 58 0
  69 0012 0022     		movs	r2, #0
  70 0014 074B     		ldr	r3, .L4+4
  71              	.LVL1:
  72 0016 1A70     		strb	r2, [r3]
  59:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 			cpu_irq_prev_interrupt_state = true;
  73              		.loc 1 59 0
  74 0018 0122     		movs	r2, #1
  75 001a 074B     		ldr	r3, .L4+8
  76 001c 1A70     		strb	r2, [r3]
  77 001e 02E0     		b	.L2
  78              	.LVL2:
  79              	.L3:
  60:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 		} else {
  61:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 			/* Make sure the to save the prev state as false */
  62:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 			cpu_irq_prev_interrupt_state = false;
  80              		.loc 1 62 0
  81 0020 0022     		movs	r2, #0
  82 0022 054B     		ldr	r3, .L4+8
  83              	.LVL3:
  84 0024 1A70     		strb	r2, [r3]
  85              	.L2:
  63:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 		}
  64:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  65:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	}
  66:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  67:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	cpu_irq_critical_section_counter++;
  86              		.loc 1 67 0
  87 0026 024A     		ldr	r2, .L4
  88 0028 1368     		ldr	r3, [r2]
  89 002a 0133     		adds	r3, r3, #1
  90 002c 1360     		str	r3, [r2]
  91 002e 7047     		bx	lr
  92              	.L5:
  93              		.align	2
  94              	.L4:
  95 0030 00000000 		.word	.LANCHOR0
  96 0034 00000000 		.word	.LANCHOR1
  97 0038 00000000 		.word	.LANCHOR2
  98              		.cfi_endproc
  99              	.LFE66:
 101              		.section	.text.cpu_irq_leave_critical,"ax",%progbits
 102              		.align	2
 103              		.global	cpu_irq_leave_critical
 104              		.thumb
 105              		.thumb_func
 107              	cpu_irq_leave_critical:
 108              	.LFB67:
  68:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** }
  69:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  70:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** void cpu_irq_leave_critical(void)
  71:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** {
 109              		.loc 1 71 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
  72:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	/* Check if the user is trying to leave a critical section when not in a critical section */
  73:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	Assert(cpu_irq_critical_section_counter > 0);
  74:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  75:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	cpu_irq_critical_section_counter--;
 114              		.loc 1 75 0
 115 0000 084B     		ldr	r3, .L8
 116 0002 1A68     		ldr	r2, [r3]
 117 0004 013A     		subs	r2, r2, #1
 118 0006 1A60     		str	r2, [r3]
  76:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 
  77:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt 
  78:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	   was enabled when entering critical state */
  79:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 119              		.loc 1 79 0
 120 0008 1B68     		ldr	r3, [r3]
 121 000a 53B9     		cbnz	r3, .L6
 122              		.loc 1 79 0 is_stmt 0 discriminator 1
 123 000c 064B     		ldr	r3, .L8+4
 124 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 125 0010 13F0FF0F 		tst	r3, #255
 126 0014 05D0     		beq	.L6
  80:../src/ASF/common/utils/interrupt/interrupt_sam_nvic.c **** 		cpu_irq_enable();
 127              		.loc 1 80 0 is_stmt 1
 128 0016 0122     		movs	r2, #1
 129 0018 044B     		ldr	r3, .L8+8
 130 001a 1A70     		strb	r2, [r3]
 131              	.LBB18:
 132              	.LBB19:
 133              		.loc 3 354 0
 134              	@ 354 "../src/ASF/thirdparty/CMSIS/Include/core_cmInstr.h" 1
 135 001c BFF35F8F 		dmb
 136              	@ 0 "" 2
 137              		.thumb
 138              	.LBE19:
 139              	.LBE18:
 140              	.LBB20:
 141              	.LBB21:
 317:../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h **** }
 142              		.loc 2 317 0
 143              	@ 317 "../src/ASF/thirdparty/CMSIS/Include/core_cmFunc.h" 1
 144 0020 62B6     		cpsie i
 145              	@ 0 "" 2
 146              		.thumb
 147              	.L6:
 148 0022 7047     		bx	lr
 149              	.L9:
 150              		.align	2
 151              	.L8:
 152 0024 00000000 		.word	.LANCHOR0
 153 0028 00000000 		.word	.LANCHOR2
 154 002c 00000000 		.word	.LANCHOR1
 155              	.LBE21:
 156              	.LBE20:
 157              		.cfi_endproc
 158              	.LFE67:
 160              		.global	g_interrupt_enabled
 161              		.section	.data.g_interrupt_enabled,"aw",%progbits
 162              		.set	.LANCHOR1,. + 0
 165              	g_interrupt_enabled:
 166 0000 01       		.byte	1
 167              		.section	.bss.cpu_irq_critical_section_counter,"aw",%nobits
 168              		.align	2
 169              		.set	.LANCHOR0,. + 0
 172              	cpu_irq_critical_section_counter:
 173 0000 00000000 		.space	4
 174              		.section	.bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 175              		.set	.LANCHOR2,. + 0
 178              	cpu_irq_prev_interrupt_state:
 179 0000 00       		.space	1
 180              		.text
 181              	.Letext0:
 182              		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-
 183              		.file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-
 184              		.file 6 "../src/ASF/common/utils/interrupt/interrupt_sam_nvic.h"
 185              		.file 7 "../src/ASF/thirdparty/CMSIS/Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_sam_nvic.c
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:19     .text.cpu_irq_enter_critical:00000000 $t
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:24     .text.cpu_irq_enter_critical:00000000 cpu_irq_enter_critical
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:95     .text.cpu_irq_enter_critical:00000030 $d
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:102    .text.cpu_irq_leave_critical:00000000 $t
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:107    .text.cpu_irq_leave_critical:00000000 cpu_irq_leave_critical
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:152    .text.cpu_irq_leave_critical:00000024 $d
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:165    .data.g_interrupt_enabled:00000000 g_interrupt_enabled
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:168    .bss.cpu_irq_critical_section_counter:00000000 $d
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:172    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:178    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
C:\Users\colin\AppData\Local\Temp\ccEplEwG.s:179    .bss.cpu_irq_prev_interrupt_state:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.738cd1dff6e476bef2e1e0b99fec4f4f
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.sam3u2e.h.224.0dd3d6dd7ebd015c591c55f903ce78e7
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_usart3.h.43.f6638d1b78bcba70ca95fca279d33914
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_pioc.h.43.d9706cf766637d6b3ed9886aa3ef7261
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u2e.h.318.b69dc6db89bb8a018eede87e67bbc95d
                           .group:00000000 wm4.pio_sam3u2e.h.43.21412830fa1fb9ca8a54ce10fede3251
                           .group:00000000 wm4.sam3u2e.h.456.687e75a22829f9ea89425dc4ee4ff5e3
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.81.ded4e8fbe2d299b79c956dc834e43661
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.a99a2db1e55915cfd1b035cc1e9fcff1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.compiler.h.88.e36be790b5e347a01e6762426f60e643
                           .group:00000000 wm4.compiler.h.424.ee053ef8246023ebdcca352464bd827f
                           .group:00000000 wm4.interrupt_sam_nvic.h.84.12b72da0cfda407ab49bd5ed390be386

NO UNDEFINED SYMBOLS
