
cw521-SAM3U4E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cddc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008cddc  0008cddc  0001cddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e30  20000000  0008cde4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000029d0  20000e30  0008dc14  00020e30  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00020e59  2**0
                  CONTENTS, READONLY
  7 .debug_info   000117c8  00000000  00000000  00020ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000328f  00000000  00000000  0003266a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    000090e6  00000000  00000000  000358f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001148  00000000  00000000  0003e9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000f58  00000000  00000000  0003fb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001ade6  00000000  00000000  00040a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00018918  00000000  00000000  0005b865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005ae46  00000000  00000000  0007417d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005af4  00000000  00000000  000cefc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 1d 44 08 00 09 53 08 00 09 53 08 00     .@. .D...S...S..
   80010:	09 53 08 00 09 53 08 00 09 53 08 00 00 00 00 00     .S...S...S......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 09 53 08 00     .............S..
   80030:	09 53 08 00 00 00 00 00 09 53 08 00 09 53 08 00     .S.......S...S..
   80040:	09 53 08 00 09 53 08 00 09 53 08 00 09 53 08 00     .S...S...S...S..
   80050:	09 53 08 00 09 53 08 00 09 53 08 00 09 53 08 00     .S...S...S...S..
   80060:	09 53 08 00 09 53 08 00 31 26 08 00 49 26 08 00     .S...S..1&..I&..
   80070:	61 26 08 00 09 53 08 00 09 53 08 00 09 53 08 00     a&...S...S...S..
   80080:	09 53 08 00 09 53 08 00 09 53 08 00 09 53 08 00     .S...S...S...S..
   80090:	09 53 08 00 09 53 08 00 09 53 08 00 09 53 08 00     .S...S...S...S..
   800a0:	09 53 08 00 09 53 08 00 09 53 08 00 09 53 08 00     .S...S...S...S..
   800b0:	09 53 08 00 55 28 08 00 09 53 08 00                 .S..U(...S..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000e30 	.word	0x20000e30
   800d8:	00000000 	.word	0x00000000
   800dc:	0008cde4 	.word	0x0008cde4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000e34 	.word	0x20000e34
   800f8:	0008cde4 	.word	0x0008cde4

000800fc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   800fc:	b480      	push	{r7}
   800fe:	b083      	sub	sp, #12
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d823      	bhi.n	80152 <osc_get_rate+0x56>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_get_rate+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080131 	.word	0x00080131
   80114:	00080137 	.word	0x00080137
   80118:	0008013b 	.word	0x0008013b
   8011c:	0008013f 	.word	0x0008013f
   80120:	00080143 	.word	0x00080143
   80124:	00080147 	.word	0x00080147
   80128:	0008014b 	.word	0x0008014b
   8012c:	0008014f 	.word	0x0008014f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80130:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80134:	e00e      	b.n	80154 <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80136:	2300      	movs	r3, #0
   80138:	e00c      	b.n	80154 <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8013a:	2300      	movs	r3, #0
   8013c:	e00a      	b.n	80154 <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8013e:	4b08      	ldr	r3, [pc, #32]	; (80160 <osc_get_rate+0x64>)
   80140:	e008      	b.n	80154 <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80142:	4b08      	ldr	r3, [pc, #32]	; (80164 <osc_get_rate+0x68>)
   80144:	e006      	b.n	80154 <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80146:	4b08      	ldr	r3, [pc, #32]	; (80168 <osc_get_rate+0x6c>)
   80148:	e004      	b.n	80154 <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8014a:	4b07      	ldr	r3, [pc, #28]	; (80168 <osc_get_rate+0x6c>)
   8014c:	e002      	b.n	80154 <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8014e:	4b06      	ldr	r3, [pc, #24]	; (80168 <osc_get_rate+0x6c>)
   80150:	e000      	b.n	80154 <osc_get_rate+0x58>
	}

	return 0;
   80152:	2300      	movs	r3, #0
}
   80154:	4618      	mov	r0, r3
   80156:	370c      	adds	r7, #12
   80158:	46bd      	mov	sp, r7
   8015a:	bc80      	pop	{r7}
   8015c:	4770      	bx	lr
   8015e:	bf00      	nop
   80160:	003d0900 	.word	0x003d0900
   80164:	007a1200 	.word	0x007a1200
   80168:	00b71b00 	.word	0x00b71b00

0008016c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8016c:	b580      	push	{r7, lr}
   8016e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80170:	2006      	movs	r0, #6
   80172:	4b03      	ldr	r3, [pc, #12]	; (80180 <sysclk_get_main_hz+0x14>)
   80174:	4798      	blx	r3
   80176:	4603      	mov	r3, r0
   80178:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8017a:	4618      	mov	r0, r3
   8017c:	bd80      	pop	{r7, pc}
   8017e:	bf00      	nop
   80180:	000800fd 	.word	0x000800fd

00080184 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80184:	b580      	push	{r7, lr}
   80186:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80188:	4b02      	ldr	r3, [pc, #8]	; (80194 <sysclk_get_peripheral_hz+0x10>)
   8018a:	4798      	blx	r3
   8018c:	4603      	mov	r3, r0
   8018e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80190:	4618      	mov	r0, r3
   80192:	bd80      	pop	{r7, pc}
   80194:	0008016d 	.word	0x0008016d

00080198 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80198:	b580      	push	{r7, lr}
   8019a:	b082      	sub	sp, #8
   8019c:	af00      	add	r7, sp, #0
   8019e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   801a0:	6878      	ldr	r0, [r7, #4]
   801a2:	4b03      	ldr	r3, [pc, #12]	; (801b0 <sysclk_enable_peripheral_clock+0x18>)
   801a4:	4798      	blx	r3
}
   801a6:	bf00      	nop
   801a8:	3708      	adds	r7, #8
   801aa:	46bd      	mov	sp, r7
   801ac:	bd80      	pop	{r7, pc}
   801ae:	bf00      	nop
   801b0:	00084bb5 	.word	0x00084bb5

000801b4 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   801b4:	b480      	push	{r7}
   801b6:	b083      	sub	sp, #12
   801b8:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   801ba:	2300      	movs	r3, #0
   801bc:	71fb      	strb	r3, [r7, #7]
   801be:	e006      	b.n	801ce <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   801c0:	79fb      	ldrb	r3, [r7, #7]
   801c2:	4a08      	ldr	r2, [pc, #32]	; (801e4 <sleepmgr_init+0x30>)
   801c4:	2100      	movs	r1, #0
   801c6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   801c8:	79fb      	ldrb	r3, [r7, #7]
   801ca:	3301      	adds	r3, #1
   801cc:	71fb      	strb	r3, [r7, #7]
   801ce:	79fb      	ldrb	r3, [r7, #7]
   801d0:	2b04      	cmp	r3, #4
   801d2:	d9f5      	bls.n	801c0 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   801d4:	4b03      	ldr	r3, [pc, #12]	; (801e4 <sleepmgr_init+0x30>)
   801d6:	2201      	movs	r2, #1
   801d8:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   801da:	bf00      	nop
   801dc:	370c      	adds	r7, #12
   801de:	46bd      	mov	sp, r7
   801e0:	bc80      	pop	{r7}
   801e2:	4770      	bx	lr
   801e4:	200037b0 	.word	0x200037b0

000801e8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   801e8:	b580      	push	{r7, lr}
   801ea:	b08c      	sub	sp, #48	; 0x30
   801ec:	af00      	add	r7, sp, #0
   801ee:	6078      	str	r0, [r7, #4]
   801f0:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   801f2:	4b40      	ldr	r3, [pc, #256]	; (802f4 <usart_serial_init+0x10c>)
   801f4:	4798      	blx	r3
   801f6:	4603      	mov	r3, r0
   801f8:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	681b      	ldr	r3, [r3, #0]
   801fe:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
   80200:	683b      	ldr	r3, [r7, #0]
   80202:	689b      	ldr	r3, [r3, #8]
   80204:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   80206:	683b      	ldr	r3, [r7, #0]
   80208:	681b      	ldr	r3, [r3, #0]
   8020a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
   8020c:	683b      	ldr	r3, [r7, #0]
   8020e:	685b      	ldr	r3, [r3, #4]
   80210:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
   80212:	683b      	ldr	r3, [r7, #0]
   80214:	689b      	ldr	r3, [r3, #8]
   80216:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
   80218:	683b      	ldr	r3, [r7, #0]
   8021a:	7b1b      	ldrb	r3, [r3, #12]
   8021c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   8021e:	2300      	movs	r3, #0
   80220:	61fb      	str	r3, [r7, #28]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80222:	687b      	ldr	r3, [r7, #4]
   80224:	4a34      	ldr	r2, [pc, #208]	; (802f8 <usart_serial_init+0x110>)
   80226:	4293      	cmp	r3, r2
   80228:	d108      	bne.n	8023c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   8022a:	2008      	movs	r0, #8
   8022c:	4b33      	ldr	r3, [pc, #204]	; (802fc <usart_serial_init+0x114>)
   8022e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80230:	f107 0324 	add.w	r3, r7, #36	; 0x24
   80234:	4619      	mov	r1, r3
   80236:	6878      	ldr	r0, [r7, #4]
   80238:	4b31      	ldr	r3, [pc, #196]	; (80300 <usart_serial_init+0x118>)
   8023a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8023c:	687b      	ldr	r3, [r7, #4]
   8023e:	4a31      	ldr	r2, [pc, #196]	; (80304 <usart_serial_init+0x11c>)
   80240:	4293      	cmp	r3, r2
   80242:	d111      	bne.n	80268 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   80244:	200d      	movs	r0, #13
   80246:	4b2d      	ldr	r3, [pc, #180]	; (802fc <usart_serial_init+0x114>)
   80248:	4798      	blx	r3
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8024a:	4b2a      	ldr	r3, [pc, #168]	; (802f4 <usart_serial_init+0x10c>)
   8024c:	4798      	blx	r3
   8024e:	4602      	mov	r2, r0
   80250:	f107 030c 	add.w	r3, r7, #12
   80254:	4619      	mov	r1, r3
   80256:	6878      	ldr	r0, [r7, #4]
   80258:	4b2b      	ldr	r3, [pc, #172]	; (80308 <usart_serial_init+0x120>)
   8025a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   8025c:	6878      	ldr	r0, [r7, #4]
   8025e:	4b2b      	ldr	r3, [pc, #172]	; (8030c <usart_serial_init+0x124>)
   80260:	4798      	blx	r3
		usart_enable_rx(p_usart);
   80262:	6878      	ldr	r0, [r7, #4]
   80264:	4b2a      	ldr	r3, [pc, #168]	; (80310 <usart_serial_init+0x128>)
   80266:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80268:	687b      	ldr	r3, [r7, #4]
   8026a:	4a2a      	ldr	r2, [pc, #168]	; (80314 <usart_serial_init+0x12c>)
   8026c:	4293      	cmp	r3, r2
   8026e:	d111      	bne.n	80294 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   80270:	200e      	movs	r0, #14
   80272:	4b22      	ldr	r3, [pc, #136]	; (802fc <usart_serial_init+0x114>)
   80274:	4798      	blx	r3
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   80276:	4b1f      	ldr	r3, [pc, #124]	; (802f4 <usart_serial_init+0x10c>)
   80278:	4798      	blx	r3
   8027a:	4602      	mov	r2, r0
   8027c:	f107 030c 	add.w	r3, r7, #12
   80280:	4619      	mov	r1, r3
   80282:	6878      	ldr	r0, [r7, #4]
   80284:	4b20      	ldr	r3, [pc, #128]	; (80308 <usart_serial_init+0x120>)
   80286:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   80288:	6878      	ldr	r0, [r7, #4]
   8028a:	4b20      	ldr	r3, [pc, #128]	; (8030c <usart_serial_init+0x124>)
   8028c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   8028e:	6878      	ldr	r0, [r7, #4]
   80290:	4b1f      	ldr	r3, [pc, #124]	; (80310 <usart_serial_init+0x128>)
   80292:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80294:	687b      	ldr	r3, [r7, #4]
   80296:	4a20      	ldr	r2, [pc, #128]	; (80318 <usart_serial_init+0x130>)
   80298:	4293      	cmp	r3, r2
   8029a:	d111      	bne.n	802c0 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   8029c:	200f      	movs	r0, #15
   8029e:	4b17      	ldr	r3, [pc, #92]	; (802fc <usart_serial_init+0x114>)
   802a0:	4798      	blx	r3
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   802a2:	4b14      	ldr	r3, [pc, #80]	; (802f4 <usart_serial_init+0x10c>)
   802a4:	4798      	blx	r3
   802a6:	4602      	mov	r2, r0
   802a8:	f107 030c 	add.w	r3, r7, #12
   802ac:	4619      	mov	r1, r3
   802ae:	6878      	ldr	r0, [r7, #4]
   802b0:	4b15      	ldr	r3, [pc, #84]	; (80308 <usart_serial_init+0x120>)
   802b2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   802b4:	6878      	ldr	r0, [r7, #4]
   802b6:	4b15      	ldr	r3, [pc, #84]	; (8030c <usart_serial_init+0x124>)
   802b8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   802ba:	6878      	ldr	r0, [r7, #4]
   802bc:	4b14      	ldr	r3, [pc, #80]	; (80310 <usart_serial_init+0x128>)
   802be:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802c0:	687b      	ldr	r3, [r7, #4]
   802c2:	4a16      	ldr	r2, [pc, #88]	; (8031c <usart_serial_init+0x134>)
   802c4:	4293      	cmp	r3, r2
   802c6:	d111      	bne.n	802ec <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   802c8:	2010      	movs	r0, #16
   802ca:	4b0c      	ldr	r3, [pc, #48]	; (802fc <usart_serial_init+0x114>)
   802cc:	4798      	blx	r3
#if (SAMG55)
		flexcom_enable(FLEXCOM3);
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   802ce:	4b09      	ldr	r3, [pc, #36]	; (802f4 <usart_serial_init+0x10c>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	f107 030c 	add.w	r3, r7, #12
   802d8:	4619      	mov	r1, r3
   802da:	6878      	ldr	r0, [r7, #4]
   802dc:	4b0a      	ldr	r3, [pc, #40]	; (80308 <usart_serial_init+0x120>)
   802de:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   802e0:	6878      	ldr	r0, [r7, #4]
   802e2:	4b0a      	ldr	r3, [pc, #40]	; (8030c <usart_serial_init+0x124>)
   802e4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   802e6:	6878      	ldr	r0, [r7, #4]
   802e8:	4b09      	ldr	r3, [pc, #36]	; (80310 <usart_serial_init+0x128>)
   802ea:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
   802ec:	bf00      	nop
   802ee:	3730      	adds	r7, #48	; 0x30
   802f0:	46bd      	mov	sp, r7
   802f2:	bd80      	pop	{r7, pc}
   802f4:	00080185 	.word	0x00080185
   802f8:	400e0600 	.word	0x400e0600
   802fc:	00080199 	.word	0x00080199
   80300:	00085435 	.word	0x00085435
   80304:	40090000 	.word	0x40090000
   80308:	00082321 	.word	0x00082321
   8030c:	000823a5 	.word	0x000823a5
   80310:	000823d5 	.word	0x000823d5
   80314:	40094000 	.word	0x40094000
   80318:	40098000 	.word	0x40098000
   8031c:	4009c000 	.word	0x4009c000

00080320 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80320:	b580      	push	{r7, lr}
   80322:	b082      	sub	sp, #8
   80324:	af00      	add	r7, sp, #0
   80326:	6078      	str	r0, [r7, #4]
   80328:	460b      	mov	r3, r1
   8032a:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	4a27      	ldr	r2, [pc, #156]	; (803cc <usart_serial_putchar+0xac>)
   80330:	4293      	cmp	r3, r2
   80332:	d10a      	bne.n	8034a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80334:	bf00      	nop
   80336:	78fb      	ldrb	r3, [r7, #3]
   80338:	4619      	mov	r1, r3
   8033a:	6878      	ldr	r0, [r7, #4]
   8033c:	4b24      	ldr	r3, [pc, #144]	; (803d0 <usart_serial_putchar+0xb0>)
   8033e:	4798      	blx	r3
   80340:	4603      	mov	r3, r0
   80342:	2b00      	cmp	r3, #0
   80344:	d1f7      	bne.n	80336 <usart_serial_putchar+0x16>
		return 1;
   80346:	2301      	movs	r3, #1
   80348:	e03c      	b.n	803c4 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8034a:	687b      	ldr	r3, [r7, #4]
   8034c:	4a21      	ldr	r2, [pc, #132]	; (803d4 <usart_serial_putchar+0xb4>)
   8034e:	4293      	cmp	r3, r2
   80350:	d10a      	bne.n	80368 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   80352:	bf00      	nop
   80354:	78fb      	ldrb	r3, [r7, #3]
   80356:	4619      	mov	r1, r3
   80358:	6878      	ldr	r0, [r7, #4]
   8035a:	4b1f      	ldr	r3, [pc, #124]	; (803d8 <usart_serial_putchar+0xb8>)
   8035c:	4798      	blx	r3
   8035e:	4603      	mov	r3, r0
   80360:	2b00      	cmp	r3, #0
   80362:	d1f7      	bne.n	80354 <usart_serial_putchar+0x34>
		return 1;
   80364:	2301      	movs	r3, #1
   80366:	e02d      	b.n	803c4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80368:	687b      	ldr	r3, [r7, #4]
   8036a:	4a1c      	ldr	r2, [pc, #112]	; (803dc <usart_serial_putchar+0xbc>)
   8036c:	4293      	cmp	r3, r2
   8036e:	d10a      	bne.n	80386 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   80370:	bf00      	nop
   80372:	78fb      	ldrb	r3, [r7, #3]
   80374:	4619      	mov	r1, r3
   80376:	6878      	ldr	r0, [r7, #4]
   80378:	4b17      	ldr	r3, [pc, #92]	; (803d8 <usart_serial_putchar+0xb8>)
   8037a:	4798      	blx	r3
   8037c:	4603      	mov	r3, r0
   8037e:	2b00      	cmp	r3, #0
   80380:	d1f7      	bne.n	80372 <usart_serial_putchar+0x52>
		return 1;
   80382:	2301      	movs	r3, #1
   80384:	e01e      	b.n	803c4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80386:	687b      	ldr	r3, [r7, #4]
   80388:	4a15      	ldr	r2, [pc, #84]	; (803e0 <usart_serial_putchar+0xc0>)
   8038a:	4293      	cmp	r3, r2
   8038c:	d10a      	bne.n	803a4 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   8038e:	bf00      	nop
   80390:	78fb      	ldrb	r3, [r7, #3]
   80392:	4619      	mov	r1, r3
   80394:	6878      	ldr	r0, [r7, #4]
   80396:	4b10      	ldr	r3, [pc, #64]	; (803d8 <usart_serial_putchar+0xb8>)
   80398:	4798      	blx	r3
   8039a:	4603      	mov	r3, r0
   8039c:	2b00      	cmp	r3, #0
   8039e:	d1f7      	bne.n	80390 <usart_serial_putchar+0x70>
		return 1;
   803a0:	2301      	movs	r3, #1
   803a2:	e00f      	b.n	803c4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   803a4:	687b      	ldr	r3, [r7, #4]
   803a6:	4a0f      	ldr	r2, [pc, #60]	; (803e4 <usart_serial_putchar+0xc4>)
   803a8:	4293      	cmp	r3, r2
   803aa:	d10a      	bne.n	803c2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   803ac:	bf00      	nop
   803ae:	78fb      	ldrb	r3, [r7, #3]
   803b0:	4619      	mov	r1, r3
   803b2:	6878      	ldr	r0, [r7, #4]
   803b4:	4b08      	ldr	r3, [pc, #32]	; (803d8 <usart_serial_putchar+0xb8>)
   803b6:	4798      	blx	r3
   803b8:	4603      	mov	r3, r0
   803ba:	2b00      	cmp	r3, #0
   803bc:	d1f7      	bne.n	803ae <usart_serial_putchar+0x8e>
		return 1;
   803be:	2301      	movs	r3, #1
   803c0:	e000      	b.n	803c4 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   803c2:	2300      	movs	r3, #0
}
   803c4:	4618      	mov	r0, r3
   803c6:	3708      	adds	r7, #8
   803c8:	46bd      	mov	sp, r7
   803ca:	bd80      	pop	{r7, pc}
   803cc:	400e0600 	.word	0x400e0600
   803d0:	00085495 	.word	0x00085495
   803d4:	40090000 	.word	0x40090000
   803d8:	00082453 	.word	0x00082453
   803dc:	40094000 	.word	0x40094000
   803e0:	40098000 	.word	0x40098000
   803e4:	4009c000 	.word	0x4009c000

000803e8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   803e8:	b580      	push	{r7, lr}
   803ea:	b084      	sub	sp, #16
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
   803f0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   803f2:	2300      	movs	r3, #0
   803f4:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   803f6:	687b      	ldr	r3, [r7, #4]
   803f8:	4a2b      	ldr	r2, [pc, #172]	; (804a8 <usart_serial_getchar+0xc0>)
   803fa:	4293      	cmp	r3, r2
   803fc:	d107      	bne.n	8040e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   803fe:	bf00      	nop
   80400:	6839      	ldr	r1, [r7, #0]
   80402:	6878      	ldr	r0, [r7, #4]
   80404:	4b29      	ldr	r3, [pc, #164]	; (804ac <usart_serial_getchar+0xc4>)
   80406:	4798      	blx	r3
   80408:	4603      	mov	r3, r0
   8040a:	2b00      	cmp	r3, #0
   8040c:	d1f8      	bne.n	80400 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8040e:	687b      	ldr	r3, [r7, #4]
   80410:	4a27      	ldr	r2, [pc, #156]	; (804b0 <usart_serial_getchar+0xc8>)
   80412:	4293      	cmp	r3, r2
   80414:	d10d      	bne.n	80432 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   80416:	bf00      	nop
   80418:	f107 030c 	add.w	r3, r7, #12
   8041c:	4619      	mov	r1, r3
   8041e:	6878      	ldr	r0, [r7, #4]
   80420:	4b24      	ldr	r3, [pc, #144]	; (804b4 <usart_serial_getchar+0xcc>)
   80422:	4798      	blx	r3
   80424:	4603      	mov	r3, r0
   80426:	2b00      	cmp	r3, #0
   80428:	d1f6      	bne.n	80418 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   8042a:	68fb      	ldr	r3, [r7, #12]
   8042c:	b2da      	uxtb	r2, r3
   8042e:	683b      	ldr	r3, [r7, #0]
   80430:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80432:	687b      	ldr	r3, [r7, #4]
   80434:	4a20      	ldr	r2, [pc, #128]	; (804b8 <usart_serial_getchar+0xd0>)
   80436:	4293      	cmp	r3, r2
   80438:	d10d      	bne.n	80456 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   8043a:	bf00      	nop
   8043c:	f107 030c 	add.w	r3, r7, #12
   80440:	4619      	mov	r1, r3
   80442:	6878      	ldr	r0, [r7, #4]
   80444:	4b1b      	ldr	r3, [pc, #108]	; (804b4 <usart_serial_getchar+0xcc>)
   80446:	4798      	blx	r3
   80448:	4603      	mov	r3, r0
   8044a:	2b00      	cmp	r3, #0
   8044c:	d1f6      	bne.n	8043c <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   8044e:	68fb      	ldr	r3, [r7, #12]
   80450:	b2da      	uxtb	r2, r3
   80452:	683b      	ldr	r3, [r7, #0]
   80454:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80456:	687b      	ldr	r3, [r7, #4]
   80458:	4a18      	ldr	r2, [pc, #96]	; (804bc <usart_serial_getchar+0xd4>)
   8045a:	4293      	cmp	r3, r2
   8045c:	d10d      	bne.n	8047a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   8045e:	bf00      	nop
   80460:	f107 030c 	add.w	r3, r7, #12
   80464:	4619      	mov	r1, r3
   80466:	6878      	ldr	r0, [r7, #4]
   80468:	4b12      	ldr	r3, [pc, #72]	; (804b4 <usart_serial_getchar+0xcc>)
   8046a:	4798      	blx	r3
   8046c:	4603      	mov	r3, r0
   8046e:	2b00      	cmp	r3, #0
   80470:	d1f6      	bne.n	80460 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80472:	68fb      	ldr	r3, [r7, #12]
   80474:	b2da      	uxtb	r2, r3
   80476:	683b      	ldr	r3, [r7, #0]
   80478:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8047a:	687b      	ldr	r3, [r7, #4]
   8047c:	4a10      	ldr	r2, [pc, #64]	; (804c0 <usart_serial_getchar+0xd8>)
   8047e:	4293      	cmp	r3, r2
   80480:	d10d      	bne.n	8049e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   80482:	bf00      	nop
   80484:	f107 030c 	add.w	r3, r7, #12
   80488:	4619      	mov	r1, r3
   8048a:	6878      	ldr	r0, [r7, #4]
   8048c:	4b09      	ldr	r3, [pc, #36]	; (804b4 <usart_serial_getchar+0xcc>)
   8048e:	4798      	blx	r3
   80490:	4603      	mov	r3, r0
   80492:	2b00      	cmp	r3, #0
   80494:	d1f6      	bne.n	80484 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   80496:	68fb      	ldr	r3, [r7, #12]
   80498:	b2da      	uxtb	r2, r3
   8049a:	683b      	ldr	r3, [r7, #0]
   8049c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8049e:	bf00      	nop
   804a0:	3710      	adds	r7, #16
   804a2:	46bd      	mov	sp, r7
   804a4:	bd80      	pop	{r7, pc}
   804a6:	bf00      	nop
   804a8:	400e0600 	.word	0x400e0600
   804ac:	000854c3 	.word	0x000854c3
   804b0:	40090000 	.word	0x40090000
   804b4:	00082483 	.word	0x00082483
   804b8:	40094000 	.word	0x40094000
   804bc:	40098000 	.word	0x40098000
   804c0:	4009c000 	.word	0x4009c000

000804c4 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   804c4:	b580      	push	{r7, lr}
   804c6:	b082      	sub	sp, #8
   804c8:	af00      	add	r7, sp, #0
   804ca:	6078      	str	r0, [r7, #4]
   804cc:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   804ce:	4a0f      	ldr	r2, [pc, #60]	; (8050c <stdio_serial_init+0x48>)
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804d4:	4b0e      	ldr	r3, [pc, #56]	; (80510 <stdio_serial_init+0x4c>)
   804d6:	4a0f      	ldr	r2, [pc, #60]	; (80514 <stdio_serial_init+0x50>)
   804d8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   804da:	4b0f      	ldr	r3, [pc, #60]	; (80518 <stdio_serial_init+0x54>)
   804dc:	4a0f      	ldr	r2, [pc, #60]	; (8051c <stdio_serial_init+0x58>)
   804de:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   804e0:	6839      	ldr	r1, [r7, #0]
   804e2:	6878      	ldr	r0, [r7, #4]
   804e4:	4b0e      	ldr	r3, [pc, #56]	; (80520 <stdio_serial_init+0x5c>)
   804e6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   804e8:	4b0e      	ldr	r3, [pc, #56]	; (80524 <stdio_serial_init+0x60>)
   804ea:	681b      	ldr	r3, [r3, #0]
   804ec:	689b      	ldr	r3, [r3, #8]
   804ee:	2100      	movs	r1, #0
   804f0:	4618      	mov	r0, r3
   804f2:	4b0d      	ldr	r3, [pc, #52]	; (80528 <stdio_serial_init+0x64>)
   804f4:	4798      	blx	r3
	setbuf(stdin, NULL);
   804f6:	4b0b      	ldr	r3, [pc, #44]	; (80524 <stdio_serial_init+0x60>)
   804f8:	681b      	ldr	r3, [r3, #0]
   804fa:	685b      	ldr	r3, [r3, #4]
   804fc:	2100      	movs	r1, #0
   804fe:	4618      	mov	r0, r3
   80500:	4b09      	ldr	r3, [pc, #36]	; (80528 <stdio_serial_init+0x64>)
   80502:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   80504:	bf00      	nop
   80506:	3708      	adds	r7, #8
   80508:	46bd      	mov	sp, r7
   8050a:	bd80      	pop	{r7, pc}
   8050c:	20003794 	.word	0x20003794
   80510:	20003798 	.word	0x20003798
   80514:	00080321 	.word	0x00080321
   80518:	200037ac 	.word	0x200037ac
   8051c:	000803e9 	.word	0x000803e9
   80520:	000801e9 	.word	0x000801e9
   80524:	20000480 	.word	0x20000480
   80528:	00085af9 	.word	0x00085af9

0008052c <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8052c:	b580      	push	{r7, lr}
   8052e:	b086      	sub	sp, #24
   80530:	af00      	add	r7, sp, #0
  uint32_t serial_number[4];

  // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
  flash_read_unique_id(serial_number, sizeof(serial_number));
   80532:	1d3b      	adds	r3, r7, #4
   80534:	2110      	movs	r1, #16
   80536:	4618      	mov	r0, r3
   80538:	4b83      	ldr	r3, [pc, #524]	; (80748 <main+0x21c>)
   8053a:	4798      	blx	r3

  configure_console();
   8053c:	4b83      	ldr	r3, [pc, #524]	; (8074c <main+0x220>)
   8053e:	4798      	blx	r3

  irq_initialize_vectors();
  cpu_irq_enable();
   80540:	4b83      	ldr	r3, [pc, #524]	; (80750 <main+0x224>)
   80542:	2201      	movs	r2, #1
   80544:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80546:	f3bf 8f5f 	dmb	sy
}
   8054a:	bf00      	nop
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8054c:	b662      	cpsie	i
}
   8054e:	bf00      	nop

  // Initialize the sleep manager
  sleepmgr_init();
   80550:	4b80      	ldr	r3, [pc, #512]	; (80754 <main+0x228>)
   80552:	4798      	blx	r3
#if !SAMD21 && !SAMR21
  sysclk_init();
   80554:	4b80      	ldr	r3, [pc, #512]	; (80758 <main+0x22c>)
   80556:	4798      	blx	r3
  board_init();
   80558:	4b80      	ldr	r3, [pc, #512]	; (8075c <main+0x230>)
   8055a:	4798      	blx	r3
#else
  system_init();
#endif

  //Convert serial number to ASCII for USB Serial number
  for(unsigned int i = 0; i < 4; i++){
   8055c:	2300      	movs	r3, #0
   8055e:	617b      	str	r3, [r7, #20]
   80560:	e010      	b.n	80584 <main+0x58>
    sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   80562:	697b      	ldr	r3, [r7, #20]
   80564:	00db      	lsls	r3, r3, #3
   80566:	4a7e      	ldr	r2, [pc, #504]	; (80760 <main+0x234>)
   80568:	1898      	adds	r0, r3, r2
   8056a:	697b      	ldr	r3, [r7, #20]
   8056c:	009b      	lsls	r3, r3, #2
   8056e:	3318      	adds	r3, #24
   80570:	443b      	add	r3, r7
   80572:	f853 3c14 	ldr.w	r3, [r3, #-20]
   80576:	461a      	mov	r2, r3
   80578:	497a      	ldr	r1, [pc, #488]	; (80764 <main+0x238>)
   8057a:	4b7b      	ldr	r3, [pc, #492]	; (80768 <main+0x23c>)
   8057c:	4798      	blx	r3
  for(unsigned int i = 0; i < 4; i++){
   8057e:	697b      	ldr	r3, [r7, #20]
   80580:	3301      	adds	r3, #1
   80582:	617b      	str	r3, [r7, #20]
   80584:	697b      	ldr	r3, [r7, #20]
   80586:	2b03      	cmp	r3, #3
   80588:	d9eb      	bls.n	80562 <main+0x36>
  }
  usb_serial_number[32] = 0;
   8058a:	4b75      	ldr	r3, [pc, #468]	; (80760 <main+0x234>)
   8058c:	2200      	movs	r2, #0
   8058e:	f883 2020 	strb.w	r2, [r3, #32]

  printf("ChipSHOUTER C521 Ballistic Gel Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   80592:	4a76      	ldr	r2, [pc, #472]	; (8076c <main+0x240>)
   80594:	4976      	ldr	r1, [pc, #472]	; (80770 <main+0x244>)
   80596:	4877      	ldr	r0, [pc, #476]	; (80774 <main+0x248>)
   80598:	4b77      	ldr	r3, [pc, #476]	; (80778 <main+0x24c>)
   8059a:	4798      	blx	r3
  printf("Serial number: %s\n", usb_serial_number);
   8059c:	4970      	ldr	r1, [pc, #448]	; (80760 <main+0x234>)
   8059e:	4877      	ldr	r0, [pc, #476]	; (8077c <main+0x250>)
   805a0:	4b75      	ldr	r3, [pc, #468]	; (80778 <main+0x24c>)
   805a2:	4798      	blx	r3


  /* Enable SMC */
  pmc_enable_periph_clk(ID_SMC);
   805a4:	2009      	movs	r0, #9
   805a6:	4b76      	ldr	r3, [pc, #472]	; (80780 <main+0x254>)
   805a8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   805aa:	4976      	ldr	r1, [pc, #472]	; (80784 <main+0x258>)
   805ac:	2029      	movs	r0, #41	; 0x29
   805ae:	4b76      	ldr	r3, [pc, #472]	; (80788 <main+0x25c>)
   805b0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   805b2:	4974      	ldr	r1, [pc, #464]	; (80784 <main+0x258>)
   805b4:	202a      	movs	r0, #42	; 0x2a
   805b6:	4b74      	ldr	r3, [pc, #464]	; (80788 <main+0x25c>)
   805b8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   805ba:	4972      	ldr	r1, [pc, #456]	; (80784 <main+0x258>)
   805bc:	202b      	movs	r0, #43	; 0x2b
   805be:	4b72      	ldr	r3, [pc, #456]	; (80788 <main+0x25c>)
   805c0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   805c2:	4970      	ldr	r1, [pc, #448]	; (80784 <main+0x258>)
   805c4:	202c      	movs	r0, #44	; 0x2c
   805c6:	4b70      	ldr	r3, [pc, #448]	; (80788 <main+0x25c>)
   805c8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   805ca:	496e      	ldr	r1, [pc, #440]	; (80784 <main+0x258>)
   805cc:	202d      	movs	r0, #45	; 0x2d
   805ce:	4b6e      	ldr	r3, [pc, #440]	; (80788 <main+0x25c>)
   805d0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   805d2:	496c      	ldr	r1, [pc, #432]	; (80784 <main+0x258>)
   805d4:	202e      	movs	r0, #46	; 0x2e
   805d6:	4b6c      	ldr	r3, [pc, #432]	; (80788 <main+0x25c>)
   805d8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   805da:	496a      	ldr	r1, [pc, #424]	; (80784 <main+0x258>)
   805dc:	202f      	movs	r0, #47	; 0x2f
   805de:	4b6a      	ldr	r3, [pc, #424]	; (80788 <main+0x25c>)
   805e0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   805e2:	4968      	ldr	r1, [pc, #416]	; (80784 <main+0x258>)
   805e4:	2030      	movs	r0, #48	; 0x30
   805e6:	4b68      	ldr	r3, [pc, #416]	; (80788 <main+0x25c>)
   805e8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D8, PIN_EBI_DATA_BUS_FLAG1);
   805ea:	4966      	ldr	r1, [pc, #408]	; (80784 <main+0x258>)
   805ec:	2039      	movs	r0, #57	; 0x39
   805ee:	4b66      	ldr	r3, [pc, #408]	; (80788 <main+0x25c>)
   805f0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D9, PIN_EBI_DATA_BUS_FLAG1);
   805f2:	4964      	ldr	r1, [pc, #400]	; (80784 <main+0x258>)
   805f4:	203a      	movs	r0, #58	; 0x3a
   805f6:	4b64      	ldr	r3, [pc, #400]	; (80788 <main+0x25c>)
   805f8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D10, PIN_EBI_DATA_BUS_FLAG1);
   805fa:	4962      	ldr	r1, [pc, #392]	; (80784 <main+0x258>)
   805fc:	203b      	movs	r0, #59	; 0x3b
   805fe:	4b62      	ldr	r3, [pc, #392]	; (80788 <main+0x25c>)
   80600:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D11, PIN_EBI_DATA_BUS_FLAG1);
   80602:	4960      	ldr	r1, [pc, #384]	; (80784 <main+0x258>)
   80604:	203c      	movs	r0, #60	; 0x3c
   80606:	4b60      	ldr	r3, [pc, #384]	; (80788 <main+0x25c>)
   80608:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D12, PIN_EBI_DATA_BUS_FLAG1);
   8060a:	495e      	ldr	r1, [pc, #376]	; (80784 <main+0x258>)
   8060c:	203d      	movs	r0, #61	; 0x3d
   8060e:	4b5e      	ldr	r3, [pc, #376]	; (80788 <main+0x25c>)
   80610:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D13, PIN_EBI_DATA_BUS_FLAG1);
   80612:	495c      	ldr	r1, [pc, #368]	; (80784 <main+0x258>)
   80614:	203e      	movs	r0, #62	; 0x3e
   80616:	4b5c      	ldr	r3, [pc, #368]	; (80788 <main+0x25c>)
   80618:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D14, PIN_EBI_DATA_BUS_FLAG1);
   8061a:	495a      	ldr	r1, [pc, #360]	; (80784 <main+0x258>)
   8061c:	203f      	movs	r0, #63	; 0x3f
   8061e:	4b5a      	ldr	r3, [pc, #360]	; (80788 <main+0x25c>)
   80620:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D15, PIN_EBI_DATA_BUS_FLAG2);
   80622:	495a      	ldr	r1, [pc, #360]	; (8078c <main+0x260>)
   80624:	2026      	movs	r0, #38	; 0x26
   80626:	4b58      	ldr	r3, [pc, #352]	; (80788 <main+0x25c>)
   80628:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8062a:	4956      	ldr	r1, [pc, #344]	; (80784 <main+0x258>)
   8062c:	2033      	movs	r0, #51	; 0x33
   8062e:	4b56      	ldr	r3, [pc, #344]	; (80788 <main+0x25c>)
   80630:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80632:	4954      	ldr	r1, [pc, #336]	; (80784 <main+0x258>)
   80634:	2037      	movs	r0, #55	; 0x37
   80636:	4b54      	ldr	r3, [pc, #336]	; (80788 <main+0x25c>)
   80638:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8063a:	4952      	ldr	r1, [pc, #328]	; (80784 <main+0x258>)
   8063c:	2034      	movs	r0, #52	; 0x34
   8063e:	4b52      	ldr	r3, [pc, #328]	; (80788 <main+0x25c>)
   80640:	4798      	blx	r3

  gpio_configure_pin(PIN_EBI_ADDR_BUS_NBS0, PIN_EBI_ADDR_BUS_FLAG1);
   80642:	4952      	ldr	r1, [pc, #328]	; (8078c <main+0x260>)
   80644:	2027      	movs	r0, #39	; 0x27
   80646:	4b50      	ldr	r3, [pc, #320]	; (80788 <main+0x25c>)
   80648:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_NBS1, PIN_EBI_ADDR_BUS_FLAG2);
   8064a:	494e      	ldr	r1, [pc, #312]	; (80784 <main+0x258>)
   8064c:	204f      	movs	r0, #79	; 0x4f
   8064e:	4b4e      	ldr	r3, [pc, #312]	; (80788 <main+0x25c>)
   80650:	4798      	blx	r3

  gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   80652:	494e      	ldr	r1, [pc, #312]	; (8078c <main+0x260>)
   80654:	2028      	movs	r0, #40	; 0x28
   80656:	4b4c      	ldr	r3, [pc, #304]	; (80788 <main+0x25c>)
   80658:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG2);
   8065a:	494a      	ldr	r1, [pc, #296]	; (80784 <main+0x258>)
   8065c:	2040      	movs	r0, #64	; 0x40
   8065e:	4b4a      	ldr	r3, [pc, #296]	; (80788 <main+0x25c>)
   80660:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG2);
   80662:	4948      	ldr	r1, [pc, #288]	; (80784 <main+0x258>)
   80664:	2041      	movs	r0, #65	; 0x41
   80666:	4b48      	ldr	r3, [pc, #288]	; (80788 <main+0x25c>)
   80668:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG2);
   8066a:	4946      	ldr	r1, [pc, #280]	; (80784 <main+0x258>)
   8066c:	2042      	movs	r0, #66	; 0x42
   8066e:	4b46      	ldr	r3, [pc, #280]	; (80788 <main+0x25c>)
   80670:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG2);
   80672:	4944      	ldr	r1, [pc, #272]	; (80784 <main+0x258>)
   80674:	2043      	movs	r0, #67	; 0x43
   80676:	4b44      	ldr	r3, [pc, #272]	; (80788 <main+0x25c>)
   80678:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG2);
   8067a:	4942      	ldr	r1, [pc, #264]	; (80784 <main+0x258>)
   8067c:	2044      	movs	r0, #68	; 0x44
   8067e:	4b42      	ldr	r3, [pc, #264]	; (80788 <main+0x25c>)
   80680:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG2);
   80682:	4940      	ldr	r1, [pc, #256]	; (80784 <main+0x258>)
   80684:	2045      	movs	r0, #69	; 0x45
   80686:	4b40      	ldr	r3, [pc, #256]	; (80788 <main+0x25c>)
   80688:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG2);
   8068a:	493e      	ldr	r1, [pc, #248]	; (80784 <main+0x258>)
   8068c:	2046      	movs	r0, #70	; 0x46
   8068e:	4b3e      	ldr	r3, [pc, #248]	; (80788 <main+0x25c>)
   80690:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG2);
   80692:	493c      	ldr	r1, [pc, #240]	; (80784 <main+0x258>)
   80694:	2047      	movs	r0, #71	; 0x47
   80696:	4b3c      	ldr	r3, [pc, #240]	; (80788 <main+0x25c>)
   80698:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG2);
   8069a:	493a      	ldr	r1, [pc, #232]	; (80784 <main+0x258>)
   8069c:	2048      	movs	r0, #72	; 0x48
   8069e:	4b3a      	ldr	r3, [pc, #232]	; (80788 <main+0x25c>)
   806a0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG2);
   806a2:	4938      	ldr	r1, [pc, #224]	; (80784 <main+0x258>)
   806a4:	2049      	movs	r0, #73	; 0x49
   806a6:	4b38      	ldr	r3, [pc, #224]	; (80788 <main+0x25c>)
   806a8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG2);
   806aa:	4936      	ldr	r1, [pc, #216]	; (80784 <main+0x258>)
   806ac:	204a      	movs	r0, #74	; 0x4a
   806ae:	4b36      	ldr	r3, [pc, #216]	; (80788 <main+0x25c>)
   806b0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG2);
   806b2:	4934      	ldr	r1, [pc, #208]	; (80784 <main+0x258>)
   806b4:	204b      	movs	r0, #75	; 0x4b
   806b6:	4b34      	ldr	r3, [pc, #208]	; (80788 <main+0x25c>)
   806b8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
   806ba:	4932      	ldr	r1, [pc, #200]	; (80784 <main+0x258>)
   806bc:	2054      	movs	r0, #84	; 0x54
   806be:	4b32      	ldr	r3, [pc, #200]	; (80788 <main+0x25c>)
   806c0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
   806c2:	4930      	ldr	r1, [pc, #192]	; (80784 <main+0x258>)
   806c4:	2055      	movs	r0, #85	; 0x55
   806c6:	4b30      	ldr	r3, [pc, #192]	; (80788 <main+0x25c>)
   806c8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
   806ca:	492e      	ldr	r1, [pc, #184]	; (80784 <main+0x258>)
   806cc:	2056      	movs	r0, #86	; 0x56
   806ce:	4b2e      	ldr	r3, [pc, #184]	; (80788 <main+0x25c>)
   806d0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
   806d2:	492c      	ldr	r1, [pc, #176]	; (80784 <main+0x258>)
   806d4:	2057      	movs	r0, #87	; 0x57
   806d6:	4b2c      	ldr	r3, [pc, #176]	; (80788 <main+0x25c>)
   806d8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
   806da:	492a      	ldr	r1, [pc, #168]	; (80784 <main+0x258>)
   806dc:	2058      	movs	r0, #88	; 0x58
   806de:	4b2a      	ldr	r3, [pc, #168]	; (80788 <main+0x25c>)
   806e0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
   806e2:	4928      	ldr	r1, [pc, #160]	; (80784 <main+0x258>)
   806e4:	2059      	movs	r0, #89	; 0x59
   806e6:	4b28      	ldr	r3, [pc, #160]	; (80788 <main+0x25c>)
   806e8:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
   806ea:	4926      	ldr	r1, [pc, #152]	; (80784 <main+0x258>)
   806ec:	205a      	movs	r0, #90	; 0x5a
   806ee:	4b26      	ldr	r3, [pc, #152]	; (80788 <main+0x25c>)
   806f0:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A21, PIN_EBI_ADDR_BUS_FLAG2);
   806f2:	4924      	ldr	r1, [pc, #144]	; (80784 <main+0x258>)
   806f4:	2035      	movs	r0, #53	; 0x35
   806f6:	4b24      	ldr	r3, [pc, #144]	; (80788 <main+0x25c>)
   806f8:	4798      	blx	r3

  /* Configure EBI I/O for PSRAM connection */
  printf("Setting up SRAM Communication\n");
   806fa:	4825      	ldr	r0, [pc, #148]	; (80790 <main+0x264>)
   806fc:	4b1e      	ldr	r3, [pc, #120]	; (80778 <main+0x24c>)
   806fe:	4798      	blx	r3
  | SMC_CYCLE_NRD_CYCLE(8));
  smc_set_mode(SMC, 0, SMC_MODE_READ_MODE_NRD_CTRL | SMC_MODE_WRITE_MODE_NWE_CTRL
  | SMC_MODE_DBW_BIT_16);
  */

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80700:	4a24      	ldr	r2, [pc, #144]	; (80794 <main+0x268>)
   80702:	2100      	movs	r1, #0
   80704:	4824      	ldr	r0, [pc, #144]	; (80798 <main+0x26c>)
   80706:	4b25      	ldr	r3, [pc, #148]	; (8079c <main+0x270>)
   80708:	4798      	blx	r3
    | SMC_SETUP_NCS_WR_SETUP(4)
    | SMC_SETUP_NRD_SETUP(4)
    | SMC_SETUP_NCS_RD_SETUP(4));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(12)
   8070a:	f04f 320c 	mov.w	r2, #202116108	; 0xc0c0c0c
   8070e:	2100      	movs	r1, #0
   80710:	4821      	ldr	r0, [pc, #132]	; (80798 <main+0x26c>)
   80712:	4b23      	ldr	r3, [pc, #140]	; (807a0 <main+0x274>)
   80714:	4798      	blx	r3
    | SMC_PULSE_NCS_WR_PULSE(12)
    | SMC_PULSE_NRD_PULSE(12)
    | SMC_PULSE_NCS_RD_PULSE(12));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(16)
   80716:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   8071a:	2100      	movs	r1, #0
   8071c:	481e      	ldr	r0, [pc, #120]	; (80798 <main+0x26c>)
   8071e:	4b21      	ldr	r3, [pc, #132]	; (807a4 <main+0x278>)
   80720:	4798      	blx	r3
    | SMC_CYCLE_NRD_CYCLE(16));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE_NRD_CTRL | SMC_MODE_WRITE_MODE_NWE_CTRL
   80722:	f241 0203 	movw	r2, #4099	; 0x1003
   80726:	2100      	movs	r1, #0
   80728:	481b      	ldr	r0, [pc, #108]	; (80798 <main+0x26c>)
   8072a:	4b1f      	ldr	r3, [pc, #124]	; (807a8 <main+0x27c>)
   8072c:	4798      	blx	r3
  /*
  osc_enable(OSC_MAINCK_XTAL);
      osc_wait_ready(OSC_MAINCK_XTAL);
      pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
  */
  ui_init();
   8072e:	4b1f      	ldr	r3, [pc, #124]	; (807ac <main+0x280>)
   80730:	4798      	blx	r3

  // Start USB stack to authorize VBus monitoring
  udc_start();
   80732:	4b1f      	ldr	r3, [pc, #124]	; (807b0 <main+0x284>)
   80734:	4798      	blx	r3

  printf("Event Loop Entered, waiting...\n");
   80736:	481f      	ldr	r0, [pc, #124]	; (807b4 <main+0x288>)
   80738:	4b0f      	ldr	r3, [pc, #60]	; (80778 <main+0x24c>)
   8073a:	4798      	blx	r3

  // The main loop manages only the power mode
  // because the USB management is done by interrupt
	naeusb_register_handlers();
   8073c:	4b1e      	ldr	r3, [pc, #120]	; (807b8 <main+0x28c>)
   8073e:	4798      	blx	r3
  ballistic_register_handlers();
   80740:	4b1e      	ldr	r3, [pc, #120]	; (807bc <main+0x290>)
   80742:	4798      	blx	r3
  while (true) {
   80744:	e7fe      	b.n	80744 <main+0x218>
   80746:	bf00      	nop
   80748:	000821cd 	.word	0x000821cd
   8074c:	000807c1 	.word	0x000807c1
   80750:	200003ec 	.word	0x200003ec
   80754:	000801b5 	.word	0x000801b5
   80758:	0008480d 	.word	0x0008480d
   8075c:	00085585 	.word	0x00085585
   80760:	20000270 	.word	0x20000270
   80764:	0008c880 	.word	0x0008c880
   80768:	00085cb9 	.word	0x00085cb9
   8076c:	0008c888 	.word	0x0008c888
   80770:	0008c894 	.word	0x0008c894
   80774:	0008c8a0 	.word	0x0008c8a0
   80778:	00085941 	.word	0x00085941
   8077c:	0008c8e0 	.word	0x0008c8e0
   80780:	00084bb5 	.word	0x00084bb5
   80784:	08000001 	.word	0x08000001
   80788:	000850d9 	.word	0x000850d9
   8078c:	10000001 	.word	0x10000001
   80790:	0008c8f4 	.word	0x0008c8f4
   80794:	04040400 	.word	0x04040400
   80798:	400e0000 	.word	0x400e0000
   8079c:	000824d5 	.word	0x000824d5
   807a0:	000824ff 	.word	0x000824ff
   807a4:	00082529 	.word	0x00082529
   807a8:	00082553 	.word	0x00082553
   807ac:	0008581d 	.word	0x0008581d
   807b0:	000815c5 	.word	0x000815c5
   807b4:	0008c914 	.word	0x0008c914
   807b8:	00081325 	.word	0x00081325
   807bc:	00080ded 	.word	0x00080ded

000807c0 <configure_console>:

/**
 *  Configure UART console.
 */
static void configure_console(void)
{
   807c0:	b580      	push	{r7, lr}
   807c2:	b084      	sub	sp, #16
   807c4:	af00      	add	r7, sp, #0
  const usart_serial_options_t uart_serial_options = {
   807c6:	463b      	mov	r3, r7
   807c8:	2200      	movs	r2, #0
   807ca:	601a      	str	r2, [r3, #0]
   807cc:	605a      	str	r2, [r3, #4]
   807ce:	609a      	str	r2, [r3, #8]
   807d0:	60da      	str	r2, [r3, #12]
   807d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   807d6:	603b      	str	r3, [r7, #0]
   807d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   807dc:	60bb      	str	r3, [r7, #8]
    .baudrate = CONF_UART_BAUDRATE,
    .paritytype = CONF_UART_PARITY
  };

  /* Configure console UART. */
  sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
   807de:	2008      	movs	r0, #8
   807e0:	4b05      	ldr	r3, [pc, #20]	; (807f8 <configure_console+0x38>)
   807e2:	4798      	blx	r3
  stdio_serial_init(CONF_UART, &uart_serial_options);
   807e4:	463b      	mov	r3, r7
   807e6:	4619      	mov	r1, r3
   807e8:	4804      	ldr	r0, [pc, #16]	; (807fc <configure_console+0x3c>)
   807ea:	4b05      	ldr	r3, [pc, #20]	; (80800 <configure_console+0x40>)
   807ec:	4798      	blx	r3
}
   807ee:	bf00      	nop
   807f0:	3710      	adds	r7, #16
   807f2:	46bd      	mov	sp, r7
   807f4:	bd80      	pop	{r7, pc}
   807f6:	bf00      	nop
   807f8:	00080199 	.word	0x00080199
   807fc:	400e0600 	.word	0x400e0600
   80800:	000804c5 	.word	0x000804c5

00080804 <ctrl_testmem>:
static unsigned int ctrlmemread_size;

volatile static uint8_t rng_done = 0;
uint8_t testmem_sent_back = 1;
void ctrl_testmem(void)
{
   80804:	b580      	push	{r7, lr}
   80806:	b086      	sub	sp, #24
   80808:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8080a:	4b42      	ldr	r3, [pc, #264]	; (80914 <ctrl_testmem+0x110>)
   8080c:	681b      	ldr	r3, [r3, #0]
   8080e:	60fb      	str	r3, [r7, #12]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80810:	4b40      	ldr	r3, [pc, #256]	; (80914 <ctrl_testmem+0x110>)
   80812:	685b      	ldr	r3, [r3, #4]
   80814:	60bb      	str	r3, [r7, #8]
     if (address > (sram_size - buflen) )
   80816:	4b40      	ldr	r3, [pc, #256]	; (80918 <ctrl_testmem+0x114>)
   80818:	681a      	ldr	r2, [r3, #0]
   8081a:	68fb      	ldr	r3, [r7, #12]
   8081c:	1ad3      	subs	r3, r2, r3
   8081e:	68ba      	ldr	r2, [r7, #8]
   80820:	429a      	cmp	r2, r3
   80822:	d871      	bhi.n	80908 <ctrl_testmem+0x104>
          return;
     int i =0;
   80824:	2300      	movs	r3, #0
   80826:	617b      	str	r3, [r7, #20]
     if (buflen >= sizeof(buffer))
   80828:	68fb      	ldr	r3, [r7, #12]
   8082a:	f242 3227 	movw	r2, #8999	; 0x2327
   8082e:	4293      	cmp	r3, r2
   80830:	d86c      	bhi.n	8090c <ctrl_testmem+0x108>
          return;
     LED_On(LED2_GPIO);
   80832:	204c      	movs	r0, #76	; 0x4c
   80834:	4b39      	ldr	r3, [pc, #228]	; (8091c <ctrl_testmem+0x118>)
   80836:	4798      	blx	r3
     if (!address) {
   80838:	68bb      	ldr	r3, [r7, #8]
   8083a:	2b00      	cmp	r3, #0
   8083c:	d116      	bne.n	8086c <ctrl_testmem+0x68>
          for (i = 0; i < 4; i++) {
   8083e:	2300      	movs	r3, #0
   80840:	617b      	str	r3, [r7, #20]
   80842:	e00a      	b.n	8085a <ctrl_testmem+0x56>
               state[i] = seed[i];
   80844:	4a36      	ldr	r2, [pc, #216]	; (80920 <ctrl_testmem+0x11c>)
   80846:	697b      	ldr	r3, [r7, #20]
   80848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8084c:	4935      	ldr	r1, [pc, #212]	; (80924 <ctrl_testmem+0x120>)
   8084e:	697b      	ldr	r3, [r7, #20]
   80850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          for (i = 0; i < 4; i++) {
   80854:	697b      	ldr	r3, [r7, #20]
   80856:	3301      	adds	r3, #1
   80858:	617b      	str	r3, [r7, #20]
   8085a:	697b      	ldr	r3, [r7, #20]
   8085c:	2b03      	cmp	r3, #3
   8085e:	ddf1      	ble.n	80844 <ctrl_testmem+0x40>
          }
          found_err[1] = 0;
   80860:	4b31      	ldr	r3, [pc, #196]	; (80928 <ctrl_testmem+0x124>)
   80862:	2200      	movs	r2, #0
   80864:	805a      	strh	r2, [r3, #2]
          done = 0;
   80866:	4b31      	ldr	r3, [pc, #196]	; (8092c <ctrl_testmem+0x128>)
   80868:	2200      	movs	r2, #0
   8086a:	701a      	strb	r2, [r3, #0]
     }

     found_err[0] = 0;
   8086c:	4b2e      	ldr	r3, [pc, #184]	; (80928 <ctrl_testmem+0x124>)
   8086e:	2200      	movs	r2, #0
   80870:	801a      	strh	r2, [r3, #0]
     found_err[1]++;
   80872:	4b2d      	ldr	r3, [pc, #180]	; (80928 <ctrl_testmem+0x124>)
   80874:	885b      	ldrh	r3, [r3, #2]
   80876:	3301      	adds	r3, #1
   80878:	b29a      	uxth	r2, r3
   8087a:	4b2b      	ldr	r3, [pc, #172]	; (80928 <ctrl_testmem+0x124>)
   8087c:	805a      	strh	r2, [r3, #2]
     for (i = 0; i < buflen / 4; i++) {
   8087e:	2300      	movs	r3, #0
   80880:	617b      	str	r3, [r7, #20]
   80882:	e035      	b.n	808f0 <ctrl_testmem+0xec>
          int j = 0;
   80884:	2300      	movs	r3, #0
   80886:	613b      	str	r3, [r7, #16]
          uint32_t rng_val = xorshift();
   80888:	4b29      	ldr	r3, [pc, #164]	; (80930 <ctrl_testmem+0x12c>)
   8088a:	4798      	blx	r3
   8088c:	6078      	str	r0, [r7, #4]
          for (j = 0; j < 4; j++) {
   8088e:	2300      	movs	r3, #0
   80890:	613b      	str	r3, [r7, #16]
   80892:	e027      	b.n	808e4 <ctrl_testmem+0xe0>
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   80894:	4b27      	ldr	r3, [pc, #156]	; (80934 <ctrl_testmem+0x130>)
   80896:	681a      	ldr	r2, [r3, #0]
   80898:	697b      	ldr	r3, [r7, #20]
   8089a:	0099      	lsls	r1, r3, #2
   8089c:	693b      	ldr	r3, [r7, #16]
   8089e:	440b      	add	r3, r1
   808a0:	4619      	mov	r1, r3
   808a2:	68bb      	ldr	r3, [r7, #8]
   808a4:	440b      	add	r3, r1
   808a6:	4413      	add	r3, r2
   808a8:	781b      	ldrb	r3, [r3, #0]
   808aa:	b2d9      	uxtb	r1, r3
   808ac:	693b      	ldr	r3, [r7, #16]
   808ae:	00db      	lsls	r3, r3, #3
   808b0:	687a      	ldr	r2, [r7, #4]
   808b2:	fa22 f303 	lsr.w	r3, r2, r3
   808b6:	b2da      	uxtb	r2, r3
   808b8:	697b      	ldr	r3, [r7, #20]
   808ba:	0098      	lsls	r0, r3, #2
   808bc:	693b      	ldr	r3, [r7, #16]
   808be:	4403      	add	r3, r0
   808c0:	404a      	eors	r2, r1
   808c2:	b2d1      	uxtb	r1, r2
   808c4:	4a1c      	ldr	r2, [pc, #112]	; (80938 <ctrl_testmem+0x134>)
   808c6:	54d1      	strb	r1, [r2, r3]
               if (buffer[i * 4 + j]) {
   808c8:	697b      	ldr	r3, [r7, #20]
   808ca:	009a      	lsls	r2, r3, #2
   808cc:	693b      	ldr	r3, [r7, #16]
   808ce:	4413      	add	r3, r2
   808d0:	4a19      	ldr	r2, [pc, #100]	; (80938 <ctrl_testmem+0x134>)
   808d2:	5cd3      	ldrb	r3, [r2, r3]
   808d4:	2b00      	cmp	r3, #0
   808d6:	d002      	beq.n	808de <ctrl_testmem+0xda>
                    found_err[0] = 1;
   808d8:	4b13      	ldr	r3, [pc, #76]	; (80928 <ctrl_testmem+0x124>)
   808da:	2201      	movs	r2, #1
   808dc:	801a      	strh	r2, [r3, #0]
          for (j = 0; j < 4; j++) {
   808de:	693b      	ldr	r3, [r7, #16]
   808e0:	3301      	adds	r3, #1
   808e2:	613b      	str	r3, [r7, #16]
   808e4:	693b      	ldr	r3, [r7, #16]
   808e6:	2b03      	cmp	r3, #3
   808e8:	ddd4      	ble.n	80894 <ctrl_testmem+0x90>
     for (i = 0; i < buflen / 4; i++) {
   808ea:	697b      	ldr	r3, [r7, #20]
   808ec:	3301      	adds	r3, #1
   808ee:	617b      	str	r3, [r7, #20]
   808f0:	68fb      	ldr	r3, [r7, #12]
   808f2:	089a      	lsrs	r2, r3, #2
   808f4:	697b      	ldr	r3, [r7, #20]
   808f6:	429a      	cmp	r2, r3
   808f8:	d8c4      	bhi.n	80884 <ctrl_testmem+0x80>
               }
          }
     }

     ctrlmemread_buf = (uint8_t *) found_err;
   808fa:	4b10      	ldr	r3, [pc, #64]	; (8093c <ctrl_testmem+0x138>)
   808fc:	4a0a      	ldr	r2, [pc, #40]	; (80928 <ctrl_testmem+0x124>)
   808fe:	601a      	str	r2, [r3, #0]
     ctrlmemread_size = 4;
   80900:	4b0f      	ldr	r3, [pc, #60]	; (80940 <ctrl_testmem+0x13c>)
   80902:	2204      	movs	r2, #4
   80904:	601a      	str	r2, [r3, #0]
   80906:	e002      	b.n	8090e <ctrl_testmem+0x10a>
          return;
   80908:	bf00      	nop
   8090a:	e000      	b.n	8090e <ctrl_testmem+0x10a>
          return;
   8090c:	bf00      	nop
}
   8090e:	3718      	adds	r7, #24
   80910:	46bd      	mov	sp, r7
   80912:	bd80      	pop	{r7, pc}
   80914:	20003238 	.word	0x20003238
   80918:	20000294 	.word	0x20000294
   8091c:	000843c1 	.word	0x000843c1
   80920:	20000e5c 	.word	0x20000e5c
   80924:	20000e4c 	.word	0x20000e4c
   80928:	2000319c 	.word	0x2000319c
   8092c:	20000e71 	.word	0x20000e71
   80930:	00080a21 	.word	0x00080a21
   80934:	200003d4 	.word	0x200003d4
   80938:	20000e74 	.word	0x20000e74
   8093c:	200031a0 	.word	0x200031a0
   80940:	200031a4 	.word	0x200031a4

00080944 <ctrl_readmem_bulk>:

void ctrl_readmem_bulk(void)
{
   80944:	b580      	push	{r7, lr}
   80946:	b082      	sub	sp, #8
   80948:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8094a:	4b0c      	ldr	r3, [pc, #48]	; (8097c <ctrl_readmem_bulk+0x38>)
   8094c:	681b      	ldr	r3, [r3, #0]
   8094e:	607b      	str	r3, [r7, #4]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80950:	4b0a      	ldr	r3, [pc, #40]	; (8097c <ctrl_readmem_bulk+0x38>)
   80952:	685b      	ldr	r3, [r3, #4]
   80954:	603b      	str	r3, [r7, #0]

     FPGA_setlock(fpga_blockin);
   80956:	2002      	movs	r0, #2
   80958:	4b09      	ldr	r3, [pc, #36]	; (80980 <ctrl_readmem_bulk+0x3c>)
   8095a:	4798      	blx	r3

     LED_On(LED2_GPIO);
   8095c:	204c      	movs	r0, #76	; 0x4c
   8095e:	4b09      	ldr	r3, [pc, #36]	; (80984 <ctrl_readmem_bulk+0x40>)
   80960:	4798      	blx	r3

     /* Do memory read */
     udi_vendor_bulk_in_run(
   80962:	683b      	ldr	r3, [r7, #0]
   80964:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   80968:	4a07      	ldr	r2, [pc, #28]	; (80988 <ctrl_readmem_bulk+0x44>)
   8096a:	6879      	ldr	r1, [r7, #4]
   8096c:	4618      	mov	r0, r3
   8096e:	4b07      	ldr	r3, [pc, #28]	; (8098c <ctrl_readmem_bulk+0x48>)
   80970:	4798      	blx	r3
          (uint8_t *) PSRAM_BASE_ADDRESS + address,
          buflen,
          main_vendor_bulk_in_received
          );
}
   80972:	bf00      	nop
   80974:	3708      	adds	r7, #8
   80976:	46bd      	mov	sp, r7
   80978:	bd80      	pop	{r7, pc}
   8097a:	bf00      	nop
   8097c:	20003238 	.word	0x20003238
   80980:	0008215d 	.word	0x0008215d
   80984:	000843c1 	.word	0x000843c1
   80988:	00080d19 	.word	0x00080d19
   8098c:	00084d3d 	.word	0x00084d3d

00080990 <ctrl_readmem_rng_bulk>:

void ctrl_readmem_rng_bulk(void){
   80990:	b580      	push	{r7, lr}
   80992:	b082      	sub	sp, #8
   80994:	af00      	add	r7, sp, #0
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80996:	4b0a      	ldr	r3, [pc, #40]	; (809c0 <ctrl_readmem_rng_bulk+0x30>)
   80998:	681b      	ldr	r3, [r3, #0]
   8099a:	607b      	str	r3, [r7, #4]
	//uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
		
	//Oops? Can't do that with seeded version
	if (buflen >= sizeof(buffer))
   8099c:	687b      	ldr	r3, [r7, #4]
   8099e:	f242 3227 	movw	r2, #8999	; 0x2327
   809a2:	4293      	cmp	r3, r2
   809a4:	d808      	bhi.n	809b8 <ctrl_readmem_rng_bulk+0x28>
	return;

	LED_On(LED2_GPIO);
   809a6:	204c      	movs	r0, #76	; 0x4c
   809a8:	4b06      	ldr	r3, [pc, #24]	; (809c4 <ctrl_readmem_rng_bulk+0x34>)
   809aa:	4798      	blx	r3

	udi_vendor_bulk_in_run(
   809ac:	4a06      	ldr	r2, [pc, #24]	; (809c8 <ctrl_readmem_rng_bulk+0x38>)
   809ae:	6879      	ldr	r1, [r7, #4]
   809b0:	4806      	ldr	r0, [pc, #24]	; (809cc <ctrl_readmem_rng_bulk+0x3c>)
   809b2:	4b07      	ldr	r3, [pc, #28]	; (809d0 <ctrl_readmem_rng_bulk+0x40>)
   809b4:	4798      	blx	r3
		buffer,
		buflen,
		main_vendor_bulk_in_received
	);
	return;
   809b6:	e000      	b.n	809ba <ctrl_readmem_rng_bulk+0x2a>
	return;
   809b8:	bf00      	nop
}
   809ba:	3708      	adds	r7, #8
   809bc:	46bd      	mov	sp, r7
   809be:	bd80      	pop	{r7, pc}
   809c0:	20003238 	.word	0x20003238
   809c4:	000843c1 	.word	0x000843c1
   809c8:	00080d19 	.word	0x00080d19
   809cc:	20000e74 	.word	0x20000e74
   809d0:	00084d3d 	.word	0x00084d3d

000809d4 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   809d4:	b580      	push	{r7, lr}
   809d6:	b082      	sub	sp, #8
   809d8:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   809da:	4b0c      	ldr	r3, [pc, #48]	; (80a0c <ctrl_readmem_ctrl+0x38>)
   809dc:	681b      	ldr	r3, [r3, #0]
   809de:	607b      	str	r3, [r7, #4]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   809e0:	4b0a      	ldr	r3, [pc, #40]	; (80a0c <ctrl_readmem_ctrl+0x38>)
   809e2:	685b      	ldr	r3, [r3, #4]
   809e4:	603b      	str	r3, [r7, #0]

     FPGA_setlock(fpga_ctrlmem);
   809e6:	2005      	movs	r0, #5
   809e8:	4b09      	ldr	r3, [pc, #36]	; (80a10 <ctrl_readmem_ctrl+0x3c>)
   809ea:	4798      	blx	r3

     /* Do memory read */
     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   809ec:	683b      	ldr	r3, [r7, #0]
   809ee:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   809f2:	4a08      	ldr	r2, [pc, #32]	; (80a14 <ctrl_readmem_ctrl+0x40>)
   809f4:	6013      	str	r3, [r2, #0]

     /* Set size to read */
     ctrlmemread_size = buflen;
   809f6:	4a08      	ldr	r2, [pc, #32]	; (80a18 <ctrl_readmem_ctrl+0x44>)
   809f8:	687b      	ldr	r3, [r7, #4]
   809fa:	6013      	str	r3, [r2, #0]

     /* Start Transaction */
     LED_On(LED2_GPIO);
   809fc:	204c      	movs	r0, #76	; 0x4c
   809fe:	4b07      	ldr	r3, [pc, #28]	; (80a1c <ctrl_readmem_ctrl+0x48>)
   80a00:	4798      	blx	r3
}
   80a02:	bf00      	nop
   80a04:	3708      	adds	r7, #8
   80a06:	46bd      	mov	sp, r7
   80a08:	bd80      	pop	{r7, pc}
   80a0a:	bf00      	nop
   80a0c:	20003238 	.word	0x20003238
   80a10:	0008215d 	.word	0x0008215d
   80a14:	200031a0 	.word	0x200031a0
   80a18:	200031a4 	.word	0x200031a4
   80a1c:	000843c1 	.word	0x000843c1

00080a20 <xorshift128>:

uint32_t xorshift128(void)
{
   80a20:	b480      	push	{r7}
   80a22:	b083      	sub	sp, #12
   80a24:	af00      	add	r7, sp, #0
     uint32_t s, t = state[3];
   80a26:	4b17      	ldr	r3, [pc, #92]	; (80a84 <xorshift128+0x64>)
   80a28:	68db      	ldr	r3, [r3, #12]
   80a2a:	607b      	str	r3, [r7, #4]
     t ^= t << 11;
   80a2c:	687b      	ldr	r3, [r7, #4]
   80a2e:	02db      	lsls	r3, r3, #11
   80a30:	687a      	ldr	r2, [r7, #4]
   80a32:	4053      	eors	r3, r2
   80a34:	607b      	str	r3, [r7, #4]
     t ^= t >> 8;
   80a36:	687b      	ldr	r3, [r7, #4]
   80a38:	0a1b      	lsrs	r3, r3, #8
   80a3a:	687a      	ldr	r2, [r7, #4]
   80a3c:	4053      	eors	r3, r2
   80a3e:	607b      	str	r3, [r7, #4]
     state[3] = state[2];
   80a40:	4b10      	ldr	r3, [pc, #64]	; (80a84 <xorshift128+0x64>)
   80a42:	689b      	ldr	r3, [r3, #8]
   80a44:	4a0f      	ldr	r2, [pc, #60]	; (80a84 <xorshift128+0x64>)
   80a46:	60d3      	str	r3, [r2, #12]
     state[2] = state[1];
   80a48:	4b0e      	ldr	r3, [pc, #56]	; (80a84 <xorshift128+0x64>)
   80a4a:	685b      	ldr	r3, [r3, #4]
   80a4c:	4a0d      	ldr	r2, [pc, #52]	; (80a84 <xorshift128+0x64>)
   80a4e:	6093      	str	r3, [r2, #8]
     s = state[0];
   80a50:	4b0c      	ldr	r3, [pc, #48]	; (80a84 <xorshift128+0x64>)
   80a52:	681b      	ldr	r3, [r3, #0]
   80a54:	603b      	str	r3, [r7, #0]
     state[1] = state[0];
   80a56:	4b0b      	ldr	r3, [pc, #44]	; (80a84 <xorshift128+0x64>)
   80a58:	681b      	ldr	r3, [r3, #0]
   80a5a:	4a0a      	ldr	r2, [pc, #40]	; (80a84 <xorshift128+0x64>)
   80a5c:	6053      	str	r3, [r2, #4]

     t ^= s;
   80a5e:	687a      	ldr	r2, [r7, #4]
   80a60:	683b      	ldr	r3, [r7, #0]
   80a62:	4053      	eors	r3, r2
   80a64:	607b      	str	r3, [r7, #4]
     t ^= s >> 19;
   80a66:	683b      	ldr	r3, [r7, #0]
   80a68:	0cdb      	lsrs	r3, r3, #19
   80a6a:	687a      	ldr	r2, [r7, #4]
   80a6c:	4053      	eors	r3, r2
   80a6e:	607b      	str	r3, [r7, #4]

     state[0] = t;
   80a70:	4a04      	ldr	r2, [pc, #16]	; (80a84 <xorshift128+0x64>)
   80a72:	687b      	ldr	r3, [r7, #4]
   80a74:	6013      	str	r3, [r2, #0]
     return t;
   80a76:	687b      	ldr	r3, [r7, #4]
}
   80a78:	4618      	mov	r0, r3
   80a7a:	370c      	adds	r7, #12
   80a7c:	46bd      	mov	sp, r7
   80a7e:	bc80      	pop	{r7}
   80a80:	4770      	bx	lr
   80a82:	bf00      	nop
   80a84:	20000e4c 	.word	0x20000e4c

00080a88 <ctrl_writemem_rng>:
     ctrlmemread_buf = (uint8_t *)seed;
     ctrlmemread_size = 16;
}

void ctrl_writemem_rng(void)
{
   80a88:	b580      	push	{r7, lr}
   80a8a:	b086      	sub	sp, #24
   80a8c:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80a8e:	4b2e      	ldr	r3, [pc, #184]	; (80b48 <ctrl_writemem_rng+0xc0>)
   80a90:	681b      	ldr	r3, [r3, #0]
   80a92:	60fb      	str	r3, [r7, #12]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80a94:	4b2c      	ldr	r3, [pc, #176]	; (80b48 <ctrl_writemem_rng+0xc0>)
   80a96:	685b      	ldr	r3, [r3, #4]
   80a98:	60bb      	str	r3, [r7, #8]
     int i = 0;
   80a9a:	2300      	movs	r3, #0
   80a9c:	617b      	str	r3, [r7, #20]
     LED_On(LED1_GPIO);
   80a9e:	2010      	movs	r0, #16
   80aa0:	4b2a      	ldr	r3, [pc, #168]	; (80b4c <ctrl_writemem_rng+0xc4>)
   80aa2:	4798      	blx	r3
     if (!address) {
   80aa4:	68bb      	ldr	r3, [r7, #8]
   80aa6:	2b00      	cmp	r3, #0
   80aa8:	d11a      	bne.n	80ae0 <ctrl_writemem_rng+0x58>
          for (i = 0; i < 4; i++) {
   80aaa:	2300      	movs	r3, #0
   80aac:	617b      	str	r3, [r7, #20]
   80aae:	e014      	b.n	80ada <ctrl_writemem_rng+0x52>
               state[i] = CTRLBUFFER_WORDPTR[i + 2];
   80ab0:	697b      	ldr	r3, [r7, #20]
   80ab2:	3302      	adds	r3, #2
   80ab4:	009b      	lsls	r3, r3, #2
   80ab6:	4a24      	ldr	r2, [pc, #144]	; (80b48 <ctrl_writemem_rng+0xc0>)
   80ab8:	4413      	add	r3, r2
   80aba:	681a      	ldr	r2, [r3, #0]
   80abc:	4924      	ldr	r1, [pc, #144]	; (80b50 <ctrl_writemem_rng+0xc8>)
   80abe:	697b      	ldr	r3, [r7, #20]
   80ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
               seed[i] = state[i];
   80ac4:	4a22      	ldr	r2, [pc, #136]	; (80b50 <ctrl_writemem_rng+0xc8>)
   80ac6:	697b      	ldr	r3, [r7, #20]
   80ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   80acc:	4921      	ldr	r1, [pc, #132]	; (80b54 <ctrl_writemem_rng+0xcc>)
   80ace:	697b      	ldr	r3, [r7, #20]
   80ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          for (i = 0; i < 4; i++) {
   80ad4:	697b      	ldr	r3, [r7, #20]
   80ad6:	3301      	adds	r3, #1
   80ad8:	617b      	str	r3, [r7, #20]
   80ada:	697b      	ldr	r3, [r7, #20]
   80adc:	2b03      	cmp	r3, #3
   80ade:	dde7      	ble.n	80ab0 <ctrl_writemem_rng+0x28>
          }
     }
     uint32_t num_rng = buflen / 4;
   80ae0:	68fb      	ldr	r3, [r7, #12]
   80ae2:	089b      	lsrs	r3, r3, #2
   80ae4:	607b      	str	r3, [r7, #4]
     for (i = 0; i < num_rng; i++) {
   80ae6:	2300      	movs	r3, #0
   80ae8:	617b      	str	r3, [r7, #20]
   80aea:	e021      	b.n	80b30 <ctrl_writemem_rng+0xa8>
          uint32_t rng_val = xorshift();
   80aec:	4b1a      	ldr	r3, [pc, #104]	; (80b58 <ctrl_writemem_rng+0xd0>)
   80aee:	4798      	blx	r3
   80af0:	6038      	str	r0, [r7, #0]
          int j = 0;
   80af2:	2300      	movs	r3, #0
   80af4:	613b      	str	r3, [r7, #16]
          for (j = 0; j < 4; j++) {
   80af6:	2300      	movs	r3, #0
   80af8:	613b      	str	r3, [r7, #16]
   80afa:	e013      	b.n	80b24 <ctrl_writemem_rng+0x9c>
               xram[i * 4 + j + address] = (rng_val >> (8 * j)) & 0xFF;
   80afc:	693b      	ldr	r3, [r7, #16]
   80afe:	00db      	lsls	r3, r3, #3
   80b00:	683a      	ldr	r2, [r7, #0]
   80b02:	fa22 f003 	lsr.w	r0, r2, r3
   80b06:	4b15      	ldr	r3, [pc, #84]	; (80b5c <ctrl_writemem_rng+0xd4>)
   80b08:	681a      	ldr	r2, [r3, #0]
   80b0a:	697b      	ldr	r3, [r7, #20]
   80b0c:	0099      	lsls	r1, r3, #2
   80b0e:	693b      	ldr	r3, [r7, #16]
   80b10:	440b      	add	r3, r1
   80b12:	4619      	mov	r1, r3
   80b14:	68bb      	ldr	r3, [r7, #8]
   80b16:	440b      	add	r3, r1
   80b18:	4413      	add	r3, r2
   80b1a:	b2c2      	uxtb	r2, r0
   80b1c:	701a      	strb	r2, [r3, #0]
          for (j = 0; j < 4; j++) {
   80b1e:	693b      	ldr	r3, [r7, #16]
   80b20:	3301      	adds	r3, #1
   80b22:	613b      	str	r3, [r7, #16]
   80b24:	693b      	ldr	r3, [r7, #16]
   80b26:	2b03      	cmp	r3, #3
   80b28:	dde8      	ble.n	80afc <ctrl_writemem_rng+0x74>
     for (i = 0; i < num_rng; i++) {
   80b2a:	697b      	ldr	r3, [r7, #20]
   80b2c:	3301      	adds	r3, #1
   80b2e:	617b      	str	r3, [r7, #20]
   80b30:	697b      	ldr	r3, [r7, #20]
   80b32:	687a      	ldr	r2, [r7, #4]
   80b34:	429a      	cmp	r2, r3
   80b36:	d8d9      	bhi.n	80aec <ctrl_writemem_rng+0x64>
          }
     }
     seeded = 1;
   80b38:	4b09      	ldr	r3, [pc, #36]	; (80b60 <ctrl_writemem_rng+0xd8>)
   80b3a:	2201      	movs	r2, #1
   80b3c:	601a      	str	r2, [r3, #0]
}
   80b3e:	bf00      	nop
   80b40:	3718      	adds	r7, #24
   80b42:	46bd      	mov	sp, r7
   80b44:	bd80      	pop	{r7, pc}
   80b46:	bf00      	nop
   80b48:	20003238 	.word	0x20003238
   80b4c:	000843c1 	.word	0x000843c1
   80b50:	20000e4c 	.word	0x20000e4c
   80b54:	20000e5c 	.word	0x20000e5c
   80b58:	00080a21 	.word	0x00080a21
   80b5c:	200003d4 	.word	0x200003d4
   80b60:	20000e6c 	.word	0x20000e6c

00080b64 <ctrl_writemem_ctrl>:

void ctrl_writemem_ctrl(void){
   80b64:	b580      	push	{r7, lr}
   80b66:	b084      	sub	sp, #16
   80b68:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80b6a:	4b15      	ldr	r3, [pc, #84]	; (80bc0 <ctrl_writemem_ctrl+0x5c>)
   80b6c:	681b      	ldr	r3, [r3, #0]
   80b6e:	60bb      	str	r3, [r7, #8]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80b70:	4b13      	ldr	r3, [pc, #76]	; (80bc0 <ctrl_writemem_ctrl+0x5c>)
   80b72:	685b      	ldr	r3, [r3, #4]
   80b74:	607b      	str	r3, [r7, #4]

     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80b76:	4b13      	ldr	r3, [pc, #76]	; (80bc4 <ctrl_writemem_ctrl+0x60>)
   80b78:	603b      	str	r3, [r7, #0]

     //printf("Writing to %x, %d\n", address, buflen);

     FPGA_setlock(fpga_generic);
   80b7a:	2001      	movs	r0, #1
   80b7c:	4b12      	ldr	r3, [pc, #72]	; (80bc8 <ctrl_writemem_ctrl+0x64>)
   80b7e:	4798      	blx	r3

     /* Start Transaction */
     LED_On(LED1_GPIO);
   80b80:	2010      	movs	r0, #16
   80b82:	4b12      	ldr	r3, [pc, #72]	; (80bcc <ctrl_writemem_ctrl+0x68>)
   80b84:	4798      	blx	r3

     /* Do memory write */
     for(unsigned int i = 0; i < buflen; i++){
   80b86:	2300      	movs	r3, #0
   80b88:	60fb      	str	r3, [r7, #12]
   80b8a:	e00d      	b.n	80ba8 <ctrl_writemem_ctrl+0x44>
          xram[i+address] = ctrlbuf_payload[i];
   80b8c:	683a      	ldr	r2, [r7, #0]
   80b8e:	68fb      	ldr	r3, [r7, #12]
   80b90:	441a      	add	r2, r3
   80b92:	4b0f      	ldr	r3, [pc, #60]	; (80bd0 <ctrl_writemem_ctrl+0x6c>)
   80b94:	6819      	ldr	r1, [r3, #0]
   80b96:	68f8      	ldr	r0, [r7, #12]
   80b98:	687b      	ldr	r3, [r7, #4]
   80b9a:	4403      	add	r3, r0
   80b9c:	440b      	add	r3, r1
   80b9e:	7812      	ldrb	r2, [r2, #0]
   80ba0:	701a      	strb	r2, [r3, #0]
     for(unsigned int i = 0; i < buflen; i++){
   80ba2:	68fb      	ldr	r3, [r7, #12]
   80ba4:	3301      	adds	r3, #1
   80ba6:	60fb      	str	r3, [r7, #12]
   80ba8:	68fa      	ldr	r2, [r7, #12]
   80baa:	68bb      	ldr	r3, [r7, #8]
   80bac:	429a      	cmp	r2, r3
   80bae:	d3ed      	bcc.n	80b8c <ctrl_writemem_ctrl+0x28>
     }

     FPGA_setlock(fpga_unlocked);
   80bb0:	2000      	movs	r0, #0
   80bb2:	4b05      	ldr	r3, [pc, #20]	; (80bc8 <ctrl_writemem_ctrl+0x64>)
   80bb4:	4798      	blx	r3
}
   80bb6:	bf00      	nop
   80bb8:	3710      	adds	r7, #16
   80bba:	46bd      	mov	sp, r7
   80bbc:	bd80      	pop	{r7, pc}
   80bbe:	bf00      	nop
   80bc0:	20003238 	.word	0x20003238
   80bc4:	20003240 	.word	0x20003240
   80bc8:	0008215d 	.word	0x0008215d
   80bcc:	000843c1 	.word	0x000843c1
   80bd0:	200003d4 	.word	0x200003d4

00080bd4 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80bd4:	b580      	push	{r7, lr}
   80bd6:	b082      	sub	sp, #8
   80bd8:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80bda:	4b0b      	ldr	r3, [pc, #44]	; (80c08 <ctrl_writemem_bulk+0x34>)
   80bdc:	681b      	ldr	r3, [r3, #0]
   80bde:	607b      	str	r3, [r7, #4]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80be0:	4b09      	ldr	r3, [pc, #36]	; (80c08 <ctrl_writemem_bulk+0x34>)
   80be2:	685b      	ldr	r3, [r3, #4]
   80be4:	603b      	str	r3, [r7, #0]

     FPGA_setlock(fpga_blockout);
   80be6:	2004      	movs	r0, #4
   80be8:	4b08      	ldr	r3, [pc, #32]	; (80c0c <ctrl_writemem_bulk+0x38>)
   80bea:	4798      	blx	r3

     /* Set address */
     bulkread_address = address;
   80bec:	4a08      	ldr	r2, [pc, #32]	; (80c10 <ctrl_writemem_bulk+0x3c>)
   80bee:	683b      	ldr	r3, [r7, #0]
   80bf0:	6013      	str	r3, [r2, #0]
     bulkread_len = buflen;
   80bf2:	4a08      	ldr	r2, [pc, #32]	; (80c14 <ctrl_writemem_bulk+0x40>)
   80bf4:	687b      	ldr	r3, [r7, #4]
   80bf6:	6013      	str	r3, [r2, #0]
     //FPGA_setaddr(address);

     /* Transaction done in generic callback */
     LED_On(LED1_GPIO);
   80bf8:	2010      	movs	r0, #16
   80bfa:	4b07      	ldr	r3, [pc, #28]	; (80c18 <ctrl_writemem_bulk+0x44>)
   80bfc:	4798      	blx	r3
}
   80bfe:	bf00      	nop
   80c00:	3708      	adds	r7, #8
   80c02:	46bd      	mov	sp, r7
   80c04:	bd80      	pop	{r7, pc}
   80c06:	bf00      	nop
   80c08:	20003238 	.word	0x20003238
   80c0c:	0008215d 	.word	0x0008215d
   80c10:	200031a8 	.word	0x200031a8
   80c14:	200031ac 	.word	0x200031ac
   80c18:	000843c1 	.word	0x000843c1

00080c1c <ballistic_setup_out_received>:

bool ballistic_setup_out_received(void)
{
   80c1c:	b580      	push	{r7, lr}
   80c1e:	af00      	add	r7, sp, #0
     switch (udd_g_ctrlreq.req.bRequest) {
   80c20:	4b1f      	ldr	r3, [pc, #124]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c22:	785b      	ldrb	r3, [r3, #1]
   80c24:	3b10      	subs	r3, #16
   80c26:	2b08      	cmp	r3, #8
   80c28:	d836      	bhi.n	80c98 <ballistic_setup_out_received+0x7c>
   80c2a:	a201      	add	r2, pc, #4	; (adr r2, 80c30 <ballistic_setup_out_received+0x14>)
   80c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c30:	00080c55 	.word	0x00080c55
   80c34:	00080c69 	.word	0x00080c69
   80c38:	00080c5f 	.word	0x00080c5f
   80c3c:	00080c73 	.word	0x00080c73
   80c40:	00080c87 	.word	0x00080c87
   80c44:	00080c8f 	.word	0x00080c8f
   80c48:	00080c99 	.word	0x00080c99
   80c4c:	00080c99 	.word	0x00080c99
   80c50:	00080c7d 	.word	0x00080c7d
     case REQ_MEMREAD_BULK:
          udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80c54:	4b12      	ldr	r3, [pc, #72]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c56:	4a13      	ldr	r2, [pc, #76]	; (80ca4 <ballistic_setup_out_received+0x88>)
   80c58:	611a      	str	r2, [r3, #16]
          return true;
   80c5a:	2301      	movs	r3, #1
   80c5c:	e01d      	b.n	80c9a <ballistic_setup_out_received+0x7e>
     case REQ_MEMREAD_CTRL:
          udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   80c5e:	4b10      	ldr	r3, [pc, #64]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c60:	4a11      	ldr	r2, [pc, #68]	; (80ca8 <ballistic_setup_out_received+0x8c>)
   80c62:	611a      	str	r2, [r3, #16]
          return true;
   80c64:	2301      	movs	r3, #1
   80c66:	e018      	b.n	80c9a <ballistic_setup_out_received+0x7e>

          /* Memory Write */
     case REQ_MEMWRITE_BULK:
          udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80c68:	4b0d      	ldr	r3, [pc, #52]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c6a:	4a10      	ldr	r2, [pc, #64]	; (80cac <ballistic_setup_out_received+0x90>)
   80c6c:	611a      	str	r2, [r3, #16]
          return true;
   80c6e:	2301      	movs	r3, #1
   80c70:	e013      	b.n	80c9a <ballistic_setup_out_received+0x7e>

     case REQ_MEMWRITE_CTRL:
          udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   80c72:	4b0b      	ldr	r3, [pc, #44]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c74:	4a0e      	ldr	r2, [pc, #56]	; (80cb0 <ballistic_setup_out_received+0x94>)
   80c76:	611a      	str	r2, [r3, #16]
          return true;
   80c78:	2301      	movs	r3, #1
   80c7a:	e00e      	b.n	80c9a <ballistic_setup_out_received+0x7e>

          /* Memory Read for special seeded version */
     case REQ_MEMREAD_RNG_BULK:
          udd_g_ctrlreq.callback = ctrl_readmem_rng_bulk;
   80c7c:	4b08      	ldr	r3, [pc, #32]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c7e:	4a0d      	ldr	r2, [pc, #52]	; (80cb4 <ballistic_setup_out_received+0x98>)
   80c80:	611a      	str	r2, [r3, #16]
          return true;
   80c82:	2301      	movs	r3, #1
   80c84:	e009      	b.n	80c9a <ballistic_setup_out_received+0x7e>

          /* Misc hardware setup */
     case REQ_MEMWRITE_RNG:
          /* udd_g_ctrlreq.callback = ctrl_writemem_rng; */
          ctrl_writemem_rng();
   80c86:	4b0c      	ldr	r3, [pc, #48]	; (80cb8 <ballistic_setup_out_received+0x9c>)
   80c88:	4798      	blx	r3
          /* while (!rng_done) */
          return true;
   80c8a:	2301      	movs	r3, #1
   80c8c:	e005      	b.n	80c9a <ballistic_setup_out_received+0x7e>
     case REQ_CHECKMEM_RNG:
          udd_g_ctrlreq.callback = ctrl_testmem;
   80c8e:	4b04      	ldr	r3, [pc, #16]	; (80ca0 <ballistic_setup_out_received+0x84>)
   80c90:	4a0a      	ldr	r2, [pc, #40]	; (80cbc <ballistic_setup_out_received+0xa0>)
   80c92:	611a      	str	r2, [r3, #16]
          return true;
   80c94:	2301      	movs	r3, #1
   80c96:	e000      	b.n	80c9a <ballistic_setup_out_received+0x7e>

     default:
          return false;
   80c98:	2300      	movs	r3, #0
     }
     return false;
}
   80c9a:	4618      	mov	r0, r3
   80c9c:	bd80      	pop	{r7, pc}
   80c9e:	bf00      	nop
   80ca0:	20003740 	.word	0x20003740
   80ca4:	00080945 	.word	0x00080945
   80ca8:	000809d5 	.word	0x000809d5
   80cac:	00080bd5 	.word	0x00080bd5
   80cb0:	00080b65 	.word	0x00080b65
   80cb4:	00080991 	.word	0x00080991
   80cb8:	00080a89 	.word	0x00080a89
   80cbc:	00080805 	.word	0x00080805

00080cc0 <ballistic_setup_in_received>:

bool ballistic_setup_in_received(void)
{
   80cc0:	b580      	push	{r7, lr}
   80cc2:	af00      	add	r7, sp, #0
     switch (udd_g_ctrlreq.req.bRequest) {
   80cc4:	4b0f      	ldr	r3, [pc, #60]	; (80d04 <ballistic_setup_in_received+0x44>)
   80cc6:	785b      	ldrb	r3, [r3, #1]
   80cc8:	2b12      	cmp	r3, #18
   80cca:	d001      	beq.n	80cd0 <ballistic_setup_in_received+0x10>
   80ccc:	2b15      	cmp	r3, #21
   80cce:	d115      	bne.n	80cfc <ballistic_setup_in_received+0x3c>
          case REQ_CHECKMEM_RNG:
          case REQ_MEMREAD_CTRL:
               udd_g_ctrlreq.payload = ctrlmemread_buf;
   80cd0:	4b0d      	ldr	r3, [pc, #52]	; (80d08 <ballistic_setup_in_received+0x48>)
   80cd2:	681b      	ldr	r3, [r3, #0]
   80cd4:	4a0b      	ldr	r2, [pc, #44]	; (80d04 <ballistic_setup_in_received+0x44>)
   80cd6:	6093      	str	r3, [r2, #8]
               udd_g_ctrlreq.payload_size = ctrlmemread_size;
   80cd8:	4b0c      	ldr	r3, [pc, #48]	; (80d0c <ballistic_setup_in_received+0x4c>)
   80cda:	681b      	ldr	r3, [r3, #0]
   80cdc:	b29a      	uxth	r2, r3
   80cde:	4b09      	ldr	r3, [pc, #36]	; (80d04 <ballistic_setup_in_received+0x44>)
   80ce0:	819a      	strh	r2, [r3, #12]
               ctrlmemread_size = 0;
   80ce2:	4b0a      	ldr	r3, [pc, #40]	; (80d0c <ballistic_setup_in_received+0x4c>)
   80ce4:	2200      	movs	r2, #0
   80ce6:	601a      	str	r2, [r3, #0]

               if (FPGA_lockstatus() == fpga_ctrlmem) {
   80ce8:	4b09      	ldr	r3, [pc, #36]	; (80d10 <ballistic_setup_in_received+0x50>)
   80cea:	4798      	blx	r3
   80cec:	4603      	mov	r3, r0
   80cee:	2b05      	cmp	r3, #5
   80cf0:	d102      	bne.n	80cf8 <ballistic_setup_in_received+0x38>
                    FPGA_setlock(fpga_unlocked);
   80cf2:	2000      	movs	r0, #0
   80cf4:	4b07      	ldr	r3, [pc, #28]	; (80d14 <ballistic_setup_in_received+0x54>)
   80cf6:	4798      	blx	r3
               }
               return true;
   80cf8:	2301      	movs	r3, #1
   80cfa:	e000      	b.n	80cfe <ballistic_setup_in_received+0x3e>
     }
     return false;
   80cfc:	2300      	movs	r3, #0
}
   80cfe:	4618      	mov	r0, r3
   80d00:	bd80      	pop	{r7, pc}
   80d02:	bf00      	nop
   80d04:	20003740 	.word	0x20003740
   80d08:	200031a0 	.word	0x200031a0
   80d0c:	200031a4 	.word	0x200031a4
   80d10:	000821b5 	.word	0x000821b5
   80d14:	0008215d 	.word	0x0008215d

00080d18 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   80d18:	b580      	push	{r7, lr}
   80d1a:	b082      	sub	sp, #8
   80d1c:	af00      	add	r7, sp, #0
   80d1e:	4603      	mov	r3, r0
   80d20:	6039      	str	r1, [r7, #0]
   80d22:	71fb      	strb	r3, [r7, #7]
   80d24:	4613      	mov	r3, r2
   80d26:	71bb      	strb	r3, [r7, #6]
     UNUSED(nb_transfered);
     UNUSED(ep);
     if (UDD_EP_TRANSFER_OK != status) {
   80d28:	79fb      	ldrb	r3, [r7, #7]
   80d2a:	2b00      	cmp	r3, #0
   80d2c:	d108      	bne.n	80d40 <main_vendor_bulk_in_received+0x28>
          return; // Transfer aborted/error
     }

     if (FPGA_lockstatus() == fpga_blockin){
   80d2e:	4b06      	ldr	r3, [pc, #24]	; (80d48 <main_vendor_bulk_in_received+0x30>)
   80d30:	4798      	blx	r3
   80d32:	4603      	mov	r3, r0
   80d34:	2b02      	cmp	r3, #2
   80d36:	d104      	bne.n	80d42 <main_vendor_bulk_in_received+0x2a>
          FPGA_setlock(fpga_unlocked);
   80d38:	2000      	movs	r0, #0
   80d3a:	4b04      	ldr	r3, [pc, #16]	; (80d4c <main_vendor_bulk_in_received+0x34>)
   80d3c:	4798      	blx	r3
   80d3e:	e000      	b.n	80d42 <main_vendor_bulk_in_received+0x2a>
          return; // Transfer aborted/error
   80d40:	bf00      	nop
     }
}
   80d42:	3708      	adds	r7, #8
   80d44:	46bd      	mov	sp, r7
   80d46:	bd80      	pop	{r7, pc}
   80d48:	000821b5 	.word	0x000821b5
   80d4c:	0008215d 	.word	0x0008215d

00080d50 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   80d50:	b580      	push	{r7, lr}
   80d52:	b084      	sub	sp, #16
   80d54:	af00      	add	r7, sp, #0
   80d56:	4603      	mov	r3, r0
   80d58:	6039      	str	r1, [r7, #0]
   80d5a:	71fb      	strb	r3, [r7, #7]
   80d5c:	4613      	mov	r3, r2
   80d5e:	71bb      	strb	r3, [r7, #6]
     UNUSED(ep);
     if (UDD_EP_TRANSFER_OK != status) {
   80d60:	79fb      	ldrb	r3, [r7, #7]
   80d62:	2b00      	cmp	r3, #0
   80d64:	d006      	beq.n	80d74 <main_vendor_bulk_out_received+0x24>
          // Transfer aborted

          //restart
          udi_vendor_bulk_out_run(
   80d66:	4a19      	ldr	r2, [pc, #100]	; (80dcc <main_vendor_bulk_out_received+0x7c>)
   80d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80d6c:	4818      	ldr	r0, [pc, #96]	; (80dd0 <main_vendor_bulk_out_received+0x80>)
   80d6e:	4b19      	ldr	r3, [pc, #100]	; (80dd4 <main_vendor_bulk_out_received+0x84>)
   80d70:	4798      	blx	r3
               main_buf_loopback,
               sizeof(main_buf_loopback),
               main_vendor_bulk_out_received);

          return;
   80d72:	e028      	b.n	80dc6 <main_vendor_bulk_out_received+0x76>
     }

     if (blockendpoint_usage == bep_emem){
   80d74:	4b18      	ldr	r3, [pc, #96]	; (80dd8 <main_vendor_bulk_out_received+0x88>)
   80d76:	781b      	ldrb	r3, [r3, #0]
   80d78:	2b00      	cmp	r3, #0
   80d7a:	d11e      	bne.n	80dba <main_vendor_bulk_out_received+0x6a>

          for(uint32_t i = 0; i < nb_transfered; i++){
   80d7c:	2300      	movs	r3, #0
   80d7e:	60fb      	str	r3, [r7, #12]
   80d80:	e00f      	b.n	80da2 <main_vendor_bulk_out_received+0x52>
               xram[bulkread_address++] = main_buf_loopback[i];
   80d82:	4b16      	ldr	r3, [pc, #88]	; (80ddc <main_vendor_bulk_out_received+0x8c>)
   80d84:	681a      	ldr	r2, [r3, #0]
   80d86:	4b16      	ldr	r3, [pc, #88]	; (80de0 <main_vendor_bulk_out_received+0x90>)
   80d88:	681b      	ldr	r3, [r3, #0]
   80d8a:	1c59      	adds	r1, r3, #1
   80d8c:	4814      	ldr	r0, [pc, #80]	; (80de0 <main_vendor_bulk_out_received+0x90>)
   80d8e:	6001      	str	r1, [r0, #0]
   80d90:	4413      	add	r3, r2
   80d92:	490f      	ldr	r1, [pc, #60]	; (80dd0 <main_vendor_bulk_out_received+0x80>)
   80d94:	68fa      	ldr	r2, [r7, #12]
   80d96:	440a      	add	r2, r1
   80d98:	7812      	ldrb	r2, [r2, #0]
   80d9a:	701a      	strb	r2, [r3, #0]
          for(uint32_t i = 0; i < nb_transfered; i++){
   80d9c:	68fb      	ldr	r3, [r7, #12]
   80d9e:	3301      	adds	r3, #1
   80da0:	60fb      	str	r3, [r7, #12]
   80da2:	68fa      	ldr	r2, [r7, #12]
   80da4:	683b      	ldr	r3, [r7, #0]
   80da6:	429a      	cmp	r2, r3
   80da8:	d3eb      	bcc.n	80d82 <main_vendor_bulk_out_received+0x32>
          }

          if (FPGA_lockstatus() == fpga_blockout){
   80daa:	4b0e      	ldr	r3, [pc, #56]	; (80de4 <main_vendor_bulk_out_received+0x94>)
   80dac:	4798      	blx	r3
   80dae:	4603      	mov	r3, r0
   80db0:	2b04      	cmp	r3, #4
   80db2:	d102      	bne.n	80dba <main_vendor_bulk_out_received+0x6a>
               FPGA_setlock(fpga_unlocked);
   80db4:	2000      	movs	r0, #0
   80db6:	4b0c      	ldr	r3, [pc, #48]	; (80de8 <main_vendor_bulk_out_received+0x98>)
   80db8:	4798      	blx	r3
          }
     }
     //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

     udi_vendor_bulk_out_run(
   80dba:	4a04      	ldr	r2, [pc, #16]	; (80dcc <main_vendor_bulk_out_received+0x7c>)
   80dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80dc0:	4803      	ldr	r0, [pc, #12]	; (80dd0 <main_vendor_bulk_out_received+0x80>)
   80dc2:	4b04      	ldr	r3, [pc, #16]	; (80dd4 <main_vendor_bulk_out_received+0x84>)
   80dc4:	4798      	blx	r3
          main_buf_loopback,
          sizeof(main_buf_loopback),
          main_vendor_bulk_out_received);
}
   80dc6:	3710      	adds	r7, #16
   80dc8:	46bd      	mov	sp, r7
   80dca:	bd80      	pop	{r7, pc}
   80dcc:	00080d51 	.word	0x00080d51
   80dd0:	200032b8 	.word	0x200032b8
   80dd4:	00084d69 	.word	0x00084d69
   80dd8:	20000e70 	.word	0x20000e70
   80ddc:	200003d4 	.word	0x200003d4
   80de0:	200031a8 	.word	0x200031a8
   80de4:	000821b5 	.word	0x000821b5
   80de8:	0008215d 	.word	0x0008215d

00080dec <ballistic_register_handlers>:

void ballistic_register_handlers(void)
{
   80dec:	b580      	push	{r7, lr}
   80dee:	af00      	add	r7, sp, #0
     naeusb_add_in_handler(ballistic_setup_in_received);
   80df0:	4803      	ldr	r0, [pc, #12]	; (80e00 <ballistic_register_handlers+0x14>)
   80df2:	4b04      	ldr	r3, [pc, #16]	; (80e04 <ballistic_register_handlers+0x18>)
   80df4:	4798      	blx	r3
     naeusb_add_out_handler(ballistic_setup_out_received);
   80df6:	4804      	ldr	r0, [pc, #16]	; (80e08 <ballistic_register_handlers+0x1c>)
   80df8:	4b04      	ldr	r3, [pc, #16]	; (80e0c <ballistic_register_handlers+0x20>)
   80dfa:	4798      	blx	r3
   80dfc:	bf00      	nop
   80dfe:	bd80      	pop	{r7, pc}
   80e00:	00080cc1 	.word	0x00080cc1
   80e04:	00080e11 	.word	0x00080e11
   80e08:	00080c1d 	.word	0x00080c1d
   80e0c:	00080e51 	.word	0x00080e51

00080e10 <naeusb_add_in_handler>:
{
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
   80e10:	b480      	push	{r7}
   80e12:	b083      	sub	sp, #12
   80e14:	af00      	add	r7, sp, #0
   80e16:	6078      	str	r0, [r7, #4]
    if (naeusb_num_in_handlers < 16) {
   80e18:	4b0b      	ldr	r3, [pc, #44]	; (80e48 <naeusb_add_in_handler+0x38>)
   80e1a:	781b      	ldrb	r3, [r3, #0]
   80e1c:	2b0f      	cmp	r3, #15
   80e1e:	d80c      	bhi.n	80e3a <naeusb_add_in_handler+0x2a>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   80e20:	4b09      	ldr	r3, [pc, #36]	; (80e48 <naeusb_add_in_handler+0x38>)
   80e22:	781b      	ldrb	r3, [r3, #0]
   80e24:	1c5a      	adds	r2, r3, #1
   80e26:	b2d1      	uxtb	r1, r2
   80e28:	4a07      	ldr	r2, [pc, #28]	; (80e48 <naeusb_add_in_handler+0x38>)
   80e2a:	7011      	strb	r1, [r2, #0]
   80e2c:	4619      	mov	r1, r3
   80e2e:	4a07      	ldr	r2, [pc, #28]	; (80e4c <naeusb_add_in_handler+0x3c>)
   80e30:	687b      	ldr	r3, [r7, #4]
   80e32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        return true;
   80e36:	2301      	movs	r3, #1
   80e38:	e000      	b.n	80e3c <naeusb_add_in_handler+0x2c>
    }
    return false;
   80e3a:	2300      	movs	r3, #0
    
}
   80e3c:	4618      	mov	r0, r3
   80e3e:	370c      	adds	r7, #12
   80e40:	46bd      	mov	sp, r7
   80e42:	bc80      	pop	{r7}
   80e44:	4770      	bx	lr
   80e46:	bf00      	nop
   80e48:	200031f0 	.word	0x200031f0
   80e4c:	200031b0 	.word	0x200031b0

00080e50 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
   80e50:	b480      	push	{r7}
   80e52:	b083      	sub	sp, #12
   80e54:	af00      	add	r7, sp, #0
   80e56:	6078      	str	r0, [r7, #4]
    if (naeusb_num_out_handlers < 16) {
   80e58:	4b0b      	ldr	r3, [pc, #44]	; (80e88 <naeusb_add_out_handler+0x38>)
   80e5a:	781b      	ldrb	r3, [r3, #0]
   80e5c:	2b0f      	cmp	r3, #15
   80e5e:	d80c      	bhi.n	80e7a <naeusb_add_out_handler+0x2a>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   80e60:	4b09      	ldr	r3, [pc, #36]	; (80e88 <naeusb_add_out_handler+0x38>)
   80e62:	781b      	ldrb	r3, [r3, #0]
   80e64:	1c5a      	adds	r2, r3, #1
   80e66:	b2d1      	uxtb	r1, r2
   80e68:	4a07      	ldr	r2, [pc, #28]	; (80e88 <naeusb_add_out_handler+0x38>)
   80e6a:	7011      	strb	r1, [r2, #0]
   80e6c:	4619      	mov	r1, r3
   80e6e:	4a07      	ldr	r2, [pc, #28]	; (80e8c <naeusb_add_out_handler+0x3c>)
   80e70:	687b      	ldr	r3, [r7, #4]
   80e72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        return true;
   80e76:	2301      	movs	r3, #1
   80e78:	e000      	b.n	80e7c <naeusb_add_out_handler+0x2c>
    }
    return false;
   80e7a:	2300      	movs	r3, #0
    
}
   80e7c:	4618      	mov	r0, r3
   80e7e:	370c      	adds	r7, #12
   80e80:	46bd      	mov	sp, r7
   80e82:	bc80      	pop	{r7}
   80e84:	4770      	bx	lr
   80e86:	bf00      	nop
   80e88:	20003234 	.word	0x20003234
   80e8c:	200031f4 	.word	0x200031f4

00080e90 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80e90:	b580      	push	{r7, lr}
   80e92:	af00      	add	r7, sp, #0
	active = false;
   80e94:	4b03      	ldr	r3, [pc, #12]	; (80ea4 <main_suspend_action+0x14>)
   80e96:	2200      	movs	r2, #0
   80e98:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   80e9a:	4b03      	ldr	r3, [pc, #12]	; (80ea8 <main_suspend_action+0x18>)
   80e9c:	4798      	blx	r3
}
   80e9e:	bf00      	nop
   80ea0:	bd80      	pop	{r7, pc}
   80ea2:	bf00      	nop
   80ea4:	20003235 	.word	0x20003235
   80ea8:	0008583d 	.word	0x0008583d

00080eac <main_resume_action>:

void main_resume_action(void)
{
   80eac:	b580      	push	{r7, lr}
   80eae:	af00      	add	r7, sp, #0
    ui_wakeup();
   80eb0:	4b01      	ldr	r3, [pc, #4]	; (80eb8 <main_resume_action+0xc>)
   80eb2:	4798      	blx	r3
}
   80eb4:	bf00      	nop
   80eb6:	bd80      	pop	{r7, pc}
   80eb8:	00085865 	.word	0x00085865

00080ebc <main_sof_action>:

void main_sof_action(void)
{
   80ebc:	b580      	push	{r7, lr}
   80ebe:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80ec0:	4b08      	ldr	r3, [pc, #32]	; (80ee4 <main_sof_action+0x28>)
   80ec2:	781b      	ldrb	r3, [r3, #0]
   80ec4:	b2db      	uxtb	r3, r3
   80ec6:	f083 0301 	eor.w	r3, r3, #1
   80eca:	b2db      	uxtb	r3, r3
   80ecc:	2b00      	cmp	r3, #0
   80ece:	d106      	bne.n	80ede <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   80ed0:	4b05      	ldr	r3, [pc, #20]	; (80ee8 <main_sof_action+0x2c>)
   80ed2:	4798      	blx	r3
   80ed4:	4603      	mov	r3, r0
   80ed6:	4618      	mov	r0, r3
   80ed8:	4b04      	ldr	r3, [pc, #16]	; (80eec <main_sof_action+0x30>)
   80eda:	4798      	blx	r3
   80edc:	e000      	b.n	80ee0 <main_sof_action+0x24>
        return;
   80ede:	bf00      	nop
}
   80ee0:	bd80      	pop	{r7, pc}
   80ee2:	bf00      	nop
   80ee4:	20000298 	.word	0x20000298
   80ee8:	00082c35 	.word	0x00082c35
   80eec:	00085881 	.word	0x00085881

00080ef0 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   80ef0:	b580      	push	{r7, lr}
   80ef2:	af00      	add	r7, sp, #0
    active = true;
   80ef4:	4b07      	ldr	r3, [pc, #28]	; (80f14 <main_vendor_enable+0x24>)
   80ef6:	2201      	movs	r2, #1
   80ef8:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   80efa:	4b07      	ldr	r3, [pc, #28]	; (80f18 <main_vendor_enable+0x28>)
   80efc:	2201      	movs	r2, #1
   80efe:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80f00:	4a06      	ldr	r2, [pc, #24]	; (80f1c <main_vendor_enable+0x2c>)
   80f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80f06:	4806      	ldr	r0, [pc, #24]	; (80f20 <main_vendor_enable+0x30>)
   80f08:	4b06      	ldr	r3, [pc, #24]	; (80f24 <main_vendor_enable+0x34>)
   80f0a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
   80f0c:	2301      	movs	r3, #1
}
   80f0e:	4618      	mov	r0, r3
   80f10:	bd80      	pop	{r7, pc}
   80f12:	bf00      	nop
   80f14:	20003235 	.word	0x20003235
   80f18:	20000298 	.word	0x20000298
   80f1c:	00080d51 	.word	0x00080d51
   80f20:	200032b8 	.word	0x200032b8
   80f24:	00084d69 	.word	0x00084d69

00080f28 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80f28:	b480      	push	{r7}
   80f2a:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80f2c:	4b03      	ldr	r3, [pc, #12]	; (80f3c <main_vendor_disable+0x14>)
   80f2e:	2200      	movs	r2, #0
   80f30:	701a      	strb	r2, [r3, #0]
}
   80f32:	bf00      	nop
   80f34:	46bd      	mov	sp, r7
   80f36:	bc80      	pop	{r7}
   80f38:	4770      	bx	lr
   80f3a:	bf00      	nop
   80f3c:	20000298 	.word	0x20000298

00080f40 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   80f40:	b580      	push	{r7, lr}
   80f42:	b082      	sub	sp, #8
   80f44:	af00      	add	r7, sp, #0
    bool handler_status = false;
   80f46:	2300      	movs	r3, #0
   80f48:	71bb      	strb	r3, [r7, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   80f4a:	4b13      	ldr	r3, [pc, #76]	; (80f98 <main_setup_out_received+0x58>)
   80f4c:	4a13      	ldr	r2, [pc, #76]	; (80f9c <main_setup_out_received+0x5c>)
   80f4e:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80f50:	4b11      	ldr	r3, [pc, #68]	; (80f98 <main_setup_out_received+0x58>)
   80f52:	88db      	ldrh	r3, [r3, #6]
   80f54:	2b40      	cmp	r3, #64	; 0x40
   80f56:	bf28      	it	cs
   80f58:	2340      	movcs	r3, #64	; 0x40
   80f5a:	b29a      	uxth	r2, r3
   80f5c:	4b0e      	ldr	r3, [pc, #56]	; (80f98 <main_setup_out_received+0x58>)
   80f5e:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80f60:	4b0f      	ldr	r3, [pc, #60]	; (80fa0 <main_setup_out_received+0x60>)
   80f62:	781b      	ldrb	r3, [r3, #0]
   80f64:	71fb      	strb	r3, [r7, #7]
   80f66:	e00f      	b.n	80f88 <main_setup_out_received+0x48>
        handler_status = naeusb_out_request_handlers[i-1]();
   80f68:	79fb      	ldrb	r3, [r7, #7]
   80f6a:	3b01      	subs	r3, #1
   80f6c:	4a0d      	ldr	r2, [pc, #52]	; (80fa4 <main_setup_out_received+0x64>)
   80f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80f72:	4798      	blx	r3
   80f74:	4603      	mov	r3, r0
   80f76:	71bb      	strb	r3, [r7, #6]
        if (handler_status == true) {
   80f78:	79bb      	ldrb	r3, [r7, #6]
   80f7a:	2b00      	cmp	r3, #0
   80f7c:	d001      	beq.n	80f82 <main_setup_out_received+0x42>
            return true;
   80f7e:	2301      	movs	r3, #1
   80f80:	e006      	b.n	80f90 <main_setup_out_received+0x50>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80f82:	79fb      	ldrb	r3, [r7, #7]
   80f84:	3b01      	subs	r3, #1
   80f86:	71fb      	strb	r3, [r7, #7]
   80f88:	79fb      	ldrb	r3, [r7, #7]
   80f8a:	2b00      	cmp	r3, #0
   80f8c:	d1ec      	bne.n	80f68 <main_setup_out_received+0x28>
        }
    }

    return false;
   80f8e:	2300      	movs	r3, #0

}
   80f90:	4618      	mov	r0, r3
   80f92:	3708      	adds	r7, #8
   80f94:	46bd      	mov	sp, r7
   80f96:	bd80      	pop	{r7, pc}
   80f98:	20003740 	.word	0x20003740
   80f9c:	20003238 	.word	0x20003238
   80fa0:	20003234 	.word	0x20003234
   80fa4:	200031f4 	.word	0x200031f4

00080fa8 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   80fa8:	b580      	push	{r7, lr}
   80faa:	b082      	sub	sp, #8
   80fac:	af00      	add	r7, sp, #0
    bool handler_status = false;
   80fae:	2300      	movs	r3, #0
   80fb0:	71bb      	strb	r3, [r7, #6]

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   80fb2:	4b0e      	ldr	r3, [pc, #56]	; (80fec <main_setup_in_received+0x44>)
   80fb4:	781b      	ldrb	r3, [r3, #0]
   80fb6:	71fb      	strb	r3, [r7, #7]
   80fb8:	e00f      	b.n	80fda <main_setup_in_received+0x32>
        handler_status = naeusb_in_request_handlers[i-1]();
   80fba:	79fb      	ldrb	r3, [r7, #7]
   80fbc:	3b01      	subs	r3, #1
   80fbe:	4a0c      	ldr	r2, [pc, #48]	; (80ff0 <main_setup_in_received+0x48>)
   80fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80fc4:	4798      	blx	r3
   80fc6:	4603      	mov	r3, r0
   80fc8:	71bb      	strb	r3, [r7, #6]
        if (handler_status == true) {
   80fca:	79bb      	ldrb	r3, [r7, #6]
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d001      	beq.n	80fd4 <main_setup_in_received+0x2c>
            return true;
   80fd0:	2301      	movs	r3, #1
   80fd2:	e006      	b.n	80fe2 <main_setup_in_received+0x3a>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   80fd4:	79fb      	ldrb	r3, [r7, #7]
   80fd6:	3b01      	subs	r3, #1
   80fd8:	71fb      	strb	r3, [r7, #7]
   80fda:	79fb      	ldrb	r3, [r7, #7]
   80fdc:	2b00      	cmp	r3, #0
   80fde:	d1ec      	bne.n	80fba <main_setup_in_received+0x12>
        }
    }

    return false;
   80fe0:	2300      	movs	r3, #0

   80fe2:	4618      	mov	r0, r3
   80fe4:	3708      	adds	r7, #8
   80fe6:	46bd      	mov	sp, r7
   80fe8:	bd80      	pop	{r7, pc}
   80fea:	bf00      	nop
   80fec:	200031f0 	.word	0x200031f0
   80ff0:	200031b0 	.word	0x200031b0

00080ff4 <osc_enable>:
{
   80ff4:	b580      	push	{r7, lr}
   80ff6:	b082      	sub	sp, #8
   80ff8:	af00      	add	r7, sp, #0
   80ffa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80ffc:	687b      	ldr	r3, [r7, #4]
   80ffe:	2b07      	cmp	r3, #7
   81000:	d82e      	bhi.n	81060 <osc_enable+0x6c>
   81002:	a201      	add	r2, pc, #4	; (adr r2, 81008 <osc_enable+0x14>)
   81004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81008:	0008105f 	.word	0x0008105f
   8100c:	00081029 	.word	0x00081029
   81010:	00081031 	.word	0x00081031
   81014:	00081039 	.word	0x00081039
   81018:	00081041 	.word	0x00081041
   8101c:	00081049 	.word	0x00081049
   81020:	00081051 	.word	0x00081051
   81024:	00081059 	.word	0x00081059
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81028:	2000      	movs	r0, #0
   8102a:	4b0f      	ldr	r3, [pc, #60]	; (81068 <osc_enable+0x74>)
   8102c:	4798      	blx	r3
		break;
   8102e:	e017      	b.n	81060 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   81030:	2001      	movs	r0, #1
   81032:	4b0d      	ldr	r3, [pc, #52]	; (81068 <osc_enable+0x74>)
   81034:	4798      	blx	r3
		break;
   81036:	e013      	b.n	81060 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   81038:	2000      	movs	r0, #0
   8103a:	4b0c      	ldr	r3, [pc, #48]	; (8106c <osc_enable+0x78>)
   8103c:	4798      	blx	r3
		break;
   8103e:	e00f      	b.n	81060 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   81040:	2010      	movs	r0, #16
   81042:	4b0a      	ldr	r3, [pc, #40]	; (8106c <osc_enable+0x78>)
   81044:	4798      	blx	r3
		break;
   81046:	e00b      	b.n	81060 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   81048:	2020      	movs	r0, #32
   8104a:	4b08      	ldr	r3, [pc, #32]	; (8106c <osc_enable+0x78>)
   8104c:	4798      	blx	r3
		break;
   8104e:	e007      	b.n	81060 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   81050:	203e      	movs	r0, #62	; 0x3e
   81052:	4b07      	ldr	r3, [pc, #28]	; (81070 <osc_enable+0x7c>)
   81054:	4798      	blx	r3
		break;
   81056:	e003      	b.n	81060 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   81058:	4b06      	ldr	r3, [pc, #24]	; (81074 <osc_enable+0x80>)
   8105a:	4798      	blx	r3
		break;
   8105c:	e000      	b.n	81060 <osc_enable+0x6c>
		break;
   8105e:	bf00      	nop
}
   81060:	bf00      	nop
   81062:	3708      	adds	r7, #8
   81064:	46bd      	mov	sp, r7
   81066:	bd80      	pop	{r7, pc}
   81068:	00084999 	.word	0x00084999
   8106c:	00084a05 	.word	0x00084a05
   81070:	00084a79 	.word	0x00084a79
   81074:	00084ac9 	.word	0x00084ac9

00081078 <osc_is_ready>:
{
   81078:	b580      	push	{r7, lr}
   8107a:	b082      	sub	sp, #8
   8107c:	af00      	add	r7, sp, #0
   8107e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81080:	687b      	ldr	r3, [r7, #4]
   81082:	2b07      	cmp	r3, #7
   81084:	d82f      	bhi.n	810e6 <osc_is_ready+0x6e>
   81086:	a201      	add	r2, pc, #4	; (adr r2, 8108c <osc_is_ready+0x14>)
   81088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8108c:	000810ad 	.word	0x000810ad
   81090:	000810b1 	.word	0x000810b1
   81094:	000810b1 	.word	0x000810b1
   81098:	000810c3 	.word	0x000810c3
   8109c:	000810c3 	.word	0x000810c3
   810a0:	000810c3 	.word	0x000810c3
   810a4:	000810d5 	.word	0x000810d5
   810a8:	000810d5 	.word	0x000810d5
		return 1;
   810ac:	2301      	movs	r3, #1
   810ae:	e01b      	b.n	810e8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   810b0:	4b0f      	ldr	r3, [pc, #60]	; (810f0 <osc_is_ready+0x78>)
   810b2:	4798      	blx	r3
   810b4:	4603      	mov	r3, r0
   810b6:	2b00      	cmp	r3, #0
   810b8:	bf14      	ite	ne
   810ba:	2301      	movne	r3, #1
   810bc:	2300      	moveq	r3, #0
   810be:	b2db      	uxtb	r3, r3
   810c0:	e012      	b.n	810e8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   810c2:	4b0c      	ldr	r3, [pc, #48]	; (810f4 <osc_is_ready+0x7c>)
   810c4:	4798      	blx	r3
   810c6:	4603      	mov	r3, r0
   810c8:	2b00      	cmp	r3, #0
   810ca:	bf14      	ite	ne
   810cc:	2301      	movne	r3, #1
   810ce:	2300      	moveq	r3, #0
   810d0:	b2db      	uxtb	r3, r3
   810d2:	e009      	b.n	810e8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   810d4:	4b08      	ldr	r3, [pc, #32]	; (810f8 <osc_is_ready+0x80>)
   810d6:	4798      	blx	r3
   810d8:	4603      	mov	r3, r0
   810da:	2b00      	cmp	r3, #0
   810dc:	bf14      	ite	ne
   810de:	2301      	movne	r3, #1
   810e0:	2300      	moveq	r3, #0
   810e2:	b2db      	uxtb	r3, r3
   810e4:	e000      	b.n	810e8 <osc_is_ready+0x70>
	return 0;
   810e6:	2300      	movs	r3, #0
}
   810e8:	4618      	mov	r0, r3
   810ea:	3708      	adds	r7, #8
   810ec:	46bd      	mov	sp, r7
   810ee:	bd80      	pop	{r7, pc}
   810f0:	000849d1 	.word	0x000849d1
   810f4:	00084a61 	.word	0x00084a61
   810f8:	00084afd 	.word	0x00084afd

000810fc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   810fc:	b580      	push	{r7, lr}
   810fe:	b082      	sub	sp, #8
   81100:	af00      	add	r7, sp, #0
   81102:	4603      	mov	r3, r0
   81104:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   81106:	bf00      	nop
   81108:	79fb      	ldrb	r3, [r7, #7]
   8110a:	4618      	mov	r0, r3
   8110c:	4b06      	ldr	r3, [pc, #24]	; (81128 <osc_wait_ready+0x2c>)
   8110e:	4798      	blx	r3
   81110:	4603      	mov	r3, r0
   81112:	f083 0301 	eor.w	r3, r3, #1
   81116:	b2db      	uxtb	r3, r3
   81118:	2b00      	cmp	r3, #0
   8111a:	d1f5      	bne.n	81108 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   8111c:	bf00      	nop
   8111e:	bf00      	nop
   81120:	3708      	adds	r7, #8
   81122:	46bd      	mov	sp, r7
   81124:	bd80      	pop	{r7, pc}
   81126:	bf00      	nop
   81128:	00081079 	.word	0x00081079

0008112c <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   8112c:	b580      	push	{r7, lr}
   8112e:	af00      	add	r7, sp, #0
	udd_detach();
   81130:	4b01      	ldr	r3, [pc, #4]	; (81138 <udc_detach+0xc>)
   81132:	4798      	blx	r3
}
   81134:	bf00      	nop
   81136:	bd80      	pop	{r7, pc}
   81138:	00082b6d 	.word	0x00082b6d

0008113c <naeusb_sam_cfg_out>:
#define RSTC_CR_KEY_PASSWD RSTC_CR_KEY(0xA5)
#endif


void naeusb_sam_cfg_out(void)
{
   8113c:	b580      	push	{r7, lr}
   8113e:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81140:	4b34      	ldr	r3, [pc, #208]	; (81214 <naeusb_sam_cfg_out+0xd8>)
   81142:	885b      	ldrh	r3, [r3, #2]
   81144:	b2db      	uxtb	r3, r3
   81146:	3b01      	subs	r3, #1
   81148:	2b10      	cmp	r3, #16
   8114a:	d85f      	bhi.n	8120c <naeusb_sam_cfg_out+0xd0>
   8114c:	a201      	add	r2, pc, #4	; (adr r2, 81154 <naeusb_sam_cfg_out+0x18>)
   8114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81152:	bf00      	nop
   81154:	00081199 	.word	0x00081199
   81158:	000811ad 	.word	0x000811ad
   8115c:	000811b5 	.word	0x000811b5
   81160:	0008120d 	.word	0x0008120d
   81164:	0008120d 	.word	0x0008120d
   81168:	0008120d 	.word	0x0008120d
   8116c:	0008120d 	.word	0x0008120d
   81170:	0008120d 	.word	0x0008120d
   81174:	0008120d 	.word	0x0008120d
   81178:	0008120d 	.word	0x0008120d
   8117c:	0008120d 	.word	0x0008120d
   81180:	0008120d 	.word	0x0008120d
   81184:	0008120d 	.word	0x0008120d
   81188:	0008120d 	.word	0x0008120d
   8118c:	0008120d 	.word	0x0008120d
   81190:	000811e3 	.word	0x000811e3
   81194:	00081207 	.word	0x00081207
    {
        /* Turn on slow clock */
    case SAM_SLOW_CLOCK_ON:
        osc_enable(OSC_MAINCK_XTAL);
   81198:	2006      	movs	r0, #6
   8119a:	4b1f      	ldr	r3, [pc, #124]	; (81218 <naeusb_sam_cfg_out+0xdc>)
   8119c:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   8119e:	2006      	movs	r0, #6
   811a0:	4b1e      	ldr	r3, [pc, #120]	; (8121c <naeusb_sam_cfg_out+0xe0>)
   811a2:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   811a4:	2010      	movs	r0, #16
   811a6:	4b1e      	ldr	r3, [pc, #120]	; (81220 <naeusb_sam_cfg_out+0xe4>)
   811a8:	4798      	blx	r3
        break;
   811aa:	e030      	b.n	8120e <naeusb_sam_cfg_out+0xd2>

        /* Turn off slow clock */
    case SAM_SLOW_CLOCK_OFF:
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   811ac:	2010      	movs	r0, #16
   811ae:	4b1d      	ldr	r3, [pc, #116]	; (81224 <naeusb_sam_cfg_out+0xe8>)
   811b0:	4798      	blx	r3
        break;
   811b2:	e02c      	b.n	8120e <naeusb_sam_cfg_out+0xd2>
    case SAM_ENTER_BOOTLOADER:
        /* Turn off connected stuff */
        //board_power(0);

        /* Clear ROM-mapping bit. */
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   811b4:	2201      	movs	r2, #1
   811b6:	210c      	movs	r1, #12
   811b8:	481b      	ldr	r0, [pc, #108]	; (81228 <naeusb_sam_cfg_out+0xec>)
   811ba:	4b1c      	ldr	r3, [pc, #112]	; (8122c <naeusb_sam_cfg_out+0xf0>)
   811bc:	4798      	blx	r3

        /* Disconnect USB (will kill connection) */
        udc_detach();
   811be:	4b1c      	ldr	r3, [pc, #112]	; (81230 <naeusb_sam_cfg_out+0xf4>)
   811c0:	4798      	blx	r3

        /* With knowledge that I will rise again, I lay down my life. */
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   811c2:	bf00      	nop
   811c4:	4b1b      	ldr	r3, [pc, #108]	; (81234 <naeusb_sam_cfg_out+0xf8>)
   811c6:	685b      	ldr	r3, [r3, #4]
   811c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   811cc:	2b00      	cmp	r3, #0
   811ce:	d1f9      	bne.n	811c4 <naeusb_sam_cfg_out+0x88>
        //RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   811d0:	4b18      	ldr	r3, [pc, #96]	; (81234 <naeusb_sam_cfg_out+0xf8>)
   811d2:	681b      	ldr	r3, [r3, #0]
   811d4:	4a17      	ldr	r2, [pc, #92]	; (81234 <naeusb_sam_cfg_out+0xf8>)
   811d6:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   811da:	f043 0305 	orr.w	r3, r3, #5
   811de:	6013      	str	r3, [r2, #0]
        while(1);
   811e0:	e7fe      	b.n	811e0 <naeusb_sam_cfg_out+0xa4>
        /* Disconnect USB (will kill stuff) */

        /* Make the jump */
        break;
    case SAM_RESET:
        udc_detach();
   811e2:	4b13      	ldr	r3, [pc, #76]	; (81230 <naeusb_sam_cfg_out+0xf4>)
   811e4:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   811e6:	bf00      	nop
   811e8:	4b12      	ldr	r3, [pc, #72]	; (81234 <naeusb_sam_cfg_out+0xf8>)
   811ea:	685b      	ldr	r3, [r3, #4]
   811ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   811f0:	2b00      	cmp	r3, #0
   811f2:	d1f9      	bne.n	811e8 <naeusb_sam_cfg_out+0xac>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   811f4:	4b0f      	ldr	r3, [pc, #60]	; (81234 <naeusb_sam_cfg_out+0xf8>)
   811f6:	681b      	ldr	r3, [r3, #0]
   811f8:	4a0e      	ldr	r2, [pc, #56]	; (81234 <naeusb_sam_cfg_out+0xf8>)
   811fa:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   811fe:	f043 0305 	orr.w	r3, r3, #5
   81202:	6013      	str	r3, [r2, #0]
        while(1);
   81204:	e7fe      	b.n	81204 <naeusb_sam_cfg_out+0xc8>
        break;
        
    case SAM_RELEASE_LOCK: // use in case of pipe error emergency
	#if USB_DEVICE_PRODUCT_ID != 0xACE0
        FPGA_releaselock();
   81206:	4b0c      	ldr	r3, [pc, #48]	; (81238 <naeusb_sam_cfg_out+0xfc>)
   81208:	4798      	blx	r3
	#endif
        break;
   8120a:	e000      	b.n	8120e <naeusb_sam_cfg_out+0xd2>

        /* Oh well, sucks to be you */

    default:
        break;
   8120c:	bf00      	nop
    }
}
   8120e:	bf00      	nop
   81210:	bd80      	pop	{r7, pc}
   81212:	bf00      	nop
   81214:	20003740 	.word	0x20003740
   81218:	00080ff5 	.word	0x00080ff5
   8121c:	000810fd 	.word	0x000810fd
   81220:	00084899 	.word	0x00084899
   81224:	00084919 	.word	0x00084919
   81228:	400e0800 	.word	0x400e0800
   8122c:	00084e25 	.word	0x00084e25
   81230:	0008112d 	.word	0x0008112d
   81234:	400e1200 	.word	0x400e1200
   81238:	0008219d 	.word	0x0008219d

0008123c <naeusb_fw_version_in>:

bool naeusb_fw_version_in(void)
{
   8123c:	b480      	push	{r7}
   8123e:	af00      	add	r7, sp, #0
    respbuf[0] = FW_VER_MAJOR;
   81240:	4b09      	ldr	r3, [pc, #36]	; (81268 <naeusb_fw_version_in+0x2c>)
   81242:	2201      	movs	r2, #1
   81244:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   81246:	4b08      	ldr	r3, [pc, #32]	; (81268 <naeusb_fw_version_in+0x2c>)
   81248:	2201      	movs	r2, #1
   8124a:	705a      	strb	r2, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   8124c:	4b06      	ldr	r3, [pc, #24]	; (81268 <naeusb_fw_version_in+0x2c>)
   8124e:	2200      	movs	r2, #0
   81250:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81252:	4b06      	ldr	r3, [pc, #24]	; (8126c <naeusb_fw_version_in+0x30>)
   81254:	4a04      	ldr	r2, [pc, #16]	; (81268 <naeusb_fw_version_in+0x2c>)
   81256:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = 3;
   81258:	4b04      	ldr	r3, [pc, #16]	; (8126c <naeusb_fw_version_in+0x30>)
   8125a:	2203      	movs	r2, #3
   8125c:	819a      	strh	r2, [r3, #12]
    return true;
   8125e:	2301      	movs	r3, #1

}
   81260:	4618      	mov	r0, r3
   81262:	46bd      	mov	sp, r7
   81264:	bc80      	pop	{r7}
   81266:	4770      	bx	lr
   81268:	20003278 	.word	0x20003278
   8126c:	20003740 	.word	0x20003740

00081270 <naeusb_build_date_in>:

static const char BUILD_DATE[] = __DATE__;
static const char BUILD_TIME[] = __TIME__;
bool naeusb_build_date_in(void)
{
   81270:	b580      	push	{r7, lr}
   81272:	af00      	add	r7, sp, #0
    strncpy(respbuf, BUILD_TIME, 64);
   81274:	2240      	movs	r2, #64	; 0x40
   81276:	490d      	ldr	r1, [pc, #52]	; (812ac <naeusb_build_date_in+0x3c>)
   81278:	480d      	ldr	r0, [pc, #52]	; (812b0 <naeusb_build_date_in+0x40>)
   8127a:	4b0e      	ldr	r3, [pc, #56]	; (812b4 <naeusb_build_date_in+0x44>)
   8127c:	4798      	blx	r3
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   8127e:	4b0c      	ldr	r3, [pc, #48]	; (812b0 <naeusb_build_date_in+0x40>)
   81280:	2220      	movs	r2, #32
   81282:	721a      	strb	r2, [r3, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81284:	4b0c      	ldr	r3, [pc, #48]	; (812b8 <naeusb_build_date_in+0x48>)
   81286:	2237      	movs	r2, #55	; 0x37
   81288:	490c      	ldr	r1, [pc, #48]	; (812bc <naeusb_build_date_in+0x4c>)
   8128a:	4618      	mov	r0, r3
   8128c:	4b09      	ldr	r3, [pc, #36]	; (812b4 <naeusb_build_date_in+0x44>)
   8128e:	4798      	blx	r3
    udd_g_ctrlreq.payload = respbuf;
   81290:	4b0b      	ldr	r3, [pc, #44]	; (812c0 <naeusb_build_date_in+0x50>)
   81292:	4a07      	ldr	r2, [pc, #28]	; (812b0 <naeusb_build_date_in+0x40>)
   81294:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81296:	4806      	ldr	r0, [pc, #24]	; (812b0 <naeusb_build_date_in+0x40>)
   81298:	4b0a      	ldr	r3, [pc, #40]	; (812c4 <naeusb_build_date_in+0x54>)
   8129a:	4798      	blx	r3
   8129c:	4603      	mov	r3, r0
   8129e:	b29a      	uxth	r2, r3
   812a0:	4b07      	ldr	r3, [pc, #28]	; (812c0 <naeusb_build_date_in+0x50>)
   812a2:	819a      	strh	r2, [r3, #12]
    return true;
   812a4:	2301      	movs	r3, #1
}
   812a6:	4618      	mov	r0, r3
   812a8:	bd80      	pop	{r7, pc}
   812aa:	bf00      	nop
   812ac:	0008c940 	.word	0x0008c940
   812b0:	20003278 	.word	0x20003278
   812b4:	00085d59 	.word	0x00085d59
   812b8:	20003281 	.word	0x20003281
   812bc:	0008c934 	.word	0x0008c934
   812c0:	20003740 	.word	0x20003740
   812c4:	00085cfd 	.word	0x00085cfd

000812c8 <naeusb_setup_out_received>:


bool naeusb_setup_out_received(void)
{
   812c8:	b480      	push	{r7}
   812ca:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   812cc:	4b06      	ldr	r3, [pc, #24]	; (812e8 <naeusb_setup_out_received+0x20>)
   812ce:	785b      	ldrb	r3, [r3, #1]
   812d0:	2b22      	cmp	r3, #34	; 0x22
   812d2:	d104      	bne.n	812de <naeusb_setup_out_received+0x16>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   812d4:	4b04      	ldr	r3, [pc, #16]	; (812e8 <naeusb_setup_out_received+0x20>)
   812d6:	4a05      	ldr	r2, [pc, #20]	; (812ec <naeusb_setup_out_received+0x24>)
   812d8:	611a      	str	r2, [r3, #16]
            return true;
   812da:	2301      	movs	r3, #1
   812dc:	e000      	b.n	812e0 <naeusb_setup_out_received+0x18>
            break;
    }
    return false;
   812de:	2300      	movs	r3, #0
}
   812e0:	4618      	mov	r0, r3
   812e2:	46bd      	mov	sp, r7
   812e4:	bc80      	pop	{r7}
   812e6:	4770      	bx	lr
   812e8:	20003740 	.word	0x20003740
   812ec:	0008113d 	.word	0x0008113d

000812f0 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   812f0:	b580      	push	{r7, lr}
   812f2:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   812f4:	4b08      	ldr	r3, [pc, #32]	; (81318 <naeusb_setup_in_received+0x28>)
   812f6:	785b      	ldrb	r3, [r3, #1]
   812f8:	2b17      	cmp	r3, #23
   812fa:	d002      	beq.n	81302 <naeusb_setup_in_received+0x12>
   812fc:	2b40      	cmp	r3, #64	; 0x40
   812fe:	d004      	beq.n	8130a <naeusb_setup_in_received+0x1a>
   81300:	e007      	b.n	81312 <naeusb_setup_in_received+0x22>
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
   81302:	4b06      	ldr	r3, [pc, #24]	; (8131c <naeusb_setup_in_received+0x2c>)
   81304:	4798      	blx	r3
   81306:	4603      	mov	r3, r0
   81308:	e004      	b.n	81314 <naeusb_setup_in_received+0x24>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   8130a:	4b05      	ldr	r3, [pc, #20]	; (81320 <naeusb_setup_in_received+0x30>)
   8130c:	4798      	blx	r3
   8130e:	4603      	mov	r3, r0
   81310:	e000      	b.n	81314 <naeusb_setup_in_received+0x24>
            break;
    }
    return false;
   81312:	2300      	movs	r3, #0
}
   81314:	4618      	mov	r0, r3
   81316:	bd80      	pop	{r7, pc}
   81318:	20003740 	.word	0x20003740
   8131c:	0008123d 	.word	0x0008123d
   81320:	00081271 	.word	0x00081271

00081324 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81324:	b580      	push	{r7, lr}
   81326:	af00      	add	r7, sp, #0
    naeusb_add_in_handler(naeusb_setup_in_received);
   81328:	4803      	ldr	r0, [pc, #12]	; (81338 <naeusb_register_handlers+0x14>)
   8132a:	4b04      	ldr	r3, [pc, #16]	; (8133c <naeusb_register_handlers+0x18>)
   8132c:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   8132e:	4804      	ldr	r0, [pc, #16]	; (81340 <naeusb_register_handlers+0x1c>)
   81330:	4b04      	ldr	r3, [pc, #16]	; (81344 <naeusb_register_handlers+0x20>)
   81332:	4798      	blx	r3
   81334:	bf00      	nop
   81336:	bd80      	pop	{r7, pc}
   81338:	000812f1 	.word	0x000812f1
   8133c:	00080e11 	.word	0x00080e11
   81340:	000812c9 	.word	0x000812c9
   81344:	00080e51 	.word	0x00080e51

00081348 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   81348:	b480      	push	{r7}
   8134a:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   8134c:	4b02      	ldr	r3, [pc, #8]	; (81358 <udc_get_string_serial_name+0x10>)
	}
   8134e:	4618      	mov	r0, r3
   81350:	46bd      	mov	sp, r7
   81352:	bc80      	pop	{r7}
   81354:	4770      	bx	lr
   81356:	bf00      	nop
   81358:	20000270 	.word	0x20000270

0008135c <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   8135c:	b480      	push	{r7}
   8135e:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   81360:	4b02      	ldr	r3, [pc, #8]	; (8136c <udc_get_interface_desc+0x10>)
   81362:	681b      	ldr	r3, [r3, #0]
}
   81364:	4618      	mov	r0, r3
   81366:	46bd      	mov	sp, r7
   81368:	bc80      	pop	{r7}
   8136a:	4770      	bx	lr
   8136c:	200036c0 	.word	0x200036c0

00081370 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   81370:	b480      	push	{r7}
   81372:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   81374:	4b06      	ldr	r3, [pc, #24]	; (81390 <udc_get_eof_conf+0x20>)
   81376:	681b      	ldr	r3, [r3, #0]
   81378:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8137a:	4a05      	ldr	r2, [pc, #20]	; (81390 <udc_get_eof_conf+0x20>)
   8137c:	6812      	ldr	r2, [r2, #0]
   8137e:	6812      	ldr	r2, [r2, #0]
   81380:	8852      	ldrh	r2, [r2, #2]
   81382:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81384:	4413      	add	r3, r2
}
   81386:	4618      	mov	r0, r3
   81388:	46bd      	mov	sp, r7
   8138a:	bc80      	pop	{r7}
   8138c:	4770      	bx	lr
   8138e:	bf00      	nop
   81390:	200036bc 	.word	0x200036bc

00081394 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   81394:	b580      	push	{r7, lr}
   81396:	b084      	sub	sp, #16
   81398:	af00      	add	r7, sp, #0
   8139a:	6078      	str	r0, [r7, #4]
   8139c:	460b      	mov	r3, r1
   8139e:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   813a0:	4b12      	ldr	r3, [pc, #72]	; (813ec <udc_next_desc_in_iface+0x58>)
   813a2:	4798      	blx	r3
   813a4:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   813a6:	687b      	ldr	r3, [r7, #4]
   813a8:	781b      	ldrb	r3, [r3, #0]
   813aa:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   813ac:	687b      	ldr	r3, [r7, #4]
   813ae:	4413      	add	r3, r2
   813b0:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   813b2:	e010      	b.n	813d6 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   813b4:	687b      	ldr	r3, [r7, #4]
   813b6:	785b      	ldrb	r3, [r3, #1]
   813b8:	2b04      	cmp	r3, #4
   813ba:	d011      	beq.n	813e0 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   813bc:	687b      	ldr	r3, [r7, #4]
   813be:	785b      	ldrb	r3, [r3, #1]
   813c0:	78fa      	ldrb	r2, [r7, #3]
   813c2:	429a      	cmp	r2, r3
   813c4:	d101      	bne.n	813ca <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   813c6:	687b      	ldr	r3, [r7, #4]
   813c8:	e00c      	b.n	813e4 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   813ca:	687b      	ldr	r3, [r7, #4]
   813cc:	781b      	ldrb	r3, [r3, #0]
   813ce:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   813d0:	687b      	ldr	r3, [r7, #4]
   813d2:	4413      	add	r3, r2
   813d4:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   813d6:	68fa      	ldr	r2, [r7, #12]
   813d8:	687b      	ldr	r3, [r7, #4]
   813da:	429a      	cmp	r2, r3
   813dc:	d8ea      	bhi.n	813b4 <udc_next_desc_in_iface+0x20>
   813de:	e000      	b.n	813e2 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   813e0:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   813e2:	2300      	movs	r3, #0
}
   813e4:	4618      	mov	r0, r3
   813e6:	3710      	adds	r7, #16
   813e8:	46bd      	mov	sp, r7
   813ea:	bd80      	pop	{r7, pc}
   813ec:	00081371 	.word	0x00081371

000813f0 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   813f0:	b580      	push	{r7, lr}
   813f2:	b084      	sub	sp, #16
   813f4:	af00      	add	r7, sp, #0
   813f6:	4603      	mov	r3, r0
   813f8:	460a      	mov	r2, r1
   813fa:	71fb      	strb	r3, [r7, #7]
   813fc:	4613      	mov	r3, r2
   813fe:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   81400:	4b1e      	ldr	r3, [pc, #120]	; (8147c <udc_update_iface_desc+0x8c>)
   81402:	781b      	ldrb	r3, [r3, #0]
   81404:	2b00      	cmp	r3, #0
   81406:	d101      	bne.n	8140c <udc_update_iface_desc+0x1c>
		return false;
   81408:	2300      	movs	r3, #0
   8140a:	e032      	b.n	81472 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8140c:	4b1c      	ldr	r3, [pc, #112]	; (81480 <udc_update_iface_desc+0x90>)
   8140e:	681b      	ldr	r3, [r3, #0]
   81410:	681b      	ldr	r3, [r3, #0]
   81412:	791b      	ldrb	r3, [r3, #4]
   81414:	79fa      	ldrb	r2, [r7, #7]
   81416:	429a      	cmp	r2, r3
   81418:	d301      	bcc.n	8141e <udc_update_iface_desc+0x2e>
		return false;
   8141a:	2300      	movs	r3, #0
   8141c:	e029      	b.n	81472 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8141e:	4b18      	ldr	r3, [pc, #96]	; (81480 <udc_update_iface_desc+0x90>)
   81420:	681b      	ldr	r3, [r3, #0]
   81422:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81424:	4a17      	ldr	r2, [pc, #92]	; (81484 <udc_update_iface_desc+0x94>)
   81426:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   81428:	4b17      	ldr	r3, [pc, #92]	; (81488 <udc_update_iface_desc+0x98>)
   8142a:	4798      	blx	r3
   8142c:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8142e:	e01a      	b.n	81466 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81430:	4b14      	ldr	r3, [pc, #80]	; (81484 <udc_update_iface_desc+0x94>)
   81432:	681b      	ldr	r3, [r3, #0]
   81434:	785b      	ldrb	r3, [r3, #1]
   81436:	2b04      	cmp	r3, #4
   81438:	d10d      	bne.n	81456 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8143a:	4b12      	ldr	r3, [pc, #72]	; (81484 <udc_update_iface_desc+0x94>)
   8143c:	681b      	ldr	r3, [r3, #0]
   8143e:	789b      	ldrb	r3, [r3, #2]
   81440:	79fa      	ldrb	r2, [r7, #7]
   81442:	429a      	cmp	r2, r3
   81444:	d107      	bne.n	81456 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   81446:	4b0f      	ldr	r3, [pc, #60]	; (81484 <udc_update_iface_desc+0x94>)
   81448:	681b      	ldr	r3, [r3, #0]
   8144a:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8144c:	79ba      	ldrb	r2, [r7, #6]
   8144e:	429a      	cmp	r2, r3
   81450:	d101      	bne.n	81456 <udc_update_iface_desc+0x66>
				return true; // Interface found
   81452:	2301      	movs	r3, #1
   81454:	e00d      	b.n	81472 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81456:	4b0b      	ldr	r3, [pc, #44]	; (81484 <udc_update_iface_desc+0x94>)
   81458:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   8145a:	4a0a      	ldr	r2, [pc, #40]	; (81484 <udc_update_iface_desc+0x94>)
   8145c:	6812      	ldr	r2, [r2, #0]
   8145e:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81460:	4413      	add	r3, r2
   81462:	4a08      	ldr	r2, [pc, #32]	; (81484 <udc_update_iface_desc+0x94>)
   81464:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   81466:	4b07      	ldr	r3, [pc, #28]	; (81484 <udc_update_iface_desc+0x94>)
   81468:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   8146a:	68fa      	ldr	r2, [r7, #12]
   8146c:	429a      	cmp	r2, r3
   8146e:	d8df      	bhi.n	81430 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   81470:	2300      	movs	r3, #0
}
   81472:	4618      	mov	r0, r3
   81474:	3710      	adds	r7, #16
   81476:	46bd      	mov	sp, r7
   81478:	bd80      	pop	{r7, pc}
   8147a:	bf00      	nop
   8147c:	200036ba 	.word	0x200036ba
   81480:	200036bc 	.word	0x200036bc
   81484:	200036c0 	.word	0x200036c0
   81488:	00081371 	.word	0x00081371

0008148c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   8148c:	b580      	push	{r7, lr}
   8148e:	b084      	sub	sp, #16
   81490:	af00      	add	r7, sp, #0
   81492:	4603      	mov	r3, r0
   81494:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81496:	79fb      	ldrb	r3, [r7, #7]
   81498:	2100      	movs	r1, #0
   8149a:	4618      	mov	r0, r3
   8149c:	4b1e      	ldr	r3, [pc, #120]	; (81518 <udc_iface_disable+0x8c>)
   8149e:	4798      	blx	r3
   814a0:	4603      	mov	r3, r0
   814a2:	f083 0301 	eor.w	r3, r3, #1
   814a6:	b2db      	uxtb	r3, r3
   814a8:	2b00      	cmp	r3, #0
   814aa:	d001      	beq.n	814b0 <udc_iface_disable+0x24>
		return false;
   814ac:	2300      	movs	r3, #0
   814ae:	e02f      	b.n	81510 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   814b0:	4b1a      	ldr	r3, [pc, #104]	; (8151c <udc_iface_disable+0x90>)
   814b2:	681b      	ldr	r3, [r3, #0]
   814b4:	685a      	ldr	r2, [r3, #4]
   814b6:	79fb      	ldrb	r3, [r7, #7]
   814b8:	009b      	lsls	r3, r3, #2
   814ba:	4413      	add	r3, r2
   814bc:	681b      	ldr	r3, [r3, #0]
   814be:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   814c0:	68bb      	ldr	r3, [r7, #8]
   814c2:	68db      	ldr	r3, [r3, #12]
   814c4:	4798      	blx	r3
   814c6:	4603      	mov	r3, r0
   814c8:	461a      	mov	r2, r3
   814ca:	79fb      	ldrb	r3, [r7, #7]
   814cc:	4611      	mov	r1, r2
   814ce:	4618      	mov	r0, r3
   814d0:	4b11      	ldr	r3, [pc, #68]	; (81518 <udc_iface_disable+0x8c>)
   814d2:	4798      	blx	r3
   814d4:	4603      	mov	r3, r0
   814d6:	f083 0301 	eor.w	r3, r3, #1
   814da:	b2db      	uxtb	r3, r3
   814dc:	2b00      	cmp	r3, #0
   814de:	d001      	beq.n	814e4 <udc_iface_disable+0x58>
		return false;
   814e0:	2300      	movs	r3, #0
   814e2:	e015      	b.n	81510 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   814e4:	4b0e      	ldr	r3, [pc, #56]	; (81520 <udc_iface_disable+0x94>)
   814e6:	681b      	ldr	r3, [r3, #0]
   814e8:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   814ea:	2105      	movs	r1, #5
   814ec:	68f8      	ldr	r0, [r7, #12]
   814ee:	4b0d      	ldr	r3, [pc, #52]	; (81524 <udc_iface_disable+0x98>)
   814f0:	4798      	blx	r3
   814f2:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   814f4:	68fb      	ldr	r3, [r7, #12]
   814f6:	2b00      	cmp	r3, #0
   814f8:	d005      	beq.n	81506 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   814fa:	68fb      	ldr	r3, [r7, #12]
   814fc:	789b      	ldrb	r3, [r3, #2]
   814fe:	4618      	mov	r0, r3
   81500:	4b09      	ldr	r3, [pc, #36]	; (81528 <udc_iface_disable+0x9c>)
   81502:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81504:	e7f1      	b.n	814ea <udc_iface_disable+0x5e>
				break;
   81506:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   81508:	68bb      	ldr	r3, [r7, #8]
   8150a:	685b      	ldr	r3, [r3, #4]
   8150c:	4798      	blx	r3
	return true;
   8150e:	2301      	movs	r3, #1
}
   81510:	4618      	mov	r0, r3
   81512:	3710      	adds	r7, #16
   81514:	46bd      	mov	sp, r7
   81516:	bd80      	pop	{r7, pc}
   81518:	000813f1 	.word	0x000813f1
   8151c:	200036bc 	.word	0x200036bc
   81520:	200036c0 	.word	0x200036c0
   81524:	00081395 	.word	0x00081395
   81528:	00083035 	.word	0x00083035

0008152c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   8152c:	b580      	push	{r7, lr}
   8152e:	b084      	sub	sp, #16
   81530:	af00      	add	r7, sp, #0
   81532:	4603      	mov	r3, r0
   81534:	460a      	mov	r2, r1
   81536:	71fb      	strb	r3, [r7, #7]
   81538:	4613      	mov	r3, r2
   8153a:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8153c:	79ba      	ldrb	r2, [r7, #6]
   8153e:	79fb      	ldrb	r3, [r7, #7]
   81540:	4611      	mov	r1, r2
   81542:	4618      	mov	r0, r3
   81544:	4b1a      	ldr	r3, [pc, #104]	; (815b0 <udc_iface_enable+0x84>)
   81546:	4798      	blx	r3
   81548:	4603      	mov	r3, r0
   8154a:	f083 0301 	eor.w	r3, r3, #1
   8154e:	b2db      	uxtb	r3, r3
   81550:	2b00      	cmp	r3, #0
   81552:	d001      	beq.n	81558 <udc_iface_enable+0x2c>
		return false;
   81554:	2300      	movs	r3, #0
   81556:	e027      	b.n	815a8 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81558:	4b16      	ldr	r3, [pc, #88]	; (815b4 <udc_iface_enable+0x88>)
   8155a:	681b      	ldr	r3, [r3, #0]
   8155c:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8155e:	2105      	movs	r1, #5
   81560:	68f8      	ldr	r0, [r7, #12]
   81562:	4b15      	ldr	r3, [pc, #84]	; (815b8 <udc_iface_enable+0x8c>)
   81564:	4798      	blx	r3
   81566:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   81568:	68fb      	ldr	r3, [r7, #12]
   8156a:	2b00      	cmp	r3, #0
   8156c:	d011      	beq.n	81592 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8156e:	68fb      	ldr	r3, [r7, #12]
   81570:	7898      	ldrb	r0, [r3, #2]
   81572:	68fb      	ldr	r3, [r7, #12]
   81574:	78d9      	ldrb	r1, [r3, #3]
   81576:	68fb      	ldr	r3, [r7, #12]
   81578:	889b      	ldrh	r3, [r3, #4]
   8157a:	b29b      	uxth	r3, r3
   8157c:	461a      	mov	r2, r3
   8157e:	4b0f      	ldr	r3, [pc, #60]	; (815bc <udc_iface_enable+0x90>)
   81580:	4798      	blx	r3
   81582:	4603      	mov	r3, r0
   81584:	f083 0301 	eor.w	r3, r3, #1
   81588:	b2db      	uxtb	r3, r3
   8158a:	2b00      	cmp	r3, #0
   8158c:	d0e7      	beq.n	8155e <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   8158e:	2300      	movs	r3, #0
   81590:	e00a      	b.n	815a8 <udc_iface_enable+0x7c>
			break;
   81592:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81594:	4b0a      	ldr	r3, [pc, #40]	; (815c0 <udc_iface_enable+0x94>)
   81596:	681b      	ldr	r3, [r3, #0]
   81598:	685a      	ldr	r2, [r3, #4]
   8159a:	79fb      	ldrb	r3, [r7, #7]
   8159c:	009b      	lsls	r3, r3, #2
   8159e:	4413      	add	r3, r2
   815a0:	681b      	ldr	r3, [r3, #0]
   815a2:	681b      	ldr	r3, [r3, #0]
   815a4:	4798      	blx	r3
   815a6:	4603      	mov	r3, r0
}
   815a8:	4618      	mov	r0, r3
   815aa:	3710      	adds	r7, #16
   815ac:	46bd      	mov	sp, r7
   815ae:	bd80      	pop	{r7, pc}
   815b0:	000813f1 	.word	0x000813f1
   815b4:	200036c0 	.word	0x200036c0
   815b8:	00081395 	.word	0x00081395
   815bc:	00082c7d 	.word	0x00082c7d
   815c0:	200036bc 	.word	0x200036bc

000815c4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   815c4:	b580      	push	{r7, lr}
   815c6:	af00      	add	r7, sp, #0
	udd_enable();
   815c8:	4b01      	ldr	r3, [pc, #4]	; (815d0 <udc_start+0xc>)
   815ca:	4798      	blx	r3
}
   815cc:	bf00      	nop
   815ce:	bd80      	pop	{r7, pc}
   815d0:	00082a19 	.word	0x00082a19

000815d4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   815d4:	b580      	push	{r7, lr}
   815d6:	b082      	sub	sp, #8
   815d8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   815da:	4b0f      	ldr	r3, [pc, #60]	; (81618 <udc_reset+0x44>)
   815dc:	781b      	ldrb	r3, [r3, #0]
   815de:	2b00      	cmp	r3, #0
   815e0:	d010      	beq.n	81604 <udc_reset+0x30>
		for (iface_num = 0;
   815e2:	2300      	movs	r3, #0
   815e4:	71fb      	strb	r3, [r7, #7]
   815e6:	e006      	b.n	815f6 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   815e8:	79fb      	ldrb	r3, [r7, #7]
   815ea:	4618      	mov	r0, r3
   815ec:	4b0b      	ldr	r3, [pc, #44]	; (8161c <udc_reset+0x48>)
   815ee:	4798      	blx	r3
				iface_num++) {
   815f0:	79fb      	ldrb	r3, [r7, #7]
   815f2:	3301      	adds	r3, #1
   815f4:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   815f6:	4b0a      	ldr	r3, [pc, #40]	; (81620 <udc_reset+0x4c>)
   815f8:	681b      	ldr	r3, [r3, #0]
   815fa:	681b      	ldr	r3, [r3, #0]
   815fc:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   815fe:	79fa      	ldrb	r2, [r7, #7]
   81600:	429a      	cmp	r2, r3
   81602:	d3f1      	bcc.n	815e8 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   81604:	4b04      	ldr	r3, [pc, #16]	; (81618 <udc_reset+0x44>)
   81606:	2200      	movs	r2, #0
   81608:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   8160a:	4b06      	ldr	r3, [pc, #24]	; (81624 <udc_reset+0x50>)
   8160c:	2200      	movs	r2, #0
   8160e:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   81610:	bf00      	nop
   81612:	3708      	adds	r7, #8
   81614:	46bd      	mov	sp, r7
   81616:	bd80      	pop	{r7, pc}
   81618:	200036ba 	.word	0x200036ba
   8161c:	0008148d 	.word	0x0008148d
   81620:	200036bc 	.word	0x200036bc
   81624:	200036b8 	.word	0x200036b8

00081628 <udc_sof_notify>:

void udc_sof_notify(void)
{
   81628:	b580      	push	{r7, lr}
   8162a:	b082      	sub	sp, #8
   8162c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8162e:	4b14      	ldr	r3, [pc, #80]	; (81680 <udc_sof_notify+0x58>)
   81630:	781b      	ldrb	r3, [r3, #0]
   81632:	2b00      	cmp	r3, #0
   81634:	d01f      	beq.n	81676 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   81636:	2300      	movs	r3, #0
   81638:	71fb      	strb	r3, [r7, #7]
   8163a:	e015      	b.n	81668 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8163c:	4b11      	ldr	r3, [pc, #68]	; (81684 <udc_sof_notify+0x5c>)
   8163e:	681b      	ldr	r3, [r3, #0]
   81640:	685a      	ldr	r2, [r3, #4]
   81642:	79fb      	ldrb	r3, [r7, #7]
   81644:	009b      	lsls	r3, r3, #2
   81646:	4413      	add	r3, r2
   81648:	681b      	ldr	r3, [r3, #0]
   8164a:	691b      	ldr	r3, [r3, #16]
   8164c:	2b00      	cmp	r3, #0
   8164e:	d008      	beq.n	81662 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   81650:	4b0c      	ldr	r3, [pc, #48]	; (81684 <udc_sof_notify+0x5c>)
   81652:	681b      	ldr	r3, [r3, #0]
   81654:	685a      	ldr	r2, [r3, #4]
   81656:	79fb      	ldrb	r3, [r7, #7]
   81658:	009b      	lsls	r3, r3, #2
   8165a:	4413      	add	r3, r2
   8165c:	681b      	ldr	r3, [r3, #0]
   8165e:	691b      	ldr	r3, [r3, #16]
   81660:	4798      	blx	r3
				iface_num++) {
   81662:	79fb      	ldrb	r3, [r7, #7]
   81664:	3301      	adds	r3, #1
   81666:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81668:	4b06      	ldr	r3, [pc, #24]	; (81684 <udc_sof_notify+0x5c>)
   8166a:	681b      	ldr	r3, [r3, #0]
   8166c:	681b      	ldr	r3, [r3, #0]
   8166e:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   81670:	79fa      	ldrb	r2, [r7, #7]
   81672:	429a      	cmp	r2, r3
   81674:	d3e2      	bcc.n	8163c <udc_sof_notify+0x14>
			}
		}
	}
}
   81676:	bf00      	nop
   81678:	3708      	adds	r7, #8
   8167a:	46bd      	mov	sp, r7
   8167c:	bd80      	pop	{r7, pc}
   8167e:	bf00      	nop
   81680:	200036ba 	.word	0x200036ba
   81684:	200036bc 	.word	0x200036bc

00081688 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   81688:	b580      	push	{r7, lr}
   8168a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8168c:	4b06      	ldr	r3, [pc, #24]	; (816a8 <udc_req_std_dev_get_status+0x20>)
   8168e:	88db      	ldrh	r3, [r3, #6]
   81690:	2b02      	cmp	r3, #2
   81692:	d001      	beq.n	81698 <udc_req_std_dev_get_status+0x10>
		return false;
   81694:	2300      	movs	r3, #0
   81696:	e004      	b.n	816a2 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81698:	2102      	movs	r1, #2
   8169a:	4804      	ldr	r0, [pc, #16]	; (816ac <udc_req_std_dev_get_status+0x24>)
   8169c:	4b04      	ldr	r3, [pc, #16]	; (816b0 <udc_req_std_dev_get_status+0x28>)
   8169e:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   816a0:	2301      	movs	r3, #1
}
   816a2:	4618      	mov	r0, r3
   816a4:	bd80      	pop	{r7, pc}
   816a6:	bf00      	nop
   816a8:	20003740 	.word	0x20003740
   816ac:	200036b8 	.word	0x200036b8
   816b0:	00082c55 	.word	0x00082c55

000816b4 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   816b4:	b580      	push	{r7, lr}
   816b6:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   816b8:	4b0b      	ldr	r3, [pc, #44]	; (816e8 <udc_req_std_ep_get_status+0x34>)
   816ba:	88db      	ldrh	r3, [r3, #6]
   816bc:	2b02      	cmp	r3, #2
   816be:	d001      	beq.n	816c4 <udc_req_std_ep_get_status+0x10>
		return false;
   816c0:	2300      	movs	r3, #0
   816c2:	e00e      	b.n	816e2 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   816c4:	4b08      	ldr	r3, [pc, #32]	; (816e8 <udc_req_std_ep_get_status+0x34>)
   816c6:	889b      	ldrh	r3, [r3, #4]
   816c8:	b2db      	uxtb	r3, r3
   816ca:	4618      	mov	r0, r3
   816cc:	4b07      	ldr	r3, [pc, #28]	; (816ec <udc_req_std_ep_get_status+0x38>)
   816ce:	4798      	blx	r3
   816d0:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   816d2:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   816d4:	4b06      	ldr	r3, [pc, #24]	; (816f0 <udc_req_std_ep_get_status+0x3c>)
   816d6:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   816d8:	2102      	movs	r1, #2
   816da:	4805      	ldr	r0, [pc, #20]	; (816f0 <udc_req_std_ep_get_status+0x3c>)
   816dc:	4b05      	ldr	r3, [pc, #20]	; (816f4 <udc_req_std_ep_get_status+0x40>)
   816de:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   816e0:	2301      	movs	r3, #1
}
   816e2:	4618      	mov	r0, r3
   816e4:	bd80      	pop	{r7, pc}
   816e6:	bf00      	nop
   816e8:	20003740 	.word	0x20003740
   816ec:	000830b5 	.word	0x000830b5
   816f0:	200036c4 	.word	0x200036c4
   816f4:	00082c55 	.word	0x00082c55

000816f8 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   816f8:	b480      	push	{r7}
   816fa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   816fc:	4b0b      	ldr	r3, [pc, #44]	; (8172c <udc_req_std_dev_clear_feature+0x34>)
   816fe:	88db      	ldrh	r3, [r3, #6]
   81700:	2b00      	cmp	r3, #0
   81702:	d001      	beq.n	81708 <udc_req_std_dev_clear_feature+0x10>
		return false;
   81704:	2300      	movs	r3, #0
   81706:	e00d      	b.n	81724 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81708:	4b08      	ldr	r3, [pc, #32]	; (8172c <udc_req_std_dev_clear_feature+0x34>)
   8170a:	885b      	ldrh	r3, [r3, #2]
   8170c:	2b01      	cmp	r3, #1
   8170e:	d108      	bne.n	81722 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81710:	4b07      	ldr	r3, [pc, #28]	; (81730 <udc_req_std_dev_clear_feature+0x38>)
   81712:	881b      	ldrh	r3, [r3, #0]
   81714:	f023 0302 	bic.w	r3, r3, #2
   81718:	b29a      	uxth	r2, r3
   8171a:	4b05      	ldr	r3, [pc, #20]	; (81730 <udc_req_std_dev_clear_feature+0x38>)
   8171c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   8171e:	2301      	movs	r3, #1
   81720:	e000      	b.n	81724 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   81722:	2300      	movs	r3, #0
}
   81724:	4618      	mov	r0, r3
   81726:	46bd      	mov	sp, r7
   81728:	bc80      	pop	{r7}
   8172a:	4770      	bx	lr
   8172c:	20003740 	.word	0x20003740
   81730:	200036b8 	.word	0x200036b8

00081734 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   81734:	b580      	push	{r7, lr}
   81736:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81738:	4b0a      	ldr	r3, [pc, #40]	; (81764 <udc_req_std_ep_clear_feature+0x30>)
   8173a:	88db      	ldrh	r3, [r3, #6]
   8173c:	2b00      	cmp	r3, #0
   8173e:	d001      	beq.n	81744 <udc_req_std_ep_clear_feature+0x10>
		return false;
   81740:	2300      	movs	r3, #0
   81742:	e00c      	b.n	8175e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81744:	4b07      	ldr	r3, [pc, #28]	; (81764 <udc_req_std_ep_clear_feature+0x30>)
   81746:	885b      	ldrh	r3, [r3, #2]
   81748:	2b00      	cmp	r3, #0
   8174a:	d107      	bne.n	8175c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8174c:	4b05      	ldr	r3, [pc, #20]	; (81764 <udc_req_std_ep_clear_feature+0x30>)
   8174e:	889b      	ldrh	r3, [r3, #4]
   81750:	b2db      	uxtb	r3, r3
   81752:	4618      	mov	r0, r3
   81754:	4b04      	ldr	r3, [pc, #16]	; (81768 <udc_req_std_ep_clear_feature+0x34>)
   81756:	4798      	blx	r3
   81758:	4603      	mov	r3, r0
   8175a:	e000      	b.n	8175e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   8175c:	2300      	movs	r3, #0
}
   8175e:	4618      	mov	r0, r3
   81760:	bd80      	pop	{r7, pc}
   81762:	bf00      	nop
   81764:	20003740 	.word	0x20003740
   81768:	00083231 	.word	0x00083231

0008176c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   8176c:	b580      	push	{r7, lr}
   8176e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81770:	4b26      	ldr	r3, [pc, #152]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   81772:	88db      	ldrh	r3, [r3, #6]
   81774:	2b00      	cmp	r3, #0
   81776:	d001      	beq.n	8177c <udc_req_std_dev_set_feature+0x10>
		return false;
   81778:	2300      	movs	r3, #0
   8177a:	e045      	b.n	81808 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   8177c:	4b23      	ldr	r3, [pc, #140]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   8177e:	885b      	ldrh	r3, [r3, #2]
   81780:	2b01      	cmp	r3, #1
   81782:	d002      	beq.n	8178a <udc_req_std_dev_set_feature+0x1e>
   81784:	2b02      	cmp	r3, #2
   81786:	d002      	beq.n	8178e <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   81788:	e03d      	b.n	81806 <udc_req_std_dev_set_feature+0x9a>
		return false;
   8178a:	2300      	movs	r3, #0
   8178c:	e03c      	b.n	81808 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   8178e:	4b20      	ldr	r3, [pc, #128]	; (81810 <udc_req_std_dev_set_feature+0xa4>)
   81790:	4798      	blx	r3
   81792:	4603      	mov	r3, r0
   81794:	f083 0301 	eor.w	r3, r3, #1
   81798:	b2db      	uxtb	r3, r3
   8179a:	2b00      	cmp	r3, #0
   8179c:	d130      	bne.n	81800 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8179e:	4b1b      	ldr	r3, [pc, #108]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   817a0:	889b      	ldrh	r3, [r3, #4]
   817a2:	b2db      	uxtb	r3, r3
   817a4:	2b00      	cmp	r3, #0
   817a6:	d12d      	bne.n	81804 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   817a8:	4b1a      	ldr	r3, [pc, #104]	; (81814 <udc_req_std_dev_set_feature+0xa8>)
   817aa:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   817ac:	4b17      	ldr	r3, [pc, #92]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   817ae:	889b      	ldrh	r3, [r3, #4]
   817b0:	0a1b      	lsrs	r3, r3, #8
   817b2:	b29b      	uxth	r3, r3
   817b4:	b2db      	uxtb	r3, r3
   817b6:	3b01      	subs	r3, #1
   817b8:	2b03      	cmp	r3, #3
   817ba:	d81f      	bhi.n	817fc <udc_req_std_dev_set_feature+0x90>
   817bc:	a201      	add	r2, pc, #4	; (adr r2, 817c4 <udc_req_std_dev_set_feature+0x58>)
   817be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817c2:	bf00      	nop
   817c4:	000817d5 	.word	0x000817d5
   817c8:	000817df 	.word	0x000817df
   817cc:	000817e9 	.word	0x000817e9
   817d0:	000817f3 	.word	0x000817f3
			udd_g_ctrlreq.callback = udd_test_mode_j;
   817d4:	4b0d      	ldr	r3, [pc, #52]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   817d6:	4a10      	ldr	r2, [pc, #64]	; (81818 <udc_req_std_dev_set_feature+0xac>)
   817d8:	611a      	str	r2, [r3, #16]
			return true;
   817da:	2301      	movs	r3, #1
   817dc:	e014      	b.n	81808 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   817de:	4b0b      	ldr	r3, [pc, #44]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   817e0:	4a0e      	ldr	r2, [pc, #56]	; (8181c <udc_req_std_dev_set_feature+0xb0>)
   817e2:	611a      	str	r2, [r3, #16]
			return true;
   817e4:	2301      	movs	r3, #1
   817e6:	e00f      	b.n	81808 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   817e8:	4b08      	ldr	r3, [pc, #32]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   817ea:	4a0d      	ldr	r2, [pc, #52]	; (81820 <udc_req_std_dev_set_feature+0xb4>)
   817ec:	611a      	str	r2, [r3, #16]
			return true;
   817ee:	2301      	movs	r3, #1
   817f0:	e00a      	b.n	81808 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   817f2:	4b06      	ldr	r3, [pc, #24]	; (8180c <udc_req_std_dev_set_feature+0xa0>)
   817f4:	4a0b      	ldr	r2, [pc, #44]	; (81824 <udc_req_std_dev_set_feature+0xb8>)
   817f6:	611a      	str	r2, [r3, #16]
			return true;
   817f8:	2301      	movs	r3, #1
   817fa:	e005      	b.n	81808 <udc_req_std_dev_set_feature+0x9c>
			break;
   817fc:	bf00      	nop
		break;
   817fe:	e002      	b.n	81806 <udc_req_std_dev_set_feature+0x9a>
			break;
   81800:	bf00      	nop
   81802:	e000      	b.n	81806 <udc_req_std_dev_set_feature+0x9a>
			break;
   81804:	bf00      	nop
	}
	return false;
   81806:	2300      	movs	r3, #0
}
   81808:	4618      	mov	r0, r3
   8180a:	bd80      	pop	{r7, pc}
   8180c:	20003740 	.word	0x20003740
   81810:	00082bb1 	.word	0x00082bb1
   81814:	000815d5 	.word	0x000815d5
   81818:	000834f1 	.word	0x000834f1
   8181c:	00083525 	.word	0x00083525
   81820:	00083559 	.word	0x00083559
   81824:	0008357d 	.word	0x0008357d

00081828 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   81828:	b580      	push	{r7, lr}
   8182a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8182c:	4b0d      	ldr	r3, [pc, #52]	; (81864 <udc_req_std_ep_set_feature+0x3c>)
   8182e:	88db      	ldrh	r3, [r3, #6]
   81830:	2b00      	cmp	r3, #0
   81832:	d001      	beq.n	81838 <udc_req_std_ep_set_feature+0x10>
		return false;
   81834:	2300      	movs	r3, #0
   81836:	e012      	b.n	8185e <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81838:	4b0a      	ldr	r3, [pc, #40]	; (81864 <udc_req_std_ep_set_feature+0x3c>)
   8183a:	885b      	ldrh	r3, [r3, #2]
   8183c:	2b00      	cmp	r3, #0
   8183e:	d10d      	bne.n	8185c <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81840:	4b08      	ldr	r3, [pc, #32]	; (81864 <udc_req_std_ep_set_feature+0x3c>)
   81842:	889b      	ldrh	r3, [r3, #4]
   81844:	b2db      	uxtb	r3, r3
   81846:	4618      	mov	r0, r3
   81848:	4b07      	ldr	r3, [pc, #28]	; (81868 <udc_req_std_ep_set_feature+0x40>)
   8184a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8184c:	4b05      	ldr	r3, [pc, #20]	; (81864 <udc_req_std_ep_set_feature+0x3c>)
   8184e:	889b      	ldrh	r3, [r3, #4]
   81850:	b2db      	uxtb	r3, r3
   81852:	4618      	mov	r0, r3
   81854:	4b05      	ldr	r3, [pc, #20]	; (8186c <udc_req_std_ep_set_feature+0x44>)
   81856:	4798      	blx	r3
   81858:	4603      	mov	r3, r0
   8185a:	e000      	b.n	8185e <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   8185c:	2300      	movs	r3, #0
}
   8185e:	4618      	mov	r0, r3
   81860:	bd80      	pop	{r7, pc}
   81862:	bf00      	nop
   81864:	20003740 	.word	0x20003740
   81868:	00083469 	.word	0x00083469
   8186c:	0008311d 	.word	0x0008311d

00081870 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   81870:	b580      	push	{r7, lr}
   81872:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   81874:	4b05      	ldr	r3, [pc, #20]	; (8188c <udc_valid_address+0x1c>)
   81876:	885b      	ldrh	r3, [r3, #2]
   81878:	b2db      	uxtb	r3, r3
   8187a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8187e:	b2db      	uxtb	r3, r3
   81880:	4618      	mov	r0, r3
   81882:	4b03      	ldr	r3, [pc, #12]	; (81890 <udc_valid_address+0x20>)
   81884:	4798      	blx	r3
}
   81886:	bf00      	nop
   81888:	bd80      	pop	{r7, pc}
   8188a:	bf00      	nop
   8188c:	20003740 	.word	0x20003740
   81890:	00082bd5 	.word	0x00082bd5

00081894 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   81894:	b480      	push	{r7}
   81896:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81898:	4b06      	ldr	r3, [pc, #24]	; (818b4 <udc_req_std_dev_set_address+0x20>)
   8189a:	88db      	ldrh	r3, [r3, #6]
   8189c:	2b00      	cmp	r3, #0
   8189e:	d001      	beq.n	818a4 <udc_req_std_dev_set_address+0x10>
		return false;
   818a0:	2300      	movs	r3, #0
   818a2:	e003      	b.n	818ac <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   818a4:	4b03      	ldr	r3, [pc, #12]	; (818b4 <udc_req_std_dev_set_address+0x20>)
   818a6:	4a04      	ldr	r2, [pc, #16]	; (818b8 <udc_req_std_dev_set_address+0x24>)
   818a8:	611a      	str	r2, [r3, #16]
	return true;
   818aa:	2301      	movs	r3, #1
}
   818ac:	4618      	mov	r0, r3
   818ae:	46bd      	mov	sp, r7
   818b0:	bc80      	pop	{r7}
   818b2:	4770      	bx	lr
   818b4:	20003740 	.word	0x20003740
   818b8:	00081871 	.word	0x00081871

000818bc <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   818bc:	b580      	push	{r7, lr}
   818be:	b084      	sub	sp, #16
   818c0:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   818c2:	2300      	movs	r3, #0
   818c4:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   818c6:	4b29      	ldr	r3, [pc, #164]	; (8196c <udc_req_std_dev_get_str_desc+0xb0>)
   818c8:	885b      	ldrh	r3, [r3, #2]
   818ca:	b2db      	uxtb	r3, r3
   818cc:	2b03      	cmp	r3, #3
   818ce:	d820      	bhi.n	81912 <udc_req_std_dev_get_str_desc+0x56>
   818d0:	a201      	add	r2, pc, #4	; (adr r2, 818d8 <udc_req_std_dev_get_str_desc+0x1c>)
   818d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   818d6:	bf00      	nop
   818d8:	000818e9 	.word	0x000818e9
   818dc:	000818f3 	.word	0x000818f3
   818e0:	000818fd 	.word	0x000818fd
   818e4:	00081907 	.word	0x00081907
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   818e8:	2104      	movs	r1, #4
   818ea:	4821      	ldr	r0, [pc, #132]	; (81970 <udc_req_std_dev_get_str_desc+0xb4>)
   818ec:	4b21      	ldr	r3, [pc, #132]	; (81974 <udc_req_std_dev_get_str_desc+0xb8>)
   818ee:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   818f0:	e011      	b.n	81916 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   818f2:	2315      	movs	r3, #21
   818f4:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   818f6:	4b20      	ldr	r3, [pc, #128]	; (81978 <udc_req_std_dev_get_str_desc+0xbc>)
   818f8:	60bb      	str	r3, [r7, #8]
		break;
   818fa:	e00c      	b.n	81916 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   818fc:	2313      	movs	r3, #19
   818fe:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   81900:	4b1e      	ldr	r3, [pc, #120]	; (8197c <udc_req_std_dev_get_str_desc+0xc0>)
   81902:	60bb      	str	r3, [r7, #8]
		break;
   81904:	e007      	b.n	81916 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   81906:	2320      	movs	r3, #32
   81908:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   8190a:	4b1d      	ldr	r3, [pc, #116]	; (81980 <udc_req_std_dev_get_str_desc+0xc4>)
   8190c:	4798      	blx	r3
   8190e:	60b8      	str	r0, [r7, #8]
		break;
   81910:	e001      	b.n	81916 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   81912:	2300      	movs	r3, #0
   81914:	e026      	b.n	81964 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   81916:	79fb      	ldrb	r3, [r7, #7]
   81918:	2b00      	cmp	r3, #0
   8191a:	d022      	beq.n	81962 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   8191c:	2300      	movs	r3, #0
   8191e:	73fb      	strb	r3, [r7, #15]
   81920:	e00d      	b.n	8193e <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81922:	7bfb      	ldrb	r3, [r7, #15]
   81924:	68ba      	ldr	r2, [r7, #8]
   81926:	4413      	add	r3, r2
   81928:	781a      	ldrb	r2, [r3, #0]
   8192a:	7bfb      	ldrb	r3, [r7, #15]
   8192c:	b291      	uxth	r1, r2
   8192e:	4a15      	ldr	r2, [pc, #84]	; (81984 <udc_req_std_dev_get_str_desc+0xc8>)
   81930:	005b      	lsls	r3, r3, #1
   81932:	4413      	add	r3, r2
   81934:	460a      	mov	r2, r1
   81936:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   81938:	7bfb      	ldrb	r3, [r7, #15]
   8193a:	3301      	adds	r3, #1
   8193c:	73fb      	strb	r3, [r7, #15]
   8193e:	7bfa      	ldrb	r2, [r7, #15]
   81940:	79fb      	ldrb	r3, [r7, #7]
   81942:	429a      	cmp	r2, r3
   81944:	d3ed      	bcc.n	81922 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81946:	79fb      	ldrb	r3, [r7, #7]
   81948:	3301      	adds	r3, #1
   8194a:	b2db      	uxtb	r3, r3
   8194c:	005b      	lsls	r3, r3, #1
   8194e:	b2da      	uxtb	r2, r3
   81950:	4b0c      	ldr	r3, [pc, #48]	; (81984 <udc_req_std_dev_get_str_desc+0xc8>)
   81952:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   81954:	4b0b      	ldr	r3, [pc, #44]	; (81984 <udc_req_std_dev_get_str_desc+0xc8>)
   81956:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   81958:	b29b      	uxth	r3, r3
   8195a:	4619      	mov	r1, r3
   8195c:	4809      	ldr	r0, [pc, #36]	; (81984 <udc_req_std_dev_get_str_desc+0xc8>)
   8195e:	4b05      	ldr	r3, [pc, #20]	; (81974 <udc_req_std_dev_get_str_desc+0xb8>)
   81960:	4798      	blx	r3
	}

	return true;
   81962:	2301      	movs	r3, #1
}
   81964:	4618      	mov	r0, r3
   81966:	3710      	adds	r7, #16
   81968:	46bd      	mov	sp, r7
   8196a:	bd80      	pop	{r7, pc}
   8196c:	20003740 	.word	0x20003740
   81970:	20000360 	.word	0x20000360
   81974:	00082c55 	.word	0x00082c55
   81978:	20000364 	.word	0x20000364
   8197c:	2000037c 	.word	0x2000037c
   81980:	00081349 	.word	0x00081349
   81984:	20000390 	.word	0x20000390

00081988 <udc_req_std_dev_get_descriptor>:

static bool udc_req_std_dev_get_descriptor(void)
{
   81988:	b580      	push	{r7, lr}
   8198a:	b082      	sub	sp, #8
   8198c:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8198e:	4b7f      	ldr	r3, [pc, #508]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81990:	885b      	ldrh	r3, [r3, #2]
   81992:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81994:	4b7d      	ldr	r3, [pc, #500]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81996:	885b      	ldrh	r3, [r3, #2]
   81998:	0a1b      	lsrs	r3, r3, #8
   8199a:	b29b      	uxth	r3, r3
   8199c:	b2db      	uxtb	r3, r3
   8199e:	3b01      	subs	r3, #1
   819a0:	2b0e      	cmp	r3, #14
   819a2:	f200 80e0 	bhi.w	81b66 <udc_req_std_dev_get_descriptor+0x1de>
   819a6:	a201      	add	r2, pc, #4	; (adr r2, 819ac <udc_req_std_dev_get_descriptor+0x24>)
   819a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819ac:	000819e9 	.word	0x000819e9
   819b0:	00081a39 	.word	0x00081a39
   819b4:	00081b53 	.word	0x00081b53
   819b8:	00081b67 	.word	0x00081b67
   819bc:	00081b67 	.word	0x00081b67
   819c0:	00081ab3 	.word	0x00081ab3
   819c4:	00081ac9 	.word	0x00081ac9
   819c8:	00081b67 	.word	0x00081b67
   819cc:	00081b67 	.word	0x00081b67
   819d0:	00081b67 	.word	0x00081b67
   819d4:	00081b67 	.word	0x00081b67
   819d8:	00081b67 	.word	0x00081b67
   819dc:	00081b67 	.word	0x00081b67
   819e0:	00081b67 	.word	0x00081b67
   819e4:	00081b49 	.word	0x00081b49
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   819e8:	4b69      	ldr	r3, [pc, #420]	; (81b90 <udc_req_std_dev_get_descriptor+0x208>)
   819ea:	4798      	blx	r3
   819ec:	4603      	mov	r3, r0
   819ee:	f083 0301 	eor.w	r3, r3, #1
   819f2:	b2db      	uxtb	r3, r3
   819f4:	2b00      	cmp	r3, #0
   819f6:	d00a      	beq.n	81a0e <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   819f8:	4b66      	ldr	r3, [pc, #408]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   819fa:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   819fc:	4b65      	ldr	r3, [pc, #404]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   819fe:	689b      	ldr	r3, [r3, #8]
   81a00:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   81a02:	b29b      	uxth	r3, r3
   81a04:	4619      	mov	r1, r3
   81a06:	4610      	mov	r0, r2
   81a08:	4b63      	ldr	r3, [pc, #396]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81a0a:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   81a0c:	e0ae      	b.n	81b6c <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81a0e:	4b61      	ldr	r3, [pc, #388]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a10:	681b      	ldr	r3, [r3, #0]
   81a12:	2200      	movs	r2, #0
   81a14:	f042 0210 	orr.w	r2, r2, #16
   81a18:	709a      	strb	r2, [r3, #2]
   81a1a:	2200      	movs	r2, #0
   81a1c:	f042 0202 	orr.w	r2, r2, #2
   81a20:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   81a22:	4b5c      	ldr	r3, [pc, #368]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a24:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   81a26:	4b5b      	ldr	r3, [pc, #364]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a28:	681b      	ldr	r3, [r3, #0]
   81a2a:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   81a2c:	b29b      	uxth	r3, r3
   81a2e:	4619      	mov	r1, r3
   81a30:	4610      	mov	r0, r2
   81a32:	4b59      	ldr	r3, [pc, #356]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81a34:	4798      	blx	r3
		break;
   81a36:	e099      	b.n	81b6c <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   81a38:	4b55      	ldr	r3, [pc, #340]	; (81b90 <udc_req_std_dev_get_descriptor+0x208>)
   81a3a:	4798      	blx	r3
   81a3c:	4603      	mov	r3, r0
   81a3e:	2b00      	cmp	r3, #0
   81a40:	d019      	beq.n	81a76 <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   81a42:	4b54      	ldr	r3, [pc, #336]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a44:	689b      	ldr	r3, [r3, #8]
   81a46:	7c5b      	ldrb	r3, [r3, #17]
   81a48:	79fa      	ldrb	r2, [r7, #7]
   81a4a:	429a      	cmp	r2, r3
   81a4c:	d301      	bcc.n	81a52 <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   81a4e:	2300      	movs	r3, #0
   81a50:	e097      	b.n	81b82 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81a52:	4b50      	ldr	r3, [pc, #320]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a54:	691a      	ldr	r2, [r3, #16]
   81a56:	79fb      	ldrb	r3, [r7, #7]
   81a58:	00db      	lsls	r3, r3, #3
   81a5a:	4413      	add	r3, r2
   81a5c:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   81a5e:	4b4d      	ldr	r3, [pc, #308]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a60:	691a      	ldr	r2, [r3, #16]
   81a62:	79fb      	ldrb	r3, [r7, #7]
   81a64:	00db      	lsls	r3, r3, #3
   81a66:	4413      	add	r3, r2
   81a68:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   81a6a:	885b      	ldrh	r3, [r3, #2]
   81a6c:	b29b      	uxth	r3, r3
   81a6e:	4619      	mov	r1, r3
   81a70:	4b49      	ldr	r3, [pc, #292]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81a72:	4798      	blx	r3
   81a74:	e018      	b.n	81aa8 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   81a76:	4b47      	ldr	r3, [pc, #284]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a78:	681b      	ldr	r3, [r3, #0]
   81a7a:	7c5b      	ldrb	r3, [r3, #17]
   81a7c:	79fa      	ldrb	r2, [r7, #7]
   81a7e:	429a      	cmp	r2, r3
   81a80:	d301      	bcc.n	81a86 <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   81a82:	2300      	movs	r3, #0
   81a84:	e07d      	b.n	81b82 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81a86:	4b43      	ldr	r3, [pc, #268]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a88:	685a      	ldr	r2, [r3, #4]
   81a8a:	79fb      	ldrb	r3, [r7, #7]
   81a8c:	00db      	lsls	r3, r3, #3
   81a8e:	4413      	add	r3, r2
   81a90:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   81a92:	4b40      	ldr	r3, [pc, #256]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81a94:	685a      	ldr	r2, [r3, #4]
   81a96:	79fb      	ldrb	r3, [r7, #7]
   81a98:	00db      	lsls	r3, r3, #3
   81a9a:	4413      	add	r3, r2
   81a9c:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   81a9e:	885b      	ldrh	r3, [r3, #2]
   81aa0:	b29b      	uxth	r3, r3
   81aa2:	4619      	mov	r1, r3
   81aa4:	4b3c      	ldr	r3, [pc, #240]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81aa6:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81aa8:	4b38      	ldr	r3, [pc, #224]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81aaa:	689b      	ldr	r3, [r3, #8]
   81aac:	2202      	movs	r2, #2
   81aae:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   81ab0:	e05c      	b.n	81b6c <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81ab2:	4b38      	ldr	r3, [pc, #224]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81ab4:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   81ab6:	4b37      	ldr	r3, [pc, #220]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81ab8:	68db      	ldr	r3, [r3, #12]
   81aba:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81abc:	b29b      	uxth	r3, r3
   81abe:	4619      	mov	r1, r3
   81ac0:	4610      	mov	r0, r2
   81ac2:	4b35      	ldr	r3, [pc, #212]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81ac4:	4798      	blx	r3
		break;
   81ac6:	e051      	b.n	81b6c <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   81ac8:	4b31      	ldr	r3, [pc, #196]	; (81b90 <udc_req_std_dev_get_descriptor+0x208>)
   81aca:	4798      	blx	r3
   81acc:	4603      	mov	r3, r0
   81ace:	f083 0301 	eor.w	r3, r3, #1
   81ad2:	b2db      	uxtb	r3, r3
   81ad4:	2b00      	cmp	r3, #0
   81ad6:	d019      	beq.n	81b0c <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   81ad8:	4b2e      	ldr	r3, [pc, #184]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81ada:	689b      	ldr	r3, [r3, #8]
   81adc:	7c5b      	ldrb	r3, [r3, #17]
   81ade:	79fa      	ldrb	r2, [r7, #7]
   81ae0:	429a      	cmp	r2, r3
   81ae2:	d301      	bcc.n	81ae8 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   81ae4:	2300      	movs	r3, #0
   81ae6:	e04c      	b.n	81b82 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81ae8:	4b2a      	ldr	r3, [pc, #168]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81aea:	691a      	ldr	r2, [r3, #16]
   81aec:	79fb      	ldrb	r3, [r7, #7]
   81aee:	00db      	lsls	r3, r3, #3
   81af0:	4413      	add	r3, r2
   81af2:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   81af4:	4b27      	ldr	r3, [pc, #156]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81af6:	691a      	ldr	r2, [r3, #16]
   81af8:	79fb      	ldrb	r3, [r7, #7]
   81afa:	00db      	lsls	r3, r3, #3
   81afc:	4413      	add	r3, r2
   81afe:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   81b00:	885b      	ldrh	r3, [r3, #2]
   81b02:	b29b      	uxth	r3, r3
   81b04:	4619      	mov	r1, r3
   81b06:	4b24      	ldr	r3, [pc, #144]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81b08:	4798      	blx	r3
   81b0a:	e018      	b.n	81b3e <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   81b0c:	4b21      	ldr	r3, [pc, #132]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81b0e:	681b      	ldr	r3, [r3, #0]
   81b10:	7c5b      	ldrb	r3, [r3, #17]
   81b12:	79fa      	ldrb	r2, [r7, #7]
   81b14:	429a      	cmp	r2, r3
   81b16:	d301      	bcc.n	81b1c <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   81b18:	2300      	movs	r3, #0
   81b1a:	e032      	b.n	81b82 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81b1c:	4b1d      	ldr	r3, [pc, #116]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81b1e:	685a      	ldr	r2, [r3, #4]
   81b20:	79fb      	ldrb	r3, [r7, #7]
   81b22:	00db      	lsls	r3, r3, #3
   81b24:	4413      	add	r3, r2
   81b26:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   81b28:	4b1a      	ldr	r3, [pc, #104]	; (81b94 <udc_req_std_dev_get_descriptor+0x20c>)
   81b2a:	685a      	ldr	r2, [r3, #4]
   81b2c:	79fb      	ldrb	r3, [r7, #7]
   81b2e:	00db      	lsls	r3, r3, #3
   81b30:	4413      	add	r3, r2
   81b32:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   81b34:	885b      	ldrh	r3, [r3, #2]
   81b36:	b29b      	uxth	r3, r3
   81b38:	4619      	mov	r1, r3
   81b3a:	4b17      	ldr	r3, [pc, #92]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81b3c:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81b3e:	4b13      	ldr	r3, [pc, #76]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81b40:	689b      	ldr	r3, [r3, #8]
   81b42:	2207      	movs	r2, #7
   81b44:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   81b46:	e011      	b.n	81b6c <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		// handle MPSSE
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   81b48:	2121      	movs	r1, #33	; 0x21
   81b4a:	4814      	ldr	r0, [pc, #80]	; (81b9c <udc_req_std_dev_get_descriptor+0x214>)
   81b4c:	4b12      	ldr	r3, [pc, #72]	; (81b98 <udc_req_std_dev_get_descriptor+0x210>)
   81b4e:	4798      	blx	r3
			sizeof(struct MS_BOS_DESCRIPTOR));
		break;
   81b50:	e00c      	b.n	81b6c <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   81b52:	4b13      	ldr	r3, [pc, #76]	; (81ba0 <udc_req_std_dev_get_descriptor+0x218>)
   81b54:	4798      	blx	r3
   81b56:	4603      	mov	r3, r0
   81b58:	f083 0301 	eor.w	r3, r3, #1
   81b5c:	b2db      	uxtb	r3, r3
   81b5e:	2b00      	cmp	r3, #0
   81b60:	d003      	beq.n	81b6a <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   81b62:	2300      	movs	r3, #0
   81b64:	e00d      	b.n	81b82 <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   81b66:	2300      	movs	r3, #0
   81b68:	e00b      	b.n	81b82 <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   81b6a:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   81b6c:	4b07      	ldr	r3, [pc, #28]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81b6e:	88da      	ldrh	r2, [r3, #6]
   81b70:	4b06      	ldr	r3, [pc, #24]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81b72:	899b      	ldrh	r3, [r3, #12]
   81b74:	429a      	cmp	r2, r3
   81b76:	d203      	bcs.n	81b80 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81b78:	4b04      	ldr	r3, [pc, #16]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81b7a:	88da      	ldrh	r2, [r3, #6]
   81b7c:	4b03      	ldr	r3, [pc, #12]	; (81b8c <udc_req_std_dev_get_descriptor+0x204>)
   81b7e:	819a      	strh	r2, [r3, #12]
	}
	return true;
   81b80:	2301      	movs	r3, #1
}
   81b82:	4618      	mov	r0, r3
   81b84:	3708      	adds	r7, #8
   81b86:	46bd      	mov	sp, r7
   81b88:	bd80      	pop	{r7, pc}
   81b8a:	bf00      	nop
   81b8c:	20003740 	.word	0x20003740
   81b90:	00082bb1 	.word	0x00082bb1
   81b94:	20000464 	.word	0x20000464
   81b98:	00082c55 	.word	0x00082c55
   81b9c:	2000033c 	.word	0x2000033c
   81ba0:	000818bd 	.word	0x000818bd

00081ba4 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   81ba4:	b580      	push	{r7, lr}
   81ba6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   81ba8:	4b06      	ldr	r3, [pc, #24]	; (81bc4 <udc_req_std_dev_get_configuration+0x20>)
   81baa:	88db      	ldrh	r3, [r3, #6]
   81bac:	2b01      	cmp	r3, #1
   81bae:	d001      	beq.n	81bb4 <udc_req_std_dev_get_configuration+0x10>
		return false;
   81bb0:	2300      	movs	r3, #0
   81bb2:	e004      	b.n	81bbe <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   81bb4:	2101      	movs	r1, #1
   81bb6:	4804      	ldr	r0, [pc, #16]	; (81bc8 <udc_req_std_dev_get_configuration+0x24>)
   81bb8:	4b04      	ldr	r3, [pc, #16]	; (81bcc <udc_req_std_dev_get_configuration+0x28>)
   81bba:	4798      	blx	r3
	return true;
   81bbc:	2301      	movs	r3, #1
}
   81bbe:	4618      	mov	r0, r3
   81bc0:	bd80      	pop	{r7, pc}
   81bc2:	bf00      	nop
   81bc4:	20003740 	.word	0x20003740
   81bc8:	200036ba 	.word	0x200036ba
   81bcc:	00082c55 	.word	0x00082c55

00081bd0 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   81bd0:	b580      	push	{r7, lr}
   81bd2:	b082      	sub	sp, #8
   81bd4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   81bd6:	4b37      	ldr	r3, [pc, #220]	; (81cb4 <udc_req_std_dev_set_configuration+0xe4>)
   81bd8:	88db      	ldrh	r3, [r3, #6]
   81bda:	2b00      	cmp	r3, #0
   81bdc:	d001      	beq.n	81be2 <udc_req_std_dev_set_configuration+0x12>
		return false;
   81bde:	2300      	movs	r3, #0
   81be0:	e063      	b.n	81caa <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   81be2:	4b35      	ldr	r3, [pc, #212]	; (81cb8 <udc_req_std_dev_set_configuration+0xe8>)
   81be4:	4798      	blx	r3
   81be6:	4603      	mov	r3, r0
   81be8:	2b00      	cmp	r3, #0
   81bea:	d101      	bne.n	81bf0 <udc_req_std_dev_set_configuration+0x20>
		return false;
   81bec:	2300      	movs	r3, #0
   81bee:	e05c      	b.n	81caa <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   81bf0:	4b32      	ldr	r3, [pc, #200]	; (81cbc <udc_req_std_dev_set_configuration+0xec>)
   81bf2:	4798      	blx	r3
   81bf4:	4603      	mov	r3, r0
   81bf6:	2b00      	cmp	r3, #0
   81bf8:	d009      	beq.n	81c0e <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81bfa:	4b2e      	ldr	r3, [pc, #184]	; (81cb4 <udc_req_std_dev_set_configuration+0xe4>)
   81bfc:	885b      	ldrh	r3, [r3, #2]
   81bfe:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   81c00:	4a2f      	ldr	r2, [pc, #188]	; (81cc0 <udc_req_std_dev_set_configuration+0xf0>)
   81c02:	6892      	ldr	r2, [r2, #8]
   81c04:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c06:	4293      	cmp	r3, r2
   81c08:	dd0b      	ble.n	81c22 <udc_req_std_dev_set_configuration+0x52>
			return false;
   81c0a:	2300      	movs	r3, #0
   81c0c:	e04d      	b.n	81caa <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c0e:	4b29      	ldr	r3, [pc, #164]	; (81cb4 <udc_req_std_dev_set_configuration+0xe4>)
   81c10:	885b      	ldrh	r3, [r3, #2]
   81c12:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   81c14:	4a2a      	ldr	r2, [pc, #168]	; (81cc0 <udc_req_std_dev_set_configuration+0xf0>)
   81c16:	6812      	ldr	r2, [r2, #0]
   81c18:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c1a:	4293      	cmp	r3, r2
   81c1c:	dd01      	ble.n	81c22 <udc_req_std_dev_set_configuration+0x52>
			return false;
   81c1e:	2300      	movs	r3, #0
   81c20:	e043      	b.n	81caa <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   81c22:	4b28      	ldr	r3, [pc, #160]	; (81cc4 <udc_req_std_dev_set_configuration+0xf4>)
   81c24:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   81c26:	4b23      	ldr	r3, [pc, #140]	; (81cb4 <udc_req_std_dev_set_configuration+0xe4>)
   81c28:	885b      	ldrh	r3, [r3, #2]
   81c2a:	b2da      	uxtb	r2, r3
   81c2c:	4b26      	ldr	r3, [pc, #152]	; (81cc8 <udc_req_std_dev_set_configuration+0xf8>)
   81c2e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   81c30:	4b25      	ldr	r3, [pc, #148]	; (81cc8 <udc_req_std_dev_set_configuration+0xf8>)
   81c32:	781b      	ldrb	r3, [r3, #0]
   81c34:	2b00      	cmp	r3, #0
   81c36:	d101      	bne.n	81c3c <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   81c38:	2301      	movs	r3, #1
   81c3a:	e036      	b.n	81caa <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   81c3c:	4b1f      	ldr	r3, [pc, #124]	; (81cbc <udc_req_std_dev_set_configuration+0xec>)
   81c3e:	4798      	blx	r3
   81c40:	4603      	mov	r3, r0
   81c42:	2b00      	cmp	r3, #0
   81c44:	d00b      	beq.n	81c5e <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81c46:	4b1e      	ldr	r3, [pc, #120]	; (81cc0 <udc_req_std_dev_set_configuration+0xf0>)
   81c48:	691a      	ldr	r2, [r3, #16]
   81c4a:	4b1f      	ldr	r3, [pc, #124]	; (81cc8 <udc_req_std_dev_set_configuration+0xf8>)
   81c4c:	781b      	ldrb	r3, [r3, #0]
   81c4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81c52:	3b01      	subs	r3, #1
   81c54:	00db      	lsls	r3, r3, #3
   81c56:	4413      	add	r3, r2
   81c58:	4a1c      	ldr	r2, [pc, #112]	; (81ccc <udc_req_std_dev_set_configuration+0xfc>)
   81c5a:	6013      	str	r3, [r2, #0]
   81c5c:	e00a      	b.n	81c74 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81c5e:	4b18      	ldr	r3, [pc, #96]	; (81cc0 <udc_req_std_dev_set_configuration+0xf0>)
   81c60:	685a      	ldr	r2, [r3, #4]
   81c62:	4b19      	ldr	r3, [pc, #100]	; (81cc8 <udc_req_std_dev_set_configuration+0xf8>)
   81c64:	781b      	ldrb	r3, [r3, #0]
   81c66:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81c6a:	3b01      	subs	r3, #1
   81c6c:	00db      	lsls	r3, r3, #3
   81c6e:	4413      	add	r3, r2
   81c70:	4a16      	ldr	r2, [pc, #88]	; (81ccc <udc_req_std_dev_set_configuration+0xfc>)
   81c72:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c74:	2300      	movs	r3, #0
   81c76:	71fb      	strb	r3, [r7, #7]
   81c78:	e00f      	b.n	81c9a <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   81c7a:	79fb      	ldrb	r3, [r7, #7]
   81c7c:	2100      	movs	r1, #0
   81c7e:	4618      	mov	r0, r3
   81c80:	4b13      	ldr	r3, [pc, #76]	; (81cd0 <udc_req_std_dev_set_configuration+0x100>)
   81c82:	4798      	blx	r3
   81c84:	4603      	mov	r3, r0
   81c86:	f083 0301 	eor.w	r3, r3, #1
   81c8a:	b2db      	uxtb	r3, r3
   81c8c:	2b00      	cmp	r3, #0
   81c8e:	d001      	beq.n	81c94 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   81c90:	2300      	movs	r3, #0
   81c92:	e00a      	b.n	81caa <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   81c94:	79fb      	ldrb	r3, [r7, #7]
   81c96:	3301      	adds	r3, #1
   81c98:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c9a:	4b0c      	ldr	r3, [pc, #48]	; (81ccc <udc_req_std_dev_set_configuration+0xfc>)
   81c9c:	681b      	ldr	r3, [r3, #0]
   81c9e:	681b      	ldr	r3, [r3, #0]
   81ca0:	791b      	ldrb	r3, [r3, #4]
   81ca2:	79fa      	ldrb	r2, [r7, #7]
   81ca4:	429a      	cmp	r2, r3
   81ca6:	d3e8      	bcc.n	81c7a <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   81ca8:	2301      	movs	r3, #1
}
   81caa:	4618      	mov	r0, r3
   81cac:	3708      	adds	r7, #8
   81cae:	46bd      	mov	sp, r7
   81cb0:	bd80      	pop	{r7, pc}
   81cb2:	bf00      	nop
   81cb4:	20003740 	.word	0x20003740
   81cb8:	00082c19 	.word	0x00082c19
   81cbc:	00082bb1 	.word	0x00082bb1
   81cc0:	20000464 	.word	0x20000464
   81cc4:	000815d5 	.word	0x000815d5
   81cc8:	200036ba 	.word	0x200036ba
   81ccc:	200036bc 	.word	0x200036bc
   81cd0:	0008152d 	.word	0x0008152d

00081cd4 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   81cd4:	b580      	push	{r7, lr}
   81cd6:	b082      	sub	sp, #8
   81cd8:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   81cda:	4b1e      	ldr	r3, [pc, #120]	; (81d54 <udc_req_std_iface_get_setting+0x80>)
   81cdc:	88db      	ldrh	r3, [r3, #6]
   81cde:	2b01      	cmp	r3, #1
   81ce0:	d001      	beq.n	81ce6 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   81ce2:	2300      	movs	r3, #0
   81ce4:	e032      	b.n	81d4c <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   81ce6:	4b1c      	ldr	r3, [pc, #112]	; (81d58 <udc_req_std_iface_get_setting+0x84>)
   81ce8:	781b      	ldrb	r3, [r3, #0]
   81cea:	2b00      	cmp	r3, #0
   81cec:	d101      	bne.n	81cf2 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   81cee:	2300      	movs	r3, #0
   81cf0:	e02c      	b.n	81d4c <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81cf2:	4b18      	ldr	r3, [pc, #96]	; (81d54 <udc_req_std_iface_get_setting+0x80>)
   81cf4:	889b      	ldrh	r3, [r3, #4]
   81cf6:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81cf8:	4b18      	ldr	r3, [pc, #96]	; (81d5c <udc_req_std_iface_get_setting+0x88>)
   81cfa:	681b      	ldr	r3, [r3, #0]
   81cfc:	681b      	ldr	r3, [r3, #0]
   81cfe:	791b      	ldrb	r3, [r3, #4]
   81d00:	79fa      	ldrb	r2, [r7, #7]
   81d02:	429a      	cmp	r2, r3
   81d04:	d301      	bcc.n	81d0a <udc_req_std_iface_get_setting+0x36>
		return false;
   81d06:	2300      	movs	r3, #0
   81d08:	e020      	b.n	81d4c <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81d0a:	79fb      	ldrb	r3, [r7, #7]
   81d0c:	2100      	movs	r1, #0
   81d0e:	4618      	mov	r0, r3
   81d10:	4b13      	ldr	r3, [pc, #76]	; (81d60 <udc_req_std_iface_get_setting+0x8c>)
   81d12:	4798      	blx	r3
   81d14:	4603      	mov	r3, r0
   81d16:	f083 0301 	eor.w	r3, r3, #1
   81d1a:	b2db      	uxtb	r3, r3
   81d1c:	2b00      	cmp	r3, #0
   81d1e:	d001      	beq.n	81d24 <udc_req_std_iface_get_setting+0x50>
		return false;
   81d20:	2300      	movs	r3, #0
   81d22:	e013      	b.n	81d4c <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81d24:	4b0d      	ldr	r3, [pc, #52]	; (81d5c <udc_req_std_iface_get_setting+0x88>)
   81d26:	681b      	ldr	r3, [r3, #0]
   81d28:	685a      	ldr	r2, [r3, #4]
   81d2a:	79fb      	ldrb	r3, [r7, #7]
   81d2c:	009b      	lsls	r3, r3, #2
   81d2e:	4413      	add	r3, r2
   81d30:	681b      	ldr	r3, [r3, #0]
   81d32:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   81d34:	683b      	ldr	r3, [r7, #0]
   81d36:	68db      	ldr	r3, [r3, #12]
   81d38:	4798      	blx	r3
   81d3a:	4603      	mov	r3, r0
   81d3c:	461a      	mov	r2, r3
   81d3e:	4b09      	ldr	r3, [pc, #36]	; (81d64 <udc_req_std_iface_get_setting+0x90>)
   81d40:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   81d42:	2101      	movs	r1, #1
   81d44:	4807      	ldr	r0, [pc, #28]	; (81d64 <udc_req_std_iface_get_setting+0x90>)
   81d46:	4b08      	ldr	r3, [pc, #32]	; (81d68 <udc_req_std_iface_get_setting+0x94>)
   81d48:	4798      	blx	r3
	return true;
   81d4a:	2301      	movs	r3, #1
}
   81d4c:	4618      	mov	r0, r3
   81d4e:	3708      	adds	r7, #8
   81d50:	46bd      	mov	sp, r7
   81d52:	bd80      	pop	{r7, pc}
   81d54:	20003740 	.word	0x20003740
   81d58:	200036ba 	.word	0x200036ba
   81d5c:	200036bc 	.word	0x200036bc
   81d60:	000813f1 	.word	0x000813f1
   81d64:	200036c6 	.word	0x200036c6
   81d68:	00082c55 	.word	0x00082c55

00081d6c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   81d6c:	b580      	push	{r7, lr}
   81d6e:	b082      	sub	sp, #8
   81d70:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   81d72:	4b14      	ldr	r3, [pc, #80]	; (81dc4 <udc_req_std_iface_set_setting+0x58>)
   81d74:	88db      	ldrh	r3, [r3, #6]
   81d76:	2b00      	cmp	r3, #0
   81d78:	d001      	beq.n	81d7e <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   81d7a:	2300      	movs	r3, #0
   81d7c:	e01e      	b.n	81dbc <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   81d7e:	4b12      	ldr	r3, [pc, #72]	; (81dc8 <udc_req_std_iface_set_setting+0x5c>)
   81d80:	781b      	ldrb	r3, [r3, #0]
   81d82:	2b00      	cmp	r3, #0
   81d84:	d101      	bne.n	81d8a <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   81d86:	2300      	movs	r3, #0
   81d88:	e018      	b.n	81dbc <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81d8a:	4b0e      	ldr	r3, [pc, #56]	; (81dc4 <udc_req_std_iface_set_setting+0x58>)
   81d8c:	889b      	ldrh	r3, [r3, #4]
   81d8e:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81d90:	4b0c      	ldr	r3, [pc, #48]	; (81dc4 <udc_req_std_iface_set_setting+0x58>)
   81d92:	885b      	ldrh	r3, [r3, #2]
   81d94:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   81d96:	79fb      	ldrb	r3, [r7, #7]
   81d98:	4618      	mov	r0, r3
   81d9a:	4b0c      	ldr	r3, [pc, #48]	; (81dcc <udc_req_std_iface_set_setting+0x60>)
   81d9c:	4798      	blx	r3
   81d9e:	4603      	mov	r3, r0
   81da0:	f083 0301 	eor.w	r3, r3, #1
   81da4:	b2db      	uxtb	r3, r3
   81da6:	2b00      	cmp	r3, #0
   81da8:	d001      	beq.n	81dae <udc_req_std_iface_set_setting+0x42>
		return false;
   81daa:	2300      	movs	r3, #0
   81dac:	e006      	b.n	81dbc <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   81dae:	79ba      	ldrb	r2, [r7, #6]
   81db0:	79fb      	ldrb	r3, [r7, #7]
   81db2:	4611      	mov	r1, r2
   81db4:	4618      	mov	r0, r3
   81db6:	4b06      	ldr	r3, [pc, #24]	; (81dd0 <udc_req_std_iface_set_setting+0x64>)
   81db8:	4798      	blx	r3
   81dba:	4603      	mov	r3, r0
}
   81dbc:	4618      	mov	r0, r3
   81dbe:	3708      	adds	r7, #8
   81dc0:	46bd      	mov	sp, r7
   81dc2:	bd80      	pop	{r7, pc}
   81dc4:	20003740 	.word	0x20003740
   81dc8:	200036ba 	.word	0x200036ba
   81dcc:	0008148d 	.word	0x0008148d
   81dd0:	0008152d 	.word	0x0008152d

00081dd4 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   81dd4:	b580      	push	{r7, lr}
   81dd6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   81dd8:	4b55      	ldr	r3, [pc, #340]	; (81f30 <udc_reqstd+0x15c>)
   81dda:	781b      	ldrb	r3, [r3, #0]
   81ddc:	b25b      	sxtb	r3, r3
   81dde:	2b00      	cmp	r3, #0
   81de0:	da44      	bge.n	81e6c <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   81de2:	4b53      	ldr	r3, [pc, #332]	; (81f30 <udc_reqstd+0x15c>)
   81de4:	88db      	ldrh	r3, [r3, #6]
   81de6:	2b00      	cmp	r3, #0
   81de8:	d101      	bne.n	81dee <udc_reqstd+0x1a>
			return false; // Error for USB host
   81dea:	2300      	movs	r3, #0
   81dec:	e09d      	b.n	81f2a <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81dee:	4b50      	ldr	r3, [pc, #320]	; (81f30 <udc_reqstd+0x15c>)
   81df0:	781b      	ldrb	r3, [r3, #0]
   81df2:	f003 031f 	and.w	r3, r3, #31
   81df6:	2b00      	cmp	r3, #0
   81df8:	d116      	bne.n	81e28 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   81dfa:	4b4d      	ldr	r3, [pc, #308]	; (81f30 <udc_reqstd+0x15c>)
   81dfc:	785b      	ldrb	r3, [r3, #1]
   81dfe:	2b08      	cmp	r3, #8
   81e00:	d00e      	beq.n	81e20 <udc_reqstd+0x4c>
   81e02:	2b08      	cmp	r3, #8
   81e04:	dc12      	bgt.n	81e2c <udc_reqstd+0x58>
   81e06:	2b00      	cmp	r3, #0
   81e08:	d002      	beq.n	81e10 <udc_reqstd+0x3c>
   81e0a:	2b06      	cmp	r3, #6
   81e0c:	d004      	beq.n	81e18 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   81e0e:	e00d      	b.n	81e2c <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   81e10:	4b48      	ldr	r3, [pc, #288]	; (81f34 <udc_reqstd+0x160>)
   81e12:	4798      	blx	r3
   81e14:	4603      	mov	r3, r0
   81e16:	e088      	b.n	81f2a <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   81e18:	4b47      	ldr	r3, [pc, #284]	; (81f38 <udc_reqstd+0x164>)
   81e1a:	4798      	blx	r3
   81e1c:	4603      	mov	r3, r0
   81e1e:	e084      	b.n	81f2a <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   81e20:	4b46      	ldr	r3, [pc, #280]	; (81f3c <udc_reqstd+0x168>)
   81e22:	4798      	blx	r3
   81e24:	4603      	mov	r3, r0
   81e26:	e080      	b.n	81f2a <udc_reqstd+0x156>
			}
		}
   81e28:	bf00      	nop
   81e2a:	e000      	b.n	81e2e <udc_reqstd+0x5a>
				break;
   81e2c:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81e2e:	4b40      	ldr	r3, [pc, #256]	; (81f30 <udc_reqstd+0x15c>)
   81e30:	781b      	ldrb	r3, [r3, #0]
   81e32:	f003 031f 	and.w	r3, r3, #31
   81e36:	2b01      	cmp	r3, #1
   81e38:	d107      	bne.n	81e4a <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   81e3a:	4b3d      	ldr	r3, [pc, #244]	; (81f30 <udc_reqstd+0x15c>)
   81e3c:	785b      	ldrb	r3, [r3, #1]
   81e3e:	2b0a      	cmp	r3, #10
   81e40:	d105      	bne.n	81e4e <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   81e42:	4b3f      	ldr	r3, [pc, #252]	; (81f40 <udc_reqstd+0x16c>)
   81e44:	4798      	blx	r3
   81e46:	4603      	mov	r3, r0
   81e48:	e06f      	b.n	81f2a <udc_reqstd+0x156>
			default:
				break;
			}
		}
   81e4a:	bf00      	nop
   81e4c:	e000      	b.n	81e50 <udc_reqstd+0x7c>
				break;
   81e4e:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81e50:	4b37      	ldr	r3, [pc, #220]	; (81f30 <udc_reqstd+0x15c>)
   81e52:	781b      	ldrb	r3, [r3, #0]
   81e54:	f003 031f 	and.w	r3, r3, #31
   81e58:	2b02      	cmp	r3, #2
   81e5a:	d160      	bne.n	81f1e <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   81e5c:	4b34      	ldr	r3, [pc, #208]	; (81f30 <udc_reqstd+0x15c>)
   81e5e:	785b      	ldrb	r3, [r3, #1]
   81e60:	2b00      	cmp	r3, #0
   81e62:	d15e      	bne.n	81f22 <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   81e64:	4b37      	ldr	r3, [pc, #220]	; (81f44 <udc_reqstd+0x170>)
   81e66:	4798      	blx	r3
   81e68:	4603      	mov	r3, r0
   81e6a:	e05e      	b.n	81f2a <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81e6c:	4b30      	ldr	r3, [pc, #192]	; (81f30 <udc_reqstd+0x15c>)
   81e6e:	781b      	ldrb	r3, [r3, #0]
   81e70:	f003 031f 	and.w	r3, r3, #31
   81e74:	2b00      	cmp	r3, #0
   81e76:	d129      	bne.n	81ecc <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   81e78:	4b2d      	ldr	r3, [pc, #180]	; (81f30 <udc_reqstd+0x15c>)
   81e7a:	785b      	ldrb	r3, [r3, #1]
   81e7c:	3b01      	subs	r3, #1
   81e7e:	2b08      	cmp	r3, #8
   81e80:	d826      	bhi.n	81ed0 <udc_reqstd+0xfc>
   81e82:	a201      	add	r2, pc, #4	; (adr r2, 81e88 <udc_reqstd+0xb4>)
   81e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81e88:	00081eb5 	.word	0x00081eb5
   81e8c:	00081ed1 	.word	0x00081ed1
   81e90:	00081ebd 	.word	0x00081ebd
   81e94:	00081ed1 	.word	0x00081ed1
   81e98:	00081ead 	.word	0x00081ead
   81e9c:	00081ed1 	.word	0x00081ed1
   81ea0:	00081ed1 	.word	0x00081ed1
   81ea4:	00081ed1 	.word	0x00081ed1
   81ea8:	00081ec5 	.word	0x00081ec5
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   81eac:	4b26      	ldr	r3, [pc, #152]	; (81f48 <udc_reqstd+0x174>)
   81eae:	4798      	blx	r3
   81eb0:	4603      	mov	r3, r0
   81eb2:	e03a      	b.n	81f2a <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   81eb4:	4b25      	ldr	r3, [pc, #148]	; (81f4c <udc_reqstd+0x178>)
   81eb6:	4798      	blx	r3
   81eb8:	4603      	mov	r3, r0
   81eba:	e036      	b.n	81f2a <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   81ebc:	4b24      	ldr	r3, [pc, #144]	; (81f50 <udc_reqstd+0x17c>)
   81ebe:	4798      	blx	r3
   81ec0:	4603      	mov	r3, r0
   81ec2:	e032      	b.n	81f2a <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   81ec4:	4b23      	ldr	r3, [pc, #140]	; (81f54 <udc_reqstd+0x180>)
   81ec6:	4798      	blx	r3
   81ec8:	4603      	mov	r3, r0
   81eca:	e02e      	b.n	81f2a <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   81ecc:	bf00      	nop
   81ece:	e000      	b.n	81ed2 <udc_reqstd+0xfe>
				break;
   81ed0:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81ed2:	4b17      	ldr	r3, [pc, #92]	; (81f30 <udc_reqstd+0x15c>)
   81ed4:	781b      	ldrb	r3, [r3, #0]
   81ed6:	f003 031f 	and.w	r3, r3, #31
   81eda:	2b01      	cmp	r3, #1
   81edc:	d107      	bne.n	81eee <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   81ede:	4b14      	ldr	r3, [pc, #80]	; (81f30 <udc_reqstd+0x15c>)
   81ee0:	785b      	ldrb	r3, [r3, #1]
   81ee2:	2b0b      	cmp	r3, #11
   81ee4:	d105      	bne.n	81ef2 <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   81ee6:	4b1c      	ldr	r3, [pc, #112]	; (81f58 <udc_reqstd+0x184>)
   81ee8:	4798      	blx	r3
   81eea:	4603      	mov	r3, r0
   81eec:	e01d      	b.n	81f2a <udc_reqstd+0x156>
			default:
				break;
			}
		}
   81eee:	bf00      	nop
   81ef0:	e000      	b.n	81ef4 <udc_reqstd+0x120>
				break;
   81ef2:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81ef4:	4b0e      	ldr	r3, [pc, #56]	; (81f30 <udc_reqstd+0x15c>)
   81ef6:	781b      	ldrb	r3, [r3, #0]
   81ef8:	f003 031f 	and.w	r3, r3, #31
   81efc:	2b02      	cmp	r3, #2
   81efe:	d112      	bne.n	81f26 <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   81f00:	4b0b      	ldr	r3, [pc, #44]	; (81f30 <udc_reqstd+0x15c>)
   81f02:	785b      	ldrb	r3, [r3, #1]
   81f04:	2b01      	cmp	r3, #1
   81f06:	d002      	beq.n	81f0e <udc_reqstd+0x13a>
   81f08:	2b03      	cmp	r3, #3
   81f0a:	d004      	beq.n	81f16 <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   81f0c:	e00c      	b.n	81f28 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   81f0e:	4b13      	ldr	r3, [pc, #76]	; (81f5c <udc_reqstd+0x188>)
   81f10:	4798      	blx	r3
   81f12:	4603      	mov	r3, r0
   81f14:	e009      	b.n	81f2a <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   81f16:	4b12      	ldr	r3, [pc, #72]	; (81f60 <udc_reqstd+0x18c>)
   81f18:	4798      	blx	r3
   81f1a:	4603      	mov	r3, r0
   81f1c:	e005      	b.n	81f2a <udc_reqstd+0x156>
		}
   81f1e:	bf00      	nop
   81f20:	e002      	b.n	81f28 <udc_reqstd+0x154>
				break;
   81f22:	bf00      	nop
   81f24:	e000      	b.n	81f28 <udc_reqstd+0x154>
			}
		}
   81f26:	bf00      	nop
#endif
	}
	return false;
   81f28:	2300      	movs	r3, #0
}
   81f2a:	4618      	mov	r0, r3
   81f2c:	bd80      	pop	{r7, pc}
   81f2e:	bf00      	nop
   81f30:	20003740 	.word	0x20003740
   81f34:	00081689 	.word	0x00081689
   81f38:	00081989 	.word	0x00081989
   81f3c:	00081ba5 	.word	0x00081ba5
   81f40:	00081cd5 	.word	0x00081cd5
   81f44:	000816b5 	.word	0x000816b5
   81f48:	00081895 	.word	0x00081895
   81f4c:	000816f9 	.word	0x000816f9
   81f50:	0008176d 	.word	0x0008176d
   81f54:	00081bd1 	.word	0x00081bd1
   81f58:	00081d6d 	.word	0x00081d6d
   81f5c:	00081735 	.word	0x00081735
   81f60:	00081829 	.word	0x00081829

00081f64 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   81f64:	b580      	push	{r7, lr}
   81f66:	b082      	sub	sp, #8
   81f68:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   81f6a:	4b20      	ldr	r3, [pc, #128]	; (81fec <udc_req_iface+0x88>)
   81f6c:	781b      	ldrb	r3, [r3, #0]
   81f6e:	2b00      	cmp	r3, #0
   81f70:	d101      	bne.n	81f76 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   81f72:	2300      	movs	r3, #0
   81f74:	e036      	b.n	81fe4 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81f76:	4b1e      	ldr	r3, [pc, #120]	; (81ff0 <udc_req_iface+0x8c>)
   81f78:	889b      	ldrh	r3, [r3, #4]
   81f7a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81f7c:	4b1d      	ldr	r3, [pc, #116]	; (81ff4 <udc_req_iface+0x90>)
   81f7e:	681b      	ldr	r3, [r3, #0]
   81f80:	681b      	ldr	r3, [r3, #0]
   81f82:	791b      	ldrb	r3, [r3, #4]
   81f84:	79fa      	ldrb	r2, [r7, #7]
   81f86:	429a      	cmp	r2, r3
   81f88:	d301      	bcc.n	81f8e <udc_req_iface+0x2a>
		return false;
   81f8a:	2300      	movs	r3, #0
   81f8c:	e02a      	b.n	81fe4 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81f8e:	79fb      	ldrb	r3, [r7, #7]
   81f90:	2100      	movs	r1, #0
   81f92:	4618      	mov	r0, r3
   81f94:	4b18      	ldr	r3, [pc, #96]	; (81ff8 <udc_req_iface+0x94>)
   81f96:	4798      	blx	r3
   81f98:	4603      	mov	r3, r0
   81f9a:	f083 0301 	eor.w	r3, r3, #1
   81f9e:	b2db      	uxtb	r3, r3
   81fa0:	2b00      	cmp	r3, #0
   81fa2:	d001      	beq.n	81fa8 <udc_req_iface+0x44>
		return false;
   81fa4:	2300      	movs	r3, #0
   81fa6:	e01d      	b.n	81fe4 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81fa8:	4b12      	ldr	r3, [pc, #72]	; (81ff4 <udc_req_iface+0x90>)
   81faa:	681b      	ldr	r3, [r3, #0]
   81fac:	685a      	ldr	r2, [r3, #4]
   81fae:	79fb      	ldrb	r3, [r7, #7]
   81fb0:	009b      	lsls	r3, r3, #2
   81fb2:	4413      	add	r3, r2
   81fb4:	681b      	ldr	r3, [r3, #0]
   81fb6:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81fb8:	683b      	ldr	r3, [r7, #0]
   81fba:	68db      	ldr	r3, [r3, #12]
   81fbc:	4798      	blx	r3
   81fbe:	4603      	mov	r3, r0
   81fc0:	461a      	mov	r2, r3
   81fc2:	79fb      	ldrb	r3, [r7, #7]
   81fc4:	4611      	mov	r1, r2
   81fc6:	4618      	mov	r0, r3
   81fc8:	4b0b      	ldr	r3, [pc, #44]	; (81ff8 <udc_req_iface+0x94>)
   81fca:	4798      	blx	r3
   81fcc:	4603      	mov	r3, r0
   81fce:	f083 0301 	eor.w	r3, r3, #1
   81fd2:	b2db      	uxtb	r3, r3
   81fd4:	2b00      	cmp	r3, #0
   81fd6:	d001      	beq.n	81fdc <udc_req_iface+0x78>
		return false;
   81fd8:	2300      	movs	r3, #0
   81fda:	e003      	b.n	81fe4 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   81fdc:	683b      	ldr	r3, [r7, #0]
   81fde:	689b      	ldr	r3, [r3, #8]
   81fe0:	4798      	blx	r3
   81fe2:	4603      	mov	r3, r0
}
   81fe4:	4618      	mov	r0, r3
   81fe6:	3708      	adds	r7, #8
   81fe8:	46bd      	mov	sp, r7
   81fea:	bd80      	pop	{r7, pc}
   81fec:	200036ba 	.word	0x200036ba
   81ff0:	20003740 	.word	0x20003740
   81ff4:	200036bc 	.word	0x200036bc
   81ff8:	000813f1 	.word	0x000813f1

00081ffc <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   81ffc:	b580      	push	{r7, lr}
   81ffe:	b082      	sub	sp, #8
   82000:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   82002:	4b1e      	ldr	r3, [pc, #120]	; (8207c <udc_req_ep+0x80>)
   82004:	781b      	ldrb	r3, [r3, #0]
   82006:	2b00      	cmp	r3, #0
   82008:	d101      	bne.n	8200e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8200a:	2300      	movs	r3, #0
   8200c:	e032      	b.n	82074 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8200e:	4b1c      	ldr	r3, [pc, #112]	; (82080 <udc_req_ep+0x84>)
   82010:	889b      	ldrh	r3, [r3, #4]
   82012:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82014:	2300      	movs	r3, #0
   82016:	71fb      	strb	r3, [r7, #7]
   82018:	e024      	b.n	82064 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8201a:	4b1a      	ldr	r3, [pc, #104]	; (82084 <udc_req_ep+0x88>)
   8201c:	681b      	ldr	r3, [r3, #0]
   8201e:	685a      	ldr	r2, [r3, #4]
   82020:	79fb      	ldrb	r3, [r7, #7]
   82022:	009b      	lsls	r3, r3, #2
   82024:	4413      	add	r3, r2
   82026:	681b      	ldr	r3, [r3, #0]
   82028:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8202a:	683b      	ldr	r3, [r7, #0]
   8202c:	68db      	ldr	r3, [r3, #12]
   8202e:	4798      	blx	r3
   82030:	4603      	mov	r3, r0
   82032:	461a      	mov	r2, r3
   82034:	79fb      	ldrb	r3, [r7, #7]
   82036:	4611      	mov	r1, r2
   82038:	4618      	mov	r0, r3
   8203a:	4b13      	ldr	r3, [pc, #76]	; (82088 <udc_req_ep+0x8c>)
   8203c:	4798      	blx	r3
   8203e:	4603      	mov	r3, r0
   82040:	f083 0301 	eor.w	r3, r3, #1
   82044:	b2db      	uxtb	r3, r3
   82046:	2b00      	cmp	r3, #0
   82048:	d001      	beq.n	8204e <udc_req_ep+0x52>
			return false;
   8204a:	2300      	movs	r3, #0
   8204c:	e012      	b.n	82074 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8204e:	683b      	ldr	r3, [r7, #0]
   82050:	689b      	ldr	r3, [r3, #8]
   82052:	4798      	blx	r3
   82054:	4603      	mov	r3, r0
   82056:	2b00      	cmp	r3, #0
   82058:	d001      	beq.n	8205e <udc_req_ep+0x62>
			return true;
   8205a:	2301      	movs	r3, #1
   8205c:	e00a      	b.n	82074 <udc_req_ep+0x78>
			iface_num++) {
   8205e:	79fb      	ldrb	r3, [r7, #7]
   82060:	3301      	adds	r3, #1
   82062:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82064:	4b07      	ldr	r3, [pc, #28]	; (82084 <udc_req_ep+0x88>)
   82066:	681b      	ldr	r3, [r3, #0]
   82068:	681b      	ldr	r3, [r3, #0]
   8206a:	791b      	ldrb	r3, [r3, #4]
   8206c:	79fa      	ldrb	r2, [r7, #7]
   8206e:	429a      	cmp	r2, r3
   82070:	d3d3      	bcc.n	8201a <udc_req_ep+0x1e>
		}
	}
	return false;
   82072:	2300      	movs	r3, #0
}
   82074:	4618      	mov	r0, r3
   82076:	3708      	adds	r7, #8
   82078:	46bd      	mov	sp, r7
   8207a:	bd80      	pop	{r7, pc}
   8207c:	200036ba 	.word	0x200036ba
   82080:	20003740 	.word	0x20003740
   82084:	200036bc 	.word	0x200036bc
   82088:	000813f1 	.word	0x000813f1

0008208c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   8208c:	b580      	push	{r7, lr}
   8208e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82090:	4b2c      	ldr	r3, [pc, #176]	; (82144 <udc_process_setup+0xb8>)
   82092:	2200      	movs	r2, #0
   82094:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   82096:	4b2b      	ldr	r3, [pc, #172]	; (82144 <udc_process_setup+0xb8>)
   82098:	2200      	movs	r2, #0
   8209a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8209c:	4b29      	ldr	r3, [pc, #164]	; (82144 <udc_process_setup+0xb8>)
   8209e:	2200      	movs	r2, #0
   820a0:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   820a2:	4b28      	ldr	r3, [pc, #160]	; (82144 <udc_process_setup+0xb8>)
   820a4:	781b      	ldrb	r3, [r3, #0]
   820a6:	2bc0      	cmp	r3, #192	; 0xc0
   820a8:	d109      	bne.n	820be <udc_process_setup+0x32>
   820aa:	4b26      	ldr	r3, [pc, #152]	; (82144 <udc_process_setup+0xb8>)
   820ac:	785b      	ldrb	r3, [r3, #1]
   820ae:	2b01      	cmp	r3, #1
   820b0:	d105      	bne.n	820be <udc_process_setup+0x32>
		} else {
			// CompatibleID = "WINUSB"
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'W';
		}
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   820b2:	219e      	movs	r1, #158	; 0x9e
   820b4:	4824      	ldr	r0, [pc, #144]	; (82148 <udc_process_setup+0xbc>)
   820b6:	4b25      	ldr	r3, [pc, #148]	; (8214c <udc_process_setup+0xc0>)
   820b8:	4798      	blx	r3
		return true;
   820ba:	2301      	movs	r3, #1
   820bc:	e03f      	b.n	8213e <udc_process_setup+0xb2>
	}

	if (Udd_setup_is_in()) {
   820be:	4b21      	ldr	r3, [pc, #132]	; (82144 <udc_process_setup+0xb8>)
   820c0:	781b      	ldrb	r3, [r3, #0]
   820c2:	b25b      	sxtb	r3, r3
   820c4:	2b00      	cmp	r3, #0
   820c6:	da05      	bge.n	820d4 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   820c8:	4b1e      	ldr	r3, [pc, #120]	; (82144 <udc_process_setup+0xb8>)
   820ca:	88db      	ldrh	r3, [r3, #6]
   820cc:	2b00      	cmp	r3, #0
   820ce:	d101      	bne.n	820d4 <udc_process_setup+0x48>
			return false; // Error from USB host
   820d0:	2300      	movs	r3, #0
   820d2:	e034      	b.n	8213e <udc_process_setup+0xb2>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   820d4:	4b1b      	ldr	r3, [pc, #108]	; (82144 <udc_process_setup+0xb8>)
   820d6:	781b      	ldrb	r3, [r3, #0]
   820d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   820dc:	2b00      	cmp	r3, #0
   820de:	d106      	bne.n	820ee <udc_process_setup+0x62>
		if (udc_reqstd()) {
   820e0:	4b1b      	ldr	r3, [pc, #108]	; (82150 <udc_process_setup+0xc4>)
   820e2:	4798      	blx	r3
   820e4:	4603      	mov	r3, r0
   820e6:	2b00      	cmp	r3, #0
   820e8:	d001      	beq.n	820ee <udc_process_setup+0x62>
			return true;
   820ea:	2301      	movs	r3, #1
   820ec:	e027      	b.n	8213e <udc_process_setup+0xb2>
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   820ee:	4b15      	ldr	r3, [pc, #84]	; (82144 <udc_process_setup+0xb8>)
   820f0:	781b      	ldrb	r3, [r3, #0]
   820f2:	f003 031f 	and.w	r3, r3, #31
   820f6:	2b01      	cmp	r3, #1
   820f8:	d005      	beq.n	82106 <udc_process_setup+0x7a>
   820fa:	4b12      	ldr	r3, [pc, #72]	; (82144 <udc_process_setup+0xb8>)
   820fc:	781b      	ldrb	r3, [r3, #0]
   820fe:	f003 031f 	and.w	r3, r3, #31
   82102:	2b00      	cmp	r3, #0
   82104:	d10d      	bne.n	82122 <udc_process_setup+0x96>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   82106:	4b0f      	ldr	r3, [pc, #60]	; (82144 <udc_process_setup+0xb8>)
   82108:	889b      	ldrh	r3, [r3, #4]
   8210a:	2b02      	cmp	r3, #2
   8210c:	d102      	bne.n	82114 <udc_process_setup+0x88>
			udd_g_ctrlreq.req.wIndex = 1;
   8210e:	4b0d      	ldr	r3, [pc, #52]	; (82144 <udc_process_setup+0xb8>)
   82110:	2201      	movs	r2, #1
   82112:	809a      	strh	r2, [r3, #4]
		}

		if (udc_req_iface()) {
   82114:	4b0f      	ldr	r3, [pc, #60]	; (82154 <udc_process_setup+0xc8>)
   82116:	4798      	blx	r3
   82118:	4603      	mov	r3, r0
   8211a:	2b00      	cmp	r3, #0
   8211c:	d001      	beq.n	82122 <udc_process_setup+0x96>
			return true;
   8211e:	2301      	movs	r3, #1
   82120:	e00d      	b.n	8213e <udc_process_setup+0xb2>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82122:	4b08      	ldr	r3, [pc, #32]	; (82144 <udc_process_setup+0xb8>)
   82124:	781b      	ldrb	r3, [r3, #0]
   82126:	f003 031f 	and.w	r3, r3, #31
   8212a:	2b02      	cmp	r3, #2
   8212c:	d106      	bne.n	8213c <udc_process_setup+0xb0>
		if (udc_req_ep()) {
   8212e:	4b0a      	ldr	r3, [pc, #40]	; (82158 <udc_process_setup+0xcc>)
   82130:	4798      	blx	r3
   82132:	4603      	mov	r3, r0
   82134:	2b00      	cmp	r3, #0
   82136:	d001      	beq.n	8213c <udc_process_setup+0xb0>
			return true;
   82138:	2301      	movs	r3, #1
   8213a:	e000      	b.n	8213e <udc_process_setup+0xb2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8213c:	2300      	movs	r3, #0
#endif
}
   8213e:	4618      	mov	r0, r3
   82140:	bd80      	pop	{r7, pc}
   82142:	bf00      	nop
   82144:	20003740 	.word	0x20003740
   82148:	2000029c 	.word	0x2000029c
   8214c:	00082c55 	.word	0x00082c55
   82150:	00081dd5 	.word	0x00081dd5
   82154:	00081f65 	.word	0x00081f65
   82158:	00081ffd 	.word	0x00081ffd

0008215c <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   8215c:	b580      	push	{r7, lr}
   8215e:	b084      	sub	sp, #16
   82160:	af00      	add	r7, sp, #0
   82162:	4603      	mov	r3, r0
   82164:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   82166:	2300      	movs	r3, #0
   82168:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   8216a:	4b09      	ldr	r3, [pc, #36]	; (82190 <FPGA_setlock+0x34>)
   8216c:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8216e:	4b09      	ldr	r3, [pc, #36]	; (82194 <FPGA_setlock+0x38>)
   82170:	781b      	ldrb	r3, [r3, #0]
   82172:	b2db      	uxtb	r3, r3
   82174:	2b00      	cmp	r3, #0
   82176:	d104      	bne.n	82182 <FPGA_setlock+0x26>
  {
    ret = 1;
   82178:	2301      	movs	r3, #1
   8217a:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   8217c:	4a05      	ldr	r2, [pc, #20]	; (82194 <FPGA_setlock+0x38>)
   8217e:	79fb      	ldrb	r3, [r7, #7]
   82180:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   82182:	4b05      	ldr	r3, [pc, #20]	; (82198 <FPGA_setlock+0x3c>)
   82184:	4798      	blx	r3
  return ret;
   82186:	68fb      	ldr	r3, [r7, #12]
}
   82188:	4618      	mov	r0, r3
   8218a:	3710      	adds	r7, #16
   8218c:	46bd      	mov	sp, r7
   8218e:	bd80      	pop	{r7, pc}
   82190:	000855a9 	.word	0x000855a9
   82194:	200036c7 	.word	0x200036c7
   82198:	00085601 	.word	0x00085601

0008219c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   8219c:	b480      	push	{r7}
   8219e:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   821a0:	4b03      	ldr	r3, [pc, #12]	; (821b0 <FPGA_releaselock+0x14>)
   821a2:	2200      	movs	r2, #0
   821a4:	701a      	strb	r2, [r3, #0]
}
   821a6:	bf00      	nop
   821a8:	46bd      	mov	sp, r7
   821aa:	bc80      	pop	{r7}
   821ac:	4770      	bx	lr
   821ae:	bf00      	nop
   821b0:	200036c7 	.word	0x200036c7

000821b4 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   821b4:	b480      	push	{r7}
   821b6:	af00      	add	r7, sp, #0
  return _fpga_locked;
   821b8:	4b03      	ldr	r3, [pc, #12]	; (821c8 <FPGA_lockstatus+0x14>)
   821ba:	781b      	ldrb	r3, [r3, #0]
   821bc:	b2db      	uxtb	r3, r3
}
   821be:	4618      	mov	r0, r3
   821c0:	46bd      	mov	sp, r7
   821c2:	bc80      	pop	{r7}
   821c4:	4770      	bx	lr
   821c6:	bf00      	nop
   821c8:	200036c7 	.word	0x200036c7

000821cc <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   821cc:	b590      	push	{r4, r7, lr}
   821ce:	b08b      	sub	sp, #44	; 0x2c
   821d0:	af02      	add	r7, sp, #8
   821d2:	6078      	str	r0, [r7, #4]
   821d4:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   821d6:	f107 030c 	add.w	r3, r7, #12
   821da:	2204      	movs	r2, #4
   821dc:	9200      	str	r2, [sp, #0]
   821de:	220f      	movs	r2, #15
   821e0:	210e      	movs	r1, #14
   821e2:	4813      	ldr	r0, [pc, #76]	; (82230 <flash_read_unique_id+0x64>)
   821e4:	4c13      	ldr	r4, [pc, #76]	; (82234 <flash_read_unique_id+0x68>)
   821e6:	47a0      	blx	r4
   821e8:	4603      	mov	r3, r0
   821ea:	2b00      	cmp	r3, #0
   821ec:	d001      	beq.n	821f2 <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   821ee:	2310      	movs	r3, #16
   821f0:	e01a      	b.n	82228 <flash_read_unique_id+0x5c>
	}

	if (ul_size > 4) {
   821f2:	683b      	ldr	r3, [r7, #0]
   821f4:	2b04      	cmp	r3, #4
   821f6:	d901      	bls.n	821fc <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   821f8:	2304      	movs	r3, #4
   821fa:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   821fc:	2300      	movs	r3, #0
   821fe:	61fb      	str	r3, [r7, #28]
   82200:	e00d      	b.n	8221e <flash_read_unique_id+0x52>
		pul_data[ul_idx] = uid_buf[ul_idx];
   82202:	69fb      	ldr	r3, [r7, #28]
   82204:	009b      	lsls	r3, r3, #2
   82206:	687a      	ldr	r2, [r7, #4]
   82208:	441a      	add	r2, r3
   8220a:	69fb      	ldr	r3, [r7, #28]
   8220c:	009b      	lsls	r3, r3, #2
   8220e:	3320      	adds	r3, #32
   82210:	443b      	add	r3, r7
   82212:	f853 3c14 	ldr.w	r3, [r3, #-20]
   82216:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82218:	69fb      	ldr	r3, [r7, #28]
   8221a:	3301      	adds	r3, #1
   8221c:	61fb      	str	r3, [r7, #28]
   8221e:	69fa      	ldr	r2, [r7, #28]
   82220:	683b      	ldr	r3, [r7, #0]
   82222:	429a      	cmp	r2, r3
   82224:	d3ed      	bcc.n	82202 <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   82226:	2300      	movs	r3, #0
}
   82228:	4618      	mov	r0, r3
   8222a:	3724      	adds	r7, #36	; 0x24
   8222c:	46bd      	mov	sp, r7
   8222e:	bd90      	pop	{r4, r7, pc}
   82230:	400e0800 	.word	0x400e0800
   82234:	20000001 	.word	0x20000001

00082238 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82238:	b480      	push	{r7}
   8223a:	b089      	sub	sp, #36	; 0x24
   8223c:	af00      	add	r7, sp, #0
   8223e:	60f8      	str	r0, [r7, #12]
   82240:	60b9      	str	r1, [r7, #8]
   82242:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82244:	68bb      	ldr	r3, [r7, #8]
   82246:	011b      	lsls	r3, r3, #4
   82248:	687a      	ldr	r2, [r7, #4]
   8224a:	429a      	cmp	r2, r3
   8224c:	d302      	bcc.n	82254 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8224e:	2310      	movs	r3, #16
   82250:	61fb      	str	r3, [r7, #28]
   82252:	e001      	b.n	82258 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   82254:	2308      	movs	r3, #8
   82256:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82258:	687b      	ldr	r3, [r7, #4]
   8225a:	00da      	lsls	r2, r3, #3
   8225c:	69fb      	ldr	r3, [r7, #28]
   8225e:	68b9      	ldr	r1, [r7, #8]
   82260:	fb01 f303 	mul.w	r3, r1, r3
   82264:	085b      	lsrs	r3, r3, #1
   82266:	441a      	add	r2, r3
   82268:	69fb      	ldr	r3, [r7, #28]
   8226a:	68b9      	ldr	r1, [r7, #8]
   8226c:	fb01 f303 	mul.w	r3, r1, r3
   82270:	fbb2 f3f3 	udiv	r3, r2, r3
   82274:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82276:	69bb      	ldr	r3, [r7, #24]
   82278:	08db      	lsrs	r3, r3, #3
   8227a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8227c:	69bb      	ldr	r3, [r7, #24]
   8227e:	f003 0307 	and.w	r3, r3, #7
   82282:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82284:	697b      	ldr	r3, [r7, #20]
   82286:	2b00      	cmp	r3, #0
   82288:	d003      	beq.n	82292 <usart_set_async_baudrate+0x5a>
   8228a:	697b      	ldr	r3, [r7, #20]
   8228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82290:	d301      	bcc.n	82296 <usart_set_async_baudrate+0x5e>
		return 1;
   82292:	2301      	movs	r3, #1
   82294:	e00f      	b.n	822b6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   82296:	69fb      	ldr	r3, [r7, #28]
   82298:	2b08      	cmp	r3, #8
   8229a:	d105      	bne.n	822a8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   8229c:	68fb      	ldr	r3, [r7, #12]
   8229e:	685b      	ldr	r3, [r3, #4]
   822a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   822a4:	68fb      	ldr	r3, [r7, #12]
   822a6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   822a8:	693b      	ldr	r3, [r7, #16]
   822aa:	041a      	lsls	r2, r3, #16
   822ac:	697b      	ldr	r3, [r7, #20]
   822ae:	431a      	orrs	r2, r3
   822b0:	68fb      	ldr	r3, [r7, #12]
   822b2:	621a      	str	r2, [r3, #32]

	return 0;
   822b4:	2300      	movs	r3, #0
}
   822b6:	4618      	mov	r0, r3
   822b8:	3724      	adds	r7, #36	; 0x24
   822ba:	46bd      	mov	sp, r7
   822bc:	bc80      	pop	{r7}
   822be:	4770      	bx	lr

000822c0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   822c0:	b580      	push	{r7, lr}
   822c2:	b082      	sub	sp, #8
   822c4:	af00      	add	r7, sp, #0
   822c6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   822c8:	6878      	ldr	r0, [r7, #4]
   822ca:	4b0f      	ldr	r3, [pc, #60]	; (82308 <usart_reset+0x48>)
   822cc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   822ce:	687b      	ldr	r3, [r7, #4]
   822d0:	2200      	movs	r2, #0
   822d2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   822d4:	687b      	ldr	r3, [r7, #4]
   822d6:	2200      	movs	r2, #0
   822d8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   822da:	687b      	ldr	r3, [r7, #4]
   822dc:	2200      	movs	r2, #0
   822de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   822e0:	6878      	ldr	r0, [r7, #4]
   822e2:	4b0a      	ldr	r3, [pc, #40]	; (8230c <usart_reset+0x4c>)
   822e4:	4798      	blx	r3
	usart_reset_rx(p_usart);
   822e6:	6878      	ldr	r0, [r7, #4]
   822e8:	4b09      	ldr	r3, [pc, #36]	; (82310 <usart_reset+0x50>)
   822ea:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   822ec:	6878      	ldr	r0, [r7, #4]
   822ee:	4b09      	ldr	r3, [pc, #36]	; (82314 <usart_reset+0x54>)
   822f0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   822f2:	6878      	ldr	r0, [r7, #4]
   822f4:	4b08      	ldr	r3, [pc, #32]	; (82318 <usart_reset+0x58>)
   822f6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   822f8:	6878      	ldr	r0, [r7, #4]
   822fa:	4b08      	ldr	r3, [pc, #32]	; (8231c <usart_reset+0x5c>)
   822fc:	4798      	blx	r3
#endif
}
   822fe:	bf00      	nop
   82300:	3708      	adds	r7, #8
   82302:	46bd      	mov	sp, r7
   82304:	bd80      	pop	{r7, pc}
   82306:	bf00      	nop
   82308:	000824b5 	.word	0x000824b5
   8230c:	000823bd 	.word	0x000823bd
   82310:	000823ed 	.word	0x000823ed
   82314:	00082405 	.word	0x00082405
   82318:	00082439 	.word	0x00082439
   8231c:	0008241f 	.word	0x0008241f

00082320 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82320:	b580      	push	{r7, lr}
   82322:	b084      	sub	sp, #16
   82324:	af00      	add	r7, sp, #0
   82326:	60f8      	str	r0, [r7, #12]
   82328:	60b9      	str	r1, [r7, #8]
   8232a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8232c:	68f8      	ldr	r0, [r7, #12]
   8232e:	4b1a      	ldr	r3, [pc, #104]	; (82398 <usart_init_rs232+0x78>)
   82330:	4798      	blx	r3

	ul_reg_val = 0;
   82332:	4b1a      	ldr	r3, [pc, #104]	; (8239c <usart_init_rs232+0x7c>)
   82334:	2200      	movs	r2, #0
   82336:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   82338:	68bb      	ldr	r3, [r7, #8]
   8233a:	2b00      	cmp	r3, #0
   8233c:	d009      	beq.n	82352 <usart_init_rs232+0x32>
   8233e:	68bb      	ldr	r3, [r7, #8]
   82340:	681b      	ldr	r3, [r3, #0]
   82342:	687a      	ldr	r2, [r7, #4]
   82344:	4619      	mov	r1, r3
   82346:	68f8      	ldr	r0, [r7, #12]
   82348:	4b15      	ldr	r3, [pc, #84]	; (823a0 <usart_init_rs232+0x80>)
   8234a:	4798      	blx	r3
   8234c:	4603      	mov	r3, r0
   8234e:	2b00      	cmp	r3, #0
   82350:	d001      	beq.n	82356 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82352:	2301      	movs	r3, #1
   82354:	e01b      	b.n	8238e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82356:	68bb      	ldr	r3, [r7, #8]
   82358:	685a      	ldr	r2, [r3, #4]
   8235a:	68bb      	ldr	r3, [r7, #8]
   8235c:	689b      	ldr	r3, [r3, #8]
   8235e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82360:	68bb      	ldr	r3, [r7, #8]
   82362:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82364:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82366:	68bb      	ldr	r3, [r7, #8]
   82368:	68db      	ldr	r3, [r3, #12]
   8236a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8236c:	4b0b      	ldr	r3, [pc, #44]	; (8239c <usart_init_rs232+0x7c>)
   8236e:	681b      	ldr	r3, [r3, #0]
   82370:	4313      	orrs	r3, r2
   82372:	4a0a      	ldr	r2, [pc, #40]	; (8239c <usart_init_rs232+0x7c>)
   82374:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   82376:	4b09      	ldr	r3, [pc, #36]	; (8239c <usart_init_rs232+0x7c>)
   82378:	681b      	ldr	r3, [r3, #0]
   8237a:	4a08      	ldr	r2, [pc, #32]	; (8239c <usart_init_rs232+0x7c>)
   8237c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   8237e:	68fb      	ldr	r3, [r7, #12]
   82380:	685a      	ldr	r2, [r3, #4]
   82382:	4b06      	ldr	r3, [pc, #24]	; (8239c <usart_init_rs232+0x7c>)
   82384:	681b      	ldr	r3, [r3, #0]
   82386:	431a      	orrs	r2, r3
   82388:	68fb      	ldr	r3, [r7, #12]
   8238a:	605a      	str	r2, [r3, #4]

	return 0;
   8238c:	2300      	movs	r3, #0
}
   8238e:	4618      	mov	r0, r3
   82390:	3710      	adds	r7, #16
   82392:	46bd      	mov	sp, r7
   82394:	bd80      	pop	{r7, pc}
   82396:	bf00      	nop
   82398:	000822c1 	.word	0x000822c1
   8239c:	200036c8 	.word	0x200036c8
   823a0:	00082239 	.word	0x00082239

000823a4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   823a4:	b480      	push	{r7}
   823a6:	b083      	sub	sp, #12
   823a8:	af00      	add	r7, sp, #0
   823aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   823ac:	687b      	ldr	r3, [r7, #4]
   823ae:	2240      	movs	r2, #64	; 0x40
   823b0:	601a      	str	r2, [r3, #0]
}
   823b2:	bf00      	nop
   823b4:	370c      	adds	r7, #12
   823b6:	46bd      	mov	sp, r7
   823b8:	bc80      	pop	{r7}
   823ba:	4770      	bx	lr

000823bc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   823bc:	b480      	push	{r7}
   823be:	b083      	sub	sp, #12
   823c0:	af00      	add	r7, sp, #0
   823c2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   823c4:	687b      	ldr	r3, [r7, #4]
   823c6:	2288      	movs	r2, #136	; 0x88
   823c8:	601a      	str	r2, [r3, #0]
}
   823ca:	bf00      	nop
   823cc:	370c      	adds	r7, #12
   823ce:	46bd      	mov	sp, r7
   823d0:	bc80      	pop	{r7}
   823d2:	4770      	bx	lr

000823d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   823d4:	b480      	push	{r7}
   823d6:	b083      	sub	sp, #12
   823d8:	af00      	add	r7, sp, #0
   823da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   823dc:	687b      	ldr	r3, [r7, #4]
   823de:	2210      	movs	r2, #16
   823e0:	601a      	str	r2, [r3, #0]
}
   823e2:	bf00      	nop
   823e4:	370c      	adds	r7, #12
   823e6:	46bd      	mov	sp, r7
   823e8:	bc80      	pop	{r7}
   823ea:	4770      	bx	lr

000823ec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   823ec:	b480      	push	{r7}
   823ee:	b083      	sub	sp, #12
   823f0:	af00      	add	r7, sp, #0
   823f2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   823f4:	687b      	ldr	r3, [r7, #4]
   823f6:	2224      	movs	r2, #36	; 0x24
   823f8:	601a      	str	r2, [r3, #0]
}
   823fa:	bf00      	nop
   823fc:	370c      	adds	r7, #12
   823fe:	46bd      	mov	sp, r7
   82400:	bc80      	pop	{r7}
   82402:	4770      	bx	lr

00082404 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82404:	b480      	push	{r7}
   82406:	b083      	sub	sp, #12
   82408:	af00      	add	r7, sp, #0
   8240a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   8240c:	687b      	ldr	r3, [r7, #4]
   8240e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82412:	601a      	str	r2, [r3, #0]
}
   82414:	bf00      	nop
   82416:	370c      	adds	r7, #12
   82418:	46bd      	mov	sp, r7
   8241a:	bc80      	pop	{r7}
   8241c:	4770      	bx	lr

0008241e <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   8241e:	b480      	push	{r7}
   82420:	b083      	sub	sp, #12
   82422:	af00      	add	r7, sp, #0
   82424:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   82426:	687b      	ldr	r3, [r7, #4]
   82428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   8242c:	601a      	str	r2, [r3, #0]
}
   8242e:	bf00      	nop
   82430:	370c      	adds	r7, #12
   82432:	46bd      	mov	sp, r7
   82434:	bc80      	pop	{r7}
   82436:	4770      	bx	lr

00082438 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82438:	b480      	push	{r7}
   8243a:	b083      	sub	sp, #12
   8243c:	af00      	add	r7, sp, #0
   8243e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82440:	687b      	ldr	r3, [r7, #4]
   82442:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82446:	601a      	str	r2, [r3, #0]
}
   82448:	bf00      	nop
   8244a:	370c      	adds	r7, #12
   8244c:	46bd      	mov	sp, r7
   8244e:	bc80      	pop	{r7}
   82450:	4770      	bx	lr

00082452 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82452:	b480      	push	{r7}
   82454:	b083      	sub	sp, #12
   82456:	af00      	add	r7, sp, #0
   82458:	6078      	str	r0, [r7, #4]
   8245a:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8245c:	687b      	ldr	r3, [r7, #4]
   8245e:	695b      	ldr	r3, [r3, #20]
   82460:	f003 0302 	and.w	r3, r3, #2
   82464:	2b00      	cmp	r3, #0
   82466:	d101      	bne.n	8246c <usart_write+0x1a>
		return 1;
   82468:	2301      	movs	r3, #1
   8246a:	e005      	b.n	82478 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8246c:	683b      	ldr	r3, [r7, #0]
   8246e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82472:	687b      	ldr	r3, [r7, #4]
   82474:	61da      	str	r2, [r3, #28]
	return 0;
   82476:	2300      	movs	r3, #0
}
   82478:	4618      	mov	r0, r3
   8247a:	370c      	adds	r7, #12
   8247c:	46bd      	mov	sp, r7
   8247e:	bc80      	pop	{r7}
   82480:	4770      	bx	lr

00082482 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   82482:	b480      	push	{r7}
   82484:	b083      	sub	sp, #12
   82486:	af00      	add	r7, sp, #0
   82488:	6078      	str	r0, [r7, #4]
   8248a:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8248c:	687b      	ldr	r3, [r7, #4]
   8248e:	695b      	ldr	r3, [r3, #20]
   82490:	f003 0301 	and.w	r3, r3, #1
   82494:	2b00      	cmp	r3, #0
   82496:	d101      	bne.n	8249c <usart_read+0x1a>
		return 1;
   82498:	2301      	movs	r3, #1
   8249a:	e006      	b.n	824aa <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8249c:	687b      	ldr	r3, [r7, #4]
   8249e:	699b      	ldr	r3, [r3, #24]
   824a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   824a4:	683b      	ldr	r3, [r7, #0]
   824a6:	601a      	str	r2, [r3, #0]

	return 0;
   824a8:	2300      	movs	r3, #0
}
   824aa:	4618      	mov	r0, r3
   824ac:	370c      	adds	r7, #12
   824ae:	46bd      	mov	sp, r7
   824b0:	bc80      	pop	{r7}
   824b2:	4770      	bx	lr

000824b4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   824b4:	b480      	push	{r7}
   824b6:	b083      	sub	sp, #12
   824b8:	af00      	add	r7, sp, #0
   824ba:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   824bc:	687b      	ldr	r3, [r7, #4]
   824be:	4a04      	ldr	r2, [pc, #16]	; (824d0 <usart_disable_writeprotect+0x1c>)
   824c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   824c4:	bf00      	nop
   824c6:	370c      	adds	r7, #12
   824c8:	46bd      	mov	sp, r7
   824ca:	bc80      	pop	{r7}
   824cc:	4770      	bx	lr
   824ce:	bf00      	nop
   824d0:	55534100 	.word	0x55534100

000824d4 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   824d4:	b480      	push	{r7}
   824d6:	b085      	sub	sp, #20
   824d8:	af00      	add	r7, sp, #0
   824da:	60f8      	str	r0, [r7, #12]
   824dc:	60b9      	str	r1, [r7, #8]
   824de:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   824e0:	68f9      	ldr	r1, [r7, #12]
   824e2:	68ba      	ldr	r2, [r7, #8]
   824e4:	4613      	mov	r3, r2
   824e6:	009b      	lsls	r3, r3, #2
   824e8:	4413      	add	r3, r2
   824ea:	009b      	lsls	r3, r3, #2
   824ec:	440b      	add	r3, r1
   824ee:	3370      	adds	r3, #112	; 0x70
   824f0:	687a      	ldr	r2, [r7, #4]
   824f2:	601a      	str	r2, [r3, #0]
}
   824f4:	bf00      	nop
   824f6:	3714      	adds	r7, #20
   824f8:	46bd      	mov	sp, r7
   824fa:	bc80      	pop	{r7}
   824fc:	4770      	bx	lr

000824fe <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   824fe:	b480      	push	{r7}
   82500:	b085      	sub	sp, #20
   82502:	af00      	add	r7, sp, #0
   82504:	60f8      	str	r0, [r7, #12]
   82506:	60b9      	str	r1, [r7, #8]
   82508:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8250a:	68f9      	ldr	r1, [r7, #12]
   8250c:	68ba      	ldr	r2, [r7, #8]
   8250e:	4613      	mov	r3, r2
   82510:	009b      	lsls	r3, r3, #2
   82512:	4413      	add	r3, r2
   82514:	009b      	lsls	r3, r3, #2
   82516:	440b      	add	r3, r1
   82518:	3374      	adds	r3, #116	; 0x74
   8251a:	687a      	ldr	r2, [r7, #4]
   8251c:	601a      	str	r2, [r3, #0]
}
   8251e:	bf00      	nop
   82520:	3714      	adds	r7, #20
   82522:	46bd      	mov	sp, r7
   82524:	bc80      	pop	{r7}
   82526:	4770      	bx	lr

00082528 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   82528:	b480      	push	{r7}
   8252a:	b085      	sub	sp, #20
   8252c:	af00      	add	r7, sp, #0
   8252e:	60f8      	str	r0, [r7, #12]
   82530:	60b9      	str	r1, [r7, #8]
   82532:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82534:	68f9      	ldr	r1, [r7, #12]
   82536:	68ba      	ldr	r2, [r7, #8]
   82538:	4613      	mov	r3, r2
   8253a:	009b      	lsls	r3, r3, #2
   8253c:	4413      	add	r3, r2
   8253e:	009b      	lsls	r3, r3, #2
   82540:	440b      	add	r3, r1
   82542:	3378      	adds	r3, #120	; 0x78
   82544:	687a      	ldr	r2, [r7, #4]
   82546:	601a      	str	r2, [r3, #0]
}
   82548:	bf00      	nop
   8254a:	3714      	adds	r7, #20
   8254c:	46bd      	mov	sp, r7
   8254e:	bc80      	pop	{r7}
   82550:	4770      	bx	lr

00082552 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   82552:	b480      	push	{r7}
   82554:	b085      	sub	sp, #20
   82556:	af00      	add	r7, sp, #0
   82558:	60f8      	str	r0, [r7, #12]
   8255a:	60b9      	str	r1, [r7, #8]
   8255c:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8255e:	68f9      	ldr	r1, [r7, #12]
   82560:	68ba      	ldr	r2, [r7, #8]
   82562:	4613      	mov	r3, r2
   82564:	009b      	lsls	r3, r3, #2
   82566:	4413      	add	r3, r2
   82568:	009b      	lsls	r3, r3, #2
   8256a:	440b      	add	r3, r1
   8256c:	3380      	adds	r3, #128	; 0x80
   8256e:	687a      	ldr	r2, [r7, #4]
   82570:	601a      	str	r2, [r3, #0]
}
   82572:	bf00      	nop
   82574:	3714      	adds	r7, #20
   82576:	46bd      	mov	sp, r7
   82578:	bc80      	pop	{r7}
   8257a:	4770      	bx	lr

0008257c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8257c:	b580      	push	{r7, lr}
   8257e:	b084      	sub	sp, #16
   82580:	af00      	add	r7, sp, #0
   82582:	6078      	str	r0, [r7, #4]
   82584:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82586:	6878      	ldr	r0, [r7, #4]
   82588:	4b26      	ldr	r3, [pc, #152]	; (82624 <pio_handler_process+0xa8>)
   8258a:	4798      	blx	r3
   8258c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8258e:	6878      	ldr	r0, [r7, #4]
   82590:	4b25      	ldr	r3, [pc, #148]	; (82628 <pio_handler_process+0xac>)
   82592:	4798      	blx	r3
   82594:	4602      	mov	r2, r0
   82596:	68fb      	ldr	r3, [r7, #12]
   82598:	4013      	ands	r3, r2
   8259a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8259c:	68fb      	ldr	r3, [r7, #12]
   8259e:	2b00      	cmp	r3, #0
   825a0:	d03c      	beq.n	8261c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   825a2:	2300      	movs	r3, #0
   825a4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   825a6:	e034      	b.n	82612 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   825a8:	4a20      	ldr	r2, [pc, #128]	; (8262c <pio_handler_process+0xb0>)
   825aa:	68bb      	ldr	r3, [r7, #8]
   825ac:	011b      	lsls	r3, r3, #4
   825ae:	4413      	add	r3, r2
   825b0:	681b      	ldr	r3, [r3, #0]
   825b2:	683a      	ldr	r2, [r7, #0]
   825b4:	429a      	cmp	r2, r3
   825b6:	d126      	bne.n	82606 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   825b8:	4a1c      	ldr	r2, [pc, #112]	; (8262c <pio_handler_process+0xb0>)
   825ba:	68bb      	ldr	r3, [r7, #8]
   825bc:	011b      	lsls	r3, r3, #4
   825be:	4413      	add	r3, r2
   825c0:	3304      	adds	r3, #4
   825c2:	681a      	ldr	r2, [r3, #0]
   825c4:	68fb      	ldr	r3, [r7, #12]
   825c6:	4013      	ands	r3, r2
   825c8:	2b00      	cmp	r3, #0
   825ca:	d01c      	beq.n	82606 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   825cc:	4a17      	ldr	r2, [pc, #92]	; (8262c <pio_handler_process+0xb0>)
   825ce:	68bb      	ldr	r3, [r7, #8]
   825d0:	011b      	lsls	r3, r3, #4
   825d2:	4413      	add	r3, r2
   825d4:	330c      	adds	r3, #12
   825d6:	681b      	ldr	r3, [r3, #0]
   825d8:	4914      	ldr	r1, [pc, #80]	; (8262c <pio_handler_process+0xb0>)
   825da:	68ba      	ldr	r2, [r7, #8]
   825dc:	0112      	lsls	r2, r2, #4
   825de:	440a      	add	r2, r1
   825e0:	6810      	ldr	r0, [r2, #0]
   825e2:	4912      	ldr	r1, [pc, #72]	; (8262c <pio_handler_process+0xb0>)
   825e4:	68ba      	ldr	r2, [r7, #8]
   825e6:	0112      	lsls	r2, r2, #4
   825e8:	440a      	add	r2, r1
   825ea:	3204      	adds	r2, #4
   825ec:	6812      	ldr	r2, [r2, #0]
   825ee:	4611      	mov	r1, r2
   825f0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   825f2:	4a0e      	ldr	r2, [pc, #56]	; (8262c <pio_handler_process+0xb0>)
   825f4:	68bb      	ldr	r3, [r7, #8]
   825f6:	011b      	lsls	r3, r3, #4
   825f8:	4413      	add	r3, r2
   825fa:	3304      	adds	r3, #4
   825fc:	681b      	ldr	r3, [r3, #0]
   825fe:	43db      	mvns	r3, r3
   82600:	68fa      	ldr	r2, [r7, #12]
   82602:	4013      	ands	r3, r2
   82604:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82606:	68bb      	ldr	r3, [r7, #8]
   82608:	3301      	adds	r3, #1
   8260a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   8260c:	68bb      	ldr	r3, [r7, #8]
   8260e:	2b06      	cmp	r3, #6
   82610:	d803      	bhi.n	8261a <pio_handler_process+0x9e>
		while (status != 0) {
   82612:	68fb      	ldr	r3, [r7, #12]
   82614:	2b00      	cmp	r3, #0
   82616:	d1c7      	bne.n	825a8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82618:	e000      	b.n	8261c <pio_handler_process+0xa0>
				break;
   8261a:	bf00      	nop
}
   8261c:	bf00      	nop
   8261e:	3710      	adds	r7, #16
   82620:	46bd      	mov	sp, r7
   82622:	bd80      	pop	{r7, pc}
   82624:	0008504b 	.word	0x0008504b
   82628:	00085061 	.word	0x00085061
   8262c:	200036cc 	.word	0x200036cc

00082630 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82630:	b580      	push	{r7, lr}
   82632:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82634:	210a      	movs	r1, #10
   82636:	4802      	ldr	r0, [pc, #8]	; (82640 <PIOA_Handler+0x10>)
   82638:	4b02      	ldr	r3, [pc, #8]	; (82644 <PIOA_Handler+0x14>)
   8263a:	4798      	blx	r3
}
   8263c:	bf00      	nop
   8263e:	bd80      	pop	{r7, pc}
   82640:	400e0c00 	.word	0x400e0c00
   82644:	0008257d 	.word	0x0008257d

00082648 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82648:	b580      	push	{r7, lr}
   8264a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   8264c:	210b      	movs	r1, #11
   8264e:	4802      	ldr	r0, [pc, #8]	; (82658 <PIOB_Handler+0x10>)
   82650:	4b02      	ldr	r3, [pc, #8]	; (8265c <PIOB_Handler+0x14>)
   82652:	4798      	blx	r3
}
   82654:	bf00      	nop
   82656:	bd80      	pop	{r7, pc}
   82658:	400e0e00 	.word	0x400e0e00
   8265c:	0008257d 	.word	0x0008257d

00082660 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82660:	b580      	push	{r7, lr}
   82662:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   82664:	210c      	movs	r1, #12
   82666:	4802      	ldr	r0, [pc, #8]	; (82670 <PIOC_Handler+0x10>)
   82668:	4b02      	ldr	r3, [pc, #8]	; (82674 <PIOC_Handler+0x14>)
   8266a:	4798      	blx	r3
}
   8266c:	bf00      	nop
   8266e:	bd80      	pop	{r7, pc}
   82670:	400e1000 	.word	0x400e1000
   82674:	0008257d 	.word	0x0008257d

00082678 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   82678:	b480      	push	{r7}
   8267a:	b083      	sub	sp, #12
   8267c:	af00      	add	r7, sp, #0
   8267e:	4603      	mov	r3, r0
   82680:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82682:	79fb      	ldrb	r3, [r7, #7]
   82684:	f003 031f 	and.w	r3, r3, #31
   82688:	2201      	movs	r2, #1
   8268a:	fa02 f103 	lsl.w	r1, r2, r3
   8268e:	4a05      	ldr	r2, [pc, #20]	; (826a4 <NVIC_EnableIRQ+0x2c>)
   82690:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82694:	095b      	lsrs	r3, r3, #5
   82696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   8269a:	bf00      	nop
   8269c:	370c      	adds	r7, #12
   8269e:	46bd      	mov	sp, r7
   826a0:	bc80      	pop	{r7}
   826a2:	4770      	bx	lr
   826a4:	e000e100 	.word	0xe000e100

000826a8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   826a8:	b480      	push	{r7}
   826aa:	b083      	sub	sp, #12
   826ac:	af00      	add	r7, sp, #0
   826ae:	4603      	mov	r3, r0
   826b0:	6039      	str	r1, [r7, #0]
   826b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   826b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   826b8:	2b00      	cmp	r3, #0
   826ba:	da0b      	bge.n	826d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   826bc:	683b      	ldr	r3, [r7, #0]
   826be:	b2da      	uxtb	r2, r3
   826c0:	490c      	ldr	r1, [pc, #48]	; (826f4 <NVIC_SetPriority+0x4c>)
   826c2:	79fb      	ldrb	r3, [r7, #7]
   826c4:	f003 030f 	and.w	r3, r3, #15
   826c8:	3b04      	subs	r3, #4
   826ca:	0112      	lsls	r2, r2, #4
   826cc:	b2d2      	uxtb	r2, r2
   826ce:	440b      	add	r3, r1
   826d0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   826d2:	e009      	b.n	826e8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   826d4:	683b      	ldr	r3, [r7, #0]
   826d6:	b2da      	uxtb	r2, r3
   826d8:	4907      	ldr	r1, [pc, #28]	; (826f8 <NVIC_SetPriority+0x50>)
   826da:	f997 3007 	ldrsb.w	r3, [r7, #7]
   826de:	0112      	lsls	r2, r2, #4
   826e0:	b2d2      	uxtb	r2, r2
   826e2:	440b      	add	r3, r1
   826e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   826e8:	bf00      	nop
   826ea:	370c      	adds	r7, #12
   826ec:	46bd      	mov	sp, r7
   826ee:	bc80      	pop	{r7}
   826f0:	4770      	bx	lr
   826f2:	bf00      	nop
   826f4:	e000ed00 	.word	0xe000ed00
   826f8:	e000e100 	.word	0xe000e100

000826fc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   826fc:	b480      	push	{r7}
   826fe:	b083      	sub	sp, #12
   82700:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82702:	f3ef 8310 	mrs	r3, PRIMASK
   82706:	603b      	str	r3, [r7, #0]
  return(result);
   82708:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8270a:	2b00      	cmp	r3, #0
   8270c:	bf0c      	ite	eq
   8270e:	2301      	moveq	r3, #1
   82710:	2300      	movne	r3, #0
   82712:	b2db      	uxtb	r3, r3
   82714:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   82716:	b672      	cpsid	i
}
   82718:	bf00      	nop
  __ASM volatile ("dmb");
   8271a:	f3bf 8f5f 	dmb	sy
}
   8271e:	bf00      	nop
	cpu_irq_disable();
   82720:	4b04      	ldr	r3, [pc, #16]	; (82734 <cpu_irq_save+0x38>)
   82722:	2200      	movs	r2, #0
   82724:	701a      	strb	r2, [r3, #0]
	return flags;
   82726:	687b      	ldr	r3, [r7, #4]
}
   82728:	4618      	mov	r0, r3
   8272a:	370c      	adds	r7, #12
   8272c:	46bd      	mov	sp, r7
   8272e:	bc80      	pop	{r7}
   82730:	4770      	bx	lr
   82732:	bf00      	nop
   82734:	200003ec 	.word	0x200003ec

00082738 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   82738:	b480      	push	{r7}
   8273a:	b083      	sub	sp, #12
   8273c:	af00      	add	r7, sp, #0
   8273e:	6078      	str	r0, [r7, #4]
	return (flags);
   82740:	687b      	ldr	r3, [r7, #4]
   82742:	2b00      	cmp	r3, #0
   82744:	bf14      	ite	ne
   82746:	2301      	movne	r3, #1
   82748:	2300      	moveq	r3, #0
   8274a:	b2db      	uxtb	r3, r3
}
   8274c:	4618      	mov	r0, r3
   8274e:	370c      	adds	r7, #12
   82750:	46bd      	mov	sp, r7
   82752:	bc80      	pop	{r7}
   82754:	4770      	bx	lr
   82756:	0000      	movs	r0, r0

00082758 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   82758:	b580      	push	{r7, lr}
   8275a:	b082      	sub	sp, #8
   8275c:	af00      	add	r7, sp, #0
   8275e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   82760:	6878      	ldr	r0, [r7, #4]
   82762:	4b08      	ldr	r3, [pc, #32]	; (82784 <cpu_irq_restore+0x2c>)
   82764:	4798      	blx	r3
   82766:	4603      	mov	r3, r0
   82768:	2b00      	cmp	r3, #0
   8276a:	d007      	beq.n	8277c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   8276c:	4b06      	ldr	r3, [pc, #24]	; (82788 <cpu_irq_restore+0x30>)
   8276e:	2201      	movs	r2, #1
   82770:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82772:	f3bf 8f5f 	dmb	sy
}
   82776:	bf00      	nop
  __ASM volatile ("cpsie i");
   82778:	b662      	cpsie	i
}
   8277a:	bf00      	nop
}
   8277c:	bf00      	nop
   8277e:	3708      	adds	r7, #8
   82780:	46bd      	mov	sp, r7
   82782:	bd80      	pop	{r7, pc}
   82784:	00082739 	.word	0x00082739
   82788:	200003ec 	.word	0x200003ec

0008278c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
   8278c:	b580      	push	{r7, lr}
   8278e:	b084      	sub	sp, #16
   82790:	af00      	add	r7, sp, #0
   82792:	4603      	mov	r3, r0
   82794:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
   82796:	4b08      	ldr	r3, [pc, #32]	; (827b8 <sleepmgr_lock_mode+0x2c>)
   82798:	4798      	blx	r3
   8279a:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
   8279c:	79fb      	ldrb	r3, [r7, #7]
   8279e:	4a07      	ldr	r2, [pc, #28]	; (827bc <sleepmgr_lock_mode+0x30>)
   827a0:	5cd2      	ldrb	r2, [r2, r3]
   827a2:	3201      	adds	r2, #1
   827a4:	b2d1      	uxtb	r1, r2
   827a6:	4a05      	ldr	r2, [pc, #20]	; (827bc <sleepmgr_lock_mode+0x30>)
   827a8:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   827aa:	68f8      	ldr	r0, [r7, #12]
   827ac:	4b04      	ldr	r3, [pc, #16]	; (827c0 <sleepmgr_lock_mode+0x34>)
   827ae:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   827b0:	bf00      	nop
   827b2:	3710      	adds	r7, #16
   827b4:	46bd      	mov	sp, r7
   827b6:	bd80      	pop	{r7, pc}
   827b8:	000826fd 	.word	0x000826fd
   827bc:	200037b0 	.word	0x200037b0
   827c0:	00082759 	.word	0x00082759

000827c4 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
   827c4:	b580      	push	{r7, lr}
   827c6:	b084      	sub	sp, #16
   827c8:	af00      	add	r7, sp, #0
   827ca:	4603      	mov	r3, r0
   827cc:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
   827ce:	4b08      	ldr	r3, [pc, #32]	; (827f0 <sleepmgr_unlock_mode+0x2c>)
   827d0:	4798      	blx	r3
   827d2:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
   827d4:	79fb      	ldrb	r3, [r7, #7]
   827d6:	4a07      	ldr	r2, [pc, #28]	; (827f4 <sleepmgr_unlock_mode+0x30>)
   827d8:	5cd2      	ldrb	r2, [r2, r3]
   827da:	3a01      	subs	r2, #1
   827dc:	b2d1      	uxtb	r1, r2
   827de:	4a05      	ldr	r2, [pc, #20]	; (827f4 <sleepmgr_unlock_mode+0x30>)
   827e0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   827e2:	68f8      	ldr	r0, [r7, #12]
   827e4:	4b04      	ldr	r3, [pc, #16]	; (827f8 <sleepmgr_unlock_mode+0x34>)
   827e6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   827e8:	bf00      	nop
   827ea:	3710      	adds	r7, #16
   827ec:	46bd      	mov	sp, r7
   827ee:	bd80      	pop	{r7, pc}
   827f0:	000826fd 	.word	0x000826fd
   827f4:	200037b0 	.word	0x200037b0
   827f8:	00082759 	.word	0x00082759

000827fc <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   827fc:	b580      	push	{r7, lr}
   827fe:	b082      	sub	sp, #8
   82800:	af00      	add	r7, sp, #0
   82802:	4603      	mov	r3, r0
   82804:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   82806:	79fb      	ldrb	r3, [r7, #7]
   82808:	f083 0301 	eor.w	r3, r3, #1
   8280c:	b2db      	uxtb	r3, r3
   8280e:	2b00      	cmp	r3, #0
   82810:	d006      	beq.n	82820 <udd_sleep_mode+0x24>
   82812:	4b0d      	ldr	r3, [pc, #52]	; (82848 <udd_sleep_mode+0x4c>)
   82814:	781b      	ldrb	r3, [r3, #0]
   82816:	2b00      	cmp	r3, #0
   82818:	d002      	beq.n	82820 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   8281a:	2002      	movs	r0, #2
   8281c:	4b0b      	ldr	r3, [pc, #44]	; (8284c <udd_sleep_mode+0x50>)
   8281e:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   82820:	79fb      	ldrb	r3, [r7, #7]
   82822:	2b00      	cmp	r3, #0
   82824:	d009      	beq.n	8283a <udd_sleep_mode+0x3e>
   82826:	4b08      	ldr	r3, [pc, #32]	; (82848 <udd_sleep_mode+0x4c>)
   82828:	781b      	ldrb	r3, [r3, #0]
   8282a:	f083 0301 	eor.w	r3, r3, #1
   8282e:	b2db      	uxtb	r3, r3
   82830:	2b00      	cmp	r3, #0
   82832:	d002      	beq.n	8283a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   82834:	2002      	movs	r0, #2
   82836:	4b06      	ldr	r3, [pc, #24]	; (82850 <udd_sleep_mode+0x54>)
   82838:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8283a:	4a03      	ldr	r2, [pc, #12]	; (82848 <udd_sleep_mode+0x4c>)
   8283c:	79fb      	ldrb	r3, [r7, #7]
   8283e:	7013      	strb	r3, [r2, #0]
}
   82840:	bf00      	nop
   82842:	3708      	adds	r7, #8
   82844:	46bd      	mov	sp, r7
   82846:	bd80      	pop	{r7, pc}
   82848:	2000373c 	.word	0x2000373c
   8284c:	000827c5 	.word	0x000827c5
   82850:	0008278d 	.word	0x0008278d

00082854 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   82854:	b580      	push	{r7, lr}
   82856:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   82858:	201d      	movs	r0, #29
   8285a:	4b5f      	ldr	r3, [pc, #380]	; (829d8 <UDPHS_Handler+0x184>)
   8285c:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8285e:	4b5f      	ldr	r3, [pc, #380]	; (829dc <UDPHS_Handler+0x188>)
   82860:	4798      	blx	r3
   82862:	4603      	mov	r3, r0
   82864:	f083 0301 	eor.w	r3, r3, #1
   82868:	b2db      	uxtb	r3, r3
   8286a:	2b00      	cmp	r3, #0
   8286c:	d00e      	beq.n	8288c <UDPHS_Handler+0x38>
   8286e:	4b5c      	ldr	r3, [pc, #368]	; (829e0 <UDPHS_Handler+0x18c>)
   82870:	695b      	ldr	r3, [r3, #20]
   82872:	f003 0302 	and.w	r3, r3, #2
   82876:	2b00      	cmp	r3, #0
   82878:	d108      	bne.n	8288c <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   8287a:	b672      	cpsid	i
}
   8287c:	bf00      	nop
  __ASM volatile ("dmb");
   8287e:	f3bf 8f5f 	dmb	sy
}
   82882:	bf00      	nop
		cpu_irq_disable();
   82884:	4b57      	ldr	r3, [pc, #348]	; (829e4 <UDPHS_Handler+0x190>)
   82886:	2200      	movs	r2, #0
   82888:	701a      	strb	r2, [r3, #0]
		return;
   8288a:	e0a4      	b.n	829d6 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   8288c:	4b54      	ldr	r3, [pc, #336]	; (829e0 <UDPHS_Handler+0x18c>)
   8288e:	695b      	ldr	r3, [r3, #20]
   82890:	f003 0308 	and.w	r3, r3, #8
   82894:	2b00      	cmp	r3, #0
   82896:	d00d      	beq.n	828b4 <UDPHS_Handler+0x60>
		udd_ack_sof();
   82898:	4b51      	ldr	r3, [pc, #324]	; (829e0 <UDPHS_Handler+0x18c>)
   8289a:	2208      	movs	r2, #8
   8289c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   8289e:	4b50      	ldr	r3, [pc, #320]	; (829e0 <UDPHS_Handler+0x18c>)
   828a0:	695b      	ldr	r3, [r3, #20]
   828a2:	f003 0301 	and.w	r3, r3, #1
   828a6:	2b00      	cmp	r3, #0
   828a8:	d101      	bne.n	828ae <UDPHS_Handler+0x5a>
			udc_sof_notify();
   828aa:	4b4f      	ldr	r3, [pc, #316]	; (829e8 <UDPHS_Handler+0x194>)
   828ac:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   828ae:	4b4f      	ldr	r3, [pc, #316]	; (829ec <UDPHS_Handler+0x198>)
   828b0:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   828b2:	e08f      	b.n	829d4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   828b4:	4b4a      	ldr	r3, [pc, #296]	; (829e0 <UDPHS_Handler+0x18c>)
   828b6:	695b      	ldr	r3, [r3, #20]
   828b8:	f003 0304 	and.w	r3, r3, #4
   828bc:	2b00      	cmp	r3, #0
   828be:	d005      	beq.n	828cc <UDPHS_Handler+0x78>
		udd_ack_msof();
   828c0:	4b47      	ldr	r3, [pc, #284]	; (829e0 <UDPHS_Handler+0x18c>)
   828c2:	2204      	movs	r2, #4
   828c4:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   828c6:	4b48      	ldr	r3, [pc, #288]	; (829e8 <UDPHS_Handler+0x194>)
   828c8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   828ca:	e083      	b.n	829d4 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   828cc:	4b48      	ldr	r3, [pc, #288]	; (829f0 <UDPHS_Handler+0x19c>)
   828ce:	4798      	blx	r3
   828d0:	4603      	mov	r3, r0
   828d2:	2b00      	cmp	r3, #0
   828d4:	d179      	bne.n	829ca <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   828d6:	4b47      	ldr	r3, [pc, #284]	; (829f4 <UDPHS_Handler+0x1a0>)
   828d8:	4798      	blx	r3
   828da:	4603      	mov	r3, r0
   828dc:	2b00      	cmp	r3, #0
   828de:	d176      	bne.n	829ce <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   828e0:	4b3f      	ldr	r3, [pc, #252]	; (829e0 <UDPHS_Handler+0x18c>)
   828e2:	695b      	ldr	r3, [r3, #20]
   828e4:	f003 0310 	and.w	r3, r3, #16
   828e8:	2b00      	cmp	r3, #0
   828ea:	d01d      	beq.n	82928 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   828ec:	4b3c      	ldr	r3, [pc, #240]	; (829e0 <UDPHS_Handler+0x18c>)
   828ee:	2210      	movs	r2, #16
   828f0:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   828f2:	4b41      	ldr	r3, [pc, #260]	; (829f8 <UDPHS_Handler+0x1a4>)
   828f4:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   828f6:	4b41      	ldr	r3, [pc, #260]	; (829fc <UDPHS_Handler+0x1a8>)
   828f8:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   828fa:	4b41      	ldr	r3, [pc, #260]	; (82a00 <UDPHS_Handler+0x1ac>)
   828fc:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   828fe:	4b41      	ldr	r3, [pc, #260]	; (82a04 <UDPHS_Handler+0x1b0>)
   82900:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   82902:	4b37      	ldr	r3, [pc, #220]	; (829e0 <UDPHS_Handler+0x18c>)
   82904:	691b      	ldr	r3, [r3, #16]
   82906:	4a36      	ldr	r2, [pc, #216]	; (829e0 <UDPHS_Handler+0x18c>)
   82908:	f043 0308 	orr.w	r3, r3, #8
   8290c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8290e:	4b34      	ldr	r3, [pc, #208]	; (829e0 <UDPHS_Handler+0x18c>)
   82910:	691b      	ldr	r3, [r3, #16]
   82912:	4a33      	ldr	r2, [pc, #204]	; (829e0 <UDPHS_Handler+0x18c>)
   82914:	f043 0304 	orr.w	r3, r3, #4
   82918:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   8291a:	4b31      	ldr	r3, [pc, #196]	; (829e0 <UDPHS_Handler+0x18c>)
   8291c:	691b      	ldr	r3, [r3, #16]
   8291e:	4a30      	ldr	r2, [pc, #192]	; (829e0 <UDPHS_Handler+0x18c>)
   82920:	f043 0302 	orr.w	r3, r3, #2
   82924:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   82926:	e055      	b.n	829d4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   82928:	4b2d      	ldr	r3, [pc, #180]	; (829e0 <UDPHS_Handler+0x18c>)
   8292a:	691b      	ldr	r3, [r3, #16]
   8292c:	f003 0302 	and.w	r3, r3, #2
   82930:	2b00      	cmp	r3, #0
   82932:	d020      	beq.n	82976 <UDPHS_Handler+0x122>
   82934:	4b2a      	ldr	r3, [pc, #168]	; (829e0 <UDPHS_Handler+0x18c>)
   82936:	695b      	ldr	r3, [r3, #20]
   82938:	f003 0302 	and.w	r3, r3, #2
   8293c:	2b00      	cmp	r3, #0
   8293e:	d01a      	beq.n	82976 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   82940:	4b27      	ldr	r3, [pc, #156]	; (829e0 <UDPHS_Handler+0x18c>)
   82942:	2220      	movs	r2, #32
   82944:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   82946:	4b26      	ldr	r3, [pc, #152]	; (829e0 <UDPHS_Handler+0x18c>)
   82948:	691b      	ldr	r3, [r3, #16]
   8294a:	4a25      	ldr	r2, [pc, #148]	; (829e0 <UDPHS_Handler+0x18c>)
   8294c:	f023 0302 	bic.w	r3, r3, #2
   82950:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   82952:	4b23      	ldr	r3, [pc, #140]	; (829e0 <UDPHS_Handler+0x18c>)
   82954:	691b      	ldr	r3, [r3, #16]
   82956:	4a22      	ldr	r2, [pc, #136]	; (829e0 <UDPHS_Handler+0x18c>)
   82958:	f043 0320 	orr.w	r3, r3, #32
   8295c:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   8295e:	4b20      	ldr	r3, [pc, #128]	; (829e0 <UDPHS_Handler+0x18c>)
   82960:	2202      	movs	r2, #2
   82962:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   82964:	201d      	movs	r0, #29
   82966:	4b28      	ldr	r3, [pc, #160]	; (82a08 <UDPHS_Handler+0x1b4>)
   82968:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   8296a:	4b28      	ldr	r3, [pc, #160]	; (82a0c <UDPHS_Handler+0x1b8>)
   8296c:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   8296e:	2000      	movs	r0, #0
   82970:	4b27      	ldr	r3, [pc, #156]	; (82a10 <UDPHS_Handler+0x1bc>)
   82972:	4798      	blx	r3
		goto udd_interrupt_end;
   82974:	e02e      	b.n	829d4 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   82976:	4b1a      	ldr	r3, [pc, #104]	; (829e0 <UDPHS_Handler+0x18c>)
   82978:	695b      	ldr	r3, [r3, #20]
   8297a:	f003 0320 	and.w	r3, r3, #32
   8297e:	2b00      	cmp	r3, #0
   82980:	d027      	beq.n	829d2 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   82982:	2001      	movs	r0, #1
   82984:	4b22      	ldr	r3, [pc, #136]	; (82a10 <UDPHS_Handler+0x1bc>)
   82986:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   82988:	4b15      	ldr	r3, [pc, #84]	; (829e0 <UDPHS_Handler+0x18c>)
   8298a:	2202      	movs	r2, #2
   8298c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   8298e:	4b14      	ldr	r3, [pc, #80]	; (829e0 <UDPHS_Handler+0x18c>)
   82990:	2220      	movs	r2, #32
   82992:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   82994:	4b12      	ldr	r3, [pc, #72]	; (829e0 <UDPHS_Handler+0x18c>)
   82996:	691b      	ldr	r3, [r3, #16]
   82998:	4a11      	ldr	r2, [pc, #68]	; (829e0 <UDPHS_Handler+0x18c>)
   8299a:	f023 0320 	bic.w	r3, r3, #32
   8299e:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   829a0:	4b0f      	ldr	r3, [pc, #60]	; (829e0 <UDPHS_Handler+0x18c>)
   829a2:	691b      	ldr	r3, [r3, #16]
   829a4:	4a0e      	ldr	r2, [pc, #56]	; (829e0 <UDPHS_Handler+0x18c>)
   829a6:	f043 0302 	orr.w	r3, r3, #2
   829aa:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   829ac:	4b0c      	ldr	r3, [pc, #48]	; (829e0 <UDPHS_Handler+0x18c>)
   829ae:	691b      	ldr	r3, [r3, #16]
   829b0:	4a0b      	ldr	r2, [pc, #44]	; (829e0 <UDPHS_Handler+0x18c>)
   829b2:	f043 0308 	orr.w	r3, r3, #8
   829b6:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   829b8:	4b09      	ldr	r3, [pc, #36]	; (829e0 <UDPHS_Handler+0x18c>)
   829ba:	691b      	ldr	r3, [r3, #16]
   829bc:	4a08      	ldr	r2, [pc, #32]	; (829e0 <UDPHS_Handler+0x18c>)
   829be:	f043 0304 	orr.w	r3, r3, #4
   829c2:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   829c4:	4b13      	ldr	r3, [pc, #76]	; (82a14 <UDPHS_Handler+0x1c0>)
   829c6:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   829c8:	e004      	b.n	829d4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   829ca:	bf00      	nop
   829cc:	e002      	b.n	829d4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   829ce:	bf00      	nop
   829d0:	e000      	b.n	829d4 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   829d2:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   829d4:	bf00      	nop
}
   829d6:	bd80      	pop	{r7, pc}
   829d8:	00084bb5 	.word	0x00084bb5
   829dc:	00085311 	.word	0x00085311
   829e0:	400a4000 	.word	0x400a4000
   829e4:	200003ec 	.word	0x200003ec
   829e8:	00081629 	.word	0x00081629
   829ec:	00080ebd 	.word	0x00080ebd
   829f0:	00083ce9 	.word	0x00083ce9
   829f4:	00084105 	.word	0x00084105
   829f8:	00083e29 	.word	0x00083e29
   829fc:	000815d5 	.word	0x000815d5
   82a00:	00083649 	.word	0x00083649
   82a04:	000836c9 	.word	0x000836c9
   82a08:	00084c01 	.word	0x00084c01
   82a0c:	00080e91 	.word	0x00080e91
   82a10:	000827fd 	.word	0x000827fd
   82a14:	00080ead 	.word	0x00080ead

00082a18 <udd_enable>:
#endif
}


void udd_enable(void)
{
   82a18:	b580      	push	{r7, lr}
   82a1a:	b082      	sub	sp, #8
   82a1c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   82a1e:	4b19      	ldr	r3, [pc, #100]	; (82a84 <udd_enable+0x6c>)
   82a20:	4798      	blx	r3

	udd_enable_periph_ck();
   82a22:	201d      	movs	r0, #29
   82a24:	4b18      	ldr	r3, [pc, #96]	; (82a88 <udd_enable+0x70>)
   82a26:	4798      	blx	r3

	flags = cpu_irq_save();
   82a28:	4b18      	ldr	r3, [pc, #96]	; (82a8c <udd_enable+0x74>)
   82a2a:	4798      	blx	r3
   82a2c:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   82a2e:	4b18      	ldr	r3, [pc, #96]	; (82a90 <udd_enable+0x78>)
   82a30:	681b      	ldr	r3, [r3, #0]
   82a32:	4a17      	ldr	r2, [pc, #92]	; (82a90 <udd_enable+0x78>)
   82a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82a38:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   82a3a:	2105      	movs	r1, #5
   82a3c:	201d      	movs	r0, #29
   82a3e:	4b15      	ldr	r3, [pc, #84]	; (82a94 <udd_enable+0x7c>)
   82a40:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   82a42:	201d      	movs	r0, #29
   82a44:	4b14      	ldr	r3, [pc, #80]	; (82a98 <udd_enable+0x80>)
   82a46:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   82a48:	4b14      	ldr	r3, [pc, #80]	; (82a9c <udd_enable+0x84>)
   82a4a:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   82a4c:	4b10      	ldr	r3, [pc, #64]	; (82a90 <udd_enable+0x78>)
   82a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82a52:	4a0f      	ldr	r2, [pc, #60]	; (82a90 <udd_enable+0x78>)
   82a54:	f023 0303 	bic.w	r3, r3, #3
   82a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   82a5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82a60:	4b0f      	ldr	r3, [pc, #60]	; (82aa0 <udd_enable+0x88>)
   82a62:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   82a64:	4b0f      	ldr	r3, [pc, #60]	; (82aa4 <udd_enable+0x8c>)
   82a66:	2200      	movs	r2, #0
   82a68:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   82a6a:	2003      	movs	r0, #3
   82a6c:	4b0e      	ldr	r3, [pc, #56]	; (82aa8 <udd_enable+0x90>)
   82a6e:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   82a70:	4b0e      	ldr	r3, [pc, #56]	; (82aac <udd_enable+0x94>)
   82a72:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   82a74:	6878      	ldr	r0, [r7, #4]
   82a76:	4b0e      	ldr	r3, [pc, #56]	; (82ab0 <udd_enable+0x98>)
   82a78:	4798      	blx	r3
}
   82a7a:	bf00      	nop
   82a7c:	3708      	adds	r7, #8
   82a7e:	46bd      	mov	sp, r7
   82a80:	bd80      	pop	{r7, pc}
   82a82:	bf00      	nop
   82a84:	000847cd 	.word	0x000847cd
   82a88:	00084bb5 	.word	0x00084bb5
   82a8c:	000826fd 	.word	0x000826fd
   82a90:	400a4000 	.word	0x400a4000
   82a94:	000826a9 	.word	0x000826a9
   82a98:	00082679 	.word	0x00082679
   82a9c:	00083dcd 	.word	0x00083dcd
   82aa0:	00084c4d 	.word	0x00084c4d
   82aa4:	2000373c 	.word	0x2000373c
   82aa8:	0008278d 	.word	0x0008278d
   82aac:	00082ab5 	.word	0x00082ab5
   82ab0:	00082759 	.word	0x00082759

00082ab4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   82ab4:	b580      	push	{r7, lr}
   82ab6:	b082      	sub	sp, #8
   82ab8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   82aba:	4b26      	ldr	r3, [pc, #152]	; (82b54 <udd_attach+0xa0>)
   82abc:	4798      	blx	r3
   82abe:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   82ac0:	2001      	movs	r0, #1
   82ac2:	4b25      	ldr	r3, [pc, #148]	; (82b58 <udd_attach+0xa4>)
   82ac4:	4798      	blx	r3
	udd_enable_periph_ck();
   82ac6:	201d      	movs	r0, #29
   82ac8:	4b24      	ldr	r3, [pc, #144]	; (82b5c <udd_attach+0xa8>)
   82aca:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   82acc:	4b24      	ldr	r3, [pc, #144]	; (82b60 <udd_attach+0xac>)
   82ace:	681b      	ldr	r3, [r3, #0]
   82ad0:	4a23      	ldr	r2, [pc, #140]	; (82b60 <udd_attach+0xac>)
   82ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82ad6:	6013      	str	r3, [r2, #0]
   82ad8:	4b21      	ldr	r3, [pc, #132]	; (82b60 <udd_attach+0xac>)
   82ada:	681b      	ldr	r3, [r3, #0]
   82adc:	4a20      	ldr	r2, [pc, #128]	; (82b60 <udd_attach+0xac>)
   82ade:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   82ae2:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   82ae4:	4b1e      	ldr	r3, [pc, #120]	; (82b60 <udd_attach+0xac>)
   82ae6:	691b      	ldr	r3, [r3, #16]
   82ae8:	4a1d      	ldr	r2, [pc, #116]	; (82b60 <udd_attach+0xac>)
   82aea:	f043 0310 	orr.w	r3, r3, #16
   82aee:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   82af0:	4b1b      	ldr	r3, [pc, #108]	; (82b60 <udd_attach+0xac>)
   82af2:	691b      	ldr	r3, [r3, #16]
   82af4:	4a1a      	ldr	r2, [pc, #104]	; (82b60 <udd_attach+0xac>)
   82af6:	f043 0302 	orr.w	r3, r3, #2
   82afa:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   82afc:	4b18      	ldr	r3, [pc, #96]	; (82b60 <udd_attach+0xac>)
   82afe:	691b      	ldr	r3, [r3, #16]
   82b00:	4a17      	ldr	r2, [pc, #92]	; (82b60 <udd_attach+0xac>)
   82b02:	f043 0320 	orr.w	r3, r3, #32
   82b06:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   82b08:	4b15      	ldr	r3, [pc, #84]	; (82b60 <udd_attach+0xac>)
   82b0a:	691b      	ldr	r3, [r3, #16]
   82b0c:	4a14      	ldr	r2, [pc, #80]	; (82b60 <udd_attach+0xac>)
   82b0e:	f043 0308 	orr.w	r3, r3, #8
   82b12:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   82b14:	4b12      	ldr	r3, [pc, #72]	; (82b60 <udd_attach+0xac>)
   82b16:	691b      	ldr	r3, [r3, #16]
   82b18:	4a11      	ldr	r2, [pc, #68]	; (82b60 <udd_attach+0xac>)
   82b1a:	f043 0304 	orr.w	r3, r3, #4
   82b1e:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   82b20:	4b0f      	ldr	r3, [pc, #60]	; (82b60 <udd_attach+0xac>)
   82b22:	2208      	movs	r2, #8
   82b24:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   82b26:	4b0e      	ldr	r3, [pc, #56]	; (82b60 <udd_attach+0xac>)
   82b28:	2204      	movs	r2, #4
   82b2a:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   82b2c:	4b0c      	ldr	r3, [pc, #48]	; (82b60 <udd_attach+0xac>)
   82b2e:	2210      	movs	r2, #16
   82b30:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   82b32:	4b0b      	ldr	r3, [pc, #44]	; (82b60 <udd_attach+0xac>)
   82b34:	2202      	movs	r2, #2
   82b36:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   82b38:	4b09      	ldr	r3, [pc, #36]	; (82b60 <udd_attach+0xac>)
   82b3a:	2220      	movs	r2, #32
   82b3c:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   82b3e:	201d      	movs	r0, #29
   82b40:	4b08      	ldr	r3, [pc, #32]	; (82b64 <udd_attach+0xb0>)
   82b42:	4798      	blx	r3
	cpu_irq_restore(flags);
   82b44:	6878      	ldr	r0, [r7, #4]
   82b46:	4b08      	ldr	r3, [pc, #32]	; (82b68 <udd_attach+0xb4>)
   82b48:	4798      	blx	r3
}
   82b4a:	bf00      	nop
   82b4c:	3708      	adds	r7, #8
   82b4e:	46bd      	mov	sp, r7
   82b50:	bd80      	pop	{r7, pc}
   82b52:	bf00      	nop
   82b54:	000826fd 	.word	0x000826fd
   82b58:	000827fd 	.word	0x000827fd
   82b5c:	00084bb5 	.word	0x00084bb5
   82b60:	400a4000 	.word	0x400a4000
   82b64:	00084c01 	.word	0x00084c01
   82b68:	00082759 	.word	0x00082759

00082b6c <udd_detach>:


void udd_detach(void)
{
   82b6c:	b580      	push	{r7, lr}
   82b6e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   82b70:	201d      	movs	r0, #29
   82b72:	4b0b      	ldr	r3, [pc, #44]	; (82ba0 <udd_detach+0x34>)
   82b74:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   82b76:	4b0b      	ldr	r3, [pc, #44]	; (82ba4 <udd_detach+0x38>)
   82b78:	681b      	ldr	r3, [r3, #0]
   82b7a:	4a0a      	ldr	r2, [pc, #40]	; (82ba4 <udd_detach+0x38>)
   82b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82b80:	6013      	str	r3, [r2, #0]
   82b82:	4b08      	ldr	r3, [pc, #32]	; (82ba4 <udd_detach+0x38>)
   82b84:	681b      	ldr	r3, [r3, #0]
   82b86:	4a07      	ldr	r2, [pc, #28]	; (82ba4 <udd_detach+0x38>)
   82b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82b8c:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   82b8e:	201d      	movs	r0, #29
   82b90:	4b05      	ldr	r3, [pc, #20]	; (82ba8 <udd_detach+0x3c>)
   82b92:	4798      	blx	r3
	udd_sleep_mode(false);
   82b94:	2000      	movs	r0, #0
   82b96:	4b05      	ldr	r3, [pc, #20]	; (82bac <udd_detach+0x40>)
   82b98:	4798      	blx	r3
}
   82b9a:	bf00      	nop
   82b9c:	bd80      	pop	{r7, pc}
   82b9e:	bf00      	nop
   82ba0:	00084bb5 	.word	0x00084bb5
   82ba4:	400a4000 	.word	0x400a4000
   82ba8:	00084c01 	.word	0x00084c01
   82bac:	000827fd 	.word	0x000827fd

00082bb0 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   82bb0:	b480      	push	{r7}
   82bb2:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   82bb4:	4b06      	ldr	r3, [pc, #24]	; (82bd0 <udd_is_high_speed+0x20>)
   82bb6:	695b      	ldr	r3, [r3, #20]
   82bb8:	f003 0301 	and.w	r3, r3, #1
   82bbc:	2b00      	cmp	r3, #0
   82bbe:	bf14      	ite	ne
   82bc0:	2301      	movne	r3, #1
   82bc2:	2300      	moveq	r3, #0
   82bc4:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   82bc6:	4618      	mov	r0, r3
   82bc8:	46bd      	mov	sp, r7
   82bca:	bc80      	pop	{r7}
   82bcc:	4770      	bx	lr
   82bce:	bf00      	nop
   82bd0:	400a4000 	.word	0x400a4000

00082bd4 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   82bd4:	b480      	push	{r7}
   82bd6:	b083      	sub	sp, #12
   82bd8:	af00      	add	r7, sp, #0
   82bda:	4603      	mov	r3, r0
   82bdc:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   82bde:	4b0d      	ldr	r3, [pc, #52]	; (82c14 <udd_set_address+0x40>)
   82be0:	681b      	ldr	r3, [r3, #0]
   82be2:	4a0c      	ldr	r2, [pc, #48]	; (82c14 <udd_set_address+0x40>)
   82be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82be8:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   82bea:	4b0a      	ldr	r3, [pc, #40]	; (82c14 <udd_set_address+0x40>)
   82bec:	681b      	ldr	r3, [r3, #0]
   82bee:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   82bf2:	79fb      	ldrb	r3, [r7, #7]
   82bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82bf8:	4906      	ldr	r1, [pc, #24]	; (82c14 <udd_set_address+0x40>)
   82bfa:	4313      	orrs	r3, r2
   82bfc:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   82bfe:	4b05      	ldr	r3, [pc, #20]	; (82c14 <udd_set_address+0x40>)
   82c00:	681b      	ldr	r3, [r3, #0]
   82c02:	4a04      	ldr	r2, [pc, #16]	; (82c14 <udd_set_address+0x40>)
   82c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c08:	6013      	str	r3, [r2, #0]
}
   82c0a:	bf00      	nop
   82c0c:	370c      	adds	r7, #12
   82c0e:	46bd      	mov	sp, r7
   82c10:	bc80      	pop	{r7}
   82c12:	4770      	bx	lr
   82c14:	400a4000 	.word	0x400a4000

00082c18 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   82c18:	b480      	push	{r7}
   82c1a:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   82c1c:	4b04      	ldr	r3, [pc, #16]	; (82c30 <udd_getaddress+0x18>)
   82c1e:	681b      	ldr	r3, [r3, #0]
   82c20:	b2db      	uxtb	r3, r3
   82c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82c26:	b2db      	uxtb	r3, r3
}
   82c28:	4618      	mov	r0, r3
   82c2a:	46bd      	mov	sp, r7
   82c2c:	bc80      	pop	{r7}
   82c2e:	4770      	bx	lr
   82c30:	400a4000 	.word	0x400a4000

00082c34 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   82c34:	b480      	push	{r7}
   82c36:	af00      	add	r7, sp, #0
	return udd_frame_number();
   82c38:	4b05      	ldr	r3, [pc, #20]	; (82c50 <udd_get_frame_number+0x1c>)
   82c3a:	685b      	ldr	r3, [r3, #4]
   82c3c:	08db      	lsrs	r3, r3, #3
   82c3e:	b29b      	uxth	r3, r3
   82c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82c44:	b29b      	uxth	r3, r3
}
   82c46:	4618      	mov	r0, r3
   82c48:	46bd      	mov	sp, r7
   82c4a:	bc80      	pop	{r7}
   82c4c:	4770      	bx	lr
   82c4e:	bf00      	nop
   82c50:	400a4000 	.word	0x400a4000

00082c54 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   82c54:	b480      	push	{r7}
   82c56:	b083      	sub	sp, #12
   82c58:	af00      	add	r7, sp, #0
   82c5a:	6078      	str	r0, [r7, #4]
   82c5c:	460b      	mov	r3, r1
   82c5e:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   82c60:	4a05      	ldr	r2, [pc, #20]	; (82c78 <udd_set_setup_payload+0x24>)
   82c62:	687b      	ldr	r3, [r7, #4]
   82c64:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   82c66:	4a04      	ldr	r2, [pc, #16]	; (82c78 <udd_set_setup_payload+0x24>)
   82c68:	887b      	ldrh	r3, [r7, #2]
   82c6a:	8193      	strh	r3, [r2, #12]
}
   82c6c:	bf00      	nop
   82c6e:	370c      	adds	r7, #12
   82c70:	46bd      	mov	sp, r7
   82c72:	bc80      	pop	{r7}
   82c74:	4770      	bx	lr
   82c76:	bf00      	nop
   82c78:	20003740 	.word	0x20003740

00082c7c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82c7c:	b590      	push	{r4, r7, lr}
   82c7e:	b089      	sub	sp, #36	; 0x24
   82c80:	af02      	add	r7, sp, #8
   82c82:	4603      	mov	r3, r0
   82c84:	71fb      	strb	r3, [r7, #7]
   82c86:	460b      	mov	r3, r1
   82c88:	71bb      	strb	r3, [r7, #6]
   82c8a:	4613      	mov	r3, r2
   82c8c:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   82c8e:	2300      	movs	r3, #0
   82c90:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   82c92:	2300      	movs	r3, #0
   82c94:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   82c96:	79fb      	ldrb	r3, [r7, #7]
   82c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82c9c:	2b00      	cmp	r3, #0
   82c9e:	bf14      	ite	ne
   82ca0:	2301      	movne	r3, #1
   82ca2:	2300      	moveq	r3, #0
   82ca4:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   82ca6:	79fb      	ldrb	r3, [r7, #7]
   82ca8:	f003 030f 	and.w	r3, r3, #15
   82cac:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   82cae:	79fb      	ldrb	r3, [r7, #7]
   82cb0:	2b02      	cmp	r3, #2
   82cb2:	d901      	bls.n	82cb8 <udd_ep_alloc+0x3c>
		return false;
   82cb4:	2300      	movs	r3, #0
   82cb6:	e1b5      	b.n	83024 <udd_ep_alloc+0x3a8>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   82cb8:	4aa8      	ldr	r2, [pc, #672]	; (82f5c <udd_ep_alloc+0x2e0>)
   82cba:	79fb      	ldrb	r3, [r7, #7]
   82cbc:	015b      	lsls	r3, r3, #5
   82cbe:	4413      	add	r3, r2
   82cc0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82cc4:	681b      	ldr	r3, [r3, #0]
   82cc6:	f003 0301 	and.w	r3, r3, #1
   82cca:	2b00      	cmp	r3, #0
   82ccc:	d001      	beq.n	82cd2 <udd_ep_alloc+0x56>
		return false;
   82cce:	2300      	movs	r3, #0
   82cd0:	e1a8      	b.n	83024 <udd_ep_alloc+0x3a8>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82cd2:	79bb      	ldrb	r3, [r7, #6]
   82cd4:	f003 0303 	and.w	r3, r3, #3
   82cd8:	2b03      	cmp	r3, #3
   82cda:	d01a      	beq.n	82d12 <udd_ep_alloc+0x96>
   82cdc:	2b03      	cmp	r3, #3
   82cde:	dc1e      	bgt.n	82d1e <udd_ep_alloc+0xa2>
   82ce0:	2b01      	cmp	r3, #1
   82ce2:	d002      	beq.n	82cea <udd_ep_alloc+0x6e>
   82ce4:	2b02      	cmp	r3, #2
   82ce6:	d017      	beq.n	82d18 <udd_ep_alloc+0x9c>
   82ce8:	e019      	b.n	82d1e <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   82cea:	79fb      	ldrb	r3, [r7, #7]
   82cec:	2b00      	cmp	r3, #0
   82cee:	d007      	beq.n	82d00 <udd_ep_alloc+0x84>
   82cf0:	79fb      	ldrb	r3, [r7, #7]
   82cf2:	2b03      	cmp	r3, #3
   82cf4:	d004      	beq.n	82d00 <udd_ep_alloc+0x84>
   82cf6:	79fb      	ldrb	r3, [r7, #7]
   82cf8:	2b04      	cmp	r3, #4
   82cfa:	d001      	beq.n	82d00 <udd_ep_alloc+0x84>
   82cfc:	2301      	movs	r3, #1
   82cfe:	e000      	b.n	82d02 <udd_ep_alloc+0x86>
   82d00:	2300      	movs	r3, #0
   82d02:	747b      	strb	r3, [r7, #17]
   82d04:	7c7b      	ldrb	r3, [r7, #17]
   82d06:	f003 0301 	and.w	r3, r3, #1
   82d0a:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   82d0c:	2301      	movs	r3, #1
   82d0e:	757b      	strb	r3, [r7, #21]
		break;
   82d10:	e007      	b.n	82d22 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   82d12:	2301      	movs	r3, #1
   82d14:	757b      	strb	r3, [r7, #21]
		break;
   82d16:	e004      	b.n	82d22 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   82d18:	2302      	movs	r3, #2
   82d1a:	757b      	strb	r3, [r7, #21]
		break;
   82d1c:	e001      	b.n	82d22 <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   82d1e:	2300      	movs	r3, #0
   82d20:	e180      	b.n	83024 <udd_ep_alloc+0x3a8>
	}
	switch (nb_bank) {
   82d22:	7d7b      	ldrb	r3, [r7, #21]
   82d24:	2b03      	cmp	r3, #3
   82d26:	d00c      	beq.n	82d42 <udd_ep_alloc+0xc6>
   82d28:	2b03      	cmp	r3, #3
   82d2a:	dc0d      	bgt.n	82d48 <udd_ep_alloc+0xcc>
   82d2c:	2b01      	cmp	r3, #1
   82d2e:	d002      	beq.n	82d36 <udd_ep_alloc+0xba>
   82d30:	2b02      	cmp	r3, #2
   82d32:	d003      	beq.n	82d3c <udd_ep_alloc+0xc0>
   82d34:	e008      	b.n	82d48 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82d36:	2301      	movs	r3, #1
   82d38:	753b      	strb	r3, [r7, #20]
		break;
   82d3a:	e007      	b.n	82d4c <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82d3c:	2302      	movs	r3, #2
   82d3e:	753b      	strb	r3, [r7, #20]
		break;
   82d40:	e004      	b.n	82d4c <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82d42:	2303      	movs	r3, #3
   82d44:	753b      	strb	r3, [r7, #20]
		break;
   82d46:	e001      	b.n	82d4c <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   82d48:	2300      	movs	r3, #0
   82d4a:	e16b      	b.n	83024 <udd_ep_alloc+0x3a8>
	}
	if (b_iso_hbw) {
   82d4c:	7c7b      	ldrb	r3, [r7, #17]
   82d4e:	2b00      	cmp	r3, #0
   82d50:	d017      	beq.n	82d82 <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   82d52:	88bb      	ldrh	r3, [r7, #4]
   82d54:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   82d5c:	d003      	beq.n	82d66 <udd_ep_alloc+0xea>
   82d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   82d62:	d003      	beq.n	82d6c <udd_ep_alloc+0xf0>
   82d64:	e005      	b.n	82d72 <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   82d66:	2302      	movs	r3, #2
   82d68:	74fb      	strb	r3, [r7, #19]
			break;
   82d6a:	e005      	b.n	82d78 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   82d6c:	2303      	movs	r3, #3
   82d6e:	74fb      	strb	r3, [r7, #19]
			break;
   82d70:	e002      	b.n	82d78 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   82d72:	2301      	movs	r3, #1
   82d74:	74fb      	strb	r3, [r7, #19]
			break;
   82d76:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   82d78:	88bb      	ldrh	r3, [r7, #4]
   82d7a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   82d7e:	80bb      	strh	r3, [r7, #4]
   82d80:	e006      	b.n	82d90 <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   82d82:	88bb      	ldrh	r3, [r7, #4]
   82d84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82d88:	2b00      	cmp	r3, #0
   82d8a:	d001      	beq.n	82d90 <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   82d8c:	2300      	movs	r3, #0
   82d8e:	e149      	b.n	83024 <udd_ep_alloc+0x3a8>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82d90:	4a72      	ldr	r2, [pc, #456]	; (82f5c <udd_ep_alloc+0x2e0>)
   82d92:	79fb      	ldrb	r3, [r7, #7]
   82d94:	3308      	adds	r3, #8
   82d96:	015b      	lsls	r3, r3, #5
   82d98:	4413      	add	r3, r2
   82d9a:	681b      	ldr	r3, [r3, #0]
   82d9c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82da0:	f023 0303 	bic.w	r3, r3, #3
   82da4:	79ba      	ldrb	r2, [r7, #6]
   82da6:	0112      	lsls	r2, r2, #4
   82da8:	f002 0230 	and.w	r2, r2, #48	; 0x30
   82dac:	7c39      	ldrb	r1, [r7, #16]
   82dae:	2900      	cmp	r1, #0
   82db0:	d001      	beq.n	82db6 <udd_ep_alloc+0x13a>
   82db2:	2108      	movs	r1, #8
   82db4:	e000      	b.n	82db8 <udd_ep_alloc+0x13c>
   82db6:	2100      	movs	r1, #0
   82db8:	4311      	orrs	r1, r2
   82dba:	88ba      	ldrh	r2, [r7, #4]
   82dbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   82dc0:	d207      	bcs.n	82dd2 <udd_ep_alloc+0x156>
   82dc2:	88ba      	ldrh	r2, [r7, #4]
   82dc4:	2a08      	cmp	r2, #8
   82dc6:	bf38      	it	cc
   82dc8:	2208      	movcc	r2, #8
   82dca:	b292      	uxth	r2, r2
   82dcc:	0052      	lsls	r2, r2, #1
   82dce:	3a01      	subs	r2, #1
   82dd0:	e001      	b.n	82dd6 <udd_ep_alloc+0x15a>
   82dd2:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82dd6:	fab2 f282 	clz	r2, r2
   82dda:	f1c2 021c 	rsb	r2, r2, #28
   82dde:	4311      	orrs	r1, r2
   82de0:	7d3a      	ldrb	r2, [r7, #20]
   82de2:	0192      	lsls	r2, r2, #6
   82de4:	b2d2      	uxtb	r2, r2
   82de6:	4311      	orrs	r1, r2
   82de8:	7c7a      	ldrb	r2, [r7, #17]
   82dea:	2a00      	cmp	r2, #0
   82dec:	d004      	beq.n	82df8 <udd_ep_alloc+0x17c>
   82dee:	7cfa      	ldrb	r2, [r7, #19]
   82df0:	0212      	lsls	r2, r2, #8
   82df2:	f402 7240 	and.w	r2, r2, #768	; 0x300
   82df6:	e000      	b.n	82dfa <udd_ep_alloc+0x17e>
   82df8:	2200      	movs	r2, #0
   82dfa:	430a      	orrs	r2, r1
   82dfc:	f3c2 0209 	ubfx	r2, r2, #0, #10
   82e00:	4856      	ldr	r0, [pc, #344]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e02:	79f9      	ldrb	r1, [r7, #7]
   82e04:	431a      	orrs	r2, r3
   82e06:	f101 0308 	add.w	r3, r1, #8
   82e0a:	015b      	lsls	r3, r3, #5
   82e0c:	4403      	add	r3, r0
   82e0e:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   82e10:	4a52      	ldr	r2, [pc, #328]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e12:	79fb      	ldrb	r3, [r7, #7]
   82e14:	3308      	adds	r3, #8
   82e16:	015b      	lsls	r3, r3, #5
   82e18:	4413      	add	r3, r2
   82e1a:	681b      	ldr	r3, [r3, #0]
   82e1c:	2b00      	cmp	r3, #0
   82e1e:	db01      	blt.n	82e24 <udd_ep_alloc+0x1a8>
		return false;
   82e20:	2300      	movs	r3, #0
   82e22:	e0ff      	b.n	83024 <udd_ep_alloc+0x3a8>
	}
	udd_enable_endpoint(ep);
   82e24:	4a4d      	ldr	r2, [pc, #308]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e26:	79fb      	ldrb	r3, [r7, #7]
   82e28:	3308      	adds	r3, #8
   82e2a:	015b      	lsls	r3, r3, #5
   82e2c:	4413      	add	r3, r2
   82e2e:	3304      	adds	r3, #4
   82e30:	2201      	movs	r2, #1
   82e32:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   82e34:	2300      	movs	r3, #0
   82e36:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82e38:	2302      	movs	r3, #2
   82e3a:	74bb      	strb	r3, [r7, #18]
   82e3c:	e039      	b.n	82eb2 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   82e3e:	4a47      	ldr	r2, [pc, #284]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e40:	7cbb      	ldrb	r3, [r7, #18]
   82e42:	015b      	lsls	r3, r3, #5
   82e44:	4413      	add	r3, r2
   82e46:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82e4a:	681b      	ldr	r3, [r3, #0]
   82e4c:	f003 0301 	and.w	r3, r3, #1
   82e50:	2b00      	cmp	r3, #0
   82e52:	d02b      	beq.n	82eac <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   82e54:	4a41      	ldr	r2, [pc, #260]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e56:	7cbb      	ldrb	r3, [r7, #18]
   82e58:	3308      	adds	r3, #8
   82e5a:	015b      	lsls	r3, r3, #5
   82e5c:	4413      	add	r3, r2
   82e5e:	681b      	ldr	r3, [r3, #0]
   82e60:	099b      	lsrs	r3, r3, #6
   82e62:	b2db      	uxtb	r3, r3
   82e64:	f003 0303 	and.w	r3, r3, #3
   82e68:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   82e6a:	7d3a      	ldrb	r2, [r7, #20]
   82e6c:	7cbb      	ldrb	r3, [r7, #18]
   82e6e:	005b      	lsls	r3, r3, #1
   82e70:	fa02 f303 	lsl.w	r3, r2, r3
   82e74:	b21a      	sxth	r2, r3
   82e76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   82e7a:	4313      	orrs	r3, r2
   82e7c:	b21b      	sxth	r3, r3
   82e7e:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   82e80:	4a36      	ldr	r2, [pc, #216]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e82:	7cbb      	ldrb	r3, [r7, #18]
   82e84:	015b      	lsls	r3, r3, #5
   82e86:	4413      	add	r3, r2
   82e88:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82e8c:	2201      	movs	r2, #1
   82e8e:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   82e90:	4a32      	ldr	r2, [pc, #200]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e92:	7cbb      	ldrb	r3, [r7, #18]
   82e94:	3308      	adds	r3, #8
   82e96:	015b      	lsls	r3, r3, #5
   82e98:	4413      	add	r3, r2
   82e9a:	681a      	ldr	r2, [r3, #0]
   82e9c:	492f      	ldr	r1, [pc, #188]	; (82f5c <udd_ep_alloc+0x2e0>)
   82e9e:	7cbb      	ldrb	r3, [r7, #18]
   82ea0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82ea4:	3308      	adds	r3, #8
   82ea6:	015b      	lsls	r3, r3, #5
   82ea8:	440b      	add	r3, r1
   82eaa:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82eac:	7cbb      	ldrb	r3, [r7, #18]
   82eae:	3b01      	subs	r3, #1
   82eb0:	74bb      	strb	r3, [r7, #18]
   82eb2:	7cba      	ldrb	r2, [r7, #18]
   82eb4:	79fb      	ldrb	r3, [r7, #7]
   82eb6:	429a      	cmp	r2, r3
   82eb8:	d2c1      	bcs.n	82e3e <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82eba:	79fb      	ldrb	r3, [r7, #7]
   82ebc:	74bb      	strb	r3, [r7, #18]
   82ebe:	e0ac      	b.n	8301a <udd_ep_alloc+0x39e>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82ec0:	7cbb      	ldrb	r3, [r7, #18]
   82ec2:	1e5a      	subs	r2, r3, #1
   82ec4:	4613      	mov	r3, r2
   82ec6:	005b      	lsls	r3, r3, #1
   82ec8:	4413      	add	r3, r2
   82eca:	00db      	lsls	r3, r3, #3
   82ecc:	4a24      	ldr	r2, [pc, #144]	; (82f60 <udd_ep_alloc+0x2e4>)
   82ece:	4413      	add	r3, r2
   82ed0:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   82ed2:	68fb      	ldr	r3, [r7, #12]
   82ed4:	7d1b      	ldrb	r3, [r3, #20]
   82ed6:	f3c3 0300 	ubfx	r3, r3, #0, #1
   82eda:	b2db      	uxtb	r3, r3
   82edc:	2b00      	cmp	r3, #0
   82ede:	bf14      	ite	ne
   82ee0:	2301      	movne	r3, #1
   82ee2:	2300      	moveq	r3, #0
   82ee4:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82ee6:	8afa      	ldrh	r2, [r7, #22]
   82ee8:	7cbb      	ldrb	r3, [r7, #18]
   82eea:	005b      	lsls	r3, r3, #1
   82eec:	fa42 f303 	asr.w	r3, r2, r3
   82ef0:	b2db      	uxtb	r3, r3
   82ef2:	f003 0303 	and.w	r3, r3, #3
   82ef6:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   82ef8:	7d3b      	ldrb	r3, [r7, #20]
   82efa:	2b00      	cmp	r3, #0
   82efc:	f000 8089 	beq.w	83012 <udd_ep_alloc+0x396>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   82f00:	68fa      	ldr	r2, [r7, #12]
   82f02:	7d13      	ldrb	r3, [r2, #20]
   82f04:	f36f 0300 	bfc	r3, #0, #1
   82f08:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   82f0a:	4a14      	ldr	r2, [pc, #80]	; (82f5c <udd_ep_alloc+0x2e0>)
   82f0c:	7cbb      	ldrb	r3, [r7, #18]
   82f0e:	3308      	adds	r3, #8
   82f10:	015b      	lsls	r3, r3, #5
   82f12:	4413      	add	r3, r2
   82f14:	681b      	ldr	r3, [r3, #0]
   82f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   82f1a:	7d3b      	ldrb	r3, [r7, #20]
   82f1c:	019b      	lsls	r3, r3, #6
   82f1e:	b2da      	uxtb	r2, r3
   82f20:	480e      	ldr	r0, [pc, #56]	; (82f5c <udd_ep_alloc+0x2e0>)
   82f22:	7cbb      	ldrb	r3, [r7, #18]
   82f24:	430a      	orrs	r2, r1
   82f26:	3308      	adds	r3, #8
   82f28:	015b      	lsls	r3, r3, #5
   82f2a:	4403      	add	r3, r0
   82f2c:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   82f2e:	4a0b      	ldr	r2, [pc, #44]	; (82f5c <udd_ep_alloc+0x2e0>)
   82f30:	7cbb      	ldrb	r3, [r7, #18]
   82f32:	3308      	adds	r3, #8
   82f34:	015b      	lsls	r3, r3, #5
   82f36:	4413      	add	r3, r2
   82f38:	3304      	adds	r3, #4
   82f3a:	2201      	movs	r2, #1
   82f3c:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   82f3e:	4a07      	ldr	r2, [pc, #28]	; (82f5c <udd_ep_alloc+0x2e0>)
   82f40:	7cbb      	ldrb	r3, [r7, #18]
   82f42:	3308      	adds	r3, #8
   82f44:	015b      	lsls	r3, r3, #5
   82f46:	4413      	add	r3, r2
   82f48:	681b      	ldr	r3, [r3, #0]
   82f4a:	2b00      	cmp	r3, #0
   82f4c:	db21      	blt.n	82f92 <udd_ep_alloc+0x316>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   82f4e:	68fb      	ldr	r3, [r7, #12]
   82f50:	681b      	ldr	r3, [r3, #0]
   82f52:	2b00      	cmp	r3, #0
   82f54:	d106      	bne.n	82f64 <udd_ep_alloc+0x2e8>
				return false;
   82f56:	2300      	movs	r3, #0
   82f58:	e064      	b.n	83024 <udd_ep_alloc+0x3a8>
   82f5a:	bf00      	nop
   82f5c:	400a4000 	.word	0x400a4000
   82f60:	20003760 	.word	0x20003760
			}
			if (Is_udd_endpoint_in(i)) {
   82f64:	4a31      	ldr	r2, [pc, #196]	; (8302c <udd_ep_alloc+0x3b0>)
   82f66:	7cbb      	ldrb	r3, [r7, #18]
   82f68:	3308      	adds	r3, #8
   82f6a:	015b      	lsls	r3, r3, #5
   82f6c:	4413      	add	r3, r2
   82f6e:	681b      	ldr	r3, [r3, #0]
   82f70:	f003 0308 	and.w	r3, r3, #8
   82f74:	2b00      	cmp	r3, #0
   82f76:	d003      	beq.n	82f80 <udd_ep_alloc+0x304>
				i |= USB_EP_DIR_IN;
   82f78:	7cbb      	ldrb	r3, [r7, #18]
   82f7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   82f7e:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82f80:	68fb      	ldr	r3, [r7, #12]
   82f82:	681b      	ldr	r3, [r3, #0]
   82f84:	68fa      	ldr	r2, [r7, #12]
   82f86:	68d1      	ldr	r1, [r2, #12]
   82f88:	7cba      	ldrb	r2, [r7, #18]
   82f8a:	2001      	movs	r0, #1
   82f8c:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   82f8e:	2300      	movs	r3, #0
   82f90:	e048      	b.n	83024 <udd_ep_alloc+0x3a8>
		}
		udd_enable_endpoint_bank_autoswitch(i);
   82f92:	4a26      	ldr	r2, [pc, #152]	; (8302c <udd_ep_alloc+0x3b0>)
   82f94:	7cbb      	ldrb	r3, [r7, #18]
   82f96:	3308      	adds	r3, #8
   82f98:	015b      	lsls	r3, r3, #5
   82f9a:	4413      	add	r3, r2
   82f9c:	3304      	adds	r3, #4
   82f9e:	681a      	ldr	r2, [r3, #0]
   82fa0:	4922      	ldr	r1, [pc, #136]	; (8302c <udd_ep_alloc+0x3b0>)
   82fa2:	7cbb      	ldrb	r3, [r7, #18]
   82fa4:	f042 0202 	orr.w	r2, r2, #2
   82fa8:	3308      	adds	r3, #8
   82faa:	015b      	lsls	r3, r3, #5
   82fac:	440b      	add	r3, r1
   82fae:	3304      	adds	r3, #4
   82fb0:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   82fb2:	7afb      	ldrb	r3, [r7, #11]
   82fb4:	2b00      	cmp	r3, #0
   82fb6:	d02d      	beq.n	83014 <udd_ep_alloc+0x398>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82fb8:	68fb      	ldr	r3, [r7, #12]
   82fba:	68da      	ldr	r2, [r3, #12]
   82fbc:	68fb      	ldr	r3, [r7, #12]
   82fbe:	691b      	ldr	r3, [r3, #16]
   82fc0:	1ad2      	subs	r2, r2, r3
   82fc2:	68fb      	ldr	r3, [r7, #12]
   82fc4:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   82fc6:	68fb      	ldr	r3, [r7, #12]
   82fc8:	7d1b      	ldrb	r3, [r3, #20]
   82fca:	f3c3 0340 	ubfx	r3, r3, #1, #1
   82fce:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   82fd0:	2b00      	cmp	r3, #0
   82fd2:	bf14      	ite	ne
   82fd4:	2301      	movne	r3, #1
   82fd6:	2300      	moveq	r3, #0
   82fd8:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   82fda:	68fb      	ldr	r3, [r7, #12]
   82fdc:	685a      	ldr	r2, [r3, #4]
   82fde:	68fb      	ldr	r3, [r7, #12]
   82fe0:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   82fe2:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   82fe4:	68fb      	ldr	r3, [r7, #12]
   82fe6:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   82fe8:	68fb      	ldr	r3, [r7, #12]
   82fea:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   82fec:	1ad2      	subs	r2, r2, r3
   82fee:	68fb      	ldr	r3, [r7, #12]
   82ff0:	681b      	ldr	r3, [r3, #0]
   82ff2:	7cb8      	ldrb	r0, [r7, #18]
   82ff4:	9300      	str	r3, [sp, #0]
   82ff6:	4613      	mov	r3, r2
   82ff8:	4622      	mov	r2, r4
   82ffa:	4c0d      	ldr	r4, [pc, #52]	; (83030 <udd_ep_alloc+0x3b4>)
   82ffc:	47a0      	blx	r4
   82ffe:	4603      	mov	r3, r0
   83000:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   83002:	7afb      	ldrb	r3, [r7, #11]
   83004:	f083 0301 	eor.w	r3, r3, #1
   83008:	b2db      	uxtb	r3, r3
   8300a:	2b00      	cmp	r3, #0
   8300c:	d002      	beq.n	83014 <udd_ep_alloc+0x398>
				dbg_print("ErrReRun%d ", i);
				return false;
   8300e:	2300      	movs	r3, #0
   83010:	e008      	b.n	83024 <udd_ep_alloc+0x3a8>
			continue;
   83012:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   83014:	7cbb      	ldrb	r3, [r7, #18]
   83016:	3301      	adds	r3, #1
   83018:	74bb      	strb	r3, [r7, #18]
   8301a:	7cbb      	ldrb	r3, [r7, #18]
   8301c:	2b02      	cmp	r3, #2
   8301e:	f67f af4f 	bls.w	82ec0 <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   83022:	2301      	movs	r3, #1
}
   83024:	4618      	mov	r0, r3
   83026:	371c      	adds	r7, #28
   83028:	46bd      	mov	sp, r7
   8302a:	bd90      	pop	{r4, r7, pc}
   8302c:	400a4000 	.word	0x400a4000
   83030:	00083361 	.word	0x00083361

00083034 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   83034:	b580      	push	{r7, lr}
   83036:	b084      	sub	sp, #16
   83038:	af00      	add	r7, sp, #0
   8303a:	4603      	mov	r3, r0
   8303c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8303e:	79fb      	ldrb	r3, [r7, #7]
   83040:	f003 030f 	and.w	r3, r3, #15
   83044:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   83046:	7bfb      	ldrb	r3, [r7, #15]
   83048:	2b02      	cmp	r3, #2
   8304a:	d828      	bhi.n	8309e <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   8304c:	4a16      	ldr	r2, [pc, #88]	; (830a8 <udd_ep_free+0x74>)
   8304e:	7bfb      	ldrb	r3, [r7, #15]
   83050:	015b      	lsls	r3, r3, #5
   83052:	4413      	add	r3, r2
   83054:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83058:	2201      	movs	r2, #1
   8305a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   8305c:	4a12      	ldr	r2, [pc, #72]	; (830a8 <udd_ep_free+0x74>)
   8305e:	7bfb      	ldrb	r3, [r7, #15]
   83060:	3308      	adds	r3, #8
   83062:	015b      	lsls	r3, r3, #5
   83064:	4413      	add	r3, r2
   83066:	681a      	ldr	r2, [r3, #0]
   83068:	490f      	ldr	r1, [pc, #60]	; (830a8 <udd_ep_free+0x74>)
   8306a:	7bfb      	ldrb	r3, [r7, #15]
   8306c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   83070:	3308      	adds	r3, #8
   83072:	015b      	lsls	r3, r3, #5
   83074:	440b      	add	r3, r1
   83076:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   83078:	79fb      	ldrb	r3, [r7, #7]
   8307a:	4618      	mov	r0, r3
   8307c:	4b0b      	ldr	r3, [pc, #44]	; (830ac <udd_ep_free+0x78>)
   8307e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83080:	7bfb      	ldrb	r3, [r7, #15]
   83082:	1e5a      	subs	r2, r3, #1
   83084:	490a      	ldr	r1, [pc, #40]	; (830b0 <udd_ep_free+0x7c>)
   83086:	4613      	mov	r3, r2
   83088:	005b      	lsls	r3, r3, #1
   8308a:	4413      	add	r3, r2
   8308c:	00db      	lsls	r3, r3, #3
   8308e:	440b      	add	r3, r1
   83090:	f103 0210 	add.w	r2, r3, #16
   83094:	7913      	ldrb	r3, [r2, #4]
   83096:	f36f 0382 	bfc	r3, #2, #1
   8309a:	7113      	strb	r3, [r2, #4]
   8309c:	e000      	b.n	830a0 <udd_ep_free+0x6c>
		return;
   8309e:	bf00      	nop
}
   830a0:	3710      	adds	r7, #16
   830a2:	46bd      	mov	sp, r7
   830a4:	bd80      	pop	{r7, pc}
   830a6:	bf00      	nop
   830a8:	400a4000 	.word	0x400a4000
   830ac:	00083e71 	.word	0x00083e71
   830b0:	20003760 	.word	0x20003760

000830b4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   830b4:	b480      	push	{r7}
   830b6:	b085      	sub	sp, #20
   830b8:	af00      	add	r7, sp, #0
   830ba:	4603      	mov	r3, r0
   830bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   830be:	79fb      	ldrb	r3, [r7, #7]
   830c0:	f003 030f 	and.w	r3, r3, #15
   830c4:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   830c6:	7bfb      	ldrb	r3, [r7, #15]
   830c8:	1e5a      	subs	r2, r3, #1
   830ca:	4613      	mov	r3, r2
   830cc:	005b      	lsls	r3, r3, #1
   830ce:	4413      	add	r3, r2
   830d0:	00db      	lsls	r3, r3, #3
   830d2:	4a10      	ldr	r2, [pc, #64]	; (83114 <udd_ep_is_halted+0x60>)
   830d4:	4413      	add	r3, r2
   830d6:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   830d8:	4a0f      	ldr	r2, [pc, #60]	; (83118 <udd_ep_is_halted+0x64>)
   830da:	7bfb      	ldrb	r3, [r7, #15]
   830dc:	015b      	lsls	r3, r3, #5
   830de:	4413      	add	r3, r2
   830e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   830e4:	681b      	ldr	r3, [r3, #0]
   830e6:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   830ea:	2b00      	cmp	r3, #0
   830ec:	d106      	bne.n	830fc <udd_ep_is_halted+0x48>
   830ee:	68bb      	ldr	r3, [r7, #8]
   830f0:	7d1b      	ldrb	r3, [r3, #20]
   830f2:	f003 0304 	and.w	r3, r3, #4
   830f6:	b2db      	uxtb	r3, r3
   830f8:	2b00      	cmp	r3, #0
   830fa:	d001      	beq.n	83100 <udd_ep_is_halted+0x4c>
   830fc:	2301      	movs	r3, #1
   830fe:	e000      	b.n	83102 <udd_ep_is_halted+0x4e>
   83100:	2300      	movs	r3, #0
   83102:	f003 0301 	and.w	r3, r3, #1
   83106:	b2db      	uxtb	r3, r3
}
   83108:	4618      	mov	r0, r3
   8310a:	3714      	adds	r7, #20
   8310c:	46bd      	mov	sp, r7
   8310e:	bc80      	pop	{r7}
   83110:	4770      	bx	lr
   83112:	bf00      	nop
   83114:	20003760 	.word	0x20003760
   83118:	400a4000 	.word	0x400a4000

0008311c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   8311c:	b480      	push	{r7}
   8311e:	b085      	sub	sp, #20
   83120:	af00      	add	r7, sp, #0
   83122:	4603      	mov	r3, r0
   83124:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83126:	79fb      	ldrb	r3, [r7, #7]
   83128:	f003 030f 	and.w	r3, r3, #15
   8312c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8312e:	7bfb      	ldrb	r3, [r7, #15]
   83130:	2b02      	cmp	r3, #2
   83132:	d901      	bls.n	83138 <udd_ep_set_halt+0x1c>
		return false;
   83134:	2300      	movs	r3, #0
   83136:	e071      	b.n	8321c <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   83138:	7bfb      	ldrb	r3, [r7, #15]
   8313a:	1e5a      	subs	r2, r3, #1
   8313c:	4613      	mov	r3, r2
   8313e:	005b      	lsls	r3, r3, #1
   83140:	4413      	add	r3, r2
   83142:	00db      	lsls	r3, r3, #3
   83144:	4a38      	ldr	r2, [pc, #224]	; (83228 <udd_ep_set_halt+0x10c>)
   83146:	4413      	add	r3, r2
   83148:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8314a:	4a38      	ldr	r2, [pc, #224]	; (8322c <udd_ep_set_halt+0x110>)
   8314c:	7bfb      	ldrb	r3, [r7, #15]
   8314e:	015b      	lsls	r3, r3, #5
   83150:	4413      	add	r3, r2
   83152:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83156:	681b      	ldr	r3, [r3, #0]
   83158:	f003 0320 	and.w	r3, r3, #32
   8315c:	2b00      	cmp	r3, #0
   8315e:	d106      	bne.n	8316e <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   83160:	68bb      	ldr	r3, [r7, #8]
   83162:	7d1b      	ldrb	r3, [r3, #20]
   83164:	f003 0304 	and.w	r3, r3, #4
   83168:	b2db      	uxtb	r3, r3
   8316a:	2b00      	cmp	r3, #0
   8316c:	d001      	beq.n	83172 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8316e:	2301      	movs	r3, #1
   83170:	e054      	b.n	8321c <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   83172:	68bb      	ldr	r3, [r7, #8]
   83174:	7d1b      	ldrb	r3, [r3, #20]
   83176:	f003 0301 	and.w	r3, r3, #1
   8317a:	b2db      	uxtb	r3, r3
   8317c:	2b00      	cmp	r3, #0
   8317e:	d001      	beq.n	83184 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   83180:	2300      	movs	r3, #0
   83182:	e04b      	b.n	8321c <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83184:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83188:	2b00      	cmp	r3, #0
   8318a:	da25      	bge.n	831d8 <udd_ep_set_halt+0xbc>
   8318c:	4a27      	ldr	r2, [pc, #156]	; (8322c <udd_ep_set_halt+0x110>)
   8318e:	7bfb      	ldrb	r3, [r7, #15]
   83190:	015b      	lsls	r3, r3, #5
   83192:	4413      	add	r3, r2
   83194:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83198:	681b      	ldr	r3, [r3, #0]
   8319a:	0c9b      	lsrs	r3, r3, #18
   8319c:	f003 0303 	and.w	r3, r3, #3
   831a0:	2b00      	cmp	r3, #0
   831a2:	d019      	beq.n	831d8 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   831a4:	68ba      	ldr	r2, [r7, #8]
   831a6:	7d13      	ldrb	r3, [r2, #20]
   831a8:	f043 0304 	orr.w	r3, r3, #4
   831ac:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   831ae:	4a1f      	ldr	r2, [pc, #124]	; (8322c <udd_ep_set_halt+0x110>)
   831b0:	7bfb      	ldrb	r3, [r7, #15]
   831b2:	3308      	adds	r3, #8
   831b4:	015b      	lsls	r3, r3, #5
   831b6:	4413      	add	r3, r2
   831b8:	3304      	adds	r3, #4
   831ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   831be:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   831c0:	4b1a      	ldr	r3, [pc, #104]	; (8322c <udd_ep_set_halt+0x110>)
   831c2:	691a      	ldr	r2, [r3, #16]
   831c4:	7bfb      	ldrb	r3, [r7, #15]
   831c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   831ca:	fa01 f303 	lsl.w	r3, r1, r3
   831ce:	4917      	ldr	r1, [pc, #92]	; (8322c <udd_ep_set_halt+0x110>)
   831d0:	4313      	orrs	r3, r2
   831d2:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   831d4:	2301      	movs	r3, #1
   831d6:	e021      	b.n	8321c <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   831d8:	4a14      	ldr	r2, [pc, #80]	; (8322c <udd_ep_set_halt+0x110>)
   831da:	7bfb      	ldrb	r3, [r7, #15]
   831dc:	015b      	lsls	r3, r3, #5
   831de:	4413      	add	r3, r2
   831e0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   831e4:	681a      	ldr	r2, [r3, #0]
   831e6:	4911      	ldr	r1, [pc, #68]	; (8322c <udd_ep_set_halt+0x110>)
   831e8:	7bfb      	ldrb	r3, [r7, #15]
   831ea:	f022 0202 	bic.w	r2, r2, #2
   831ee:	015b      	lsls	r3, r3, #5
   831f0:	440b      	add	r3, r1
   831f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   831f6:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   831f8:	4a0c      	ldr	r2, [pc, #48]	; (8322c <udd_ep_set_halt+0x110>)
   831fa:	7bfb      	ldrb	r3, [r7, #15]
   831fc:	015b      	lsls	r3, r3, #5
   831fe:	4413      	add	r3, r2
   83200:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83208:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   8320a:	4a08      	ldr	r2, [pc, #32]	; (8322c <udd_ep_set_halt+0x110>)
   8320c:	7bfb      	ldrb	r3, [r7, #15]
   8320e:	015b      	lsls	r3, r3, #5
   83210:	4413      	add	r3, r2
   83212:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83216:	2220      	movs	r2, #32
   83218:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   8321a:	2301      	movs	r3, #1
}
   8321c:	4618      	mov	r0, r3
   8321e:	3714      	adds	r7, #20
   83220:	46bd      	mov	sp, r7
   83222:	bc80      	pop	{r7}
   83224:	4770      	bx	lr
   83226:	bf00      	nop
   83228:	20003760 	.word	0x20003760
   8322c:	400a4000 	.word	0x400a4000

00083230 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   83230:	b580      	push	{r7, lr}
   83232:	b084      	sub	sp, #16
   83234:	af00      	add	r7, sp, #0
   83236:	4603      	mov	r3, r0
   83238:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   8323a:	2300      	movs	r3, #0
   8323c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8323e:	79fb      	ldrb	r3, [r7, #7]
   83240:	f003 030f 	and.w	r3, r3, #15
   83244:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   83246:	79fb      	ldrb	r3, [r7, #7]
   83248:	2b02      	cmp	r3, #2
   8324a:	d901      	bls.n	83250 <udd_ep_clear_halt+0x20>
		return false;
   8324c:	2300      	movs	r3, #0
   8324e:	e07e      	b.n	8334e <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   83250:	79fb      	ldrb	r3, [r7, #7]
   83252:	1e5a      	subs	r2, r3, #1
   83254:	4613      	mov	r3, r2
   83256:	005b      	lsls	r3, r3, #1
   83258:	4413      	add	r3, r2
   8325a:	00db      	lsls	r3, r3, #3
   8325c:	4a3e      	ldr	r2, [pc, #248]	; (83358 <udd_ep_clear_halt+0x128>)
   8325e:	4413      	add	r3, r2
   83260:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   83262:	68bb      	ldr	r3, [r7, #8]
   83264:	7d1b      	ldrb	r3, [r3, #20]
   83266:	f003 0304 	and.w	r3, r3, #4
   8326a:	b2db      	uxtb	r3, r3
   8326c:	2b00      	cmp	r3, #0
   8326e:	d01a      	beq.n	832a6 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   83270:	68ba      	ldr	r2, [r7, #8]
   83272:	7d13      	ldrb	r3, [r2, #20]
   83274:	f36f 0382 	bfc	r3, #2, #1
   83278:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   8327a:	4a38      	ldr	r2, [pc, #224]	; (8335c <udd_ep_clear_halt+0x12c>)
   8327c:	79fb      	ldrb	r3, [r7, #7]
   8327e:	015b      	lsls	r3, r3, #5
   83280:	4413      	add	r3, r2
   83282:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83286:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8328a:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   8328c:	4b33      	ldr	r3, [pc, #204]	; (8335c <udd_ep_clear_halt+0x12c>)
   8328e:	691a      	ldr	r2, [r3, #16]
   83290:	79fb      	ldrb	r3, [r7, #7]
   83292:	f44f 7180 	mov.w	r1, #256	; 0x100
   83296:	fa01 f303 	lsl.w	r3, r1, r3
   8329a:	43db      	mvns	r3, r3
   8329c:	492f      	ldr	r1, [pc, #188]	; (8335c <udd_ep_clear_halt+0x12c>)
   8329e:	4013      	ands	r3, r2
   832a0:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   832a2:	2301      	movs	r3, #1
   832a4:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   832a6:	4a2d      	ldr	r2, [pc, #180]	; (8335c <udd_ep_clear_halt+0x12c>)
   832a8:	79fb      	ldrb	r3, [r7, #7]
   832aa:	015b      	lsls	r3, r3, #5
   832ac:	4413      	add	r3, r2
   832ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   832b2:	681b      	ldr	r3, [r3, #0]
   832b4:	f003 0320 	and.w	r3, r3, #32
   832b8:	2b00      	cmp	r3, #0
   832ba:	d035      	beq.n	83328 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   832bc:	4a27      	ldr	r2, [pc, #156]	; (8335c <udd_ep_clear_halt+0x12c>)
   832be:	79fb      	ldrb	r3, [r7, #7]
   832c0:	015b      	lsls	r3, r3, #5
   832c2:	4413      	add	r3, r2
   832c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   832c8:	681b      	ldr	r3, [r3, #0]
   832ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   832ce:	2b00      	cmp	r3, #0
   832d0:	d010      	beq.n	832f4 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   832d2:	4a22      	ldr	r2, [pc, #136]	; (8335c <udd_ep_clear_halt+0x12c>)
   832d4:	79fb      	ldrb	r3, [r7, #7]
   832d6:	015b      	lsls	r3, r3, #5
   832d8:	4413      	add	r3, r2
   832da:	f503 738c 	add.w	r3, r3, #280	; 0x118
   832de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   832e2:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   832e4:	4a1d      	ldr	r2, [pc, #116]	; (8335c <udd_ep_clear_halt+0x12c>)
   832e6:	79fb      	ldrb	r3, [r7, #7]
   832e8:	015b      	lsls	r3, r3, #5
   832ea:	4413      	add	r3, r2
   832ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
   832f0:	2240      	movs	r2, #64	; 0x40
   832f2:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   832f4:	4a19      	ldr	r2, [pc, #100]	; (8335c <udd_ep_clear_halt+0x12c>)
   832f6:	79fb      	ldrb	r3, [r7, #7]
   832f8:	015b      	lsls	r3, r3, #5
   832fa:	4413      	add	r3, r2
   832fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83300:	2220      	movs	r2, #32
   83302:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   83304:	4a15      	ldr	r2, [pc, #84]	; (8335c <udd_ep_clear_halt+0x12c>)
   83306:	79fb      	ldrb	r3, [r7, #7]
   83308:	3308      	adds	r3, #8
   8330a:	015b      	lsls	r3, r3, #5
   8330c:	4413      	add	r3, r2
   8330e:	3304      	adds	r3, #4
   83310:	681a      	ldr	r2, [r3, #0]
   83312:	4912      	ldr	r1, [pc, #72]	; (8335c <udd_ep_clear_halt+0x12c>)
   83314:	79fb      	ldrb	r3, [r7, #7]
   83316:	f042 0202 	orr.w	r2, r2, #2
   8331a:	3308      	adds	r3, #8
   8331c:	015b      	lsls	r3, r3, #5
   8331e:	440b      	add	r3, r1
   83320:	3304      	adds	r3, #4
   83322:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   83324:	2301      	movs	r3, #1
   83326:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   83328:	7bfb      	ldrb	r3, [r7, #15]
   8332a:	2b00      	cmp	r3, #0
   8332c:	d00e      	beq.n	8334c <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8332e:	68bb      	ldr	r3, [r7, #8]
   83330:	7d1b      	ldrb	r3, [r3, #20]
   83332:	f003 0301 	and.w	r3, r3, #1
   83336:	b2db      	uxtb	r3, r3
   83338:	2b00      	cmp	r3, #0
   8333a:	d007      	beq.n	8334c <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   8333c:	68ba      	ldr	r2, [r7, #8]
   8333e:	7d13      	ldrb	r3, [r2, #20]
   83340:	f36f 0300 	bfc	r3, #0, #1
   83344:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   83346:	68bb      	ldr	r3, [r7, #8]
   83348:	681b      	ldr	r3, [r3, #0]
   8334a:	4798      	blx	r3
		}
	}
	return true;
   8334c:	2301      	movs	r3, #1
}
   8334e:	4618      	mov	r0, r3
   83350:	3710      	adds	r7, #16
   83352:	46bd      	mov	sp, r7
   83354:	bd80      	pop	{r7, pc}
   83356:	bf00      	nop
   83358:	20003760 	.word	0x20003760
   8335c:	400a4000 	.word	0x400a4000

00083360 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83360:	b580      	push	{r7, lr}
   83362:	b086      	sub	sp, #24
   83364:	af00      	add	r7, sp, #0
   83366:	60ba      	str	r2, [r7, #8]
   83368:	607b      	str	r3, [r7, #4]
   8336a:	4603      	mov	r3, r0
   8336c:	73fb      	strb	r3, [r7, #15]
   8336e:	460b      	mov	r3, r1
   83370:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   83372:	7bfb      	ldrb	r3, [r7, #15]
   83374:	f003 030f 	and.w	r3, r3, #15
   83378:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   8337a:	7bfb      	ldrb	r3, [r7, #15]
   8337c:	2b02      	cmp	r3, #2
   8337e:	d901      	bls.n	83384 <udd_ep_run+0x24>
		return false;
   83380:	2300      	movs	r3, #0
   83382:	e063      	b.n	8344c <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83384:	7bfb      	ldrb	r3, [r7, #15]
   83386:	1e5a      	subs	r2, r3, #1
   83388:	4613      	mov	r3, r2
   8338a:	005b      	lsls	r3, r3, #1
   8338c:	4413      	add	r3, r2
   8338e:	00db      	lsls	r3, r3, #3
   83390:	4a30      	ldr	r2, [pc, #192]	; (83454 <udd_ep_run+0xf4>)
   83392:	4413      	add	r3, r2
   83394:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   83396:	4a30      	ldr	r2, [pc, #192]	; (83458 <udd_ep_run+0xf8>)
   83398:	7bfb      	ldrb	r3, [r7, #15]
   8339a:	015b      	lsls	r3, r3, #5
   8339c:	4413      	add	r3, r2
   8339e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   833a2:	681b      	ldr	r3, [r3, #0]
   833a4:	f003 0301 	and.w	r3, r3, #1
   833a8:	2b00      	cmp	r3, #0
   833aa:	d011      	beq.n	833d0 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   833ac:	4a2a      	ldr	r2, [pc, #168]	; (83458 <udd_ep_run+0xf8>)
   833ae:	7bfb      	ldrb	r3, [r7, #15]
   833b0:	015b      	lsls	r3, r3, #5
   833b2:	4413      	add	r3, r2
   833b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   833b8:	681b      	ldr	r3, [r3, #0]
   833ba:	f003 0320 	and.w	r3, r3, #32
   833be:	2b00      	cmp	r3, #0
   833c0:	d106      	bne.n	833d0 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   833c2:	697b      	ldr	r3, [r7, #20]
   833c4:	7d1b      	ldrb	r3, [r3, #20]
   833c6:	f003 0304 	and.w	r3, r3, #4
   833ca:	b2db      	uxtb	r3, r3
   833cc:	2b00      	cmp	r3, #0
   833ce:	d001      	beq.n	833d4 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   833d0:	2300      	movs	r3, #0
   833d2:	e03b      	b.n	8344c <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   833d4:	4b21      	ldr	r3, [pc, #132]	; (8345c <udd_ep_run+0xfc>)
   833d6:	4798      	blx	r3
   833d8:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   833da:	697b      	ldr	r3, [r7, #20]
   833dc:	7d1b      	ldrb	r3, [r3, #20]
   833de:	f003 0301 	and.w	r3, r3, #1
   833e2:	b2db      	uxtb	r3, r3
   833e4:	2b00      	cmp	r3, #0
   833e6:	d004      	beq.n	833f2 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   833e8:	6938      	ldr	r0, [r7, #16]
   833ea:	4b1d      	ldr	r3, [pc, #116]	; (83460 <udd_ep_run+0x100>)
   833ec:	4798      	blx	r3
		return false; // Job already on going
   833ee:	2300      	movs	r3, #0
   833f0:	e02c      	b.n	8344c <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   833f2:	697a      	ldr	r2, [r7, #20]
   833f4:	7d13      	ldrb	r3, [r2, #20]
   833f6:	f043 0301 	orr.w	r3, r3, #1
   833fa:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   833fc:	6938      	ldr	r0, [r7, #16]
   833fe:	4b18      	ldr	r3, [pc, #96]	; (83460 <udd_ep_run+0x100>)
   83400:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   83402:	697b      	ldr	r3, [r7, #20]
   83404:	68ba      	ldr	r2, [r7, #8]
   83406:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   83408:	697b      	ldr	r3, [r7, #20]
   8340a:	687a      	ldr	r2, [r7, #4]
   8340c:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8340e:	697b      	ldr	r3, [r7, #20]
   83410:	2200      	movs	r2, #0
   83412:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   83414:	697b      	ldr	r3, [r7, #20]
   83416:	2200      	movs	r2, #0
   83418:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   8341a:	697b      	ldr	r3, [r7, #20]
   8341c:	6a3a      	ldr	r2, [r7, #32]
   8341e:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83420:	7bbb      	ldrb	r3, [r7, #14]
   83422:	2b00      	cmp	r3, #0
   83424:	d102      	bne.n	8342c <udd_ep_run+0xcc>
   83426:	687b      	ldr	r3, [r7, #4]
   83428:	2b00      	cmp	r3, #0
   8342a:	d101      	bne.n	83430 <udd_ep_run+0xd0>
   8342c:	2301      	movs	r3, #1
   8342e:	e000      	b.n	83432 <udd_ep_run+0xd2>
   83430:	2300      	movs	r3, #0
   83432:	f003 0301 	and.w	r3, r3, #1
   83436:	b2d9      	uxtb	r1, r3
   83438:	697a      	ldr	r2, [r7, #20]
   8343a:	7d13      	ldrb	r3, [r2, #20]
   8343c:	f361 0341 	bfi	r3, r1, #1, #1
   83440:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   83442:	7bfb      	ldrb	r3, [r7, #15]
   83444:	4618      	mov	r0, r3
   83446:	4b07      	ldr	r3, [pc, #28]	; (83464 <udd_ep_run+0x104>)
   83448:	4798      	blx	r3
	return true;
   8344a:	2301      	movs	r3, #1
}
   8344c:	4618      	mov	r0, r3
   8344e:	3718      	adds	r7, #24
   83450:	46bd      	mov	sp, r7
   83452:	bd80      	pop	{r7, pc}
   83454:	20003760 	.word	0x20003760
   83458:	400a4000 	.word	0x400a4000
   8345c:	000826fd 	.word	0x000826fd
   83460:	00082759 	.word	0x00082759
   83464:	00083f1d 	.word	0x00083f1d

00083468 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   83468:	b580      	push	{r7, lr}
   8346a:	b084      	sub	sp, #16
   8346c:	af00      	add	r7, sp, #0
   8346e:	4603      	mov	r3, r0
   83470:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83472:	79fb      	ldrb	r3, [r7, #7]
   83474:	f003 030f 	and.w	r3, r3, #15
   83478:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   8347a:	7bfb      	ldrb	r3, [r7, #15]
   8347c:	011a      	lsls	r2, r3, #4
   8347e:	4b19      	ldr	r3, [pc, #100]	; (834e4 <udd_ep_abort+0x7c>)
   83480:	4413      	add	r3, r2
   83482:	2200      	movs	r2, #0
   83484:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   83486:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8348a:	2b00      	cmp	r3, #0
   8348c:	da21      	bge.n	834d2 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8348e:	e014      	b.n	834ba <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   83490:	4a15      	ldr	r2, [pc, #84]	; (834e8 <udd_ep_abort+0x80>)
   83492:	7bfb      	ldrb	r3, [r7, #15]
   83494:	015b      	lsls	r3, r3, #5
   83496:	4413      	add	r3, r2
   83498:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8349c:	f44f 7200 	mov.w	r2, #512	; 0x200
   834a0:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   834a2:	bf00      	nop
   834a4:	4a10      	ldr	r2, [pc, #64]	; (834e8 <udd_ep_abort+0x80>)
   834a6:	7bfb      	ldrb	r3, [r7, #15]
   834a8:	015b      	lsls	r3, r3, #5
   834aa:	4413      	add	r3, r2
   834ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   834b0:	681b      	ldr	r3, [r3, #0]
   834b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   834b6:	2b00      	cmp	r3, #0
   834b8:	d1f4      	bne.n	834a4 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   834ba:	4a0b      	ldr	r2, [pc, #44]	; (834e8 <udd_ep_abort+0x80>)
   834bc:	7bfb      	ldrb	r3, [r7, #15]
   834be:	015b      	lsls	r3, r3, #5
   834c0:	4413      	add	r3, r2
   834c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   834c6:	681b      	ldr	r3, [r3, #0]
   834c8:	0c9b      	lsrs	r3, r3, #18
   834ca:	f003 0303 	and.w	r3, r3, #3
   834ce:	2b00      	cmp	r3, #0
   834d0:	d1de      	bne.n	83490 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   834d2:	79fb      	ldrb	r3, [r7, #7]
   834d4:	4618      	mov	r0, r3
   834d6:	4b05      	ldr	r3, [pc, #20]	; (834ec <udd_ep_abort+0x84>)
   834d8:	4798      	blx	r3
}
   834da:	bf00      	nop
   834dc:	3710      	adds	r7, #16
   834de:	46bd      	mov	sp, r7
   834e0:	bd80      	pop	{r7, pc}
   834e2:	bf00      	nop
   834e4:	400a4300 	.word	0x400a4300
   834e8:	400a4000 	.word	0x400a4000
   834ec:	00083e71 	.word	0x00083e71

000834f0 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   834f0:	b480      	push	{r7}
   834f2:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   834f4:	4b0a      	ldr	r3, [pc, #40]	; (83520 <udd_test_mode_j+0x30>)
   834f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   834fa:	f023 0303 	bic.w	r3, r3, #3
   834fe:	4a08      	ldr	r2, [pc, #32]	; (83520 <udd_test_mode_j+0x30>)
   83500:	f043 0302 	orr.w	r3, r3, #2
   83504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   83508:	4b05      	ldr	r3, [pc, #20]	; (83520 <udd_test_mode_j+0x30>)
   8350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8350e:	4a04      	ldr	r2, [pc, #16]	; (83520 <udd_test_mode_j+0x30>)
   83510:	f043 0304 	orr.w	r3, r3, #4
   83514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83518:	bf00      	nop
   8351a:	46bd      	mov	sp, r7
   8351c:	bc80      	pop	{r7}
   8351e:	4770      	bx	lr
   83520:	400a4000 	.word	0x400a4000

00083524 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   83524:	b480      	push	{r7}
   83526:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   83528:	4b0a      	ldr	r3, [pc, #40]	; (83554 <udd_test_mode_k+0x30>)
   8352a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8352e:	f023 0303 	bic.w	r3, r3, #3
   83532:	4a08      	ldr	r2, [pc, #32]	; (83554 <udd_test_mode_k+0x30>)
   83534:	f043 0302 	orr.w	r3, r3, #2
   83538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8353c:	4b05      	ldr	r3, [pc, #20]	; (83554 <udd_test_mode_k+0x30>)
   8353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83542:	4a04      	ldr	r2, [pc, #16]	; (83554 <udd_test_mode_k+0x30>)
   83544:	f043 0308 	orr.w	r3, r3, #8
   83548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8354c:	bf00      	nop
   8354e:	46bd      	mov	sp, r7
   83550:	bc80      	pop	{r7}
   83552:	4770      	bx	lr
   83554:	400a4000 	.word	0x400a4000

00083558 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   83558:	b480      	push	{r7}
   8355a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   8355c:	4b06      	ldr	r3, [pc, #24]	; (83578 <udd_test_mode_se0_nak+0x20>)
   8355e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83562:	f023 0303 	bic.w	r3, r3, #3
   83566:	4a04      	ldr	r2, [pc, #16]	; (83578 <udd_test_mode_se0_nak+0x20>)
   83568:	f043 0302 	orr.w	r3, r3, #2
   8356c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83570:	bf00      	nop
   83572:	46bd      	mov	sp, r7
   83574:	bc80      	pop	{r7}
   83576:	4770      	bx	lr
   83578:	400a4000 	.word	0x400a4000

0008357c <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   8357c:	b4b0      	push	{r4, r5, r7}
   8357e:	b093      	sub	sp, #76	; 0x4c
   83580:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   83582:	4b2e      	ldr	r3, [pc, #184]	; (8363c <udd_test_mode_packet+0xc0>)
   83584:	1d3c      	adds	r4, r7, #4
   83586:	461d      	mov	r5, r3
   83588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8358a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83594:	e895 0003 	ldmia.w	r5, {r0, r1}
   83598:	6020      	str	r0, [r4, #0]
   8359a:	3404      	adds	r4, #4
   8359c:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8359e:	4b28      	ldr	r3, [pc, #160]	; (83640 <udd_test_mode_packet+0xc4>)
   835a0:	2201      	movs	r2, #1
   835a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   835a6:	4b26      	ldr	r3, [pc, #152]	; (83640 <udd_test_mode_packet+0xc4>)
   835a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   835ac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   835b0:	f023 0303 	bic.w	r3, r3, #3
   835b4:	4a22      	ldr	r2, [pc, #136]	; (83640 <udd_test_mode_packet+0xc4>)
   835b6:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   835ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   835be:	4b20      	ldr	r3, [pc, #128]	; (83640 <udd_test_mode_packet+0xc4>)
   835c0:	2201      	movs	r2, #1
   835c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   835c6:	4b1e      	ldr	r3, [pc, #120]	; (83640 <udd_test_mode_packet+0xc4>)
   835c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   835cc:	f023 0303 	bic.w	r3, r3, #3
   835d0:	4a1b      	ldr	r2, [pc, #108]	; (83640 <udd_test_mode_packet+0xc4>)
   835d2:	f043 0302 	orr.w	r3, r3, #2
   835d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   835da:	4b19      	ldr	r3, [pc, #100]	; (83640 <udd_test_mode_packet+0xc4>)
   835dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   835e0:	4a17      	ldr	r2, [pc, #92]	; (83640 <udd_test_mode_packet+0xc4>)
   835e2:	f043 0310 	orr.w	r3, r3, #16
   835e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   835ea:	4b16      	ldr	r3, [pc, #88]	; (83644 <udd_test_mode_packet+0xc8>)
   835ec:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   835ee:	1d3b      	adds	r3, r7, #4
   835f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   835f2:	2300      	movs	r3, #0
   835f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   835f8:	e00c      	b.n	83614 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   835fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   835fc:	1c53      	adds	r3, r2, #1
   835fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   83600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   83602:	1c59      	adds	r1, r3, #1
   83604:	6439      	str	r1, [r7, #64]	; 0x40
   83606:	7812      	ldrb	r2, [r2, #0]
   83608:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   8360a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8360e:	3301      	adds	r3, #1
   83610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   83614:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   83618:	2b34      	cmp	r3, #52	; 0x34
   8361a:	d9ee      	bls.n	835fa <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8361c:	4b08      	ldr	r3, [pc, #32]	; (83640 <udd_test_mode_packet+0xc4>)
   8361e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83622:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83626:	4b06      	ldr	r3, [pc, #24]	; (83640 <udd_test_mode_packet+0xc4>)
   83628:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8362c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   83630:	bf00      	nop
   83632:	374c      	adds	r7, #76	; 0x4c
   83634:	46bd      	mov	sp, r7
   83636:	bcb0      	pop	{r4, r5, r7}
   83638:	4770      	bx	lr
   8363a:	bf00      	nop
   8363c:	0008c94c 	.word	0x0008c94c
   83640:	400a4000 	.word	0x400a4000
   83644:	20180000 	.word	0x20180000

00083648 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   83648:	b580      	push	{r7, lr}
   8364a:	b082      	sub	sp, #8
   8364c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   8364e:	4b1b      	ldr	r3, [pc, #108]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83650:	681b      	ldr	r3, [r3, #0]
   83652:	4a1a      	ldr	r2, [pc, #104]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83658:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   8365a:	4b18      	ldr	r3, [pc, #96]	; (836bc <udd_reset_ep_ctrl+0x74>)
   8365c:	681b      	ldr	r3, [r3, #0]
   8365e:	4a17      	ldr	r2, [pc, #92]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83664:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   83666:	4b15      	ldr	r3, [pc, #84]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83668:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8366c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83670:	f023 0303 	bic.w	r3, r3, #3
   83674:	4a11      	ldr	r2, [pc, #68]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83676:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   8367a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8367e:	4b0f      	ldr	r3, [pc, #60]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83680:	2201      	movs	r2, #1
   83682:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   83686:	4b0e      	ldr	r3, [pc, #56]	; (836c0 <udd_reset_ep_ctrl+0x78>)
   83688:	4798      	blx	r3
   8368a:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   8368c:	4b0b      	ldr	r3, [pc, #44]	; (836bc <udd_reset_ep_ctrl+0x74>)
   8368e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83692:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   83696:	4b09      	ldr	r3, [pc, #36]	; (836bc <udd_reset_ep_ctrl+0x74>)
   83698:	f44f 7200 	mov.w	r2, #512	; 0x200
   8369c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   836a0:	4b06      	ldr	r3, [pc, #24]	; (836bc <udd_reset_ep_ctrl+0x74>)
   836a2:	691b      	ldr	r3, [r3, #16]
   836a4:	4a05      	ldr	r2, [pc, #20]	; (836bc <udd_reset_ep_ctrl+0x74>)
   836a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   836aa:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   836ac:	6878      	ldr	r0, [r7, #4]
   836ae:	4b05      	ldr	r3, [pc, #20]	; (836c4 <udd_reset_ep_ctrl+0x7c>)
   836b0:	4798      	blx	r3
}
   836b2:	bf00      	nop
   836b4:	3708      	adds	r7, #8
   836b6:	46bd      	mov	sp, r7
   836b8:	bd80      	pop	{r7, pc}
   836ba:	bf00      	nop
   836bc:	400a4000 	.word	0x400a4000
   836c0:	000826fd 	.word	0x000826fd
   836c4:	00082759 	.word	0x00082759

000836c8 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   836c8:	b580      	push	{r7, lr}
   836ca:	b082      	sub	sp, #8
   836cc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   836ce:	4b10      	ldr	r3, [pc, #64]	; (83710 <udd_ctrl_init+0x48>)
   836d0:	4798      	blx	r3
   836d2:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   836d4:	4b0f      	ldr	r3, [pc, #60]	; (83714 <udd_ctrl_init+0x4c>)
   836d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   836da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   836de:	6878      	ldr	r0, [r7, #4]
   836e0:	4b0d      	ldr	r3, [pc, #52]	; (83718 <udd_ctrl_init+0x50>)
   836e2:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   836e4:	4b0b      	ldr	r3, [pc, #44]	; (83714 <udd_ctrl_init+0x4c>)
   836e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   836ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   836ee:	4b0b      	ldr	r3, [pc, #44]	; (8371c <udd_ctrl_init+0x54>)
   836f0:	2200      	movs	r2, #0
   836f2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   836f4:	4b09      	ldr	r3, [pc, #36]	; (8371c <udd_ctrl_init+0x54>)
   836f6:	2200      	movs	r2, #0
   836f8:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   836fa:	4b08      	ldr	r3, [pc, #32]	; (8371c <udd_ctrl_init+0x54>)
   836fc:	2200      	movs	r2, #0
   836fe:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83700:	4b07      	ldr	r3, [pc, #28]	; (83720 <udd_ctrl_init+0x58>)
   83702:	2200      	movs	r2, #0
   83704:	701a      	strb	r2, [r3, #0]
}
   83706:	bf00      	nop
   83708:	3708      	adds	r7, #8
   8370a:	46bd      	mov	sp, r7
   8370c:	bd80      	pop	{r7, pc}
   8370e:	bf00      	nop
   83710:	000826fd 	.word	0x000826fd
   83714:	400a4000 	.word	0x400a4000
   83718:	00082759 	.word	0x00082759
   8371c:	20003740 	.word	0x20003740
   83720:	20003758 	.word	0x20003758

00083724 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   83724:	b580      	push	{r7, lr}
   83726:	b084      	sub	sp, #16
   83728:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8372a:	4b40      	ldr	r3, [pc, #256]	; (8382c <udd_ctrl_setup_received+0x108>)
   8372c:	781b      	ldrb	r3, [r3, #0]
   8372e:	2b00      	cmp	r3, #0
   83730:	d003      	beq.n	8373a <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   83732:	4b3f      	ldr	r3, [pc, #252]	; (83830 <udd_ctrl_setup_received+0x10c>)
   83734:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   83736:	4b3f      	ldr	r3, [pc, #252]	; (83834 <udd_ctrl_setup_received+0x110>)
   83738:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   8373a:	4b3f      	ldr	r3, [pc, #252]	; (83838 <udd_ctrl_setup_received+0x114>)
   8373c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83740:	0d1b      	lsrs	r3, r3, #20
   83742:	f3c3 030a 	ubfx	r3, r3, #0, #11
   83746:	2b08      	cmp	r3, #8
   83748:	d007      	beq.n	8375a <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   8374a:	4b3c      	ldr	r3, [pc, #240]	; (8383c <udd_ctrl_setup_received+0x118>)
   8374c:	4798      	blx	r3
		udd_ack_setup_received(0);
   8374e:	4b3a      	ldr	r3, [pc, #232]	; (83838 <udd_ctrl_setup_received+0x114>)
   83750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83754:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   83758:	e064      	b.n	83824 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8375a:	4b39      	ldr	r3, [pc, #228]	; (83840 <udd_ctrl_setup_received+0x11c>)
   8375c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   8375e:	2300      	movs	r3, #0
   83760:	73fb      	strb	r3, [r7, #15]
   83762:	e00a      	b.n	8377a <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   83764:	68bb      	ldr	r3, [r7, #8]
   83766:	1c5a      	adds	r2, r3, #1
   83768:	60ba      	str	r2, [r7, #8]
   8376a:	7bfa      	ldrb	r2, [r7, #15]
   8376c:	4935      	ldr	r1, [pc, #212]	; (83844 <udd_ctrl_setup_received+0x120>)
   8376e:	440a      	add	r2, r1
   83770:	781b      	ldrb	r3, [r3, #0]
   83772:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   83774:	7bfb      	ldrb	r3, [r7, #15]
   83776:	3301      	adds	r3, #1
   83778:	73fb      	strb	r3, [r7, #15]
   8377a:	7bfb      	ldrb	r3, [r7, #15]
   8377c:	2b07      	cmp	r3, #7
   8377e:	d9f1      	bls.n	83764 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   83780:	4b30      	ldr	r3, [pc, #192]	; (83844 <udd_ctrl_setup_received+0x120>)
   83782:	885a      	ldrh	r2, [r3, #2]
   83784:	4b2f      	ldr	r3, [pc, #188]	; (83844 <udd_ctrl_setup_received+0x120>)
   83786:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   83788:	4b2e      	ldr	r3, [pc, #184]	; (83844 <udd_ctrl_setup_received+0x120>)
   8378a:	889a      	ldrh	r2, [r3, #4]
   8378c:	4b2d      	ldr	r3, [pc, #180]	; (83844 <udd_ctrl_setup_received+0x120>)
   8378e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   83790:	4b2c      	ldr	r3, [pc, #176]	; (83844 <udd_ctrl_setup_received+0x120>)
   83792:	88da      	ldrh	r2, [r3, #6]
   83794:	4b2b      	ldr	r3, [pc, #172]	; (83844 <udd_ctrl_setup_received+0x120>)
   83796:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   83798:	4b2b      	ldr	r3, [pc, #172]	; (83848 <udd_ctrl_setup_received+0x124>)
   8379a:	4798      	blx	r3
   8379c:	4603      	mov	r3, r0
   8379e:	f083 0301 	eor.w	r3, r3, #1
   837a2:	b2db      	uxtb	r3, r3
   837a4:	2b00      	cmp	r3, #0
   837a6:	d007      	beq.n	837b8 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   837a8:	4b24      	ldr	r3, [pc, #144]	; (8383c <udd_ctrl_setup_received+0x118>)
   837aa:	4798      	blx	r3
		udd_ack_setup_received(0);
   837ac:	4b22      	ldr	r3, [pc, #136]	; (83838 <udd_ctrl_setup_received+0x114>)
   837ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   837b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   837b6:	e035      	b.n	83824 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   837b8:	4b1f      	ldr	r3, [pc, #124]	; (83838 <udd_ctrl_setup_received+0x114>)
   837ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   837be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   837c2:	4b20      	ldr	r3, [pc, #128]	; (83844 <udd_ctrl_setup_received+0x120>)
   837c4:	781b      	ldrb	r3, [r3, #0]
   837c6:	b25b      	sxtb	r3, r3
   837c8:	2b00      	cmp	r3, #0
   837ca:	da0b      	bge.n	837e4 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   837cc:	4b1f      	ldr	r3, [pc, #124]	; (8384c <udd_ctrl_setup_received+0x128>)
   837ce:	2200      	movs	r2, #0
   837d0:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   837d2:	4b1f      	ldr	r3, [pc, #124]	; (83850 <udd_ctrl_setup_received+0x12c>)
   837d4:	2200      	movs	r2, #0
   837d6:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   837d8:	4b14      	ldr	r3, [pc, #80]	; (8382c <udd_ctrl_setup_received+0x108>)
   837da:	2202      	movs	r2, #2
   837dc:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   837de:	4b1d      	ldr	r3, [pc, #116]	; (83854 <udd_ctrl_setup_received+0x130>)
   837e0:	4798      	blx	r3
   837e2:	e01f      	b.n	83824 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   837e4:	4b17      	ldr	r3, [pc, #92]	; (83844 <udd_ctrl_setup_received+0x120>)
   837e6:	88db      	ldrh	r3, [r3, #6]
   837e8:	2b00      	cmp	r3, #0
   837ea:	d102      	bne.n	837f2 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   837ec:	4b1a      	ldr	r3, [pc, #104]	; (83858 <udd_ctrl_setup_received+0x134>)
   837ee:	4798      	blx	r3
			return;
   837f0:	e018      	b.n	83824 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   837f2:	4b16      	ldr	r3, [pc, #88]	; (8384c <udd_ctrl_setup_received+0x128>)
   837f4:	2200      	movs	r2, #0
   837f6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   837f8:	4b15      	ldr	r3, [pc, #84]	; (83850 <udd_ctrl_setup_received+0x12c>)
   837fa:	2200      	movs	r2, #0
   837fc:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   837fe:	4b0b      	ldr	r3, [pc, #44]	; (8382c <udd_ctrl_setup_received+0x108>)
   83800:	2201      	movs	r2, #1
   83802:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   83804:	4b0c      	ldr	r3, [pc, #48]	; (83838 <udd_ctrl_setup_received+0x114>)
   83806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8380a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   8380e:	4b13      	ldr	r3, [pc, #76]	; (8385c <udd_ctrl_setup_received+0x138>)
   83810:	4798      	blx	r3
   83812:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   83814:	4b08      	ldr	r3, [pc, #32]	; (83838 <udd_ctrl_setup_received+0x114>)
   83816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8381a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   8381e:	6878      	ldr	r0, [r7, #4]
   83820:	4b0f      	ldr	r3, [pc, #60]	; (83860 <udd_ctrl_setup_received+0x13c>)
   83822:	4798      	blx	r3
	}
}
   83824:	3710      	adds	r7, #16
   83826:	46bd      	mov	sp, r7
   83828:	bd80      	pop	{r7, pc}
   8382a:	bf00      	nop
   8382c:	20003758 	.word	0x20003758
   83830:	00083ccd 	.word	0x00083ccd
   83834:	000836c9 	.word	0x000836c9
   83838:	400a4000 	.word	0x400a4000
   8383c:	00083c01 	.word	0x00083c01
   83840:	20180000 	.word	0x20180000
   83844:	20003740 	.word	0x20003740
   83848:	0008208d 	.word	0x0008208d
   8384c:	2000375a 	.word	0x2000375a
   83850:	2000375c 	.word	0x2000375c
   83854:	00083865 	.word	0x00083865
   83858:	00083c25 	.word	0x00083c25
   8385c:	000826fd 	.word	0x000826fd
   83860:	00082759 	.word	0x00082759

00083864 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   83864:	b580      	push	{r7, lr}
   83866:	b084      	sub	sp, #16
   83868:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   8386a:	4b4c      	ldr	r3, [pc, #304]	; (8399c <udd_ctrl_in_sent+0x138>)
   8386c:	4798      	blx	r3
   8386e:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   83870:	4b4b      	ldr	r3, [pc, #300]	; (839a0 <udd_ctrl_in_sent+0x13c>)
   83872:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83876:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8387a:	6838      	ldr	r0, [r7, #0]
   8387c:	4b49      	ldr	r3, [pc, #292]	; (839a4 <udd_ctrl_in_sent+0x140>)
   8387e:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83880:	4b49      	ldr	r3, [pc, #292]	; (839a8 <udd_ctrl_in_sent+0x144>)
   83882:	781b      	ldrb	r3, [r3, #0]
   83884:	2b03      	cmp	r3, #3
   83886:	d104      	bne.n	83892 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   83888:	4b48      	ldr	r3, [pc, #288]	; (839ac <udd_ctrl_in_sent+0x148>)
   8388a:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8388c:	4b48      	ldr	r3, [pc, #288]	; (839b0 <udd_ctrl_in_sent+0x14c>)
   8388e:	4798      	blx	r3
		return;
   83890:	e081      	b.n	83996 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83892:	4b48      	ldr	r3, [pc, #288]	; (839b4 <udd_ctrl_in_sent+0x150>)
   83894:	899a      	ldrh	r2, [r3, #12]
   83896:	4b48      	ldr	r3, [pc, #288]	; (839b8 <udd_ctrl_in_sent+0x154>)
   83898:	881b      	ldrh	r3, [r3, #0]
   8389a:	1ad3      	subs	r3, r2, r3
   8389c:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8389e:	89fb      	ldrh	r3, [r7, #14]
   838a0:	2b00      	cmp	r3, #0
   838a2:	d127      	bne.n	838f4 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   838a4:	4b45      	ldr	r3, [pc, #276]	; (839bc <udd_ctrl_in_sent+0x158>)
   838a6:	881a      	ldrh	r2, [r3, #0]
   838a8:	4b43      	ldr	r3, [pc, #268]	; (839b8 <udd_ctrl_in_sent+0x154>)
   838aa:	881b      	ldrh	r3, [r3, #0]
   838ac:	4413      	add	r3, r2
   838ae:	b29a      	uxth	r2, r3
   838b0:	4b42      	ldr	r3, [pc, #264]	; (839bc <udd_ctrl_in_sent+0x158>)
   838b2:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   838b4:	4b3f      	ldr	r3, [pc, #252]	; (839b4 <udd_ctrl_in_sent+0x150>)
   838b6:	88da      	ldrh	r2, [r3, #6]
   838b8:	4b40      	ldr	r3, [pc, #256]	; (839bc <udd_ctrl_in_sent+0x158>)
   838ba:	881b      	ldrh	r3, [r3, #0]
   838bc:	429a      	cmp	r2, r3
   838be:	d003      	beq.n	838c8 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   838c0:	4b3f      	ldr	r3, [pc, #252]	; (839c0 <udd_ctrl_in_sent+0x15c>)
   838c2:	781b      	ldrb	r3, [r3, #0]
   838c4:	2b00      	cmp	r3, #0
   838c6:	d002      	beq.n	838ce <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   838c8:	4b3e      	ldr	r3, [pc, #248]	; (839c4 <udd_ctrl_in_sent+0x160>)
   838ca:	4798      	blx	r3
			return;
   838cc:	e063      	b.n	83996 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   838ce:	4b39      	ldr	r3, [pc, #228]	; (839b4 <udd_ctrl_in_sent+0x150>)
   838d0:	695b      	ldr	r3, [r3, #20]
   838d2:	2b00      	cmp	r3, #0
   838d4:	d00e      	beq.n	838f4 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   838d6:	4b37      	ldr	r3, [pc, #220]	; (839b4 <udd_ctrl_in_sent+0x150>)
   838d8:	695b      	ldr	r3, [r3, #20]
   838da:	4798      	blx	r3
   838dc:	4603      	mov	r3, r0
   838de:	f083 0301 	eor.w	r3, r3, #1
   838e2:	b2db      	uxtb	r3, r3
   838e4:	2b00      	cmp	r3, #0
   838e6:	d105      	bne.n	838f4 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   838e8:	4b33      	ldr	r3, [pc, #204]	; (839b8 <udd_ctrl_in_sent+0x154>)
   838ea:	2200      	movs	r2, #0
   838ec:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   838ee:	4b31      	ldr	r3, [pc, #196]	; (839b4 <udd_ctrl_in_sent+0x150>)
   838f0:	899b      	ldrh	r3, [r3, #12]
   838f2:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   838f4:	89fb      	ldrh	r3, [r7, #14]
   838f6:	2b3f      	cmp	r3, #63	; 0x3f
   838f8:	d905      	bls.n	83906 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   838fa:	2340      	movs	r3, #64	; 0x40
   838fc:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   838fe:	4b30      	ldr	r3, [pc, #192]	; (839c0 <udd_ctrl_in_sent+0x15c>)
   83900:	2200      	movs	r2, #0
   83902:	701a      	strb	r2, [r3, #0]
   83904:	e002      	b.n	8390c <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   83906:	4b2e      	ldr	r3, [pc, #184]	; (839c0 <udd_ctrl_in_sent+0x15c>)
   83908:	2201      	movs	r2, #1
   8390a:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8390c:	4b2e      	ldr	r3, [pc, #184]	; (839c8 <udd_ctrl_in_sent+0x164>)
   8390e:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83910:	4b28      	ldr	r3, [pc, #160]	; (839b4 <udd_ctrl_in_sent+0x150>)
   83912:	689b      	ldr	r3, [r3, #8]
   83914:	4a28      	ldr	r2, [pc, #160]	; (839b8 <udd_ctrl_in_sent+0x154>)
   83916:	8812      	ldrh	r2, [r2, #0]
   83918:	4413      	add	r3, r2
   8391a:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   8391c:	4b1f      	ldr	r3, [pc, #124]	; (8399c <udd_ctrl_in_sent+0x138>)
   8391e:	4798      	blx	r3
   83920:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   83922:	4b1f      	ldr	r3, [pc, #124]	; (839a0 <udd_ctrl_in_sent+0x13c>)
   83924:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83928:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8392c:	2b00      	cmp	r3, #0
   8392e:	d006      	beq.n	8393e <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   83930:	6838      	ldr	r0, [r7, #0]
   83932:	4b1c      	ldr	r3, [pc, #112]	; (839a4 <udd_ctrl_in_sent+0x140>)
   83934:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83936:	4b1c      	ldr	r3, [pc, #112]	; (839a8 <udd_ctrl_in_sent+0x144>)
   83938:	2204      	movs	r2, #4
   8393a:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8393c:	e02b      	b.n	83996 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8393e:	2300      	movs	r3, #0
   83940:	737b      	strb	r3, [r7, #13]
   83942:	e00a      	b.n	8395a <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   83944:	687a      	ldr	r2, [r7, #4]
   83946:	1c53      	adds	r3, r2, #1
   83948:	607b      	str	r3, [r7, #4]
   8394a:	68bb      	ldr	r3, [r7, #8]
   8394c:	1c59      	adds	r1, r3, #1
   8394e:	60b9      	str	r1, [r7, #8]
   83950:	7812      	ldrb	r2, [r2, #0]
   83952:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   83954:	7b7b      	ldrb	r3, [r7, #13]
   83956:	3301      	adds	r3, #1
   83958:	737b      	strb	r3, [r7, #13]
   8395a:	7b7b      	ldrb	r3, [r7, #13]
   8395c:	b29b      	uxth	r3, r3
   8395e:	89fa      	ldrh	r2, [r7, #14]
   83960:	429a      	cmp	r2, r3
   83962:	d8ef      	bhi.n	83944 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   83964:	4b14      	ldr	r3, [pc, #80]	; (839b8 <udd_ctrl_in_sent+0x154>)
   83966:	881a      	ldrh	r2, [r3, #0]
   83968:	89fb      	ldrh	r3, [r7, #14]
   8396a:	4413      	add	r3, r2
   8396c:	b29a      	uxth	r2, r3
   8396e:	4b12      	ldr	r3, [pc, #72]	; (839b8 <udd_ctrl_in_sent+0x154>)
   83970:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   83972:	4b0b      	ldr	r3, [pc, #44]	; (839a0 <udd_ctrl_in_sent+0x13c>)
   83974:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83978:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8397c:	4b08      	ldr	r3, [pc, #32]	; (839a0 <udd_ctrl_in_sent+0x13c>)
   8397e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83982:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83986:	4b06      	ldr	r3, [pc, #24]	; (839a0 <udd_ctrl_in_sent+0x13c>)
   83988:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8398c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   83990:	6838      	ldr	r0, [r7, #0]
   83992:	4b04      	ldr	r3, [pc, #16]	; (839a4 <udd_ctrl_in_sent+0x140>)
   83994:	4798      	blx	r3
}
   83996:	3710      	adds	r7, #16
   83998:	46bd      	mov	sp, r7
   8399a:	bd80      	pop	{r7, pc}
   8399c:	000826fd 	.word	0x000826fd
   839a0:	400a4000 	.word	0x400a4000
   839a4:	00082759 	.word	0x00082759
   839a8:	20003758 	.word	0x20003758
   839ac:	00083ccd 	.word	0x00083ccd
   839b0:	000836c9 	.word	0x000836c9
   839b4:	20003740 	.word	0x20003740
   839b8:	2000375c 	.word	0x2000375c
   839bc:	2000375a 	.word	0x2000375a
   839c0:	20003790 	.word	0x20003790
   839c4:	00083c89 	.word	0x00083c89
   839c8:	20180000 	.word	0x20180000

000839cc <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   839cc:	b580      	push	{r7, lr}
   839ce:	b084      	sub	sp, #16
   839d0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   839d2:	4b61      	ldr	r3, [pc, #388]	; (83b58 <udd_ctrl_out_received+0x18c>)
   839d4:	781b      	ldrb	r3, [r3, #0]
   839d6:	2b01      	cmp	r3, #1
   839d8:	d00f      	beq.n	839fa <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   839da:	4b5f      	ldr	r3, [pc, #380]	; (83b58 <udd_ctrl_out_received+0x18c>)
   839dc:	781b      	ldrb	r3, [r3, #0]
   839de:	2b02      	cmp	r3, #2
   839e0:	d003      	beq.n	839ea <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   839e2:	4b5d      	ldr	r3, [pc, #372]	; (83b58 <udd_ctrl_out_received+0x18c>)
   839e4:	781b      	ldrb	r3, [r3, #0]
   839e6:	2b04      	cmp	r3, #4
   839e8:	d102      	bne.n	839f0 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   839ea:	4b5c      	ldr	r3, [pc, #368]	; (83b5c <udd_ctrl_out_received+0x190>)
   839ec:	4798      	blx	r3
   839ee:	e001      	b.n	839f4 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   839f0:	4b5b      	ldr	r3, [pc, #364]	; (83b60 <udd_ctrl_out_received+0x194>)
   839f2:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   839f4:	4b5b      	ldr	r3, [pc, #364]	; (83b64 <udd_ctrl_out_received+0x198>)
   839f6:	4798      	blx	r3
		return;
   839f8:	e0ab      	b.n	83b52 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   839fa:	4b5b      	ldr	r3, [pc, #364]	; (83b68 <udd_ctrl_out_received+0x19c>)
   839fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83a00:	0d1b      	lsrs	r3, r3, #20
   83a02:	b29b      	uxth	r3, r3
   83a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
   83a08:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   83a0a:	4b58      	ldr	r3, [pc, #352]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a0c:	899b      	ldrh	r3, [r3, #12]
   83a0e:	461a      	mov	r2, r3
   83a10:	4b57      	ldr	r3, [pc, #348]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a12:	881b      	ldrh	r3, [r3, #0]
   83a14:	4619      	mov	r1, r3
   83a16:	89bb      	ldrh	r3, [r7, #12]
   83a18:	440b      	add	r3, r1
   83a1a:	429a      	cmp	r2, r3
   83a1c:	da05      	bge.n	83a2a <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83a1e:	4b53      	ldr	r3, [pc, #332]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a20:	899a      	ldrh	r2, [r3, #12]
   83a22:	4b53      	ldr	r3, [pc, #332]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a24:	881b      	ldrh	r3, [r3, #0]
   83a26:	1ad3      	subs	r3, r2, r3
   83a28:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83a2a:	4b52      	ldr	r3, [pc, #328]	; (83b74 <udd_ctrl_out_received+0x1a8>)
   83a2c:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83a2e:	4b4f      	ldr	r3, [pc, #316]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a30:	689b      	ldr	r3, [r3, #8]
   83a32:	4a4f      	ldr	r2, [pc, #316]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a34:	8812      	ldrh	r2, [r2, #0]
   83a36:	4413      	add	r3, r2
   83a38:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   83a3a:	2300      	movs	r3, #0
   83a3c:	73fb      	strb	r3, [r7, #15]
   83a3e:	e00a      	b.n	83a56 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   83a40:	68ba      	ldr	r2, [r7, #8]
   83a42:	1c53      	adds	r3, r2, #1
   83a44:	60bb      	str	r3, [r7, #8]
   83a46:	687b      	ldr	r3, [r7, #4]
   83a48:	1c59      	adds	r1, r3, #1
   83a4a:	6079      	str	r1, [r7, #4]
   83a4c:	7812      	ldrb	r2, [r2, #0]
   83a4e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   83a50:	7bfb      	ldrb	r3, [r7, #15]
   83a52:	3301      	adds	r3, #1
   83a54:	73fb      	strb	r3, [r7, #15]
   83a56:	7bfb      	ldrb	r3, [r7, #15]
   83a58:	b29b      	uxth	r3, r3
   83a5a:	89ba      	ldrh	r2, [r7, #12]
   83a5c:	429a      	cmp	r2, r3
   83a5e:	d8ef      	bhi.n	83a40 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   83a60:	4b43      	ldr	r3, [pc, #268]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a62:	881a      	ldrh	r2, [r3, #0]
   83a64:	89bb      	ldrh	r3, [r7, #12]
   83a66:	4413      	add	r3, r2
   83a68:	b29a      	uxth	r2, r3
   83a6a:	4b41      	ldr	r3, [pc, #260]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a6c:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   83a6e:	89bb      	ldrh	r3, [r7, #12]
   83a70:	2b40      	cmp	r3, #64	; 0x40
   83a72:	d10a      	bne.n	83a8a <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   83a74:	4b3d      	ldr	r3, [pc, #244]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a76:	88db      	ldrh	r3, [r3, #6]
   83a78:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   83a7a:	4b3f      	ldr	r3, [pc, #252]	; (83b78 <udd_ctrl_out_received+0x1ac>)
   83a7c:	881b      	ldrh	r3, [r3, #0]
   83a7e:	4619      	mov	r1, r3
   83a80:	4b3b      	ldr	r3, [pc, #236]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a82:	881b      	ldrh	r3, [r3, #0]
   83a84:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   83a86:	429a      	cmp	r2, r3
   83a88:	dc20      	bgt.n	83acc <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   83a8a:	4b39      	ldr	r3, [pc, #228]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83a8c:	881a      	ldrh	r2, [r3, #0]
   83a8e:	4b37      	ldr	r3, [pc, #220]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a90:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83a92:	4b36      	ldr	r3, [pc, #216]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a94:	695b      	ldr	r3, [r3, #20]
   83a96:	2b00      	cmp	r3, #0
   83a98:	d010      	beq.n	83abc <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   83a9a:	4b34      	ldr	r3, [pc, #208]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83a9c:	695b      	ldr	r3, [r3, #20]
   83a9e:	4798      	blx	r3
   83aa0:	4603      	mov	r3, r0
   83aa2:	f083 0301 	eor.w	r3, r3, #1
   83aa6:	b2db      	uxtb	r3, r3
   83aa8:	2b00      	cmp	r3, #0
   83aaa:	d007      	beq.n	83abc <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   83aac:	4b2c      	ldr	r3, [pc, #176]	; (83b60 <udd_ctrl_out_received+0x194>)
   83aae:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   83ab0:	4b2d      	ldr	r3, [pc, #180]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
   83ab6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   83aba:	e04a      	b.n	83b52 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   83abc:	4b2a      	ldr	r3, [pc, #168]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   83ac2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   83ac6:	4b2d      	ldr	r3, [pc, #180]	; (83b7c <udd_ctrl_out_received+0x1b0>)
   83ac8:	4798      	blx	r3
		return;
   83aca:	e042      	b.n	83b52 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   83acc:	4b27      	ldr	r3, [pc, #156]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83ace:	899a      	ldrh	r2, [r3, #12]
   83ad0:	4b27      	ldr	r3, [pc, #156]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83ad2:	881b      	ldrh	r3, [r3, #0]
   83ad4:	429a      	cmp	r2, r3
   83ad6:	d127      	bne.n	83b28 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   83ad8:	4b24      	ldr	r3, [pc, #144]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83ada:	695b      	ldr	r3, [r3, #20]
   83adc:	2b00      	cmp	r3, #0
   83ade:	d107      	bne.n	83af0 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   83ae0:	4b1f      	ldr	r3, [pc, #124]	; (83b60 <udd_ctrl_out_received+0x194>)
   83ae2:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   83ae4:	4b20      	ldr	r3, [pc, #128]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
   83aea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83aee:	e030      	b.n	83b52 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   83af0:	4b1e      	ldr	r3, [pc, #120]	; (83b6c <udd_ctrl_out_received+0x1a0>)
   83af2:	695b      	ldr	r3, [r3, #20]
   83af4:	4798      	blx	r3
   83af6:	4603      	mov	r3, r0
   83af8:	f083 0301 	eor.w	r3, r3, #1
   83afc:	b2db      	uxtb	r3, r3
   83afe:	2b00      	cmp	r3, #0
   83b00:	d007      	beq.n	83b12 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   83b02:	4b17      	ldr	r3, [pc, #92]	; (83b60 <udd_ctrl_out_received+0x194>)
   83b04:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   83b06:	4b18      	ldr	r3, [pc, #96]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83b08:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b0c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83b10:	e01f      	b.n	83b52 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83b12:	4b19      	ldr	r3, [pc, #100]	; (83b78 <udd_ctrl_out_received+0x1ac>)
   83b14:	881a      	ldrh	r2, [r3, #0]
   83b16:	4b16      	ldr	r3, [pc, #88]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83b18:	881b      	ldrh	r3, [r3, #0]
   83b1a:	4413      	add	r3, r2
   83b1c:	b29a      	uxth	r2, r3
   83b1e:	4b16      	ldr	r3, [pc, #88]	; (83b78 <udd_ctrl_out_received+0x1ac>)
   83b20:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   83b22:	4b13      	ldr	r3, [pc, #76]	; (83b70 <udd_ctrl_out_received+0x1a4>)
   83b24:	2200      	movs	r2, #0
   83b26:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   83b28:	4b0f      	ldr	r3, [pc, #60]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   83b32:	4b0d      	ldr	r3, [pc, #52]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83b38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   83b3c:	4b10      	ldr	r3, [pc, #64]	; (83b80 <udd_ctrl_out_received+0x1b4>)
   83b3e:	4798      	blx	r3
   83b40:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   83b42:	4b09      	ldr	r3, [pc, #36]	; (83b68 <udd_ctrl_out_received+0x19c>)
   83b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83b48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83b4c:	6838      	ldr	r0, [r7, #0]
   83b4e:	4b0d      	ldr	r3, [pc, #52]	; (83b84 <udd_ctrl_out_received+0x1b8>)
   83b50:	4798      	blx	r3
}
   83b52:	3710      	adds	r7, #16
   83b54:	46bd      	mov	sp, r7
   83b56:	bd80      	pop	{r7, pc}
   83b58:	20003758 	.word	0x20003758
   83b5c:	00083ccd 	.word	0x00083ccd
   83b60:	00083c01 	.word	0x00083c01
   83b64:	000836c9 	.word	0x000836c9
   83b68:	400a4000 	.word	0x400a4000
   83b6c:	20003740 	.word	0x20003740
   83b70:	2000375c 	.word	0x2000375c
   83b74:	20180000 	.word	0x20180000
   83b78:	2000375a 	.word	0x2000375a
   83b7c:	00083c25 	.word	0x00083c25
   83b80:	000826fd 	.word	0x000826fd
   83b84:	00082759 	.word	0x00082759

00083b88 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   83b88:	b580      	push	{r7, lr}
   83b8a:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   83b8c:	4b0c      	ldr	r3, [pc, #48]	; (83bc0 <udd_ctrl_underflow+0x38>)
   83b8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
   83b96:	2b00      	cmp	r3, #0
   83b98:	d10f      	bne.n	83bba <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   83b9a:	4b0a      	ldr	r3, [pc, #40]	; (83bc4 <udd_ctrl_underflow+0x3c>)
   83b9c:	781b      	ldrb	r3, [r3, #0]
   83b9e:	2b01      	cmp	r3, #1
   83ba0:	d102      	bne.n	83ba8 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   83ba2:	4b09      	ldr	r3, [pc, #36]	; (83bc8 <udd_ctrl_underflow+0x40>)
   83ba4:	4798      	blx	r3
   83ba6:	e009      	b.n	83bbc <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   83ba8:	4b06      	ldr	r3, [pc, #24]	; (83bc4 <udd_ctrl_underflow+0x3c>)
   83baa:	781b      	ldrb	r3, [r3, #0]
   83bac:	2b04      	cmp	r3, #4
   83bae:	d105      	bne.n	83bbc <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   83bb0:	4b03      	ldr	r3, [pc, #12]	; (83bc0 <udd_ctrl_underflow+0x38>)
   83bb2:	2220      	movs	r2, #32
   83bb4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83bb8:	e000      	b.n	83bbc <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   83bba:	bf00      	nop
	}
}
   83bbc:	bd80      	pop	{r7, pc}
   83bbe:	bf00      	nop
   83bc0:	400a4000 	.word	0x400a4000
   83bc4:	20003758 	.word	0x20003758
   83bc8:	00083c25 	.word	0x00083c25

00083bcc <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   83bcc:	b480      	push	{r7}
   83bce:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   83bd0:	4b09      	ldr	r3, [pc, #36]	; (83bf8 <udd_ctrl_overflow+0x2c>)
   83bd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83bda:	2b00      	cmp	r3, #0
   83bdc:	d108      	bne.n	83bf0 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83bde:	4b07      	ldr	r3, [pc, #28]	; (83bfc <udd_ctrl_overflow+0x30>)
   83be0:	781b      	ldrb	r3, [r3, #0]
   83be2:	2b03      	cmp	r3, #3
   83be4:	d105      	bne.n	83bf2 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   83be6:	4b04      	ldr	r3, [pc, #16]	; (83bf8 <udd_ctrl_overflow+0x2c>)
   83be8:	2220      	movs	r2, #32
   83bea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83bee:	e000      	b.n	83bf2 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   83bf0:	bf00      	nop
	}
}
   83bf2:	46bd      	mov	sp, r7
   83bf4:	bc80      	pop	{r7}
   83bf6:	4770      	bx	lr
   83bf8:	400a4000 	.word	0x400a4000
   83bfc:	20003758 	.word	0x20003758

00083c00 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   83c00:	b480      	push	{r7}
   83c02:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83c04:	4b05      	ldr	r3, [pc, #20]	; (83c1c <udd_ctrl_stall_data+0x1c>)
   83c06:	2205      	movs	r2, #5
   83c08:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   83c0a:	4b05      	ldr	r3, [pc, #20]	; (83c20 <udd_ctrl_stall_data+0x20>)
   83c0c:	2220      	movs	r2, #32
   83c0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   83c12:	bf00      	nop
   83c14:	46bd      	mov	sp, r7
   83c16:	bc80      	pop	{r7}
   83c18:	4770      	bx	lr
   83c1a:	bf00      	nop
   83c1c:	20003758 	.word	0x20003758
   83c20:	400a4000 	.word	0x400a4000

00083c24 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   83c24:	b580      	push	{r7, lr}
   83c26:	b082      	sub	sp, #8
   83c28:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83c2a:	4b13      	ldr	r3, [pc, #76]	; (83c78 <udd_ctrl_send_zlp_in+0x54>)
   83c2c:	2203      	movs	r2, #3
   83c2e:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   83c30:	4b12      	ldr	r3, [pc, #72]	; (83c7c <udd_ctrl_send_zlp_in+0x58>)
   83c32:	4798      	blx	r3
   83c34:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   83c36:	4b12      	ldr	r3, [pc, #72]	; (83c80 <udd_ctrl_send_zlp_in+0x5c>)
   83c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83c3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83c40:	4b0f      	ldr	r3, [pc, #60]	; (83c80 <udd_ctrl_send_zlp_in+0x5c>)
   83c42:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83c46:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83c4a:	4b0d      	ldr	r3, [pc, #52]	; (83c80 <udd_ctrl_send_zlp_in+0x5c>)
   83c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83c50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   83c54:	4b0a      	ldr	r3, [pc, #40]	; (83c80 <udd_ctrl_send_zlp_in+0x5c>)
   83c56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83c5a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   83c5e:	4b08      	ldr	r3, [pc, #32]	; (83c80 <udd_ctrl_send_zlp_in+0x5c>)
   83c60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83c64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83c68:	6878      	ldr	r0, [r7, #4]
   83c6a:	4b06      	ldr	r3, [pc, #24]	; (83c84 <udd_ctrl_send_zlp_in+0x60>)
   83c6c:	4798      	blx	r3
}
   83c6e:	bf00      	nop
   83c70:	3708      	adds	r7, #8
   83c72:	46bd      	mov	sp, r7
   83c74:	bd80      	pop	{r7, pc}
   83c76:	bf00      	nop
   83c78:	20003758 	.word	0x20003758
   83c7c:	000826fd 	.word	0x000826fd
   83c80:	400a4000 	.word	0x400a4000
   83c84:	00082759 	.word	0x00082759

00083c88 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   83c88:	b580      	push	{r7, lr}
   83c8a:	b082      	sub	sp, #8
   83c8c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83c8e:	4b0b      	ldr	r3, [pc, #44]	; (83cbc <udd_ctrl_send_zlp_out+0x34>)
   83c90:	2204      	movs	r2, #4
   83c92:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   83c94:	4b0a      	ldr	r3, [pc, #40]	; (83cc0 <udd_ctrl_send_zlp_out+0x38>)
   83c96:	4798      	blx	r3
   83c98:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   83c9a:	4b0a      	ldr	r3, [pc, #40]	; (83cc4 <udd_ctrl_send_zlp_out+0x3c>)
   83c9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83ca0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83ca4:	4b07      	ldr	r3, [pc, #28]	; (83cc4 <udd_ctrl_send_zlp_out+0x3c>)
   83ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83caa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83cae:	6878      	ldr	r0, [r7, #4]
   83cb0:	4b05      	ldr	r3, [pc, #20]	; (83cc8 <udd_ctrl_send_zlp_out+0x40>)
   83cb2:	4798      	blx	r3
}
   83cb4:	bf00      	nop
   83cb6:	3708      	adds	r7, #8
   83cb8:	46bd      	mov	sp, r7
   83cba:	bd80      	pop	{r7, pc}
   83cbc:	20003758 	.word	0x20003758
   83cc0:	000826fd 	.word	0x000826fd
   83cc4:	400a4000 	.word	0x400a4000
   83cc8:	00082759 	.word	0x00082759

00083ccc <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   83ccc:	b580      	push	{r7, lr}
   83cce:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   83cd0:	4b04      	ldr	r3, [pc, #16]	; (83ce4 <udd_ctrl_endofrequest+0x18>)
   83cd2:	691b      	ldr	r3, [r3, #16]
   83cd4:	2b00      	cmp	r3, #0
   83cd6:	d002      	beq.n	83cde <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   83cd8:	4b02      	ldr	r3, [pc, #8]	; (83ce4 <udd_ctrl_endofrequest+0x18>)
   83cda:	691b      	ldr	r3, [r3, #16]
   83cdc:	4798      	blx	r3
	}
}
   83cde:	bf00      	nop
   83ce0:	bd80      	pop	{r7, pc}
   83ce2:	bf00      	nop
   83ce4:	20003740 	.word	0x20003740

00083ce8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   83ce8:	b580      	push	{r7, lr}
   83cea:	b082      	sub	sp, #8
   83cec:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   83cee:	4b31      	ldr	r3, [pc, #196]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83cf0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83cf4:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   83cf6:	4b2f      	ldr	r3, [pc, #188]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83cf8:	695b      	ldr	r3, [r3, #20]
   83cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
   83cfe:	2b00      	cmp	r3, #0
   83d00:	d101      	bne.n	83d06 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   83d02:	2300      	movs	r3, #0
   83d04:	e052      	b.n	83dac <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   83d06:	4b2b      	ldr	r3, [pc, #172]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83d08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83d0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   83d10:	4b28      	ldr	r3, [pc, #160]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83d12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83d16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   83d1a:	687b      	ldr	r3, [r7, #4]
   83d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   83d20:	2b00      	cmp	r3, #0
   83d22:	d003      	beq.n	83d2c <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   83d24:	4b24      	ldr	r3, [pc, #144]	; (83db8 <udd_ctrl_interrupt+0xd0>)
   83d26:	4798      	blx	r3
		return true;
   83d28:	2301      	movs	r3, #1
   83d2a:	e03f      	b.n	83dac <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   83d2c:	687b      	ldr	r3, [r7, #4]
   83d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83d32:	2b00      	cmp	r3, #0
   83d34:	d00a      	beq.n	83d4c <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   83d36:	4b1f      	ldr	r3, [pc, #124]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83d38:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   83d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83d40:	2b00      	cmp	r3, #0
   83d42:	d003      	beq.n	83d4c <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   83d44:	4b1d      	ldr	r3, [pc, #116]	; (83dbc <udd_ctrl_interrupt+0xd4>)
   83d46:	4798      	blx	r3
		return true;
   83d48:	2301      	movs	r3, #1
   83d4a:	e02f      	b.n	83dac <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   83d4c:	687b      	ldr	r3, [r7, #4]
   83d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   83d52:	2b00      	cmp	r3, #0
   83d54:	d003      	beq.n	83d5e <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   83d56:	4b1a      	ldr	r3, [pc, #104]	; (83dc0 <udd_ctrl_interrupt+0xd8>)
   83d58:	4798      	blx	r3
		return true;
   83d5a:	2301      	movs	r3, #1
   83d5c:	e026      	b.n	83dac <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   83d5e:	687b      	ldr	r3, [r7, #4]
   83d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   83d64:	2b00      	cmp	r3, #0
   83d66:	d004      	beq.n	83d72 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   83d68:	4b12      	ldr	r3, [pc, #72]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83d6e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   83d72:	687b      	ldr	r3, [r7, #4]
   83d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   83d78:	2b00      	cmp	r3, #0
   83d7a:	d008      	beq.n	83d8e <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   83d7c:	4b0d      	ldr	r3, [pc, #52]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83d7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83d82:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   83d86:	4b0f      	ldr	r3, [pc, #60]	; (83dc4 <udd_ctrl_interrupt+0xdc>)
   83d88:	4798      	blx	r3
		return true;
   83d8a:	2301      	movs	r3, #1
   83d8c:	e00e      	b.n	83dac <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   83d8e:	687b      	ldr	r3, [r7, #4]
   83d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   83d94:	2b00      	cmp	r3, #0
   83d96:	d008      	beq.n	83daa <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   83d98:	4b06      	ldr	r3, [pc, #24]	; (83db4 <udd_ctrl_interrupt+0xcc>)
   83d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83d9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   83da2:	4b09      	ldr	r3, [pc, #36]	; (83dc8 <udd_ctrl_interrupt+0xe0>)
   83da4:	4798      	blx	r3
		return true;
   83da6:	2301      	movs	r3, #1
   83da8:	e000      	b.n	83dac <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   83daa:	2300      	movs	r3, #0
}
   83dac:	4618      	mov	r0, r3
   83dae:	3708      	adds	r7, #8
   83db0:	46bd      	mov	sp, r7
   83db2:	bd80      	pop	{r7, pc}
   83db4:	400a4000 	.word	0x400a4000
   83db8:	00083725 	.word	0x00083725
   83dbc:	00083865 	.word	0x00083865
   83dc0:	000839cd 	.word	0x000839cd
   83dc4:	00083bcd 	.word	0x00083bcd
   83dc8:	00083b89 	.word	0x00083b89

00083dcc <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   83dcc:	b480      	push	{r7}
   83dce:	b083      	sub	sp, #12
   83dd0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83dd2:	2300      	movs	r3, #0
   83dd4:	71fb      	strb	r3, [r7, #7]
   83dd6:	e01c      	b.n	83e12 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   83dd8:	79fa      	ldrb	r2, [r7, #7]
   83dda:	4912      	ldr	r1, [pc, #72]	; (83e24 <udd_ep_job_table_reset+0x58>)
   83ddc:	4613      	mov	r3, r2
   83dde:	005b      	lsls	r3, r3, #1
   83de0:	4413      	add	r3, r2
   83de2:	00db      	lsls	r3, r3, #3
   83de4:	440b      	add	r3, r1
   83de6:	f103 0210 	add.w	r2, r3, #16
   83dea:	7913      	ldrb	r3, [r2, #4]
   83dec:	f36f 0300 	bfc	r3, #0, #1
   83df0:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   83df2:	79fa      	ldrb	r2, [r7, #7]
   83df4:	490b      	ldr	r1, [pc, #44]	; (83e24 <udd_ep_job_table_reset+0x58>)
   83df6:	4613      	mov	r3, r2
   83df8:	005b      	lsls	r3, r3, #1
   83dfa:	4413      	add	r3, r2
   83dfc:	00db      	lsls	r3, r3, #3
   83dfe:	440b      	add	r3, r1
   83e00:	f103 0210 	add.w	r2, r3, #16
   83e04:	7913      	ldrb	r3, [r2, #4]
   83e06:	f36f 0382 	bfc	r3, #2, #1
   83e0a:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e0c:	79fb      	ldrb	r3, [r7, #7]
   83e0e:	3301      	adds	r3, #1
   83e10:	71fb      	strb	r3, [r7, #7]
   83e12:	79fb      	ldrb	r3, [r7, #7]
   83e14:	2b01      	cmp	r3, #1
   83e16:	d9df      	bls.n	83dd8 <udd_ep_job_table_reset+0xc>
	}
}
   83e18:	bf00      	nop
   83e1a:	bf00      	nop
   83e1c:	370c      	adds	r7, #12
   83e1e:	46bd      	mov	sp, r7
   83e20:	bc80      	pop	{r7}
   83e22:	4770      	bx	lr
   83e24:	20003760 	.word	0x20003760

00083e28 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   83e28:	b580      	push	{r7, lr}
   83e2a:	b082      	sub	sp, #8
   83e2c:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e2e:	2300      	movs	r3, #0
   83e30:	71fb      	strb	r3, [r7, #7]
   83e32:	e010      	b.n	83e56 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   83e34:	79fa      	ldrb	r2, [r7, #7]
   83e36:	4613      	mov	r3, r2
   83e38:	005b      	lsls	r3, r3, #1
   83e3a:	4413      	add	r3, r2
   83e3c:	00db      	lsls	r3, r3, #3
   83e3e:	4a0a      	ldr	r2, [pc, #40]	; (83e68 <udd_ep_job_table_kill+0x40>)
   83e40:	1898      	adds	r0, r3, r2
   83e42:	79fb      	ldrb	r3, [r7, #7]
   83e44:	3301      	adds	r3, #1
   83e46:	b2db      	uxtb	r3, r3
   83e48:	461a      	mov	r2, r3
   83e4a:	2101      	movs	r1, #1
   83e4c:	4b07      	ldr	r3, [pc, #28]	; (83e6c <udd_ep_job_table_kill+0x44>)
   83e4e:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e50:	79fb      	ldrb	r3, [r7, #7]
   83e52:	3301      	adds	r3, #1
   83e54:	71fb      	strb	r3, [r7, #7]
   83e56:	79fb      	ldrb	r3, [r7, #7]
   83e58:	2b01      	cmp	r3, #1
   83e5a:	d9eb      	bls.n	83e34 <udd_ep_job_table_kill+0xc>
	}
}
   83e5c:	bf00      	nop
   83e5e:	bf00      	nop
   83e60:	3708      	adds	r7, #8
   83e62:	46bd      	mov	sp, r7
   83e64:	bd80      	pop	{r7, pc}
   83e66:	bf00      	nop
   83e68:	20003760 	.word	0x20003760
   83e6c:	00083ead 	.word	0x00083ead

00083e70 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   83e70:	b580      	push	{r7, lr}
   83e72:	b082      	sub	sp, #8
   83e74:	af00      	add	r7, sp, #0
   83e76:	4603      	mov	r3, r0
   83e78:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   83e7a:	79fb      	ldrb	r3, [r7, #7]
   83e7c:	f003 030f 	and.w	r3, r3, #15
   83e80:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83e82:	79fb      	ldrb	r3, [r7, #7]
   83e84:	1e5a      	subs	r2, r3, #1
   83e86:	4613      	mov	r3, r2
   83e88:	005b      	lsls	r3, r3, #1
   83e8a:	4413      	add	r3, r2
   83e8c:	00db      	lsls	r3, r3, #3
   83e8e:	4a05      	ldr	r2, [pc, #20]	; (83ea4 <udd_ep_abort_job+0x34>)
   83e90:	4413      	add	r3, r2
   83e92:	79fa      	ldrb	r2, [r7, #7]
   83e94:	2101      	movs	r1, #1
   83e96:	4618      	mov	r0, r3
   83e98:	4b03      	ldr	r3, [pc, #12]	; (83ea8 <udd_ep_abort_job+0x38>)
   83e9a:	4798      	blx	r3
}
   83e9c:	bf00      	nop
   83e9e:	3708      	adds	r7, #8
   83ea0:	46bd      	mov	sp, r7
   83ea2:	bd80      	pop	{r7, pc}
   83ea4:	20003760 	.word	0x20003760
   83ea8:	00083ead 	.word	0x00083ead

00083eac <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83eac:	b580      	push	{r7, lr}
   83eae:	b082      	sub	sp, #8
   83eb0:	af00      	add	r7, sp, #0
   83eb2:	6078      	str	r0, [r7, #4]
   83eb4:	460b      	mov	r3, r1
   83eb6:	70fb      	strb	r3, [r7, #3]
   83eb8:	4613      	mov	r3, r2
   83eba:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   83ebc:	687b      	ldr	r3, [r7, #4]
   83ebe:	7d1b      	ldrb	r3, [r3, #20]
   83ec0:	f003 0301 	and.w	r3, r3, #1
   83ec4:	b2db      	uxtb	r3, r3
   83ec6:	2b00      	cmp	r3, #0
   83ec8:	d01f      	beq.n	83f0a <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   83eca:	687a      	ldr	r2, [r7, #4]
   83ecc:	7d13      	ldrb	r3, [r2, #20]
   83ece:	f36f 0300 	bfc	r3, #0, #1
   83ed2:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   83ed4:	687b      	ldr	r3, [r7, #4]
   83ed6:	681b      	ldr	r3, [r3, #0]
   83ed8:	2b00      	cmp	r3, #0
   83eda:	d018      	beq.n	83f0e <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   83edc:	4a0e      	ldr	r2, [pc, #56]	; (83f18 <udd_ep_finish_job+0x6c>)
   83ede:	78bb      	ldrb	r3, [r7, #2]
   83ee0:	3308      	adds	r3, #8
   83ee2:	015b      	lsls	r3, r3, #5
   83ee4:	4413      	add	r3, r2
   83ee6:	681b      	ldr	r3, [r3, #0]
   83ee8:	f003 0308 	and.w	r3, r3, #8
   83eec:	2b00      	cmp	r3, #0
   83eee:	d003      	beq.n	83ef8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   83ef0:	78bb      	ldrb	r3, [r7, #2]
   83ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   83ef6:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83ef8:	687b      	ldr	r3, [r7, #4]
   83efa:	681b      	ldr	r3, [r3, #0]
   83efc:	78fa      	ldrb	r2, [r7, #3]
   83efe:	4610      	mov	r0, r2
   83f00:	687a      	ldr	r2, [r7, #4]
   83f02:	6891      	ldr	r1, [r2, #8]
   83f04:	78ba      	ldrb	r2, [r7, #2]
   83f06:	4798      	blx	r3
   83f08:	e002      	b.n	83f10 <udd_ep_finish_job+0x64>
		return; // No on-going job
   83f0a:	bf00      	nop
   83f0c:	e000      	b.n	83f10 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   83f0e:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83f10:	3708      	adds	r7, #8
   83f12:	46bd      	mov	sp, r7
   83f14:	bd80      	pop	{r7, pc}
   83f16:	bf00      	nop
   83f18:	400a4000 	.word	0x400a4000

00083f1c <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83f1c:	b580      	push	{r7, lr}
   83f1e:	b086      	sub	sp, #24
   83f20:	af00      	add	r7, sp, #0
   83f22:	4603      	mov	r3, r0
   83f24:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   83f26:	2300      	movs	r3, #0
   83f28:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83f2a:	79fb      	ldrb	r3, [r7, #7]
   83f2c:	1e5a      	subs	r2, r3, #1
   83f2e:	4613      	mov	r3, r2
   83f30:	005b      	lsls	r3, r3, #1
   83f32:	4413      	add	r3, r2
   83f34:	00db      	lsls	r3, r3, #3
   83f36:	4a6d      	ldr	r2, [pc, #436]	; (840ec <udd_ep_trans_done+0x1d0>)
   83f38:	4413      	add	r3, r2
   83f3a:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   83f3c:	68fb      	ldr	r3, [r7, #12]
   83f3e:	7d1b      	ldrb	r3, [r3, #20]
   83f40:	f003 0301 	and.w	r3, r3, #1
   83f44:	b2db      	uxtb	r3, r3
   83f46:	2b00      	cmp	r3, #0
   83f48:	f000 80cc 	beq.w	840e4 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83f4c:	68fb      	ldr	r3, [r7, #12]
   83f4e:	68da      	ldr	r2, [r3, #12]
   83f50:	68fb      	ldr	r3, [r7, #12]
   83f52:	689b      	ldr	r3, [r3, #8]
   83f54:	429a      	cmp	r2, r3
   83f56:	f000 8099 	beq.w	8408c <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83f5a:	68fb      	ldr	r3, [r7, #12]
   83f5c:	689a      	ldr	r2, [r3, #8]
   83f5e:	68fb      	ldr	r3, [r7, #12]
   83f60:	68db      	ldr	r3, [r3, #12]
   83f62:	1ad3      	subs	r3, r2, r3
   83f64:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83f66:	693b      	ldr	r3, [r7, #16]
   83f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   83f6c:	d905      	bls.n	83f7a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   83f72:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   83f74:	2300      	movs	r3, #0
   83f76:	617b      	str	r3, [r7, #20]
   83f78:	e002      	b.n	83f80 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   83f7a:	693b      	ldr	r3, [r7, #16]
   83f7c:	041b      	lsls	r3, r3, #16
   83f7e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   83f80:	4a5b      	ldr	r2, [pc, #364]	; (840f0 <udd_ep_trans_done+0x1d4>)
   83f82:	79fb      	ldrb	r3, [r7, #7]
   83f84:	3308      	adds	r3, #8
   83f86:	015b      	lsls	r3, r3, #5
   83f88:	4413      	add	r3, r2
   83f8a:	681b      	ldr	r3, [r3, #0]
   83f8c:	f003 0308 	and.w	r3, r3, #8
   83f90:	2b00      	cmp	r3, #0
   83f92:	d01d      	beq.n	83fd0 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83f94:	4a56      	ldr	r2, [pc, #344]	; (840f0 <udd_ep_trans_done+0x1d4>)
   83f96:	79fb      	ldrb	r3, [r7, #7]
   83f98:	3308      	adds	r3, #8
   83f9a:	015b      	lsls	r3, r3, #5
   83f9c:	4413      	add	r3, r2
   83f9e:	681b      	ldr	r3, [r3, #0]
   83fa0:	f003 0307 	and.w	r3, r3, #7
   83fa4:	2208      	movs	r2, #8
   83fa6:	fa02 f303 	lsl.w	r3, r2, r3
   83faa:	461a      	mov	r2, r3
   83fac:	693b      	ldr	r3, [r7, #16]
   83fae:	fbb3 f1f2 	udiv	r1, r3, r2
   83fb2:	fb01 f202 	mul.w	r2, r1, r2
   83fb6:	1a9b      	subs	r3, r3, r2
   83fb8:	2b00      	cmp	r3, #0
   83fba:	d027      	beq.n	8400c <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   83fbc:	697b      	ldr	r3, [r7, #20]
   83fbe:	f043 0308 	orr.w	r3, r3, #8
   83fc2:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83fc4:	68fa      	ldr	r2, [r7, #12]
   83fc6:	7d13      	ldrb	r3, [r2, #20]
   83fc8:	f36f 0341 	bfc	r3, #1, #1
   83fcc:	7513      	strb	r3, [r2, #20]
   83fce:	e01d      	b.n	8400c <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83fd0:	4a47      	ldr	r2, [pc, #284]	; (840f0 <udd_ep_trans_done+0x1d4>)
   83fd2:	79fb      	ldrb	r3, [r7, #7]
   83fd4:	3308      	adds	r3, #8
   83fd6:	015b      	lsls	r3, r3, #5
   83fd8:	4413      	add	r3, r2
   83fda:	681b      	ldr	r3, [r3, #0]
   83fdc:	091b      	lsrs	r3, r3, #4
   83fde:	f003 0303 	and.w	r3, r3, #3
   83fe2:	2b01      	cmp	r3, #1
   83fe4:	d10e      	bne.n	84004 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83fe6:	4a42      	ldr	r2, [pc, #264]	; (840f0 <udd_ep_trans_done+0x1d4>)
   83fe8:	79fb      	ldrb	r3, [r7, #7]
   83fea:	3308      	adds	r3, #8
   83fec:	015b      	lsls	r3, r3, #5
   83fee:	4413      	add	r3, r2
   83ff0:	681b      	ldr	r3, [r3, #0]
   83ff2:	f003 0307 	and.w	r3, r3, #7
   83ff6:	2208      	movs	r2, #8
   83ff8:	fa02 f303 	lsl.w	r3, r2, r3
   83ffc:	461a      	mov	r2, r3
   83ffe:	693b      	ldr	r3, [r7, #16]
   84000:	4293      	cmp	r3, r2
   84002:	d803      	bhi.n	8400c <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   84004:	697b      	ldr	r3, [r7, #20]
   84006:	f043 0314 	orr.w	r3, r3, #20
   8400a:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8400c:	68fb      	ldr	r3, [r7, #12]
   8400e:	685a      	ldr	r2, [r3, #4]
   84010:	68fb      	ldr	r3, [r7, #12]
   84012:	68db      	ldr	r3, [r3, #12]
   84014:	18d1      	adds	r1, r2, r3
   84016:	79fb      	ldrb	r3, [r7, #7]
   84018:	011a      	lsls	r2, r3, #4
   8401a:	4b36      	ldr	r3, [pc, #216]	; (840f4 <udd_ep_trans_done+0x1d8>)
   8401c:	4413      	add	r3, r2
   8401e:	460a      	mov	r2, r1
   84020:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   84022:	697b      	ldr	r3, [r7, #20]
   84024:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   84028:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   8402a:	4b33      	ldr	r3, [pc, #204]	; (840f8 <udd_ep_trans_done+0x1dc>)
   8402c:	4798      	blx	r3
   8402e:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   84030:	79fb      	ldrb	r3, [r7, #7]
   84032:	011a      	lsls	r2, r3, #4
   84034:	4b2f      	ldr	r3, [pc, #188]	; (840f4 <udd_ep_trans_done+0x1d8>)
   84036:	4413      	add	r3, r2
   84038:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8403a:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   8403e:	2b00      	cmp	r3, #0
   84040:	d11d      	bne.n	8407e <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   84042:	79fb      	ldrb	r3, [r7, #7]
   84044:	011a      	lsls	r2, r3, #4
   84046:	4b2b      	ldr	r3, [pc, #172]	; (840f4 <udd_ep_trans_done+0x1d8>)
   84048:	4413      	add	r3, r2
   8404a:	697a      	ldr	r2, [r7, #20]
   8404c:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   8404e:	68fb      	ldr	r3, [r7, #12]
   84050:	68da      	ldr	r2, [r3, #12]
   84052:	693b      	ldr	r3, [r7, #16]
   84054:	441a      	add	r2, r3
   84056:	68fb      	ldr	r3, [r7, #12]
   84058:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8405a:	68fb      	ldr	r3, [r7, #12]
   8405c:	693a      	ldr	r2, [r7, #16]
   8405e:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   84060:	4b23      	ldr	r3, [pc, #140]	; (840f0 <udd_ep_trans_done+0x1d4>)
   84062:	691a      	ldr	r2, [r3, #16]
   84064:	79fb      	ldrb	r3, [r7, #7]
   84066:	3b01      	subs	r3, #1
   84068:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8406c:	fa01 f303 	lsl.w	r3, r1, r3
   84070:	491f      	ldr	r1, [pc, #124]	; (840f0 <udd_ep_trans_done+0x1d4>)
   84072:	4313      	orrs	r3, r2
   84074:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   84076:	68b8      	ldr	r0, [r7, #8]
   84078:	4b20      	ldr	r3, [pc, #128]	; (840fc <udd_ep_trans_done+0x1e0>)
   8407a:	4798      	blx	r3
			return;
   8407c:	e033      	b.n	840e6 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   8407e:	68b8      	ldr	r0, [r7, #8]
   84080:	4b1e      	ldr	r3, [pc, #120]	; (840fc <udd_ep_trans_done+0x1e0>)
   84082:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84084:	68fb      	ldr	r3, [r7, #12]
   84086:	68da      	ldr	r2, [r3, #12]
   84088:	68fb      	ldr	r3, [r7, #12]
   8408a:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8408c:	4a18      	ldr	r2, [pc, #96]	; (840f0 <udd_ep_trans_done+0x1d4>)
   8408e:	79fb      	ldrb	r3, [r7, #7]
   84090:	3308      	adds	r3, #8
   84092:	015b      	lsls	r3, r3, #5
   84094:	4413      	add	r3, r2
   84096:	681b      	ldr	r3, [r3, #0]
   84098:	f003 0308 	and.w	r3, r3, #8
   8409c:	2b00      	cmp	r3, #0
   8409e:	d01a      	beq.n	840d6 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   840a0:	68fb      	ldr	r3, [r7, #12]
   840a2:	7d1b      	ldrb	r3, [r3, #20]
   840a4:	f003 0302 	and.w	r3, r3, #2
   840a8:	b2db      	uxtb	r3, r3
   840aa:	2b00      	cmp	r3, #0
   840ac:	d013      	beq.n	840d6 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   840ae:	4a10      	ldr	r2, [pc, #64]	; (840f0 <udd_ep_trans_done+0x1d4>)
   840b0:	79fb      	ldrb	r3, [r7, #7]
   840b2:	3308      	adds	r3, #8
   840b4:	015b      	lsls	r3, r3, #5
   840b6:	4413      	add	r3, r2
   840b8:	3304      	adds	r3, #4
   840ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
   840be:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   840c0:	4b0b      	ldr	r3, [pc, #44]	; (840f0 <udd_ep_trans_done+0x1d4>)
   840c2:	691a      	ldr	r2, [r3, #16]
   840c4:	79fb      	ldrb	r3, [r7, #7]
   840c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   840ca:	fa01 f303 	lsl.w	r3, r1, r3
   840ce:	4908      	ldr	r1, [pc, #32]	; (840f0 <udd_ep_trans_done+0x1d4>)
   840d0:	4313      	orrs	r3, r2
   840d2:	610b      	str	r3, [r1, #16]
			return;
   840d4:	e007      	b.n	840e6 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   840d6:	79fb      	ldrb	r3, [r7, #7]
   840d8:	461a      	mov	r2, r3
   840da:	2100      	movs	r1, #0
   840dc:	68f8      	ldr	r0, [r7, #12]
   840de:	4b08      	ldr	r3, [pc, #32]	; (84100 <udd_ep_trans_done+0x1e4>)
   840e0:	4798      	blx	r3
   840e2:	e000      	b.n	840e6 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   840e4:	bf00      	nop
}
   840e6:	3718      	adds	r7, #24
   840e8:	46bd      	mov	sp, r7
   840ea:	bd80      	pop	{r7, pc}
   840ec:	20003760 	.word	0x20003760
   840f0:	400a4000 	.word	0x400a4000
   840f4:	400a4300 	.word	0x400a4300
   840f8:	000826fd 	.word	0x000826fd
   840fc:	00082759 	.word	0x00082759
   84100:	00083ead 	.word	0x00083ead

00084104 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   84104:	b580      	push	{r7, lr}
   84106:	b084      	sub	sp, #16
   84108:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8410a:	2301      	movs	r3, #1
   8410c:	73fb      	strb	r3, [r7, #15]
   8410e:	e0e0      	b.n	842d2 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   84110:	7bfb      	ldrb	r3, [r7, #15]
   84112:	1e5a      	subs	r2, r3, #1
   84114:	4613      	mov	r3, r2
   84116:	005b      	lsls	r3, r3, #1
   84118:	4413      	add	r3, r2
   8411a:	00db      	lsls	r3, r3, #3
   8411c:	4a71      	ldr	r2, [pc, #452]	; (842e4 <udd_ep_interrupt+0x1e0>)
   8411e:	4413      	add	r3, r2
   84120:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84122:	4b71      	ldr	r3, [pc, #452]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84124:	691a      	ldr	r2, [r3, #16]
   84126:	7bfb      	ldrb	r3, [r7, #15]
   84128:	3b01      	subs	r3, #1
   8412a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8412e:	fa01 f303 	lsl.w	r3, r1, r3
   84132:	4013      	ands	r3, r2
   84134:	2b00      	cmp	r3, #0
   84136:	d03c      	beq.n	841b2 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84138:	4b6b      	ldr	r3, [pc, #428]	; (842e8 <udd_ep_interrupt+0x1e4>)
   8413a:	695a      	ldr	r2, [r3, #20]
   8413c:	7bfb      	ldrb	r3, [r7, #15]
   8413e:	3b01      	subs	r3, #1
   84140:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84144:	fa01 f303 	lsl.w	r3, r1, r3
   84148:	4013      	ands	r3, r2
   8414a:	2b00      	cmp	r3, #0
   8414c:	d031      	beq.n	841b2 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8414e:	7bfb      	ldrb	r3, [r7, #15]
   84150:	011a      	lsls	r2, r3, #4
   84152:	4b66      	ldr	r3, [pc, #408]	; (842ec <udd_ep_interrupt+0x1e8>)
   84154:	4413      	add	r3, r2
   84156:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   84158:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   8415c:	2b00      	cmp	r3, #0
   8415e:	d001      	beq.n	84164 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   84160:	2301      	movs	r3, #1
   84162:	e0bb      	b.n	842dc <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   84164:	4b60      	ldr	r3, [pc, #384]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84166:	691a      	ldr	r2, [r3, #16]
   84168:	7bfb      	ldrb	r3, [r7, #15]
   8416a:	3b01      	subs	r3, #1
   8416c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84170:	fa01 f303 	lsl.w	r3, r1, r3
   84174:	43db      	mvns	r3, r3
   84176:	495c      	ldr	r1, [pc, #368]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84178:	4013      	ands	r3, r2
   8417a:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8417c:	7bfb      	ldrb	r3, [r7, #15]
   8417e:	011a      	lsls	r2, r3, #4
   84180:	4b5a      	ldr	r3, [pc, #360]	; (842ec <udd_ep_interrupt+0x1e8>)
   84182:	4413      	add	r3, r2
   84184:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   84186:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84188:	b29b      	uxth	r3, r3
   8418a:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   8418c:	687b      	ldr	r3, [r7, #4]
   8418e:	2b00      	cmp	r3, #0
   84190:	d009      	beq.n	841a6 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   84192:	68bb      	ldr	r3, [r7, #8]
   84194:	68da      	ldr	r2, [r3, #12]
   84196:	687b      	ldr	r3, [r7, #4]
   84198:	1ad2      	subs	r2, r2, r3
   8419a:	68bb      	ldr	r3, [r7, #8]
   8419c:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8419e:	68bb      	ldr	r3, [r7, #8]
   841a0:	68da      	ldr	r2, [r3, #12]
   841a2:	68bb      	ldr	r3, [r7, #8]
   841a4:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   841a6:	7bfb      	ldrb	r3, [r7, #15]
   841a8:	4618      	mov	r0, r3
   841aa:	4b51      	ldr	r3, [pc, #324]	; (842f0 <udd_ep_interrupt+0x1ec>)
   841ac:	4798      	blx	r3
			return true;
   841ae:	2301      	movs	r3, #1
   841b0:	e094      	b.n	842dc <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   841b2:	4b4d      	ldr	r3, [pc, #308]	; (842e8 <udd_ep_interrupt+0x1e4>)
   841b4:	691a      	ldr	r2, [r3, #16]
   841b6:	7bfb      	ldrb	r3, [r7, #15]
   841b8:	f44f 7180 	mov.w	r1, #256	; 0x100
   841bc:	fa01 f303 	lsl.w	r3, r1, r3
   841c0:	4013      	ands	r3, r2
   841c2:	2b00      	cmp	r3, #0
   841c4:	f000 8082 	beq.w	842cc <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   841c8:	4a47      	ldr	r2, [pc, #284]	; (842e8 <udd_ep_interrupt+0x1e4>)
   841ca:	7bfb      	ldrb	r3, [r7, #15]
   841cc:	015b      	lsls	r3, r3, #5
   841ce:	4413      	add	r3, r2
   841d0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   841d4:	681b      	ldr	r3, [r3, #0]
   841d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   841da:	2b00      	cmp	r3, #0
   841dc:	d024      	beq.n	84228 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   841de:	4a42      	ldr	r2, [pc, #264]	; (842e8 <udd_ep_interrupt+0x1e4>)
   841e0:	7bfb      	ldrb	r3, [r7, #15]
   841e2:	015b      	lsls	r3, r3, #5
   841e4:	4413      	add	r3, r2
   841e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   841ea:	681b      	ldr	r3, [r3, #0]
   841ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   841f0:	2b00      	cmp	r3, #0
   841f2:	d119      	bne.n	84228 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   841f4:	4a3c      	ldr	r2, [pc, #240]	; (842e8 <udd_ep_interrupt+0x1e4>)
   841f6:	7bfb      	ldrb	r3, [r7, #15]
   841f8:	015b      	lsls	r3, r3, #5
   841fa:	4413      	add	r3, r2
   841fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84200:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84204:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   84206:	4a38      	ldr	r2, [pc, #224]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84208:	7bfb      	ldrb	r3, [r7, #15]
   8420a:	015b      	lsls	r3, r3, #5
   8420c:	4413      	add	r3, r2
   8420e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84212:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84216:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   84218:	7bfb      	ldrb	r3, [r7, #15]
   8421a:	461a      	mov	r2, r3
   8421c:	2100      	movs	r1, #0
   8421e:	68b8      	ldr	r0, [r7, #8]
   84220:	4b34      	ldr	r3, [pc, #208]	; (842f4 <udd_ep_interrupt+0x1f0>)
   84222:	4798      	blx	r3
				return true;
   84224:	2301      	movs	r3, #1
   84226:	e059      	b.n	842dc <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84228:	4a2f      	ldr	r2, [pc, #188]	; (842e8 <udd_ep_interrupt+0x1e4>)
   8422a:	7bfb      	ldrb	r3, [r7, #15]
   8422c:	015b      	lsls	r3, r3, #5
   8422e:	4413      	add	r3, r2
   84230:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84234:	681b      	ldr	r3, [r3, #0]
   84236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8423a:	2b00      	cmp	r3, #0
   8423c:	d046      	beq.n	842cc <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8423e:	4a2a      	ldr	r2, [pc, #168]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84240:	7bfb      	ldrb	r3, [r7, #15]
   84242:	015b      	lsls	r3, r3, #5
   84244:	4413      	add	r3, r2
   84246:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8424a:	681b      	ldr	r3, [r3, #0]
   8424c:	0c9b      	lsrs	r3, r3, #18
   8424e:	f003 0303 	and.w	r3, r3, #3
   84252:	2b00      	cmp	r3, #0
   84254:	d13a      	bne.n	842cc <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84256:	4a24      	ldr	r2, [pc, #144]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84258:	7bfb      	ldrb	r3, [r7, #15]
   8425a:	015b      	lsls	r3, r3, #5
   8425c:	4413      	add	r3, r2
   8425e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84262:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84266:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   84268:	4b1f      	ldr	r3, [pc, #124]	; (842e8 <udd_ep_interrupt+0x1e4>)
   8426a:	691a      	ldr	r2, [r3, #16]
   8426c:	7bfb      	ldrb	r3, [r7, #15]
   8426e:	f44f 7180 	mov.w	r1, #256	; 0x100
   84272:	fa01 f303 	lsl.w	r3, r1, r3
   84276:	43db      	mvns	r3, r3
   84278:	491b      	ldr	r1, [pc, #108]	; (842e8 <udd_ep_interrupt+0x1e4>)
   8427a:	4013      	ands	r3, r2
   8427c:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8427e:	68ba      	ldr	r2, [r7, #8]
   84280:	7d13      	ldrb	r3, [r2, #20]
   84282:	f36f 0382 	bfc	r3, #2, #1
   84286:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84288:	4a17      	ldr	r2, [pc, #92]	; (842e8 <udd_ep_interrupt+0x1e4>)
   8428a:	7bfb      	ldrb	r3, [r7, #15]
   8428c:	015b      	lsls	r3, r3, #5
   8428e:	4413      	add	r3, r2
   84290:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84294:	681a      	ldr	r2, [r3, #0]
   84296:	4914      	ldr	r1, [pc, #80]	; (842e8 <udd_ep_interrupt+0x1e4>)
   84298:	7bfb      	ldrb	r3, [r7, #15]
   8429a:	f022 0202 	bic.w	r2, r2, #2
   8429e:	015b      	lsls	r3, r3, #5
   842a0:	440b      	add	r3, r1
   842a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   842a6:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   842a8:	4a0f      	ldr	r2, [pc, #60]	; (842e8 <udd_ep_interrupt+0x1e4>)
   842aa:	7bfb      	ldrb	r3, [r7, #15]
   842ac:	015b      	lsls	r3, r3, #5
   842ae:	4413      	add	r3, r2
   842b0:	f503 738a 	add.w	r3, r3, #276	; 0x114
   842b4:	2220      	movs	r2, #32
   842b6:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   842b8:	4a0b      	ldr	r2, [pc, #44]	; (842e8 <udd_ep_interrupt+0x1e4>)
   842ba:	7bfb      	ldrb	r3, [r7, #15]
   842bc:	015b      	lsls	r3, r3, #5
   842be:	4413      	add	r3, r2
   842c0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   842c4:	2240      	movs	r2, #64	; 0x40
   842c6:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   842c8:	2301      	movs	r3, #1
   842ca:	e007      	b.n	842dc <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   842cc:	7bfb      	ldrb	r3, [r7, #15]
   842ce:	3301      	adds	r3, #1
   842d0:	73fb      	strb	r3, [r7, #15]
   842d2:	7bfb      	ldrb	r3, [r7, #15]
   842d4:	2b02      	cmp	r3, #2
   842d6:	f67f af1b 	bls.w	84110 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   842da:	2300      	movs	r3, #0
}
   842dc:	4618      	mov	r0, r3
   842de:	3710      	adds	r7, #16
   842e0:	46bd      	mov	sp, r7
   842e2:	bd80      	pop	{r7, pc}
   842e4:	20003760 	.word	0x20003760
   842e8:	400a4000 	.word	0x400a4000
   842ec:	400a4300 	.word	0x400a4300
   842f0:	00083f1d 	.word	0x00083f1d
   842f4:	00083ead 	.word	0x00083ead

000842f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   842f8:	b580      	push	{r7, lr}
   842fa:	b086      	sub	sp, #24
   842fc:	af00      	add	r7, sp, #0
   842fe:	60f8      	str	r0, [r7, #12]
   84300:	60b9      	str	r1, [r7, #8]
   84302:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   84304:	2300      	movs	r3, #0
   84306:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   84308:	68fb      	ldr	r3, [r7, #12]
   8430a:	2b01      	cmp	r3, #1
   8430c:	d01e      	beq.n	8434c <_write+0x54>
   8430e:	68fb      	ldr	r3, [r7, #12]
   84310:	2b02      	cmp	r3, #2
   84312:	d01b      	beq.n	8434c <_write+0x54>
   84314:	68fb      	ldr	r3, [r7, #12]
   84316:	2b03      	cmp	r3, #3
   84318:	d018      	beq.n	8434c <_write+0x54>
		return -1;
   8431a:	f04f 33ff 	mov.w	r3, #4294967295
   8431e:	e019      	b.n	84354 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84320:	4b0e      	ldr	r3, [pc, #56]	; (8435c <_write+0x64>)
   84322:	681a      	ldr	r2, [r3, #0]
   84324:	4b0e      	ldr	r3, [pc, #56]	; (84360 <_write+0x68>)
   84326:	6818      	ldr	r0, [r3, #0]
   84328:	68bb      	ldr	r3, [r7, #8]
   8432a:	1c59      	adds	r1, r3, #1
   8432c:	60b9      	str	r1, [r7, #8]
   8432e:	781b      	ldrb	r3, [r3, #0]
   84330:	4619      	mov	r1, r3
   84332:	4790      	blx	r2
   84334:	4603      	mov	r3, r0
   84336:	2b00      	cmp	r3, #0
   84338:	da02      	bge.n	84340 <_write+0x48>
			return -1;
   8433a:	f04f 33ff 	mov.w	r3, #4294967295
   8433e:	e009      	b.n	84354 <_write+0x5c>
		}
		++nChars;
   84340:	697b      	ldr	r3, [r7, #20]
   84342:	3301      	adds	r3, #1
   84344:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   84346:	687b      	ldr	r3, [r7, #4]
   84348:	3b01      	subs	r3, #1
   8434a:	607b      	str	r3, [r7, #4]
   8434c:	687b      	ldr	r3, [r7, #4]
   8434e:	2b00      	cmp	r3, #0
   84350:	d1e6      	bne.n	84320 <_write+0x28>
	}
	return nChars;
   84352:	697b      	ldr	r3, [r7, #20]
}
   84354:	4618      	mov	r0, r3
   84356:	3718      	adds	r7, #24
   84358:	46bd      	mov	sp, r7
   8435a:	bd80      	pop	{r7, pc}
   8435c:	20003798 	.word	0x20003798
   84360:	20003794 	.word	0x20003794

00084364 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84364:	b580      	push	{r7, lr}
   84366:	b084      	sub	sp, #16
   84368:	af00      	add	r7, sp, #0
   8436a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8436c:	2300      	movs	r3, #0
   8436e:	60fb      	str	r3, [r7, #12]
   84370:	e017      	b.n	843a2 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84372:	4a10      	ldr	r2, [pc, #64]	; (843b4 <LED_Off+0x50>)
   84374:	68fb      	ldr	r3, [r7, #12]
   84376:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   8437a:	687a      	ldr	r2, [r7, #4]
   8437c:	429a      	cmp	r2, r3
   8437e:	d10d      	bne.n	8439c <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84380:	4a0c      	ldr	r2, [pc, #48]	; (843b4 <LED_Off+0x50>)
   84382:	68fb      	ldr	r3, [r7, #12]
   84384:	00db      	lsls	r3, r3, #3
   84386:	4413      	add	r3, r2
   84388:	685b      	ldr	r3, [r3, #4]
   8438a:	2b01      	cmp	r3, #1
   8438c:	d103      	bne.n	84396 <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   8438e:	6878      	ldr	r0, [r7, #4]
   84390:	4b09      	ldr	r3, [pc, #36]	; (843b8 <LED_Off+0x54>)
   84392:	4798      	blx	r3
   84394:	e002      	b.n	8439c <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   84396:	6878      	ldr	r0, [r7, #4]
   84398:	4b08      	ldr	r3, [pc, #32]	; (843bc <LED_Off+0x58>)
   8439a:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8439c:	68fb      	ldr	r3, [r7, #12]
   8439e:	3301      	adds	r3, #1
   843a0:	60fb      	str	r3, [r7, #12]
   843a2:	68fb      	ldr	r3, [r7, #12]
   843a4:	2b02      	cmp	r3, #2
   843a6:	d9e4      	bls.n	84372 <LED_Off+0xe>
			}
		}
	}
}
   843a8:	bf00      	nop
   843aa:	bf00      	nop
   843ac:	3710      	adds	r7, #16
   843ae:	46bd      	mov	sp, r7
   843b0:	bd80      	pop	{r7, pc}
   843b2:	bf00      	nop
   843b4:	0008c984 	.word	0x0008c984
   843b8:	000850a9 	.word	0x000850a9
   843bc:	00085079 	.word	0x00085079

000843c0 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   843c0:	b580      	push	{r7, lr}
   843c2:	b084      	sub	sp, #16
   843c4:	af00      	add	r7, sp, #0
   843c6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   843c8:	2300      	movs	r3, #0
   843ca:	60fb      	str	r3, [r7, #12]
   843cc:	e017      	b.n	843fe <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   843ce:	4a10      	ldr	r2, [pc, #64]	; (84410 <LED_On+0x50>)
   843d0:	68fb      	ldr	r3, [r7, #12]
   843d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   843d6:	687a      	ldr	r2, [r7, #4]
   843d8:	429a      	cmp	r2, r3
   843da:	d10d      	bne.n	843f8 <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   843dc:	4a0c      	ldr	r2, [pc, #48]	; (84410 <LED_On+0x50>)
   843de:	68fb      	ldr	r3, [r7, #12]
   843e0:	00db      	lsls	r3, r3, #3
   843e2:	4413      	add	r3, r2
   843e4:	685b      	ldr	r3, [r3, #4]
   843e6:	2b01      	cmp	r3, #1
   843e8:	d103      	bne.n	843f2 <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   843ea:	6878      	ldr	r0, [r7, #4]
   843ec:	4b09      	ldr	r3, [pc, #36]	; (84414 <LED_On+0x54>)
   843ee:	4798      	blx	r3
   843f0:	e002      	b.n	843f8 <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   843f2:	6878      	ldr	r0, [r7, #4]
   843f4:	4b08      	ldr	r3, [pc, #32]	; (84418 <LED_On+0x58>)
   843f6:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   843f8:	68fb      	ldr	r3, [r7, #12]
   843fa:	3301      	adds	r3, #1
   843fc:	60fb      	str	r3, [r7, #12]
   843fe:	68fb      	ldr	r3, [r7, #12]
   84400:	2b02      	cmp	r3, #2
   84402:	d9e4      	bls.n	843ce <LED_On+0xe>
			}
		}
	}
}
   84404:	bf00      	nop
   84406:	bf00      	nop
   84408:	3710      	adds	r7, #16
   8440a:	46bd      	mov	sp, r7
   8440c:	bd80      	pop	{r7, pc}
   8440e:	bf00      	nop
   84410:	0008c984 	.word	0x0008c984
   84414:	00085079 	.word	0x00085079
   84418:	000850a9 	.word	0x000850a9

0008441c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8441c:	b580      	push	{r7, lr}
   8441e:	b082      	sub	sp, #8
   84420:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   84422:	4b1e      	ldr	r3, [pc, #120]	; (8449c <Reset_Handler+0x80>)
   84424:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   84426:	4b1e      	ldr	r3, [pc, #120]	; (844a0 <Reset_Handler+0x84>)
   84428:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8442a:	687a      	ldr	r2, [r7, #4]
   8442c:	683b      	ldr	r3, [r7, #0]
   8442e:	429a      	cmp	r2, r3
   84430:	d00c      	beq.n	8444c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   84432:	e007      	b.n	84444 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   84434:	687a      	ldr	r2, [r7, #4]
   84436:	1d13      	adds	r3, r2, #4
   84438:	607b      	str	r3, [r7, #4]
   8443a:	683b      	ldr	r3, [r7, #0]
   8443c:	1d19      	adds	r1, r3, #4
   8443e:	6039      	str	r1, [r7, #0]
   84440:	6812      	ldr	r2, [r2, #0]
   84442:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   84444:	683b      	ldr	r3, [r7, #0]
   84446:	4a17      	ldr	r2, [pc, #92]	; (844a4 <Reset_Handler+0x88>)
   84448:	4293      	cmp	r3, r2
   8444a:	d3f3      	bcc.n	84434 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8444c:	4b16      	ldr	r3, [pc, #88]	; (844a8 <Reset_Handler+0x8c>)
   8444e:	603b      	str	r3, [r7, #0]
   84450:	e004      	b.n	8445c <Reset_Handler+0x40>
		*pDest++ = 0;
   84452:	683b      	ldr	r3, [r7, #0]
   84454:	1d1a      	adds	r2, r3, #4
   84456:	603a      	str	r2, [r7, #0]
   84458:	2200      	movs	r2, #0
   8445a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   8445c:	683b      	ldr	r3, [r7, #0]
   8445e:	4a13      	ldr	r2, [pc, #76]	; (844ac <Reset_Handler+0x90>)
   84460:	4293      	cmp	r3, r2
   84462:	d3f6      	bcc.n	84452 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   84464:	4b12      	ldr	r3, [pc, #72]	; (844b0 <Reset_Handler+0x94>)
   84466:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84468:	687b      	ldr	r3, [r7, #4]
   8446a:	4a12      	ldr	r2, [pc, #72]	; (844b4 <Reset_Handler+0x98>)
   8446c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   84470:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84474:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   84476:	687b      	ldr	r3, [r7, #4]
   84478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8447c:	d309      	bcc.n	84492 <Reset_Handler+0x76>
   8447e:	687b      	ldr	r3, [r7, #4]
   84480:	4a0d      	ldr	r2, [pc, #52]	; (844b8 <Reset_Handler+0x9c>)
   84482:	4293      	cmp	r3, r2
   84484:	d205      	bcs.n	84492 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84486:	4b0b      	ldr	r3, [pc, #44]	; (844b4 <Reset_Handler+0x98>)
   84488:	689b      	ldr	r3, [r3, #8]
   8448a:	4a0a      	ldr	r2, [pc, #40]	; (844b4 <Reset_Handler+0x98>)
   8448c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84490:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   84492:	4b0a      	ldr	r3, [pc, #40]	; (844bc <Reset_Handler+0xa0>)
   84494:	4798      	blx	r3

	/* Branch to main function */
	main();
   84496:	4b0a      	ldr	r3, [pc, #40]	; (844c0 <Reset_Handler+0xa4>)
   84498:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8449a:	e7fe      	b.n	8449a <Reset_Handler+0x7e>
   8449c:	0008cde4 	.word	0x0008cde4
   844a0:	20000000 	.word	0x20000000
   844a4:	20000e30 	.word	0x20000e30
   844a8:	20000e30 	.word	0x20000e30
   844ac:	20003800 	.word	0x20003800
   844b0:	00080000 	.word	0x00080000
   844b4:	e000ed00 	.word	0xe000ed00
   844b8:	2000c000 	.word	0x2000c000
   844bc:	000858f9 	.word	0x000858f9
   844c0:	0008052d 	.word	0x0008052d

000844c4 <osc_enable>:
{
   844c4:	b580      	push	{r7, lr}
   844c6:	b082      	sub	sp, #8
   844c8:	af00      	add	r7, sp, #0
   844ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   844cc:	687b      	ldr	r3, [r7, #4]
   844ce:	2b07      	cmp	r3, #7
   844d0:	d82e      	bhi.n	84530 <osc_enable+0x6c>
   844d2:	a201      	add	r2, pc, #4	; (adr r2, 844d8 <osc_enable+0x14>)
   844d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   844d8:	0008452f 	.word	0x0008452f
   844dc:	000844f9 	.word	0x000844f9
   844e0:	00084501 	.word	0x00084501
   844e4:	00084509 	.word	0x00084509
   844e8:	00084511 	.word	0x00084511
   844ec:	00084519 	.word	0x00084519
   844f0:	00084521 	.word	0x00084521
   844f4:	00084529 	.word	0x00084529
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   844f8:	2000      	movs	r0, #0
   844fa:	4b0f      	ldr	r3, [pc, #60]	; (84538 <osc_enable+0x74>)
   844fc:	4798      	blx	r3
		break;
   844fe:	e017      	b.n	84530 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   84500:	2001      	movs	r0, #1
   84502:	4b0d      	ldr	r3, [pc, #52]	; (84538 <osc_enable+0x74>)
   84504:	4798      	blx	r3
		break;
   84506:	e013      	b.n	84530 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   84508:	2000      	movs	r0, #0
   8450a:	4b0c      	ldr	r3, [pc, #48]	; (8453c <osc_enable+0x78>)
   8450c:	4798      	blx	r3
		break;
   8450e:	e00f      	b.n	84530 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   84510:	2010      	movs	r0, #16
   84512:	4b0a      	ldr	r3, [pc, #40]	; (8453c <osc_enable+0x78>)
   84514:	4798      	blx	r3
		break;
   84516:	e00b      	b.n	84530 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   84518:	2020      	movs	r0, #32
   8451a:	4b08      	ldr	r3, [pc, #32]	; (8453c <osc_enable+0x78>)
   8451c:	4798      	blx	r3
		break;
   8451e:	e007      	b.n	84530 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84520:	203e      	movs	r0, #62	; 0x3e
   84522:	4b07      	ldr	r3, [pc, #28]	; (84540 <osc_enable+0x7c>)
   84524:	4798      	blx	r3
		break;
   84526:	e003      	b.n	84530 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   84528:	4b06      	ldr	r3, [pc, #24]	; (84544 <osc_enable+0x80>)
   8452a:	4798      	blx	r3
		break;
   8452c:	e000      	b.n	84530 <osc_enable+0x6c>
		break;
   8452e:	bf00      	nop
}
   84530:	bf00      	nop
   84532:	3708      	adds	r7, #8
   84534:	46bd      	mov	sp, r7
   84536:	bd80      	pop	{r7, pc}
   84538:	00084999 	.word	0x00084999
   8453c:	00084a05 	.word	0x00084a05
   84540:	00084a79 	.word	0x00084a79
   84544:	00084ac9 	.word	0x00084ac9

00084548 <osc_is_ready>:
{
   84548:	b580      	push	{r7, lr}
   8454a:	b082      	sub	sp, #8
   8454c:	af00      	add	r7, sp, #0
   8454e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84550:	687b      	ldr	r3, [r7, #4]
   84552:	2b07      	cmp	r3, #7
   84554:	d82f      	bhi.n	845b6 <osc_is_ready+0x6e>
   84556:	a201      	add	r2, pc, #4	; (adr r2, 8455c <osc_is_ready+0x14>)
   84558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8455c:	0008457d 	.word	0x0008457d
   84560:	00084581 	.word	0x00084581
   84564:	00084581 	.word	0x00084581
   84568:	00084593 	.word	0x00084593
   8456c:	00084593 	.word	0x00084593
   84570:	00084593 	.word	0x00084593
   84574:	000845a5 	.word	0x000845a5
   84578:	000845a5 	.word	0x000845a5
		return 1;
   8457c:	2301      	movs	r3, #1
   8457e:	e01b      	b.n	845b8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   84580:	4b0f      	ldr	r3, [pc, #60]	; (845c0 <osc_is_ready+0x78>)
   84582:	4798      	blx	r3
   84584:	4603      	mov	r3, r0
   84586:	2b00      	cmp	r3, #0
   84588:	bf14      	ite	ne
   8458a:	2301      	movne	r3, #1
   8458c:	2300      	moveq	r3, #0
   8458e:	b2db      	uxtb	r3, r3
   84590:	e012      	b.n	845b8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   84592:	4b0c      	ldr	r3, [pc, #48]	; (845c4 <osc_is_ready+0x7c>)
   84594:	4798      	blx	r3
   84596:	4603      	mov	r3, r0
   84598:	2b00      	cmp	r3, #0
   8459a:	bf14      	ite	ne
   8459c:	2301      	movne	r3, #1
   8459e:	2300      	moveq	r3, #0
   845a0:	b2db      	uxtb	r3, r3
   845a2:	e009      	b.n	845b8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   845a4:	4b08      	ldr	r3, [pc, #32]	; (845c8 <osc_is_ready+0x80>)
   845a6:	4798      	blx	r3
   845a8:	4603      	mov	r3, r0
   845aa:	2b00      	cmp	r3, #0
   845ac:	bf14      	ite	ne
   845ae:	2301      	movne	r3, #1
   845b0:	2300      	moveq	r3, #0
   845b2:	b2db      	uxtb	r3, r3
   845b4:	e000      	b.n	845b8 <osc_is_ready+0x70>
	return 0;
   845b6:	2300      	movs	r3, #0
}
   845b8:	4618      	mov	r0, r3
   845ba:	3708      	adds	r7, #8
   845bc:	46bd      	mov	sp, r7
   845be:	bd80      	pop	{r7, pc}
   845c0:	000849d1 	.word	0x000849d1
   845c4:	00084a61 	.word	0x00084a61
   845c8:	00084afd 	.word	0x00084afd

000845cc <osc_get_rate>:
{
   845cc:	b480      	push	{r7}
   845ce:	b083      	sub	sp, #12
   845d0:	af00      	add	r7, sp, #0
   845d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   845d4:	687b      	ldr	r3, [r7, #4]
   845d6:	2b07      	cmp	r3, #7
   845d8:	d823      	bhi.n	84622 <osc_get_rate+0x56>
   845da:	a201      	add	r2, pc, #4	; (adr r2, 845e0 <osc_get_rate+0x14>)
   845dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   845e0:	00084601 	.word	0x00084601
   845e4:	00084607 	.word	0x00084607
   845e8:	0008460b 	.word	0x0008460b
   845ec:	0008460f 	.word	0x0008460f
   845f0:	00084613 	.word	0x00084613
   845f4:	00084617 	.word	0x00084617
   845f8:	0008461b 	.word	0x0008461b
   845fc:	0008461f 	.word	0x0008461f
		return OSC_SLCK_32K_RC_HZ;
   84600:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84604:	e00e      	b.n	84624 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   84606:	2300      	movs	r3, #0
   84608:	e00c      	b.n	84624 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8460a:	2300      	movs	r3, #0
   8460c:	e00a      	b.n	84624 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8460e:	4b08      	ldr	r3, [pc, #32]	; (84630 <osc_get_rate+0x64>)
   84610:	e008      	b.n	84624 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   84612:	4b08      	ldr	r3, [pc, #32]	; (84634 <osc_get_rate+0x68>)
   84614:	e006      	b.n	84624 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   84616:	4b08      	ldr	r3, [pc, #32]	; (84638 <osc_get_rate+0x6c>)
   84618:	e004      	b.n	84624 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8461a:	4b07      	ldr	r3, [pc, #28]	; (84638 <osc_get_rate+0x6c>)
   8461c:	e002      	b.n	84624 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8461e:	4b06      	ldr	r3, [pc, #24]	; (84638 <osc_get_rate+0x6c>)
   84620:	e000      	b.n	84624 <osc_get_rate+0x58>
	return 0;
   84622:	2300      	movs	r3, #0
}
   84624:	4618      	mov	r0, r3
   84626:	370c      	adds	r7, #12
   84628:	46bd      	mov	sp, r7
   8462a:	bc80      	pop	{r7}
   8462c:	4770      	bx	lr
   8462e:	bf00      	nop
   84630:	003d0900 	.word	0x003d0900
   84634:	007a1200 	.word	0x007a1200
   84638:	00b71b00 	.word	0x00b71b00

0008463c <osc_wait_ready>:
{
   8463c:	b580      	push	{r7, lr}
   8463e:	b082      	sub	sp, #8
   84640:	af00      	add	r7, sp, #0
   84642:	4603      	mov	r3, r0
   84644:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   84646:	bf00      	nop
   84648:	79fb      	ldrb	r3, [r7, #7]
   8464a:	4618      	mov	r0, r3
   8464c:	4b06      	ldr	r3, [pc, #24]	; (84668 <osc_wait_ready+0x2c>)
   8464e:	4798      	blx	r3
   84650:	4603      	mov	r3, r0
   84652:	f083 0301 	eor.w	r3, r3, #1
   84656:	b2db      	uxtb	r3, r3
   84658:	2b00      	cmp	r3, #0
   8465a:	d1f5      	bne.n	84648 <osc_wait_ready+0xc>
}
   8465c:	bf00      	nop
   8465e:	bf00      	nop
   84660:	3708      	adds	r7, #8
   84662:	46bd      	mov	sp, r7
   84664:	bd80      	pop	{r7, pc}
   84666:	bf00      	nop
   84668:	00084549 	.word	0x00084549

0008466c <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8466c:	b580      	push	{r7, lr}
   8466e:	b086      	sub	sp, #24
   84670:	af00      	add	r7, sp, #0
   84672:	60f8      	str	r0, [r7, #12]
   84674:	607a      	str	r2, [r7, #4]
   84676:	603b      	str	r3, [r7, #0]
   84678:	460b      	mov	r3, r1
   8467a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8467c:	687b      	ldr	r3, [r7, #4]
   8467e:	2b00      	cmp	r3, #0
   84680:	d107      	bne.n	84692 <pll_config_init+0x26>
   84682:	683b      	ldr	r3, [r7, #0]
   84684:	2b00      	cmp	r3, #0
   84686:	d104      	bne.n	84692 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   84688:	68fb      	ldr	r3, [r7, #12]
   8468a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8468e:	601a      	str	r2, [r3, #0]
   84690:	e01a      	b.n	846c8 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   84692:	7afb      	ldrb	r3, [r7, #11]
   84694:	4618      	mov	r0, r3
   84696:	4b0e      	ldr	r3, [pc, #56]	; (846d0 <pll_config_init+0x64>)
   84698:	4798      	blx	r3
   8469a:	4602      	mov	r2, r0
   8469c:	687b      	ldr	r3, [r7, #4]
   8469e:	fbb2 f3f3 	udiv	r3, r2, r3
   846a2:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   846a4:	697b      	ldr	r3, [r7, #20]
   846a6:	683a      	ldr	r2, [r7, #0]
   846a8:	fb02 f303 	mul.w	r3, r2, r3
   846ac:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   846ae:	683b      	ldr	r3, [r7, #0]
   846b0:	3b01      	subs	r3, #1
   846b2:	041a      	lsls	r2, r3, #16
   846b4:	4b07      	ldr	r3, [pc, #28]	; (846d4 <pll_config_init+0x68>)
   846b6:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   846b8:	687a      	ldr	r2, [r7, #4]
   846ba:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   846bc:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   846be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   846c2:	68fb      	ldr	r3, [r7, #12]
   846c4:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   846c6:	bf00      	nop
   846c8:	bf00      	nop
   846ca:	3718      	adds	r7, #24
   846cc:	46bd      	mov	sp, r7
   846ce:	bd80      	pop	{r7, pc}
   846d0:	000845cd 	.word	0x000845cd
   846d4:	07ff0000 	.word	0x07ff0000

000846d8 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   846d8:	b580      	push	{r7, lr}
   846da:	b082      	sub	sp, #8
   846dc:	af00      	add	r7, sp, #0
   846de:	6078      	str	r0, [r7, #4]
   846e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   846e2:	683b      	ldr	r3, [r7, #0]
   846e4:	2b00      	cmp	r3, #0
   846e6:	d108      	bne.n	846fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   846e8:	4b09      	ldr	r3, [pc, #36]	; (84710 <pll_enable+0x38>)
   846ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   846ec:	687b      	ldr	r3, [r7, #4]
   846ee:	681b      	ldr	r3, [r3, #0]
   846f0:	4a08      	ldr	r2, [pc, #32]	; (84714 <pll_enable+0x3c>)
   846f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   846f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   846f8:	e005      	b.n	84706 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   846fa:	687b      	ldr	r3, [r7, #4]
   846fc:	681b      	ldr	r3, [r3, #0]
   846fe:	4a05      	ldr	r2, [pc, #20]	; (84714 <pll_enable+0x3c>)
   84700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   84704:	61d3      	str	r3, [r2, #28]
}
   84706:	bf00      	nop
   84708:	3708      	adds	r7, #8
   8470a:	46bd      	mov	sp, r7
   8470c:	bd80      	pop	{r7, pc}
   8470e:	bf00      	nop
   84710:	00084b6d 	.word	0x00084b6d
   84714:	400e0400 	.word	0x400e0400

00084718 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   84718:	b580      	push	{r7, lr}
   8471a:	b082      	sub	sp, #8
   8471c:	af00      	add	r7, sp, #0
   8471e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   84720:	687b      	ldr	r3, [r7, #4]
   84722:	2b00      	cmp	r3, #0
   84724:	d103      	bne.n	8472e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   84726:	4b05      	ldr	r3, [pc, #20]	; (8473c <pll_is_locked+0x24>)
   84728:	4798      	blx	r3
   8472a:	4603      	mov	r3, r0
   8472c:	e002      	b.n	84734 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8472e:	4b04      	ldr	r3, [pc, #16]	; (84740 <pll_is_locked+0x28>)
   84730:	4798      	blx	r3
   84732:	4603      	mov	r3, r0
	}
}
   84734:	4618      	mov	r0, r3
   84736:	3708      	adds	r7, #8
   84738:	46bd      	mov	sp, r7
   8473a:	bd80      	pop	{r7, pc}
   8473c:	00084b85 	.word	0x00084b85
   84740:	00084b9d 	.word	0x00084b9d

00084744 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   84744:	b580      	push	{r7, lr}
   84746:	b082      	sub	sp, #8
   84748:	af00      	add	r7, sp, #0
   8474a:	4603      	mov	r3, r0
   8474c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8474e:	79fb      	ldrb	r3, [r7, #7]
   84750:	3b03      	subs	r3, #3
   84752:	2b04      	cmp	r3, #4
   84754:	d808      	bhi.n	84768 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   84756:	79fb      	ldrb	r3, [r7, #7]
   84758:	4618      	mov	r0, r3
   8475a:	4b06      	ldr	r3, [pc, #24]	; (84774 <pll_enable_source+0x30>)
   8475c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8475e:	79fb      	ldrb	r3, [r7, #7]
   84760:	4618      	mov	r0, r3
   84762:	4b05      	ldr	r3, [pc, #20]	; (84778 <pll_enable_source+0x34>)
   84764:	4798      	blx	r3
		break;
   84766:	e000      	b.n	8476a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   84768:	bf00      	nop
	}
}
   8476a:	bf00      	nop
   8476c:	3708      	adds	r7, #8
   8476e:	46bd      	mov	sp, r7
   84770:	bd80      	pop	{r7, pc}
   84772:	bf00      	nop
   84774:	000844c5 	.word	0x000844c5
   84778:	0008463d 	.word	0x0008463d

0008477c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8477c:	b580      	push	{r7, lr}
   8477e:	b082      	sub	sp, #8
   84780:	af00      	add	r7, sp, #0
   84782:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84784:	bf00      	nop
   84786:	6878      	ldr	r0, [r7, #4]
   84788:	4b04      	ldr	r3, [pc, #16]	; (8479c <pll_wait_for_lock+0x20>)
   8478a:	4798      	blx	r3
   8478c:	4603      	mov	r3, r0
   8478e:	2b00      	cmp	r3, #0
   84790:	d0f9      	beq.n	84786 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   84792:	2300      	movs	r3, #0
}
   84794:	4618      	mov	r0, r3
   84796:	3708      	adds	r7, #8
   84798:	46bd      	mov	sp, r7
   8479a:	bd80      	pop	{r7, pc}
   8479c:	00084719 	.word	0x00084719

000847a0 <sysclk_get_main_hz>:
{
   847a0:	b580      	push	{r7, lr}
   847a2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   847a4:	2006      	movs	r0, #6
   847a6:	4b03      	ldr	r3, [pc, #12]	; (847b4 <sysclk_get_main_hz+0x14>)
   847a8:	4798      	blx	r3
   847aa:	4603      	mov	r3, r0
   847ac:	011b      	lsls	r3, r3, #4
}
   847ae:	4618      	mov	r0, r3
   847b0:	bd80      	pop	{r7, pc}
   847b2:	bf00      	nop
   847b4:	000845cd 	.word	0x000845cd

000847b8 <sysclk_get_cpu_hz>:
{
   847b8:	b580      	push	{r7, lr}
   847ba:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   847bc:	4b02      	ldr	r3, [pc, #8]	; (847c8 <sysclk_get_cpu_hz+0x10>)
   847be:	4798      	blx	r3
   847c0:	4603      	mov	r3, r0
   847c2:	085b      	lsrs	r3, r3, #1
}
   847c4:	4618      	mov	r0, r3
   847c6:	bd80      	pop	{r7, pc}
   847c8:	000847a1 	.word	0x000847a1

000847cc <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   847cc:	b590      	push	{r4, r7, lr}
   847ce:	b083      	sub	sp, #12
   847d0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   847d2:	2006      	movs	r0, #6
   847d4:	4b09      	ldr	r3, [pc, #36]	; (847fc <sysclk_enable_usb+0x30>)
   847d6:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   847d8:	1d38      	adds	r0, r7, #4
   847da:	2300      	movs	r3, #0
   847dc:	2200      	movs	r2, #0
   847de:	2106      	movs	r1, #6
   847e0:	4c07      	ldr	r4, [pc, #28]	; (84800 <sysclk_enable_usb+0x34>)
   847e2:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   847e4:	1d3b      	adds	r3, r7, #4
   847e6:	2101      	movs	r1, #1
   847e8:	4618      	mov	r0, r3
   847ea:	4b06      	ldr	r3, [pc, #24]	; (84804 <sysclk_enable_usb+0x38>)
   847ec:	4798      	blx	r3
	pll_wait_for_lock(1);
   847ee:	2001      	movs	r0, #1
   847f0:	4b05      	ldr	r3, [pc, #20]	; (84808 <sysclk_enable_usb+0x3c>)
   847f2:	4798      	blx	r3
}
   847f4:	bf00      	nop
   847f6:	370c      	adds	r7, #12
   847f8:	46bd      	mov	sp, r7
   847fa:	bd90      	pop	{r4, r7, pc}
   847fc:	00084745 	.word	0x00084745
   84800:	0008466d 	.word	0x0008466d
   84804:	000846d9 	.word	0x000846d9
   84808:	0008477d 	.word	0x0008477d

0008480c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   8480c:	b590      	push	{r4, r7, lr}
   8480e:	b083      	sub	sp, #12
   84810:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   84812:	4816      	ldr	r0, [pc, #88]	; (8486c <sysclk_init+0x60>)
   84814:	4b16      	ldr	r3, [pc, #88]	; (84870 <sysclk_init+0x64>)
   84816:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   84818:	2006      	movs	r0, #6
   8481a:	4b16      	ldr	r3, [pc, #88]	; (84874 <sysclk_init+0x68>)
   8481c:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   8481e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   84822:	4b15      	ldr	r3, [pc, #84]	; (84878 <sysclk_init+0x6c>)
   84824:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   84826:	bf00      	nop
   84828:	4b14      	ldr	r3, [pc, #80]	; (8487c <sysclk_init+0x70>)
   8482a:	4798      	blx	r3
   8482c:	4603      	mov	r3, r0
   8482e:	2b00      	cmp	r3, #0
   84830:	d0fa      	beq.n	84828 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   84832:	1d38      	adds	r0, r7, #4
   84834:	2310      	movs	r3, #16
   84836:	2201      	movs	r2, #1
   84838:	2106      	movs	r1, #6
   8483a:	4c11      	ldr	r4, [pc, #68]	; (84880 <sysclk_init+0x74>)
   8483c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8483e:	1d3b      	adds	r3, r7, #4
   84840:	2100      	movs	r1, #0
   84842:	4618      	mov	r0, r3
   84844:	4b0f      	ldr	r3, [pc, #60]	; (84884 <sysclk_init+0x78>)
   84846:	4798      	blx	r3
		pll_wait_for_lock(0);
   84848:	2000      	movs	r0, #0
   8484a:	4b0f      	ldr	r3, [pc, #60]	; (84888 <sysclk_init+0x7c>)
   8484c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8484e:	2010      	movs	r0, #16
   84850:	4b0e      	ldr	r3, [pc, #56]	; (8488c <sysclk_init+0x80>)
   84852:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84854:	4b0e      	ldr	r3, [pc, #56]	; (84890 <sysclk_init+0x84>)
   84856:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84858:	4b0e      	ldr	r3, [pc, #56]	; (84894 <sysclk_init+0x88>)
   8485a:	4798      	blx	r3
   8485c:	4603      	mov	r3, r0
   8485e:	4618      	mov	r0, r3
   84860:	4b03      	ldr	r3, [pc, #12]	; (84870 <sysclk_init+0x64>)
   84862:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   84864:	bf00      	nop
   84866:	370c      	adds	r7, #12
   84868:	46bd      	mov	sp, r7
   8486a:	bd90      	pop	{r4, r7, pc}
   8486c:	05b8d800 	.word	0x05b8d800
   84870:	200001d1 	.word	0x200001d1
   84874:	00084745 	.word	0x00084745
   84878:	00084b2d 	.word	0x00084b2d
   8487c:	00084b15 	.word	0x00084b15
   84880:	0008466d 	.word	0x0008466d
   84884:	000846d9 	.word	0x000846d9
   84888:	0008477d 	.word	0x0008477d
   8488c:	00084919 	.word	0x00084919
   84890:	00085699 	.word	0x00085699
   84894:	000847b9 	.word	0x000847b9

00084898 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   84898:	b480      	push	{r7}
   8489a:	b085      	sub	sp, #20
   8489c:	af00      	add	r7, sp, #0
   8489e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   848a0:	4b1c      	ldr	r3, [pc, #112]	; (84914 <pmc_switch_mck_to_mainck+0x7c>)
   848a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   848a4:	f023 0303 	bic.w	r3, r3, #3
   848a8:	4a1a      	ldr	r2, [pc, #104]	; (84914 <pmc_switch_mck_to_mainck+0x7c>)
   848aa:	f043 0301 	orr.w	r3, r3, #1
   848ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   848b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   848b4:	60fb      	str	r3, [r7, #12]
   848b6:	e007      	b.n	848c8 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   848b8:	68fb      	ldr	r3, [r7, #12]
   848ba:	2b00      	cmp	r3, #0
   848bc:	d101      	bne.n	848c2 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   848be:	2301      	movs	r3, #1
   848c0:	e023      	b.n	8490a <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   848c2:	68fb      	ldr	r3, [r7, #12]
   848c4:	3b01      	subs	r3, #1
   848c6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   848c8:	4b12      	ldr	r3, [pc, #72]	; (84914 <pmc_switch_mck_to_mainck+0x7c>)
   848ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   848cc:	f003 0308 	and.w	r3, r3, #8
   848d0:	2b00      	cmp	r3, #0
   848d2:	d0f1      	beq.n	848b8 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   848d4:	4b0f      	ldr	r3, [pc, #60]	; (84914 <pmc_switch_mck_to_mainck+0x7c>)
   848d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   848d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   848dc:	490d      	ldr	r1, [pc, #52]	; (84914 <pmc_switch_mck_to_mainck+0x7c>)
   848de:	687b      	ldr	r3, [r7, #4]
   848e0:	4313      	orrs	r3, r2
   848e2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   848e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   848e8:	60fb      	str	r3, [r7, #12]
   848ea:	e007      	b.n	848fc <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   848ec:	68fb      	ldr	r3, [r7, #12]
   848ee:	2b00      	cmp	r3, #0
   848f0:	d101      	bne.n	848f6 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   848f2:	2301      	movs	r3, #1
   848f4:	e009      	b.n	8490a <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   848f6:	68fb      	ldr	r3, [r7, #12]
   848f8:	3b01      	subs	r3, #1
   848fa:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   848fc:	4b05      	ldr	r3, [pc, #20]	; (84914 <pmc_switch_mck_to_mainck+0x7c>)
   848fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84900:	f003 0308 	and.w	r3, r3, #8
   84904:	2b00      	cmp	r3, #0
   84906:	d0f1      	beq.n	848ec <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   84908:	2300      	movs	r3, #0
}
   8490a:	4618      	mov	r0, r3
   8490c:	3714      	adds	r7, #20
   8490e:	46bd      	mov	sp, r7
   84910:	bc80      	pop	{r7}
   84912:	4770      	bx	lr
   84914:	400e0400 	.word	0x400e0400

00084918 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   84918:	b480      	push	{r7}
   8491a:	b085      	sub	sp, #20
   8491c:	af00      	add	r7, sp, #0
   8491e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84920:	4b1c      	ldr	r3, [pc, #112]	; (84994 <pmc_switch_mck_to_pllack+0x7c>)
   84922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   84928:	491a      	ldr	r1, [pc, #104]	; (84994 <pmc_switch_mck_to_pllack+0x7c>)
   8492a:	687b      	ldr	r3, [r7, #4]
   8492c:	4313      	orrs	r3, r2
   8492e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84930:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84934:	60fb      	str	r3, [r7, #12]
   84936:	e007      	b.n	84948 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84938:	68fb      	ldr	r3, [r7, #12]
   8493a:	2b00      	cmp	r3, #0
   8493c:	d101      	bne.n	84942 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8493e:	2301      	movs	r3, #1
   84940:	e023      	b.n	8498a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   84942:	68fb      	ldr	r3, [r7, #12]
   84944:	3b01      	subs	r3, #1
   84946:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84948:	4b12      	ldr	r3, [pc, #72]	; (84994 <pmc_switch_mck_to_pllack+0x7c>)
   8494a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8494c:	f003 0308 	and.w	r3, r3, #8
   84950:	2b00      	cmp	r3, #0
   84952:	d0f1      	beq.n	84938 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84954:	4b0f      	ldr	r3, [pc, #60]	; (84994 <pmc_switch_mck_to_pllack+0x7c>)
   84956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84958:	f023 0303 	bic.w	r3, r3, #3
   8495c:	4a0d      	ldr	r2, [pc, #52]	; (84994 <pmc_switch_mck_to_pllack+0x7c>)
   8495e:	f043 0302 	orr.w	r3, r3, #2
   84962:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84964:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84968:	60fb      	str	r3, [r7, #12]
   8496a:	e007      	b.n	8497c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8496c:	68fb      	ldr	r3, [r7, #12]
   8496e:	2b00      	cmp	r3, #0
   84970:	d101      	bne.n	84976 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   84972:	2301      	movs	r3, #1
   84974:	e009      	b.n	8498a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   84976:	68fb      	ldr	r3, [r7, #12]
   84978:	3b01      	subs	r3, #1
   8497a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8497c:	4b05      	ldr	r3, [pc, #20]	; (84994 <pmc_switch_mck_to_pllack+0x7c>)
   8497e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84980:	f003 0308 	and.w	r3, r3, #8
   84984:	2b00      	cmp	r3, #0
   84986:	d0f1      	beq.n	8496c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   84988:	2300      	movs	r3, #0
}
   8498a:	4618      	mov	r0, r3
   8498c:	3714      	adds	r7, #20
   8498e:	46bd      	mov	sp, r7
   84990:	bc80      	pop	{r7}
   84992:	4770      	bx	lr
   84994:	400e0400 	.word	0x400e0400

00084998 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   84998:	b480      	push	{r7}
   8499a:	b083      	sub	sp, #12
   8499c:	af00      	add	r7, sp, #0
   8499e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   849a0:	687b      	ldr	r3, [r7, #4]
   849a2:	2b01      	cmp	r3, #1
   849a4:	d107      	bne.n	849b6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   849a6:	4b08      	ldr	r3, [pc, #32]	; (849c8 <pmc_switch_sclk_to_32kxtal+0x30>)
   849a8:	689b      	ldr	r3, [r3, #8]
   849aa:	4a07      	ldr	r2, [pc, #28]	; (849c8 <pmc_switch_sclk_to_32kxtal+0x30>)
   849ac:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   849b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   849b4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   849b6:	4b04      	ldr	r3, [pc, #16]	; (849c8 <pmc_switch_sclk_to_32kxtal+0x30>)
   849b8:	4a04      	ldr	r2, [pc, #16]	; (849cc <pmc_switch_sclk_to_32kxtal+0x34>)
   849ba:	601a      	str	r2, [r3, #0]
}
   849bc:	bf00      	nop
   849be:	370c      	adds	r7, #12
   849c0:	46bd      	mov	sp, r7
   849c2:	bc80      	pop	{r7}
   849c4:	4770      	bx	lr
   849c6:	bf00      	nop
   849c8:	400e1210 	.word	0x400e1210
   849cc:	a5000008 	.word	0xa5000008

000849d0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   849d0:	b480      	push	{r7}
   849d2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   849d4:	4b09      	ldr	r3, [pc, #36]	; (849fc <pmc_osc_is_ready_32kxtal+0x2c>)
   849d6:	695b      	ldr	r3, [r3, #20]
   849d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   849dc:	2b00      	cmp	r3, #0
   849de:	d007      	beq.n	849f0 <pmc_osc_is_ready_32kxtal+0x20>
   849e0:	4b07      	ldr	r3, [pc, #28]	; (84a00 <pmc_osc_is_ready_32kxtal+0x30>)
   849e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   849e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   849e8:	2b00      	cmp	r3, #0
   849ea:	d001      	beq.n	849f0 <pmc_osc_is_ready_32kxtal+0x20>
   849ec:	2301      	movs	r3, #1
   849ee:	e000      	b.n	849f2 <pmc_osc_is_ready_32kxtal+0x22>
   849f0:	2300      	movs	r3, #0
}
   849f2:	4618      	mov	r0, r3
   849f4:	46bd      	mov	sp, r7
   849f6:	bc80      	pop	{r7}
   849f8:	4770      	bx	lr
   849fa:	bf00      	nop
   849fc:	400e1210 	.word	0x400e1210
   84a00:	400e0400 	.word	0x400e0400

00084a04 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   84a04:	b480      	push	{r7}
   84a06:	b083      	sub	sp, #12
   84a08:	af00      	add	r7, sp, #0
   84a0a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   84a0c:	4b13      	ldr	r3, [pc, #76]	; (84a5c <pmc_osc_enable_fastrc+0x58>)
   84a0e:	6a1b      	ldr	r3, [r3, #32]
   84a10:	4a12      	ldr	r2, [pc, #72]	; (84a5c <pmc_osc_enable_fastrc+0x58>)
   84a12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84a16:	f043 0308 	orr.w	r3, r3, #8
   84a1a:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   84a1c:	bf00      	nop
   84a1e:	4b0f      	ldr	r3, [pc, #60]	; (84a5c <pmc_osc_enable_fastrc+0x58>)
   84a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84a26:	2b00      	cmp	r3, #0
   84a28:	d0f9      	beq.n	84a1e <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84a2a:	4b0c      	ldr	r3, [pc, #48]	; (84a5c <pmc_osc_enable_fastrc+0x58>)
   84a2c:	6a1b      	ldr	r3, [r3, #32]
   84a2e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   84a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   84a36:	687a      	ldr	r2, [r7, #4]
   84a38:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84a3a:	4a08      	ldr	r2, [pc, #32]	; (84a5c <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   84a3c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84a40:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   84a42:	bf00      	nop
   84a44:	4b05      	ldr	r3, [pc, #20]	; (84a5c <pmc_osc_enable_fastrc+0x58>)
   84a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84a4c:	2b00      	cmp	r3, #0
   84a4e:	d0f9      	beq.n	84a44 <pmc_osc_enable_fastrc+0x40>
}
   84a50:	bf00      	nop
   84a52:	bf00      	nop
   84a54:	370c      	adds	r7, #12
   84a56:	46bd      	mov	sp, r7
   84a58:	bc80      	pop	{r7}
   84a5a:	4770      	bx	lr
   84a5c:	400e0400 	.word	0x400e0400

00084a60 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   84a60:	b480      	push	{r7}
   84a62:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   84a64:	4b03      	ldr	r3, [pc, #12]	; (84a74 <pmc_osc_is_ready_fastrc+0x14>)
   84a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   84a6c:	4618      	mov	r0, r3
   84a6e:	46bd      	mov	sp, r7
   84a70:	bc80      	pop	{r7}
   84a72:	4770      	bx	lr
   84a74:	400e0400 	.word	0x400e0400

00084a78 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   84a78:	b480      	push	{r7}
   84a7a:	b085      	sub	sp, #20
   84a7c:	af00      	add	r7, sp, #0
   84a7e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   84a80:	4b10      	ldr	r3, [pc, #64]	; (84ac4 <pmc_osc_enable_main_xtal+0x4c>)
   84a82:	6a1b      	ldr	r3, [r3, #32]
   84a84:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84a86:	68fb      	ldr	r3, [r7, #12]
   84a88:	f023 0303 	bic.w	r3, r3, #3
   84a8c:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84a8e:	687b      	ldr	r3, [r7, #4]
   84a90:	021b      	lsls	r3, r3, #8
   84a92:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84a94:	68fb      	ldr	r3, [r7, #12]
   84a96:	4313      	orrs	r3, r2
   84a98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84a9c:	f043 0301 	orr.w	r3, r3, #1
   84aa0:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   84aa2:	4a08      	ldr	r2, [pc, #32]	; (84ac4 <pmc_osc_enable_main_xtal+0x4c>)
   84aa4:	68fb      	ldr	r3, [r7, #12]
   84aa6:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84aa8:	bf00      	nop
   84aaa:	4b06      	ldr	r3, [pc, #24]	; (84ac4 <pmc_osc_enable_main_xtal+0x4c>)
   84aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84aae:	f003 0301 	and.w	r3, r3, #1
   84ab2:	2b00      	cmp	r3, #0
   84ab4:	d0f9      	beq.n	84aaa <pmc_osc_enable_main_xtal+0x32>
}
   84ab6:	bf00      	nop
   84ab8:	bf00      	nop
   84aba:	3714      	adds	r7, #20
   84abc:	46bd      	mov	sp, r7
   84abe:	bc80      	pop	{r7}
   84ac0:	4770      	bx	lr
   84ac2:	bf00      	nop
   84ac4:	400e0400 	.word	0x400e0400

00084ac8 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   84ac8:	b480      	push	{r7}
   84aca:	b083      	sub	sp, #12
   84acc:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   84ace:	4b0a      	ldr	r3, [pc, #40]	; (84af8 <pmc_osc_bypass_main_xtal+0x30>)
   84ad0:	6a1b      	ldr	r3, [r3, #32]
   84ad2:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84ad4:	687b      	ldr	r3, [r7, #4]
   84ad6:	f023 0303 	bic.w	r3, r3, #3
   84ada:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   84adc:	687b      	ldr	r3, [r7, #4]
   84ade:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84ae2:	f043 0302 	orr.w	r3, r3, #2
   84ae6:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   84ae8:	4a03      	ldr	r2, [pc, #12]	; (84af8 <pmc_osc_bypass_main_xtal+0x30>)
   84aea:	687b      	ldr	r3, [r7, #4]
   84aec:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   84aee:	bf00      	nop
   84af0:	370c      	adds	r7, #12
   84af2:	46bd      	mov	sp, r7
   84af4:	bc80      	pop	{r7}
   84af6:	4770      	bx	lr
   84af8:	400e0400 	.word	0x400e0400

00084afc <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   84afc:	b480      	push	{r7}
   84afe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84b00:	4b03      	ldr	r3, [pc, #12]	; (84b10 <pmc_osc_is_ready_main_xtal+0x14>)
   84b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84b04:	f003 0301 	and.w	r3, r3, #1
}
   84b08:	4618      	mov	r0, r3
   84b0a:	46bd      	mov	sp, r7
   84b0c:	bc80      	pop	{r7}
   84b0e:	4770      	bx	lr
   84b10:	400e0400 	.word	0x400e0400

00084b14 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   84b14:	b480      	push	{r7}
   84b16:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84b18:	4b03      	ldr	r3, [pc, #12]	; (84b28 <pmc_osc_is_ready_mainck+0x14>)
   84b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   84b20:	4618      	mov	r0, r3
   84b22:	46bd      	mov	sp, r7
   84b24:	bc80      	pop	{r7}
   84b26:	4770      	bx	lr
   84b28:	400e0400 	.word	0x400e0400

00084b2c <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   84b2c:	b480      	push	{r7}
   84b2e:	b085      	sub	sp, #20
   84b30:	af00      	add	r7, sp, #0
   84b32:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   84b34:	4b0c      	ldr	r3, [pc, #48]	; (84b68 <pmc_mainck_osc_select+0x3c>)
   84b36:	6a1b      	ldr	r3, [r3, #32]
   84b38:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   84b3a:	687b      	ldr	r3, [r7, #4]
   84b3c:	2b00      	cmp	r3, #0
   84b3e:	d004      	beq.n	84b4a <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   84b40:	68fb      	ldr	r3, [r7, #12]
   84b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   84b46:	60fb      	str	r3, [r7, #12]
   84b48:	e003      	b.n	84b52 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   84b4a:	68fb      	ldr	r3, [r7, #12]
   84b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   84b50:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84b52:	4a05      	ldr	r2, [pc, #20]	; (84b68 <pmc_mainck_osc_select+0x3c>)
   84b54:	68fb      	ldr	r3, [r7, #12]
   84b56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84b5a:	6213      	str	r3, [r2, #32]
}
   84b5c:	bf00      	nop
   84b5e:	3714      	adds	r7, #20
   84b60:	46bd      	mov	sp, r7
   84b62:	bc80      	pop	{r7}
   84b64:	4770      	bx	lr
   84b66:	bf00      	nop
   84b68:	400e0400 	.word	0x400e0400

00084b6c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   84b6c:	b480      	push	{r7}
   84b6e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84b70:	4b03      	ldr	r3, [pc, #12]	; (84b80 <pmc_disable_pllack+0x14>)
   84b72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   84b78:	bf00      	nop
   84b7a:	46bd      	mov	sp, r7
   84b7c:	bc80      	pop	{r7}
   84b7e:	4770      	bx	lr
   84b80:	400e0400 	.word	0x400e0400

00084b84 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   84b84:	b480      	push	{r7}
   84b86:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84b88:	4b03      	ldr	r3, [pc, #12]	; (84b98 <pmc_is_locked_pllack+0x14>)
   84b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84b8c:	f003 0302 	and.w	r3, r3, #2
}
   84b90:	4618      	mov	r0, r3
   84b92:	46bd      	mov	sp, r7
   84b94:	bc80      	pop	{r7}
   84b96:	4770      	bx	lr
   84b98:	400e0400 	.word	0x400e0400

00084b9c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   84b9c:	b480      	push	{r7}
   84b9e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   84ba0:	4b03      	ldr	r3, [pc, #12]	; (84bb0 <pmc_is_locked_upll+0x14>)
   84ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   84ba8:	4618      	mov	r0, r3
   84baa:	46bd      	mov	sp, r7
   84bac:	bc80      	pop	{r7}
   84bae:	4770      	bx	lr
   84bb0:	400e0400 	.word	0x400e0400

00084bb4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   84bb4:	b480      	push	{r7}
   84bb6:	b083      	sub	sp, #12
   84bb8:	af00      	add	r7, sp, #0
   84bba:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   84bbc:	687b      	ldr	r3, [r7, #4]
   84bbe:	2b1d      	cmp	r3, #29
   84bc0:	d901      	bls.n	84bc6 <pmc_enable_periph_clk+0x12>
		return 1;
   84bc2:	2301      	movs	r3, #1
   84bc4:	e015      	b.n	84bf2 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   84bc6:	687b      	ldr	r3, [r7, #4]
   84bc8:	2b1f      	cmp	r3, #31
   84bca:	d811      	bhi.n	84bf0 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84bcc:	4b0b      	ldr	r3, [pc, #44]	; (84bfc <pmc_enable_periph_clk+0x48>)
   84bce:	699a      	ldr	r2, [r3, #24]
   84bd0:	2101      	movs	r1, #1
   84bd2:	687b      	ldr	r3, [r7, #4]
   84bd4:	fa01 f303 	lsl.w	r3, r1, r3
   84bd8:	401a      	ands	r2, r3
   84bda:	2101      	movs	r1, #1
   84bdc:	687b      	ldr	r3, [r7, #4]
   84bde:	fa01 f303 	lsl.w	r3, r1, r3
   84be2:	429a      	cmp	r2, r3
   84be4:	d004      	beq.n	84bf0 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   84be6:	2201      	movs	r2, #1
   84be8:	687b      	ldr	r3, [r7, #4]
   84bea:	409a      	lsls	r2, r3
   84bec:	4b03      	ldr	r3, [pc, #12]	; (84bfc <pmc_enable_periph_clk+0x48>)
   84bee:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84bf0:	2300      	movs	r3, #0
}
   84bf2:	4618      	mov	r0, r3
   84bf4:	370c      	adds	r7, #12
   84bf6:	46bd      	mov	sp, r7
   84bf8:	bc80      	pop	{r7}
   84bfa:	4770      	bx	lr
   84bfc:	400e0400 	.word	0x400e0400

00084c00 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   84c00:	b480      	push	{r7}
   84c02:	b083      	sub	sp, #12
   84c04:	af00      	add	r7, sp, #0
   84c06:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   84c08:	687b      	ldr	r3, [r7, #4]
   84c0a:	2b1d      	cmp	r3, #29
   84c0c:	d901      	bls.n	84c12 <pmc_disable_periph_clk+0x12>
		return 1;
   84c0e:	2301      	movs	r3, #1
   84c10:	e015      	b.n	84c3e <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   84c12:	687b      	ldr	r3, [r7, #4]
   84c14:	2b1f      	cmp	r3, #31
   84c16:	d811      	bhi.n	84c3c <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84c18:	4b0b      	ldr	r3, [pc, #44]	; (84c48 <pmc_disable_periph_clk+0x48>)
   84c1a:	699a      	ldr	r2, [r3, #24]
   84c1c:	2101      	movs	r1, #1
   84c1e:	687b      	ldr	r3, [r7, #4]
   84c20:	fa01 f303 	lsl.w	r3, r1, r3
   84c24:	401a      	ands	r2, r3
   84c26:	2101      	movs	r1, #1
   84c28:	687b      	ldr	r3, [r7, #4]
   84c2a:	fa01 f303 	lsl.w	r3, r1, r3
   84c2e:	429a      	cmp	r2, r3
   84c30:	d104      	bne.n	84c3c <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   84c32:	2201      	movs	r2, #1
   84c34:	687b      	ldr	r3, [r7, #4]
   84c36:	409a      	lsls	r2, r3
   84c38:	4b03      	ldr	r3, [pc, #12]	; (84c48 <pmc_disable_periph_clk+0x48>)
   84c3a:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   84c3c:	2300      	movs	r3, #0
}
   84c3e:	4618      	mov	r0, r3
   84c40:	370c      	adds	r7, #12
   84c42:	46bd      	mov	sp, r7
   84c44:	bc80      	pop	{r7}
   84c46:	4770      	bx	lr
   84c48:	400e0400 	.word	0x400e0400

00084c4c <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   84c4c:	b480      	push	{r7}
   84c4e:	b083      	sub	sp, #12
   84c50:	af00      	add	r7, sp, #0
   84c52:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84c54:	687b      	ldr	r3, [r7, #4]
   84c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
   84c5a:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   84c5c:	4b05      	ldr	r3, [pc, #20]	; (84c74 <pmc_set_fast_startup_input+0x28>)
   84c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84c60:	4904      	ldr	r1, [pc, #16]	; (84c74 <pmc_set_fast_startup_input+0x28>)
   84c62:	687b      	ldr	r3, [r7, #4]
   84c64:	4313      	orrs	r3, r2
   84c66:	670b      	str	r3, [r1, #112]	; 0x70
}
   84c68:	bf00      	nop
   84c6a:	370c      	adds	r7, #12
   84c6c:	46bd      	mov	sp, r7
   84c6e:	bc80      	pop	{r7}
   84c70:	4770      	bx	lr
   84c72:	bf00      	nop
   84c74:	400e0400 	.word	0x400e0400

00084c78 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84c78:	b580      	push	{r7, lr}
   84c7a:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84c7c:	4b0b      	ldr	r3, [pc, #44]	; (84cac <udi_vendor_enable+0x34>)
   84c7e:	4798      	blx	r3
   84c80:	4603      	mov	r3, r0
   84c82:	78da      	ldrb	r2, [r3, #3]
   84c84:	4b0a      	ldr	r3, [pc, #40]	; (84cb0 <udi_vendor_enable+0x38>)
   84c86:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84c88:	4b09      	ldr	r3, [pc, #36]	; (84cb0 <udi_vendor_enable+0x38>)
   84c8a:	781b      	ldrb	r3, [r3, #0]
   84c8c:	2b00      	cmp	r3, #0
   84c8e:	d109      	bne.n	84ca4 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84c90:	4b08      	ldr	r3, [pc, #32]	; (84cb4 <udi_vendor_enable+0x3c>)
   84c92:	4798      	blx	r3
   84c94:	4603      	mov	r3, r0
   84c96:	f083 0301 	eor.w	r3, r3, #1
   84c9a:	b2db      	uxtb	r3, r3
   84c9c:	2b00      	cmp	r3, #0
   84c9e:	d001      	beq.n	84ca4 <udi_vendor_enable+0x2c>
			return false;
   84ca0:	2300      	movs	r3, #0
   84ca2:	e000      	b.n	84ca6 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84ca4:	2301      	movs	r3, #1
}
   84ca6:	4618      	mov	r0, r3
   84ca8:	bd80      	pop	{r7, pc}
   84caa:	bf00      	nop
   84cac:	0008135d 	.word	0x0008135d
   84cb0:	2000379c 	.word	0x2000379c
   84cb4:	00080ef1 	.word	0x00080ef1

00084cb8 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84cb8:	b580      	push	{r7, lr}
   84cba:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   84cbc:	4b03      	ldr	r3, [pc, #12]	; (84ccc <udi_vendor_disable+0x14>)
   84cbe:	781b      	ldrb	r3, [r3, #0]
   84cc0:	2b00      	cmp	r3, #0
   84cc2:	d101      	bne.n	84cc8 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   84cc4:	4b02      	ldr	r3, [pc, #8]	; (84cd0 <udi_vendor_disable+0x18>)
   84cc6:	4798      	blx	r3
	}
}
   84cc8:	bf00      	nop
   84cca:	bd80      	pop	{r7, pc}
   84ccc:	2000379c 	.word	0x2000379c
   84cd0:	00080f29 	.word	0x00080f29

00084cd4 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   84cd4:	b580      	push	{r7, lr}
   84cd6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84cd8:	4b10      	ldr	r3, [pc, #64]	; (84d1c <udi_vendor_setup+0x48>)
   84cda:	781b      	ldrb	r3, [r3, #0]
   84cdc:	b25b      	sxtb	r3, r3
   84cde:	2b00      	cmp	r3, #0
   84ce0:	da09      	bge.n	84cf6 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84ce2:	4b0e      	ldr	r3, [pc, #56]	; (84d1c <udi_vendor_setup+0x48>)
   84ce4:	781b      	ldrb	r3, [r3, #0]
   84ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84cea:	2b40      	cmp	r3, #64	; 0x40
   84cec:	d103      	bne.n	84cf6 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84cee:	4b0c      	ldr	r3, [pc, #48]	; (84d20 <udi_vendor_setup+0x4c>)
   84cf0:	4798      	blx	r3
   84cf2:	4603      	mov	r3, r0
   84cf4:	e00f      	b.n	84d16 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84cf6:	4b09      	ldr	r3, [pc, #36]	; (84d1c <udi_vendor_setup+0x48>)
   84cf8:	781b      	ldrb	r3, [r3, #0]
   84cfa:	b25b      	sxtb	r3, r3
   84cfc:	2b00      	cmp	r3, #0
   84cfe:	db09      	blt.n	84d14 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84d00:	4b06      	ldr	r3, [pc, #24]	; (84d1c <udi_vendor_setup+0x48>)
   84d02:	781b      	ldrb	r3, [r3, #0]
   84d04:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84d08:	2b40      	cmp	r3, #64	; 0x40
   84d0a:	d103      	bne.n	84d14 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84d0c:	4b05      	ldr	r3, [pc, #20]	; (84d24 <udi_vendor_setup+0x50>)
   84d0e:	4798      	blx	r3
   84d10:	4603      	mov	r3, r0
   84d12:	e000      	b.n	84d16 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84d14:	2300      	movs	r3, #0
}
   84d16:	4618      	mov	r0, r3
   84d18:	bd80      	pop	{r7, pc}
   84d1a:	bf00      	nop
   84d1c:	20003740 	.word	0x20003740
   84d20:	00080fa9 	.word	0x00080fa9
   84d24:	00080f41 	.word	0x00080f41

00084d28 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84d28:	b480      	push	{r7}
   84d2a:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84d2c:	4b02      	ldr	r3, [pc, #8]	; (84d38 <udi_vendor_getsetting+0x10>)
   84d2e:	781b      	ldrb	r3, [r3, #0]
}
   84d30:	4618      	mov	r0, r3
   84d32:	46bd      	mov	sp, r7
   84d34:	bc80      	pop	{r7}
   84d36:	4770      	bx	lr
   84d38:	2000379c 	.word	0x2000379c

00084d3c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84d3c:	b590      	push	{r4, r7, lr}
   84d3e:	b087      	sub	sp, #28
   84d40:	af02      	add	r7, sp, #8
   84d42:	60f8      	str	r0, [r7, #12]
   84d44:	60b9      	str	r1, [r7, #8]
   84d46:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84d48:	687b      	ldr	r3, [r7, #4]
   84d4a:	9300      	str	r3, [sp, #0]
   84d4c:	68bb      	ldr	r3, [r7, #8]
   84d4e:	68fa      	ldr	r2, [r7, #12]
   84d50:	2100      	movs	r1, #0
   84d52:	2081      	movs	r0, #129	; 0x81
   84d54:	4c03      	ldr	r4, [pc, #12]	; (84d64 <udi_vendor_bulk_in_run+0x28>)
   84d56:	47a0      	blx	r4
   84d58:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84d5a:	4618      	mov	r0, r3
   84d5c:	3714      	adds	r7, #20
   84d5e:	46bd      	mov	sp, r7
   84d60:	bd90      	pop	{r4, r7, pc}
   84d62:	bf00      	nop
   84d64:	00083361 	.word	0x00083361

00084d68 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84d68:	b590      	push	{r4, r7, lr}
   84d6a:	b087      	sub	sp, #28
   84d6c:	af02      	add	r7, sp, #8
   84d6e:	60f8      	str	r0, [r7, #12]
   84d70:	60b9      	str	r1, [r7, #8]
   84d72:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84d74:	687b      	ldr	r3, [r7, #4]
   84d76:	9300      	str	r3, [sp, #0]
   84d78:	68bb      	ldr	r3, [r7, #8]
   84d7a:	68fa      	ldr	r2, [r7, #12]
   84d7c:	2100      	movs	r1, #0
   84d7e:	2002      	movs	r0, #2
   84d80:	4c03      	ldr	r4, [pc, #12]	; (84d90 <udi_vendor_bulk_out_run+0x28>)
   84d82:	47a0      	blx	r4
   84d84:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84d86:	4618      	mov	r0, r3
   84d88:	3714      	adds	r7, #20
   84d8a:	46bd      	mov	sp, r7
   84d8c:	bd90      	pop	{r4, r7, pc}
   84d8e:	bf00      	nop
   84d90:	00083361 	.word	0x00083361

00084d94 <cpu_irq_save>:
{
   84d94:	b480      	push	{r7}
   84d96:	b083      	sub	sp, #12
   84d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d9a:	f3ef 8310 	mrs	r3, PRIMASK
   84d9e:	603b      	str	r3, [r7, #0]
  return(result);
   84da0:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84da2:	2b00      	cmp	r3, #0
   84da4:	bf0c      	ite	eq
   84da6:	2301      	moveq	r3, #1
   84da8:	2300      	movne	r3, #0
   84daa:	b2db      	uxtb	r3, r3
   84dac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84dae:	b672      	cpsid	i
}
   84db0:	bf00      	nop
  __ASM volatile ("dmb");
   84db2:	f3bf 8f5f 	dmb	sy
}
   84db6:	bf00      	nop
	cpu_irq_disable();
   84db8:	4b04      	ldr	r3, [pc, #16]	; (84dcc <cpu_irq_save+0x38>)
   84dba:	2200      	movs	r2, #0
   84dbc:	701a      	strb	r2, [r3, #0]
	return flags;
   84dbe:	687b      	ldr	r3, [r7, #4]
}
   84dc0:	4618      	mov	r0, r3
   84dc2:	370c      	adds	r7, #12
   84dc4:	46bd      	mov	sp, r7
   84dc6:	bc80      	pop	{r7}
   84dc8:	4770      	bx	lr
   84dca:	bf00      	nop
   84dcc:	200003ec 	.word	0x200003ec

00084dd0 <cpu_irq_is_enabled_flags>:
{
   84dd0:	b480      	push	{r7}
   84dd2:	b083      	sub	sp, #12
   84dd4:	af00      	add	r7, sp, #0
   84dd6:	6078      	str	r0, [r7, #4]
	return (flags);
   84dd8:	687b      	ldr	r3, [r7, #4]
   84dda:	2b00      	cmp	r3, #0
   84ddc:	bf14      	ite	ne
   84dde:	2301      	movne	r3, #1
   84de0:	2300      	moveq	r3, #0
   84de2:	b2db      	uxtb	r3, r3
}
   84de4:	4618      	mov	r0, r3
   84de6:	370c      	adds	r7, #12
   84de8:	46bd      	mov	sp, r7
   84dea:	bc80      	pop	{r7}
   84dec:	4770      	bx	lr
   84dee:	0000      	movs	r0, r0

00084df0 <cpu_irq_restore>:
{
   84df0:	b580      	push	{r7, lr}
   84df2:	b082      	sub	sp, #8
   84df4:	af00      	add	r7, sp, #0
   84df6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84df8:	6878      	ldr	r0, [r7, #4]
   84dfa:	4b08      	ldr	r3, [pc, #32]	; (84e1c <cpu_irq_restore+0x2c>)
   84dfc:	4798      	blx	r3
   84dfe:	4603      	mov	r3, r0
   84e00:	2b00      	cmp	r3, #0
   84e02:	d007      	beq.n	84e14 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84e04:	4b06      	ldr	r3, [pc, #24]	; (84e20 <cpu_irq_restore+0x30>)
   84e06:	2201      	movs	r2, #1
   84e08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84e0a:	f3bf 8f5f 	dmb	sy
}
   84e0e:	bf00      	nop
  __ASM volatile ("cpsie i");
   84e10:	b662      	cpsie	i
}
   84e12:	bf00      	nop
}
   84e14:	bf00      	nop
   84e16:	3708      	adds	r7, #8
   84e18:	46bd      	mov	sp, r7
   84e1a:	bd80      	pop	{r7, pc}
   84e1c:	00084dd1 	.word	0x00084dd1
   84e20:	200003ec 	.word	0x200003ec

00084e24 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   84e24:	b580      	push	{r7, lr}
   84e26:	b086      	sub	sp, #24
   84e28:	af00      	add	r7, sp, #0
   84e2a:	60f8      	str	r0, [r7, #12]
   84e2c:	60b9      	str	r1, [r7, #8]
   84e2e:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84e30:	68bb      	ldr	r3, [r7, #8]
   84e32:	2b0e      	cmp	r3, #14
   84e34:	d002      	beq.n	84e3c <efc_perform_command+0x18>
   84e36:	68bb      	ldr	r3, [r7, #8]
   84e38:	2b0f      	cmp	r3, #15
   84e3a:	d102      	bne.n	84e42 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   84e3c:	f04f 33ff 	mov.w	r3, #4294967295
   84e40:	e016      	b.n	84e70 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   84e42:	4b0d      	ldr	r3, [pc, #52]	; (84e78 <efc_perform_command+0x54>)
   84e44:	4798      	blx	r3
   84e46:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84e48:	687b      	ldr	r3, [r7, #4]
   84e4a:	021b      	lsls	r3, r3, #8
   84e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   84e50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   84e54:	68ba      	ldr	r2, [r7, #8]
   84e56:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84e58:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   84e5a:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   84e5e:	4619      	mov	r1, r3
   84e60:	68f8      	ldr	r0, [r7, #12]
   84e62:	4b06      	ldr	r3, [pc, #24]	; (84e7c <efc_perform_command+0x58>)
   84e64:	4798      	blx	r3
   84e66:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   84e68:	6978      	ldr	r0, [r7, #20]
   84e6a:	4b05      	ldr	r3, [pc, #20]	; (84e80 <efc_perform_command+0x5c>)
   84e6c:	4798      	blx	r3
	return result;
   84e6e:	693b      	ldr	r3, [r7, #16]
}
   84e70:	4618      	mov	r0, r3
   84e72:	3718      	adds	r7, #24
   84e74:	46bd      	mov	sp, r7
   84e76:	bd80      	pop	{r7, pc}
   84e78:	00084d95 	.word	0x00084d95
   84e7c:	200000cf 	.word	0x200000cf
   84e80:	00084df1 	.word	0x00084df1

00084e84 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   84e84:	b480      	push	{r7}
   84e86:	b085      	sub	sp, #20
   84e88:	af00      	add	r7, sp, #0
   84e8a:	60f8      	str	r0, [r7, #12]
   84e8c:	60b9      	str	r1, [r7, #8]
   84e8e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84e90:	687b      	ldr	r3, [r7, #4]
   84e92:	2b00      	cmp	r3, #0
   84e94:	d003      	beq.n	84e9e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   84e96:	68fb      	ldr	r3, [r7, #12]
   84e98:	68ba      	ldr	r2, [r7, #8]
   84e9a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   84e9c:	e002      	b.n	84ea4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   84e9e:	68fb      	ldr	r3, [r7, #12]
   84ea0:	68ba      	ldr	r2, [r7, #8]
   84ea2:	661a      	str	r2, [r3, #96]	; 0x60
}
   84ea4:	bf00      	nop
   84ea6:	3714      	adds	r7, #20
   84ea8:	46bd      	mov	sp, r7
   84eaa:	bc80      	pop	{r7}
   84eac:	4770      	bx	lr

00084eae <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   84eae:	b480      	push	{r7}
   84eb0:	b087      	sub	sp, #28
   84eb2:	af00      	add	r7, sp, #0
   84eb4:	60f8      	str	r0, [r7, #12]
   84eb6:	60b9      	str	r1, [r7, #8]
   84eb8:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84eba:	68fb      	ldr	r3, [r7, #12]
   84ebc:	687a      	ldr	r2, [r7, #4]
   84ebe:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84ec0:	68bb      	ldr	r3, [r7, #8]
   84ec2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84ec6:	d03c      	beq.n	84f42 <pio_set_peripheral+0x94>
   84ec8:	68bb      	ldr	r3, [r7, #8]
   84eca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84ece:	d834      	bhi.n	84f3a <pio_set_peripheral+0x8c>
   84ed0:	68bb      	ldr	r3, [r7, #8]
   84ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84ed6:	d034      	beq.n	84f42 <pio_set_peripheral+0x94>
   84ed8:	68bb      	ldr	r3, [r7, #8]
   84eda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84ede:	d82c      	bhi.n	84f3a <pio_set_peripheral+0x8c>
   84ee0:	68bb      	ldr	r3, [r7, #8]
   84ee2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84ee6:	d02c      	beq.n	84f42 <pio_set_peripheral+0x94>
   84ee8:	68bb      	ldr	r3, [r7, #8]
   84eea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84eee:	d824      	bhi.n	84f3a <pio_set_peripheral+0x8c>
   84ef0:	68bb      	ldr	r3, [r7, #8]
   84ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84ef6:	d017      	beq.n	84f28 <pio_set_peripheral+0x7a>
   84ef8:	68bb      	ldr	r3, [r7, #8]
   84efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84efe:	d81c      	bhi.n	84f3a <pio_set_peripheral+0x8c>
   84f00:	68bb      	ldr	r3, [r7, #8]
   84f02:	2b00      	cmp	r3, #0
   84f04:	d01d      	beq.n	84f42 <pio_set_peripheral+0x94>
   84f06:	68bb      	ldr	r3, [r7, #8]
   84f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84f0c:	d115      	bne.n	84f3a <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   84f0e:	68fb      	ldr	r3, [r7, #12]
   84f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84f12:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84f14:	68fb      	ldr	r3, [r7, #12]
   84f16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84f18:	687b      	ldr	r3, [r7, #4]
   84f1a:	43d9      	mvns	r1, r3
   84f1c:	697b      	ldr	r3, [r7, #20]
   84f1e:	400b      	ands	r3, r1
   84f20:	401a      	ands	r2, r3
   84f22:	68fb      	ldr	r3, [r7, #12]
   84f24:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84f26:	e008      	b.n	84f3a <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   84f28:	68fb      	ldr	r3, [r7, #12]
   84f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84f2c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   84f2e:	687a      	ldr	r2, [r7, #4]
   84f30:	697b      	ldr	r3, [r7, #20]
   84f32:	431a      	orrs	r2, r3
   84f34:	68fb      	ldr	r3, [r7, #12]
   84f36:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84f38:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   84f3a:	68fb      	ldr	r3, [r7, #12]
   84f3c:	687a      	ldr	r2, [r7, #4]
   84f3e:	605a      	str	r2, [r3, #4]
   84f40:	e000      	b.n	84f44 <pio_set_peripheral+0x96>
		return;
   84f42:	bf00      	nop
}
   84f44:	371c      	adds	r7, #28
   84f46:	46bd      	mov	sp, r7
   84f48:	bc80      	pop	{r7}
   84f4a:	4770      	bx	lr

00084f4c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   84f4c:	b580      	push	{r7, lr}
   84f4e:	b084      	sub	sp, #16
   84f50:	af00      	add	r7, sp, #0
   84f52:	60f8      	str	r0, [r7, #12]
   84f54:	60b9      	str	r1, [r7, #8]
   84f56:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   84f58:	68b9      	ldr	r1, [r7, #8]
   84f5a:	68f8      	ldr	r0, [r7, #12]
   84f5c:	4b19      	ldr	r3, [pc, #100]	; (84fc4 <pio_set_input+0x78>)
   84f5e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   84f60:	687b      	ldr	r3, [r7, #4]
   84f62:	f003 0301 	and.w	r3, r3, #1
   84f66:	461a      	mov	r2, r3
   84f68:	68b9      	ldr	r1, [r7, #8]
   84f6a:	68f8      	ldr	r0, [r7, #12]
   84f6c:	4b16      	ldr	r3, [pc, #88]	; (84fc8 <pio_set_input+0x7c>)
   84f6e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   84f70:	687b      	ldr	r3, [r7, #4]
   84f72:	f003 030a 	and.w	r3, r3, #10
   84f76:	2b00      	cmp	r3, #0
   84f78:	d003      	beq.n	84f82 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   84f7a:	68fb      	ldr	r3, [r7, #12]
   84f7c:	68ba      	ldr	r2, [r7, #8]
   84f7e:	621a      	str	r2, [r3, #32]
   84f80:	e002      	b.n	84f88 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   84f82:	68fb      	ldr	r3, [r7, #12]
   84f84:	68ba      	ldr	r2, [r7, #8]
   84f86:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   84f88:	687b      	ldr	r3, [r7, #4]
   84f8a:	f003 0302 	and.w	r3, r3, #2
   84f8e:	2b00      	cmp	r3, #0
   84f90:	d004      	beq.n	84f9c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   84f92:	68fb      	ldr	r3, [r7, #12]
   84f94:	68ba      	ldr	r2, [r7, #8]
   84f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   84f9a:	e008      	b.n	84fae <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   84f9c:	687b      	ldr	r3, [r7, #4]
   84f9e:	f003 0308 	and.w	r3, r3, #8
   84fa2:	2b00      	cmp	r3, #0
   84fa4:	d003      	beq.n	84fae <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   84fa6:	68fb      	ldr	r3, [r7, #12]
   84fa8:	68ba      	ldr	r2, [r7, #8]
   84faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   84fae:	68fb      	ldr	r3, [r7, #12]
   84fb0:	68ba      	ldr	r2, [r7, #8]
   84fb2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84fb4:	68fb      	ldr	r3, [r7, #12]
   84fb6:	68ba      	ldr	r2, [r7, #8]
   84fb8:	601a      	str	r2, [r3, #0]
}
   84fba:	bf00      	nop
   84fbc:	3710      	adds	r7, #16
   84fbe:	46bd      	mov	sp, r7
   84fc0:	bd80      	pop	{r7, pc}
   84fc2:	bf00      	nop
   84fc4:	00085031 	.word	0x00085031
   84fc8:	00084e85 	.word	0x00084e85

00084fcc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   84fcc:	b580      	push	{r7, lr}
   84fce:	b084      	sub	sp, #16
   84fd0:	af00      	add	r7, sp, #0
   84fd2:	60f8      	str	r0, [r7, #12]
   84fd4:	60b9      	str	r1, [r7, #8]
   84fd6:	607a      	str	r2, [r7, #4]
   84fd8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   84fda:	68b9      	ldr	r1, [r7, #8]
   84fdc:	68f8      	ldr	r0, [r7, #12]
   84fde:	4b12      	ldr	r3, [pc, #72]	; (85028 <pio_set_output+0x5c>)
   84fe0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   84fe2:	69ba      	ldr	r2, [r7, #24]
   84fe4:	68b9      	ldr	r1, [r7, #8]
   84fe6:	68f8      	ldr	r0, [r7, #12]
   84fe8:	4b10      	ldr	r3, [pc, #64]	; (8502c <pio_set_output+0x60>)
   84fea:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   84fec:	683b      	ldr	r3, [r7, #0]
   84fee:	2b00      	cmp	r3, #0
   84ff0:	d003      	beq.n	84ffa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   84ff2:	68fb      	ldr	r3, [r7, #12]
   84ff4:	68ba      	ldr	r2, [r7, #8]
   84ff6:	651a      	str	r2, [r3, #80]	; 0x50
   84ff8:	e002      	b.n	85000 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   84ffa:	68fb      	ldr	r3, [r7, #12]
   84ffc:	68ba      	ldr	r2, [r7, #8]
   84ffe:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   85000:	687b      	ldr	r3, [r7, #4]
   85002:	2b00      	cmp	r3, #0
   85004:	d003      	beq.n	8500e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   85006:	68fb      	ldr	r3, [r7, #12]
   85008:	68ba      	ldr	r2, [r7, #8]
   8500a:	631a      	str	r2, [r3, #48]	; 0x30
   8500c:	e002      	b.n	85014 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8500e:	68fb      	ldr	r3, [r7, #12]
   85010:	68ba      	ldr	r2, [r7, #8]
   85012:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   85014:	68fb      	ldr	r3, [r7, #12]
   85016:	68ba      	ldr	r2, [r7, #8]
   85018:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8501a:	68fb      	ldr	r3, [r7, #12]
   8501c:	68ba      	ldr	r2, [r7, #8]
   8501e:	601a      	str	r2, [r3, #0]
}
   85020:	bf00      	nop
   85022:	3710      	adds	r7, #16
   85024:	46bd      	mov	sp, r7
   85026:	bd80      	pop	{r7, pc}
   85028:	00085031 	.word	0x00085031
   8502c:	00084e85 	.word	0x00084e85

00085030 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   85030:	b480      	push	{r7}
   85032:	b083      	sub	sp, #12
   85034:	af00      	add	r7, sp, #0
   85036:	6078      	str	r0, [r7, #4]
   85038:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   8503a:	687b      	ldr	r3, [r7, #4]
   8503c:	683a      	ldr	r2, [r7, #0]
   8503e:	645a      	str	r2, [r3, #68]	; 0x44
}
   85040:	bf00      	nop
   85042:	370c      	adds	r7, #12
   85044:	46bd      	mov	sp, r7
   85046:	bc80      	pop	{r7}
   85048:	4770      	bx	lr

0008504a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   8504a:	b480      	push	{r7}
   8504c:	b083      	sub	sp, #12
   8504e:	af00      	add	r7, sp, #0
   85050:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   85052:	687b      	ldr	r3, [r7, #4]
   85054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   85056:	4618      	mov	r0, r3
   85058:	370c      	adds	r7, #12
   8505a:	46bd      	mov	sp, r7
   8505c:	bc80      	pop	{r7}
   8505e:	4770      	bx	lr

00085060 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   85060:	b480      	push	{r7}
   85062:	b083      	sub	sp, #12
   85064:	af00      	add	r7, sp, #0
   85066:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   85068:	687b      	ldr	r3, [r7, #4]
   8506a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   8506c:	4618      	mov	r0, r3
   8506e:	370c      	adds	r7, #12
   85070:	46bd      	mov	sp, r7
   85072:	bc80      	pop	{r7}
   85074:	4770      	bx	lr
   85076:	0000      	movs	r0, r0

00085078 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   85078:	b580      	push	{r7, lr}
   8507a:	b084      	sub	sp, #16
   8507c:	af00      	add	r7, sp, #0
   8507e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85080:	6878      	ldr	r0, [r7, #4]
   85082:	4b08      	ldr	r3, [pc, #32]	; (850a4 <pio_set_pin_high+0x2c>)
   85084:	4798      	blx	r3
   85086:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85088:	687b      	ldr	r3, [r7, #4]
   8508a:	f003 031f 	and.w	r3, r3, #31
   8508e:	2201      	movs	r2, #1
   85090:	fa02 f303 	lsl.w	r3, r2, r3
   85094:	461a      	mov	r2, r3
   85096:	68fb      	ldr	r3, [r7, #12]
   85098:	631a      	str	r2, [r3, #48]	; 0x30
}
   8509a:	bf00      	nop
   8509c:	3710      	adds	r7, #16
   8509e:	46bd      	mov	sp, r7
   850a0:	bd80      	pop	{r7, pc}
   850a2:	bf00      	nop
   850a4:	000852e5 	.word	0x000852e5

000850a8 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   850a8:	b580      	push	{r7, lr}
   850aa:	b084      	sub	sp, #16
   850ac:	af00      	add	r7, sp, #0
   850ae:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   850b0:	6878      	ldr	r0, [r7, #4]
   850b2:	4b08      	ldr	r3, [pc, #32]	; (850d4 <pio_set_pin_low+0x2c>)
   850b4:	4798      	blx	r3
   850b6:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   850b8:	687b      	ldr	r3, [r7, #4]
   850ba:	f003 031f 	and.w	r3, r3, #31
   850be:	2201      	movs	r2, #1
   850c0:	fa02 f303 	lsl.w	r3, r2, r3
   850c4:	461a      	mov	r2, r3
   850c6:	68fb      	ldr	r3, [r7, #12]
   850c8:	635a      	str	r2, [r3, #52]	; 0x34
}
   850ca:	bf00      	nop
   850cc:	3710      	adds	r7, #16
   850ce:	46bd      	mov	sp, r7
   850d0:	bd80      	pop	{r7, pc}
   850d2:	bf00      	nop
   850d4:	000852e5 	.word	0x000852e5

000850d8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   850d8:	b590      	push	{r4, r7, lr}
   850da:	b087      	sub	sp, #28
   850dc:	af02      	add	r7, sp, #8
   850de:	6078      	str	r0, [r7, #4]
   850e0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   850e2:	6878      	ldr	r0, [r7, #4]
   850e4:	4b43      	ldr	r3, [pc, #268]	; (851f4 <pio_configure_pin+0x11c>)
   850e6:	4798      	blx	r3
   850e8:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   850ea:	683b      	ldr	r3, [r7, #0]
   850ec:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   850f0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   850f4:	d057      	beq.n	851a6 <pio_configure_pin+0xce>
   850f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   850fa:	d873      	bhi.n	851e4 <pio_configure_pin+0x10c>
   850fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85100:	d051      	beq.n	851a6 <pio_configure_pin+0xce>
   85102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85106:	d86d      	bhi.n	851e4 <pio_configure_pin+0x10c>
   85108:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8510c:	d03f      	beq.n	8518e <pio_configure_pin+0xb6>
   8510e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85112:	d867      	bhi.n	851e4 <pio_configure_pin+0x10c>
   85114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85118:	d003      	beq.n	85122 <pio_configure_pin+0x4a>
   8511a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8511e:	d01b      	beq.n	85158 <pio_configure_pin+0x80>
   85120:	e060      	b.n	851e4 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   85122:	687b      	ldr	r3, [r7, #4]
   85124:	f003 031f 	and.w	r3, r3, #31
   85128:	2201      	movs	r2, #1
   8512a:	fa02 f303 	lsl.w	r3, r2, r3
   8512e:	461a      	mov	r2, r3
   85130:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85134:	68f8      	ldr	r0, [r7, #12]
   85136:	4b30      	ldr	r3, [pc, #192]	; (851f8 <pio_configure_pin+0x120>)
   85138:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8513a:	687b      	ldr	r3, [r7, #4]
   8513c:	f003 031f 	and.w	r3, r3, #31
   85140:	2201      	movs	r2, #1
   85142:	fa02 f303 	lsl.w	r3, r2, r3
   85146:	4619      	mov	r1, r3
   85148:	683b      	ldr	r3, [r7, #0]
   8514a:	f003 0301 	and.w	r3, r3, #1
   8514e:	461a      	mov	r2, r3
   85150:	68f8      	ldr	r0, [r7, #12]
   85152:	4b2a      	ldr	r3, [pc, #168]	; (851fc <pio_configure_pin+0x124>)
   85154:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   85156:	e047      	b.n	851e8 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   85158:	687b      	ldr	r3, [r7, #4]
   8515a:	f003 031f 	and.w	r3, r3, #31
   8515e:	2201      	movs	r2, #1
   85160:	fa02 f303 	lsl.w	r3, r2, r3
   85164:	461a      	mov	r2, r3
   85166:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8516a:	68f8      	ldr	r0, [r7, #12]
   8516c:	4b22      	ldr	r3, [pc, #136]	; (851f8 <pio_configure_pin+0x120>)
   8516e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   85170:	687b      	ldr	r3, [r7, #4]
   85172:	f003 031f 	and.w	r3, r3, #31
   85176:	2201      	movs	r2, #1
   85178:	fa02 f303 	lsl.w	r3, r2, r3
   8517c:	4619      	mov	r1, r3
   8517e:	683b      	ldr	r3, [r7, #0]
   85180:	f003 0301 	and.w	r3, r3, #1
   85184:	461a      	mov	r2, r3
   85186:	68f8      	ldr	r0, [r7, #12]
   85188:	4b1c      	ldr	r3, [pc, #112]	; (851fc <pio_configure_pin+0x124>)
   8518a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8518c:	e02c      	b.n	851e8 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8518e:	687b      	ldr	r3, [r7, #4]
   85190:	f003 031f 	and.w	r3, r3, #31
   85194:	2201      	movs	r2, #1
   85196:	fa02 f303 	lsl.w	r3, r2, r3
   8519a:	683a      	ldr	r2, [r7, #0]
   8519c:	4619      	mov	r1, r3
   8519e:	68f8      	ldr	r0, [r7, #12]
   851a0:	4b17      	ldr	r3, [pc, #92]	; (85200 <pio_configure_pin+0x128>)
   851a2:	4798      	blx	r3
		break;
   851a4:	e020      	b.n	851e8 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   851a6:	687b      	ldr	r3, [r7, #4]
   851a8:	f003 031f 	and.w	r3, r3, #31
   851ac:	2201      	movs	r2, #1
   851ae:	fa02 f303 	lsl.w	r3, r2, r3
   851b2:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   851b4:	683b      	ldr	r3, [r7, #0]
   851b6:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   851ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   851be:	bf0c      	ite	eq
   851c0:	2301      	moveq	r3, #1
   851c2:	2300      	movne	r3, #0
   851c4:	b2db      	uxtb	r3, r3
   851c6:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   851c8:	683b      	ldr	r3, [r7, #0]
   851ca:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   851cc:	f003 0201 	and.w	r2, r3, #1
   851d0:	683b      	ldr	r3, [r7, #0]
   851d2:	f003 0301 	and.w	r3, r3, #1
   851d6:	9300      	str	r3, [sp, #0]
   851d8:	4613      	mov	r3, r2
   851da:	4602      	mov	r2, r0
   851dc:	68f8      	ldr	r0, [r7, #12]
   851de:	4c09      	ldr	r4, [pc, #36]	; (85204 <pio_configure_pin+0x12c>)
   851e0:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   851e2:	e001      	b.n	851e8 <pio_configure_pin+0x110>

	default:
		return 0;
   851e4:	2300      	movs	r3, #0
   851e6:	e000      	b.n	851ea <pio_configure_pin+0x112>
	}

	return 1;
   851e8:	2301      	movs	r3, #1
}
   851ea:	4618      	mov	r0, r3
   851ec:	3714      	adds	r7, #20
   851ee:	46bd      	mov	sp, r7
   851f0:	bd90      	pop	{r4, r7, pc}
   851f2:	bf00      	nop
   851f4:	000852e5 	.word	0x000852e5
   851f8:	00084eaf 	.word	0x00084eaf
   851fc:	00084e85 	.word	0x00084e85
   85200:	00084f4d 	.word	0x00084f4d
   85204:	00084fcd 	.word	0x00084fcd

00085208 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   85208:	b590      	push	{r4, r7, lr}
   8520a:	b087      	sub	sp, #28
   8520c:	af02      	add	r7, sp, #8
   8520e:	60f8      	str	r0, [r7, #12]
   85210:	60b9      	str	r1, [r7, #8]
   85212:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   85214:	687b      	ldr	r3, [r7, #4]
   85216:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8521a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8521e:	d039      	beq.n	85294 <pio_configure_pin_group+0x8c>
   85220:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85224:	d84f      	bhi.n	852c6 <pio_configure_pin_group+0xbe>
   85226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8522a:	d033      	beq.n	85294 <pio_configure_pin_group+0x8c>
   8522c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85230:	d849      	bhi.n	852c6 <pio_configure_pin_group+0xbe>
   85232:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85236:	d027      	beq.n	85288 <pio_configure_pin_group+0x80>
   85238:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8523c:	d843      	bhi.n	852c6 <pio_configure_pin_group+0xbe>
   8523e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85242:	d003      	beq.n	8524c <pio_configure_pin_group+0x44>
   85244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85248:	d00f      	beq.n	8526a <pio_configure_pin_group+0x62>
   8524a:	e03c      	b.n	852c6 <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8524c:	68ba      	ldr	r2, [r7, #8]
   8524e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85252:	68f8      	ldr	r0, [r7, #12]
   85254:	4b1f      	ldr	r3, [pc, #124]	; (852d4 <pio_configure_pin_group+0xcc>)
   85256:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   85258:	687b      	ldr	r3, [r7, #4]
   8525a:	f003 0301 	and.w	r3, r3, #1
   8525e:	461a      	mov	r2, r3
   85260:	68b9      	ldr	r1, [r7, #8]
   85262:	68f8      	ldr	r0, [r7, #12]
   85264:	4b1c      	ldr	r3, [pc, #112]	; (852d8 <pio_configure_pin_group+0xd0>)
   85266:	4798      	blx	r3
		break;
   85268:	e02f      	b.n	852ca <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8526a:	68ba      	ldr	r2, [r7, #8]
   8526c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85270:	68f8      	ldr	r0, [r7, #12]
   85272:	4b18      	ldr	r3, [pc, #96]	; (852d4 <pio_configure_pin_group+0xcc>)
   85274:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   85276:	687b      	ldr	r3, [r7, #4]
   85278:	f003 0301 	and.w	r3, r3, #1
   8527c:	461a      	mov	r2, r3
   8527e:	68b9      	ldr	r1, [r7, #8]
   85280:	68f8      	ldr	r0, [r7, #12]
   85282:	4b15      	ldr	r3, [pc, #84]	; (852d8 <pio_configure_pin_group+0xd0>)
   85284:	4798      	blx	r3
		break;
   85286:	e020      	b.n	852ca <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   85288:	687a      	ldr	r2, [r7, #4]
   8528a:	68b9      	ldr	r1, [r7, #8]
   8528c:	68f8      	ldr	r0, [r7, #12]
   8528e:	4b13      	ldr	r3, [pc, #76]	; (852dc <pio_configure_pin_group+0xd4>)
   85290:	4798      	blx	r3
		break;
   85292:	e01a      	b.n	852ca <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85294:	687b      	ldr	r3, [r7, #4]
   85296:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8529a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8529e:	bf0c      	ite	eq
   852a0:	2301      	moveq	r3, #1
   852a2:	2300      	movne	r3, #0
   852a4:	b2db      	uxtb	r3, r3
   852a6:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   852a8:	687b      	ldr	r3, [r7, #4]
   852aa:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   852ac:	f003 0201 	and.w	r2, r3, #1
   852b0:	687b      	ldr	r3, [r7, #4]
   852b2:	f003 0301 	and.w	r3, r3, #1
   852b6:	9300      	str	r3, [sp, #0]
   852b8:	4613      	mov	r3, r2
   852ba:	460a      	mov	r2, r1
   852bc:	68b9      	ldr	r1, [r7, #8]
   852be:	68f8      	ldr	r0, [r7, #12]
   852c0:	4c07      	ldr	r4, [pc, #28]	; (852e0 <pio_configure_pin_group+0xd8>)
   852c2:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   852c4:	e001      	b.n	852ca <pio_configure_pin_group+0xc2>

	default:
		return 0;
   852c6:	2300      	movs	r3, #0
   852c8:	e000      	b.n	852cc <pio_configure_pin_group+0xc4>
	}

	return 1;
   852ca:	2301      	movs	r3, #1
}
   852cc:	4618      	mov	r0, r3
   852ce:	3714      	adds	r7, #20
   852d0:	46bd      	mov	sp, r7
   852d2:	bd90      	pop	{r4, r7, pc}
   852d4:	00084eaf 	.word	0x00084eaf
   852d8:	00084e85 	.word	0x00084e85
   852dc:	00084f4d 	.word	0x00084f4d
   852e0:	00084fcd 	.word	0x00084fcd

000852e4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   852e4:	b480      	push	{r7}
   852e6:	b085      	sub	sp, #20
   852e8:	af00      	add	r7, sp, #0
   852ea:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   852ec:	687b      	ldr	r3, [r7, #4]
   852ee:	095b      	lsrs	r3, r3, #5
   852f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   852f4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   852f8:	025b      	lsls	r3, r3, #9
   852fa:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   852fc:	68fb      	ldr	r3, [r7, #12]
}
   852fe:	4618      	mov	r0, r3
   85300:	3714      	adds	r7, #20
   85302:	46bd      	mov	sp, r7
   85304:	bc80      	pop	{r7}
   85306:	4770      	bx	lr

00085308 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   85308:	b480      	push	{r7}
   8530a:	af00      	add	r7, sp, #0
	while (1) {
   8530c:	e7fe      	b.n	8530c <Dummy_Handler+0x4>
   8530e:	0000      	movs	r0, r0

00085310 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
   85310:	b480      	push	{r7}
   85312:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   85314:	4b08      	ldr	r3, [pc, #32]	; (85338 <pmc_is_wakeup_clocks_restored+0x28>)
   85316:	781b      	ldrb	r3, [r3, #0]
   85318:	b2db      	uxtb	r3, r3
   8531a:	2b00      	cmp	r3, #0
   8531c:	bf14      	ite	ne
   8531e:	2301      	movne	r3, #1
   85320:	2300      	moveq	r3, #0
   85322:	b2db      	uxtb	r3, r3
   85324:	f083 0301 	eor.w	r3, r3, #1
   85328:	b2db      	uxtb	r3, r3
   8532a:	f003 0301 	and.w	r3, r3, #1
   8532e:	b2db      	uxtb	r3, r3
}
   85330:	4618      	mov	r0, r3
   85332:	46bd      	mov	sp, r7
   85334:	bc80      	pop	{r7}
   85336:	4770      	bx	lr
   85338:	2000379d 	.word	0x2000379d

0008533c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8533c:	b480      	push	{r7}
   8533e:	b085      	sub	sp, #20
   85340:	af00      	add	r7, sp, #0
   85342:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   85344:	4b10      	ldr	r3, [pc, #64]	; (85388 <_sbrk+0x4c>)
   85346:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   85348:	4b10      	ldr	r3, [pc, #64]	; (8538c <_sbrk+0x50>)
   8534a:	681b      	ldr	r3, [r3, #0]
   8534c:	2b00      	cmp	r3, #0
   8534e:	d102      	bne.n	85356 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   85350:	4b0e      	ldr	r3, [pc, #56]	; (8538c <_sbrk+0x50>)
   85352:	4a0f      	ldr	r2, [pc, #60]	; (85390 <_sbrk+0x54>)
   85354:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   85356:	4b0d      	ldr	r3, [pc, #52]	; (8538c <_sbrk+0x50>)
   85358:	681b      	ldr	r3, [r3, #0]
   8535a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   8535c:	68ba      	ldr	r2, [r7, #8]
   8535e:	687b      	ldr	r3, [r7, #4]
   85360:	4413      	add	r3, r2
   85362:	68fa      	ldr	r2, [r7, #12]
   85364:	429a      	cmp	r2, r3
   85366:	da02      	bge.n	8536e <_sbrk+0x32>
		return (caddr_t) -1;	
   85368:	f04f 33ff 	mov.w	r3, #4294967295
   8536c:	e006      	b.n	8537c <_sbrk+0x40>
	}

	heap += incr;
   8536e:	4b07      	ldr	r3, [pc, #28]	; (8538c <_sbrk+0x50>)
   85370:	681a      	ldr	r2, [r3, #0]
   85372:	687b      	ldr	r3, [r7, #4]
   85374:	4413      	add	r3, r2
   85376:	4a05      	ldr	r2, [pc, #20]	; (8538c <_sbrk+0x50>)
   85378:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8537a:	68bb      	ldr	r3, [r7, #8]
}
   8537c:	4618      	mov	r0, r3
   8537e:	3714      	adds	r7, #20
   85380:	46bd      	mov	sp, r7
   85382:	bc80      	pop	{r7}
   85384:	4770      	bx	lr
   85386:	bf00      	nop
   85388:	20083ffc 	.word	0x20083ffc
   8538c:	200037a0 	.word	0x200037a0
   85390:	20084000 	.word	0x20084000

00085394 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   85394:	b480      	push	{r7}
   85396:	b083      	sub	sp, #12
   85398:	af00      	add	r7, sp, #0
   8539a:	6078      	str	r0, [r7, #4]
	return -1;
   8539c:	f04f 33ff 	mov.w	r3, #4294967295
}
   853a0:	4618      	mov	r0, r3
   853a2:	370c      	adds	r7, #12
   853a4:	46bd      	mov	sp, r7
   853a6:	bc80      	pop	{r7}
   853a8:	4770      	bx	lr

000853aa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   853aa:	b480      	push	{r7}
   853ac:	b083      	sub	sp, #12
   853ae:	af00      	add	r7, sp, #0
   853b0:	6078      	str	r0, [r7, #4]
   853b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   853b4:	683b      	ldr	r3, [r7, #0]
   853b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   853ba:	605a      	str	r2, [r3, #4]

	return 0;
   853bc:	2300      	movs	r3, #0
}
   853be:	4618      	mov	r0, r3
   853c0:	370c      	adds	r7, #12
   853c2:	46bd      	mov	sp, r7
   853c4:	bc80      	pop	{r7}
   853c6:	4770      	bx	lr

000853c8 <_isatty>:

extern int _isatty(int file)
{
   853c8:	b480      	push	{r7}
   853ca:	b083      	sub	sp, #12
   853cc:	af00      	add	r7, sp, #0
   853ce:	6078      	str	r0, [r7, #4]
	return 1;
   853d0:	2301      	movs	r3, #1
}
   853d2:	4618      	mov	r0, r3
   853d4:	370c      	adds	r7, #12
   853d6:	46bd      	mov	sp, r7
   853d8:	bc80      	pop	{r7}
   853da:	4770      	bx	lr

000853dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   853dc:	b480      	push	{r7}
   853de:	b085      	sub	sp, #20
   853e0:	af00      	add	r7, sp, #0
   853e2:	60f8      	str	r0, [r7, #12]
   853e4:	60b9      	str	r1, [r7, #8]
   853e6:	607a      	str	r2, [r7, #4]
	return 0;
   853e8:	2300      	movs	r3, #0
}
   853ea:	4618      	mov	r0, r3
   853ec:	3714      	adds	r7, #20
   853ee:	46bd      	mov	sp, r7
   853f0:	bc80      	pop	{r7}
   853f2:	4770      	bx	lr

000853f4 <_exit>:

extern void _exit(int status)
{
   853f4:	b580      	push	{r7, lr}
   853f6:	b082      	sub	sp, #8
   853f8:	af00      	add	r7, sp, #0
   853fa:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   853fc:	6879      	ldr	r1, [r7, #4]
   853fe:	4802      	ldr	r0, [pc, #8]	; (85408 <_exit+0x14>)
   85400:	4b02      	ldr	r3, [pc, #8]	; (8540c <_exit+0x18>)
   85402:	4798      	blx	r3

	for (;;);
   85404:	e7fe      	b.n	85404 <_exit+0x10>
   85406:	bf00      	nop
   85408:	0008c99c 	.word	0x0008c99c
   8540c:	00085941 	.word	0x00085941

00085410 <_kill>:
}

extern void _kill(int pid, int sig)
{
   85410:	b480      	push	{r7}
   85412:	b083      	sub	sp, #12
   85414:	af00      	add	r7, sp, #0
   85416:	6078      	str	r0, [r7, #4]
   85418:	6039      	str	r1, [r7, #0]
	return;
   8541a:	bf00      	nop
}
   8541c:	370c      	adds	r7, #12
   8541e:	46bd      	mov	sp, r7
   85420:	bc80      	pop	{r7}
   85422:	4770      	bx	lr

00085424 <_getpid>:

extern int _getpid(void)
{
   85424:	b480      	push	{r7}
   85426:	af00      	add	r7, sp, #0
	return -1;
   85428:	f04f 33ff 	mov.w	r3, #4294967295
}
   8542c:	4618      	mov	r0, r3
   8542e:	46bd      	mov	sp, r7
   85430:	bc80      	pop	{r7}
   85432:	4770      	bx	lr

00085434 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   85434:	b480      	push	{r7}
   85436:	b085      	sub	sp, #20
   85438:	af00      	add	r7, sp, #0
   8543a:	6078      	str	r0, [r7, #4]
   8543c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   8543e:	2300      	movs	r3, #0
   85440:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   85442:	687b      	ldr	r3, [r7, #4]
   85444:	22ac      	movs	r2, #172	; 0xac
   85446:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   85448:	683b      	ldr	r3, [r7, #0]
   8544a:	681a      	ldr	r2, [r3, #0]
   8544c:	683b      	ldr	r3, [r7, #0]
   8544e:	685b      	ldr	r3, [r3, #4]
   85450:	fbb2 f3f3 	udiv	r3, r2, r3
   85454:	091b      	lsrs	r3, r3, #4
   85456:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   85458:	68fb      	ldr	r3, [r7, #12]
   8545a:	2b00      	cmp	r3, #0
   8545c:	d003      	beq.n	85466 <uart_init+0x32>
   8545e:	68fb      	ldr	r3, [r7, #12]
   85460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85464:	d301      	bcc.n	8546a <uart_init+0x36>
		return 1;
   85466:	2301      	movs	r3, #1
   85468:	e00f      	b.n	8548a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   8546a:	687b      	ldr	r3, [r7, #4]
   8546c:	68fa      	ldr	r2, [r7, #12]
   8546e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   85470:	683b      	ldr	r3, [r7, #0]
   85472:	689a      	ldr	r2, [r3, #8]
   85474:	687b      	ldr	r3, [r7, #4]
   85476:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   85478:	687b      	ldr	r3, [r7, #4]
   8547a:	f240 2202 	movw	r2, #514	; 0x202
   8547e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   85482:	687b      	ldr	r3, [r7, #4]
   85484:	2250      	movs	r2, #80	; 0x50
   85486:	601a      	str	r2, [r3, #0]

	return 0;
   85488:	2300      	movs	r3, #0
}
   8548a:	4618      	mov	r0, r3
   8548c:	3714      	adds	r7, #20
   8548e:	46bd      	mov	sp, r7
   85490:	bc80      	pop	{r7}
   85492:	4770      	bx	lr

00085494 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   85494:	b480      	push	{r7}
   85496:	b083      	sub	sp, #12
   85498:	af00      	add	r7, sp, #0
   8549a:	6078      	str	r0, [r7, #4]
   8549c:	460b      	mov	r3, r1
   8549e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   854a0:	687b      	ldr	r3, [r7, #4]
   854a2:	695b      	ldr	r3, [r3, #20]
   854a4:	f003 0302 	and.w	r3, r3, #2
   854a8:	2b00      	cmp	r3, #0
   854aa:	d101      	bne.n	854b0 <uart_write+0x1c>
		return 1;
   854ac:	2301      	movs	r3, #1
   854ae:	e003      	b.n	854b8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   854b0:	78fa      	ldrb	r2, [r7, #3]
   854b2:	687b      	ldr	r3, [r7, #4]
   854b4:	61da      	str	r2, [r3, #28]
	return 0;
   854b6:	2300      	movs	r3, #0
}
   854b8:	4618      	mov	r0, r3
   854ba:	370c      	adds	r7, #12
   854bc:	46bd      	mov	sp, r7
   854be:	bc80      	pop	{r7}
   854c0:	4770      	bx	lr

000854c2 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   854c2:	b480      	push	{r7}
   854c4:	b083      	sub	sp, #12
   854c6:	af00      	add	r7, sp, #0
   854c8:	6078      	str	r0, [r7, #4]
   854ca:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   854cc:	687b      	ldr	r3, [r7, #4]
   854ce:	695b      	ldr	r3, [r3, #20]
   854d0:	f003 0301 	and.w	r3, r3, #1
   854d4:	2b00      	cmp	r3, #0
   854d6:	d101      	bne.n	854dc <uart_read+0x1a>
		return 1;
   854d8:	2301      	movs	r3, #1
   854da:	e005      	b.n	854e8 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   854dc:	687b      	ldr	r3, [r7, #4]
   854de:	699b      	ldr	r3, [r3, #24]
   854e0:	b2da      	uxtb	r2, r3
   854e2:	683b      	ldr	r3, [r7, #0]
   854e4:	701a      	strb	r2, [r3, #0]
	return 0;
   854e6:	2300      	movs	r3, #0
}
   854e8:	4618      	mov	r0, r3
   854ea:	370c      	adds	r7, #12
   854ec:	46bd      	mov	sp, r7
   854ee:	bc80      	pop	{r7}
   854f0:	4770      	bx	lr
   854f2:	0000      	movs	r0, r0

000854f4 <sysclk_enable_peripheral_clock>:
{
   854f4:	b580      	push	{r7, lr}
   854f6:	b082      	sub	sp, #8
   854f8:	af00      	add	r7, sp, #0
   854fa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   854fc:	6878      	ldr	r0, [r7, #4]
   854fe:	4b03      	ldr	r3, [pc, #12]	; (8550c <sysclk_enable_peripheral_clock+0x18>)
   85500:	4798      	blx	r3
}
   85502:	bf00      	nop
   85504:	3708      	adds	r7, #8
   85506:	46bd      	mov	sp, r7
   85508:	bd80      	pop	{r7, pc}
   8550a:	bf00      	nop
   8550c:	00084bb5 	.word	0x00084bb5

00085510 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   85510:	b580      	push	{r7, lr}
   85512:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   85514:	200a      	movs	r0, #10
   85516:	4b05      	ldr	r3, [pc, #20]	; (8552c <ioport_init+0x1c>)
   85518:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   8551a:	200b      	movs	r0, #11
   8551c:	4b03      	ldr	r3, [pc, #12]	; (8552c <ioport_init+0x1c>)
   8551e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   85520:	200c      	movs	r0, #12
   85522:	4b02      	ldr	r3, [pc, #8]	; (8552c <ioport_init+0x1c>)
   85524:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   85526:	bf00      	nop
	arch_ioport_init();
}
   85528:	bf00      	nop
   8552a:	bd80      	pop	{r7, pc}
   8552c:	000854f5 	.word	0x000854f5

00085530 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   85530:	b580      	push	{r7, lr}
   85532:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   85534:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85538:	2011      	movs	r0, #17
   8553a:	4b0e      	ldr	r3, [pc, #56]	; (85574 <iopins_normal+0x44>)
   8553c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8553e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85542:	2010      	movs	r0, #16
   85544:	4b0b      	ldr	r3, [pc, #44]	; (85574 <iopins_normal+0x44>)
   85546:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   85548:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8554c:	204c      	movs	r0, #76	; 0x4c
   8554e:	4b09      	ldr	r3, [pc, #36]	; (85574 <iopins_normal+0x44>)
   85550:	4798      	blx	r3
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   85552:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   85556:	2053      	movs	r0, #83	; 0x53
   85558:	4b06      	ldr	r3, [pc, #24]	; (85574 <iopins_normal+0x44>)
   8555a:	4798      	blx	r3
	board_sram_pwron();
   8555c:	2053      	movs	r0, #83	; 0x53
   8555e:	4b06      	ldr	r3, [pc, #24]	; (85578 <iopins_normal+0x48>)
   85560:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   85562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   85566:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8556a:	4804      	ldr	r0, [pc, #16]	; (8557c <iopins_normal+0x4c>)
   8556c:	4b04      	ldr	r3, [pc, #16]	; (85580 <iopins_normal+0x50>)
   8556e:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   85570:	bf00      	nop
   85572:	bd80      	pop	{r7, pc}
   85574:	000850d9 	.word	0x000850d9
   85578:	000850a9 	.word	0x000850a9
   8557c:	400e0c00 	.word	0x400e0c00
   85580:	00085209 	.word	0x00085209

00085584 <board_init>:

void board_init(void)
{
   85584:	b580      	push	{r7, lr}
   85586:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   85588:	4b04      	ldr	r3, [pc, #16]	; (8559c <board_init+0x18>)
   8558a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8558e:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   85590:	4b03      	ldr	r3, [pc, #12]	; (855a0 <board_init+0x1c>)
   85592:	4798      	blx	r3

	iopins_normal();
   85594:	4b03      	ldr	r3, [pc, #12]	; (855a4 <board_init+0x20>)
   85596:	4798      	blx	r3

}
   85598:	bf00      	nop
   8559a:	bd80      	pop	{r7, pc}
   8559c:	400e1250 	.word	0x400e1250
   855a0:	00085511 	.word	0x00085511
   855a4:	00085531 	.word	0x00085531

000855a8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   855a8:	b480      	push	{r7}
   855aa:	b083      	sub	sp, #12
   855ac:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   855ae:	4b11      	ldr	r3, [pc, #68]	; (855f4 <cpu_irq_enter_critical+0x4c>)
   855b0:	681b      	ldr	r3, [r3, #0]
   855b2:	2b00      	cmp	r3, #0
   855b4:	d114      	bne.n	855e0 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   855b6:	f3ef 8310 	mrs	r3, PRIMASK
   855ba:	607b      	str	r3, [r7, #4]
  return(result);
   855bc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   855be:	2b00      	cmp	r3, #0
   855c0:	d10b      	bne.n	855da <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   855c2:	b672      	cpsid	i
}
   855c4:	bf00      	nop
  __ASM volatile ("dmb");
   855c6:	f3bf 8f5f 	dmb	sy
}
   855ca:	bf00      	nop
			cpu_irq_disable();
   855cc:	4b0a      	ldr	r3, [pc, #40]	; (855f8 <cpu_irq_enter_critical+0x50>)
   855ce:	2200      	movs	r2, #0
   855d0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   855d2:	4b0a      	ldr	r3, [pc, #40]	; (855fc <cpu_irq_enter_critical+0x54>)
   855d4:	2201      	movs	r2, #1
   855d6:	701a      	strb	r2, [r3, #0]
   855d8:	e002      	b.n	855e0 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   855da:	4b08      	ldr	r3, [pc, #32]	; (855fc <cpu_irq_enter_critical+0x54>)
   855dc:	2200      	movs	r2, #0
   855de:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   855e0:	4b04      	ldr	r3, [pc, #16]	; (855f4 <cpu_irq_enter_critical+0x4c>)
   855e2:	681b      	ldr	r3, [r3, #0]
   855e4:	3301      	adds	r3, #1
   855e6:	4a03      	ldr	r2, [pc, #12]	; (855f4 <cpu_irq_enter_critical+0x4c>)
   855e8:	6013      	str	r3, [r2, #0]
}
   855ea:	bf00      	nop
   855ec:	370c      	adds	r7, #12
   855ee:	46bd      	mov	sp, r7
   855f0:	bc80      	pop	{r7}
   855f2:	4770      	bx	lr
   855f4:	200037a4 	.word	0x200037a4
   855f8:	200003ec 	.word	0x200003ec
   855fc:	200037a8 	.word	0x200037a8

00085600 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   85600:	b480      	push	{r7}
   85602:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   85604:	4b0c      	ldr	r3, [pc, #48]	; (85638 <cpu_irq_leave_critical+0x38>)
   85606:	681b      	ldr	r3, [r3, #0]
   85608:	3b01      	subs	r3, #1
   8560a:	4a0b      	ldr	r2, [pc, #44]	; (85638 <cpu_irq_leave_critical+0x38>)
   8560c:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8560e:	4b0a      	ldr	r3, [pc, #40]	; (85638 <cpu_irq_leave_critical+0x38>)
   85610:	681b      	ldr	r3, [r3, #0]
   85612:	2b00      	cmp	r3, #0
   85614:	d10c      	bne.n	85630 <cpu_irq_leave_critical+0x30>
   85616:	4b09      	ldr	r3, [pc, #36]	; (8563c <cpu_irq_leave_critical+0x3c>)
   85618:	781b      	ldrb	r3, [r3, #0]
   8561a:	b2db      	uxtb	r3, r3
   8561c:	2b00      	cmp	r3, #0
   8561e:	d007      	beq.n	85630 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   85620:	4b07      	ldr	r3, [pc, #28]	; (85640 <cpu_irq_leave_critical+0x40>)
   85622:	2201      	movs	r2, #1
   85624:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   85626:	f3bf 8f5f 	dmb	sy
}
   8562a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8562c:	b662      	cpsie	i
}
   8562e:	bf00      	nop
	}
}
   85630:	bf00      	nop
   85632:	46bd      	mov	sp, r7
   85634:	bc80      	pop	{r7}
   85636:	4770      	bx	lr
   85638:	200037a4 	.word	0x200037a4
   8563c:	200037a8 	.word	0x200037a8
   85640:	200003ec 	.word	0x200003ec

00085644 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   85644:	b580      	push	{r7, lr}
   85646:	b086      	sub	sp, #24
   85648:	af00      	add	r7, sp, #0
   8564a:	60f8      	str	r0, [r7, #12]
   8564c:	60b9      	str	r1, [r7, #8]
   8564e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   85650:	2300      	movs	r3, #0
   85652:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   85654:	68fb      	ldr	r3, [r7, #12]
   85656:	2b00      	cmp	r3, #0
   85658:	d012      	beq.n	85680 <_read+0x3c>
		return -1;
   8565a:	f04f 33ff 	mov.w	r3, #4294967295
   8565e:	e013      	b.n	85688 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   85660:	4b0b      	ldr	r3, [pc, #44]	; (85690 <_read+0x4c>)
   85662:	681b      	ldr	r3, [r3, #0]
   85664:	4a0b      	ldr	r2, [pc, #44]	; (85694 <_read+0x50>)
   85666:	6812      	ldr	r2, [r2, #0]
   85668:	68b9      	ldr	r1, [r7, #8]
   8566a:	4610      	mov	r0, r2
   8566c:	4798      	blx	r3
		ptr++;
   8566e:	68bb      	ldr	r3, [r7, #8]
   85670:	3301      	adds	r3, #1
   85672:	60bb      	str	r3, [r7, #8]
		nChars++;
   85674:	697b      	ldr	r3, [r7, #20]
   85676:	3301      	adds	r3, #1
   85678:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   8567a:	687b      	ldr	r3, [r7, #4]
   8567c:	3b01      	subs	r3, #1
   8567e:	607b      	str	r3, [r7, #4]
   85680:	687b      	ldr	r3, [r7, #4]
   85682:	2b00      	cmp	r3, #0
   85684:	dcec      	bgt.n	85660 <_read+0x1c>
	}
	return nChars;
   85686:	697b      	ldr	r3, [r7, #20]
}
   85688:	4618      	mov	r0, r3
   8568a:	3718      	adds	r7, #24
   8568c:	46bd      	mov	sp, r7
   8568e:	bd80      	pop	{r7, pc}
   85690:	200037ac 	.word	0x200037ac
   85694:	20003794 	.word	0x20003794

00085698 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   85698:	b480      	push	{r7}
   8569a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8569c:	4b58      	ldr	r3, [pc, #352]	; (85800 <SystemCoreClockUpdate+0x168>)
   8569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   856a0:	f003 0303 	and.w	r3, r3, #3
   856a4:	2b03      	cmp	r3, #3
   856a6:	f200 808c 	bhi.w	857c2 <SystemCoreClockUpdate+0x12a>
   856aa:	2b02      	cmp	r3, #2
   856ac:	d23f      	bcs.n	8572e <SystemCoreClockUpdate+0x96>
   856ae:	2b00      	cmp	r3, #0
   856b0:	d002      	beq.n	856b8 <SystemCoreClockUpdate+0x20>
   856b2:	2b01      	cmp	r3, #1
   856b4:	d010      	beq.n	856d8 <SystemCoreClockUpdate+0x40>
   856b6:	e084      	b.n	857c2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   856b8:	4b52      	ldr	r3, [pc, #328]	; (85804 <SystemCoreClockUpdate+0x16c>)
   856ba:	695b      	ldr	r3, [r3, #20]
   856bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   856c0:	2b00      	cmp	r3, #0
   856c2:	d004      	beq.n	856ce <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   856c4:	4b50      	ldr	r3, [pc, #320]	; (85808 <SystemCoreClockUpdate+0x170>)
   856c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   856ca:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   856cc:	e079      	b.n	857c2 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   856ce:	4b4e      	ldr	r3, [pc, #312]	; (85808 <SystemCoreClockUpdate+0x170>)
   856d0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   856d4:	601a      	str	r2, [r3, #0]
		break;
   856d6:	e074      	b.n	857c2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   856d8:	4b49      	ldr	r3, [pc, #292]	; (85800 <SystemCoreClockUpdate+0x168>)
   856da:	6a1b      	ldr	r3, [r3, #32]
   856dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   856e0:	2b00      	cmp	r3, #0
   856e2:	d003      	beq.n	856ec <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   856e4:	4b48      	ldr	r3, [pc, #288]	; (85808 <SystemCoreClockUpdate+0x170>)
   856e6:	4a49      	ldr	r2, [pc, #292]	; (8580c <SystemCoreClockUpdate+0x174>)
   856e8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   856ea:	e06a      	b.n	857c2 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   856ec:	4b46      	ldr	r3, [pc, #280]	; (85808 <SystemCoreClockUpdate+0x170>)
   856ee:	4a48      	ldr	r2, [pc, #288]	; (85810 <SystemCoreClockUpdate+0x178>)
   856f0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   856f2:	4b43      	ldr	r3, [pc, #268]	; (85800 <SystemCoreClockUpdate+0x168>)
   856f4:	6a1b      	ldr	r3, [r3, #32]
   856f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   856fa:	2b20      	cmp	r3, #32
   856fc:	d00b      	beq.n	85716 <SystemCoreClockUpdate+0x7e>
   856fe:	2b20      	cmp	r3, #32
   85700:	d811      	bhi.n	85726 <SystemCoreClockUpdate+0x8e>
   85702:	2b00      	cmp	r3, #0
   85704:	d011      	beq.n	8572a <SystemCoreClockUpdate+0x92>
   85706:	2b10      	cmp	r3, #16
   85708:	d10d      	bne.n	85726 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   8570a:	4b3f      	ldr	r3, [pc, #252]	; (85808 <SystemCoreClockUpdate+0x170>)
   8570c:	681b      	ldr	r3, [r3, #0]
   8570e:	005b      	lsls	r3, r3, #1
   85710:	4a3d      	ldr	r2, [pc, #244]	; (85808 <SystemCoreClockUpdate+0x170>)
   85712:	6013      	str	r3, [r2, #0]
				break;
   85714:	e00a      	b.n	8572c <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   85716:	4b3c      	ldr	r3, [pc, #240]	; (85808 <SystemCoreClockUpdate+0x170>)
   85718:	681a      	ldr	r2, [r3, #0]
   8571a:	4613      	mov	r3, r2
   8571c:	005b      	lsls	r3, r3, #1
   8571e:	4413      	add	r3, r2
   85720:	4a39      	ldr	r2, [pc, #228]	; (85808 <SystemCoreClockUpdate+0x170>)
   85722:	6013      	str	r3, [r2, #0]
				break;
   85724:	e002      	b.n	8572c <SystemCoreClockUpdate+0x94>
				break;
   85726:	bf00      	nop
   85728:	e04b      	b.n	857c2 <SystemCoreClockUpdate+0x12a>
				break;
   8572a:	bf00      	nop
		break;
   8572c:	e049      	b.n	857c2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8572e:	4b34      	ldr	r3, [pc, #208]	; (85800 <SystemCoreClockUpdate+0x168>)
   85730:	6a1b      	ldr	r3, [r3, #32]
   85732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85736:	2b00      	cmp	r3, #0
   85738:	d003      	beq.n	85742 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8573a:	4b33      	ldr	r3, [pc, #204]	; (85808 <SystemCoreClockUpdate+0x170>)
   8573c:	4a33      	ldr	r2, [pc, #204]	; (8580c <SystemCoreClockUpdate+0x174>)
   8573e:	601a      	str	r2, [r3, #0]
   85740:	e01f      	b.n	85782 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85742:	4b31      	ldr	r3, [pc, #196]	; (85808 <SystemCoreClockUpdate+0x170>)
   85744:	4a32      	ldr	r2, [pc, #200]	; (85810 <SystemCoreClockUpdate+0x178>)
   85746:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85748:	4b2d      	ldr	r3, [pc, #180]	; (85800 <SystemCoreClockUpdate+0x168>)
   8574a:	6a1b      	ldr	r3, [r3, #32]
   8574c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85750:	2b20      	cmp	r3, #32
   85752:	d00b      	beq.n	8576c <SystemCoreClockUpdate+0xd4>
   85754:	2b20      	cmp	r3, #32
   85756:	d811      	bhi.n	8577c <SystemCoreClockUpdate+0xe4>
   85758:	2b00      	cmp	r3, #0
   8575a:	d011      	beq.n	85780 <SystemCoreClockUpdate+0xe8>
   8575c:	2b10      	cmp	r3, #16
   8575e:	d10d      	bne.n	8577c <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   85760:	4b29      	ldr	r3, [pc, #164]	; (85808 <SystemCoreClockUpdate+0x170>)
   85762:	681b      	ldr	r3, [r3, #0]
   85764:	005b      	lsls	r3, r3, #1
   85766:	4a28      	ldr	r2, [pc, #160]	; (85808 <SystemCoreClockUpdate+0x170>)
   85768:	6013      	str	r3, [r2, #0]
				break;
   8576a:	e00a      	b.n	85782 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8576c:	4b26      	ldr	r3, [pc, #152]	; (85808 <SystemCoreClockUpdate+0x170>)
   8576e:	681a      	ldr	r2, [r3, #0]
   85770:	4613      	mov	r3, r2
   85772:	005b      	lsls	r3, r3, #1
   85774:	4413      	add	r3, r2
   85776:	4a24      	ldr	r2, [pc, #144]	; (85808 <SystemCoreClockUpdate+0x170>)
   85778:	6013      	str	r3, [r2, #0]
				break;
   8577a:	e002      	b.n	85782 <SystemCoreClockUpdate+0xea>
			default:
				break;
   8577c:	bf00      	nop
   8577e:	e000      	b.n	85782 <SystemCoreClockUpdate+0xea>
				break;
   85780:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85782:	4b1f      	ldr	r3, [pc, #124]	; (85800 <SystemCoreClockUpdate+0x168>)
   85784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85786:	f003 0303 	and.w	r3, r3, #3
   8578a:	2b02      	cmp	r3, #2
   8578c:	d115      	bne.n	857ba <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8578e:	4b1c      	ldr	r3, [pc, #112]	; (85800 <SystemCoreClockUpdate+0x168>)
   85790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85792:	0c1b      	lsrs	r3, r3, #16
   85794:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   85798:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8579a:	4a1b      	ldr	r2, [pc, #108]	; (85808 <SystemCoreClockUpdate+0x170>)
   8579c:	6812      	ldr	r2, [r2, #0]
   8579e:	fb02 f303 	mul.w	r3, r2, r3
   857a2:	4a19      	ldr	r2, [pc, #100]	; (85808 <SystemCoreClockUpdate+0x170>)
   857a4:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   857a6:	4b16      	ldr	r3, [pc, #88]	; (85800 <SystemCoreClockUpdate+0x168>)
   857a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   857aa:	b2db      	uxtb	r3, r3
   857ac:	4a16      	ldr	r2, [pc, #88]	; (85808 <SystemCoreClockUpdate+0x170>)
   857ae:	6812      	ldr	r2, [r2, #0]
   857b0:	fbb2 f3f3 	udiv	r3, r2, r3
   857b4:	4a14      	ldr	r2, [pc, #80]	; (85808 <SystemCoreClockUpdate+0x170>)
   857b6:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   857b8:	e002      	b.n	857c0 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   857ba:	4b13      	ldr	r3, [pc, #76]	; (85808 <SystemCoreClockUpdate+0x170>)
   857bc:	4a15      	ldr	r2, [pc, #84]	; (85814 <SystemCoreClockUpdate+0x17c>)
   857be:	601a      	str	r2, [r3, #0]
		break;
   857c0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   857c2:	4b0f      	ldr	r3, [pc, #60]	; (85800 <SystemCoreClockUpdate+0x168>)
   857c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   857ca:	2b70      	cmp	r3, #112	; 0x70
   857cc:	d108      	bne.n	857e0 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   857ce:	4b0e      	ldr	r3, [pc, #56]	; (85808 <SystemCoreClockUpdate+0x170>)
   857d0:	681b      	ldr	r3, [r3, #0]
   857d2:	4a11      	ldr	r2, [pc, #68]	; (85818 <SystemCoreClockUpdate+0x180>)
   857d4:	fba2 2303 	umull	r2, r3, r2, r3
   857d8:	085b      	lsrs	r3, r3, #1
   857da:	4a0b      	ldr	r2, [pc, #44]	; (85808 <SystemCoreClockUpdate+0x170>)
   857dc:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   857de:	e00a      	b.n	857f6 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   857e0:	4b07      	ldr	r3, [pc, #28]	; (85800 <SystemCoreClockUpdate+0x168>)
   857e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857e4:	091b      	lsrs	r3, r3, #4
   857e6:	f003 0307 	and.w	r3, r3, #7
   857ea:	4a07      	ldr	r2, [pc, #28]	; (85808 <SystemCoreClockUpdate+0x170>)
   857ec:	6812      	ldr	r2, [r2, #0]
   857ee:	fa22 f303 	lsr.w	r3, r2, r3
   857f2:	4a05      	ldr	r2, [pc, #20]	; (85808 <SystemCoreClockUpdate+0x170>)
   857f4:	6013      	str	r3, [r2, #0]
}
   857f6:	bf00      	nop
   857f8:	46bd      	mov	sp, r7
   857fa:	bc80      	pop	{r7}
   857fc:	4770      	bx	lr
   857fe:	bf00      	nop
   85800:	400e0400 	.word	0x400e0400
   85804:	400e1210 	.word	0x400e1210
   85808:	2000047c 	.word	0x2000047c
   8580c:	00b71b00 	.word	0x00b71b00
   85810:	003d0900 	.word	0x003d0900
   85814:	0e4e1c00 	.word	0x0e4e1c00
   85818:	aaaaaaab 	.word	0xaaaaaaab

0008581c <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   8581c:	b580      	push	{r7, lr}
   8581e:	af00      	add	r7, sp, #0
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   85820:	2011      	movs	r0, #17
   85822:	4b05      	ldr	r3, [pc, #20]	; (85838 <ui_init+0x1c>)
   85824:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   85826:	2010      	movs	r0, #16
   85828:	4b03      	ldr	r3, [pc, #12]	; (85838 <ui_init+0x1c>)
   8582a:	4798      	blx	r3
	LED_Off(LED2_GPIO);
   8582c:	204c      	movs	r0, #76	; 0x4c
   8582e:	4b02      	ldr	r3, [pc, #8]	; (85838 <ui_init+0x1c>)
   85830:	4798      	blx	r3
}
   85832:	bf00      	nop
   85834:	bd80      	pop	{r7, pc}
   85836:	bf00      	nop
   85838:	00084365 	.word	0x00084365

0008583c <ui_powerdown>:

void ui_powerdown(void)
{
   8583c:	b580      	push	{r7, lr}
   8583e:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   85840:	2011      	movs	r0, #17
   85842:	4b06      	ldr	r3, [pc, #24]	; (8585c <ui_powerdown+0x20>)
   85844:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   85846:	2010      	movs	r0, #16
   85848:	4b04      	ldr	r3, [pc, #16]	; (8585c <ui_powerdown+0x20>)
   8584a:	4798      	blx	r3
	LED_Off(LED2_GPIO);
   8584c:	204c      	movs	r0, #76	; 0x4c
   8584e:	4b03      	ldr	r3, [pc, #12]	; (8585c <ui_powerdown+0x20>)
   85850:	4798      	blx	r3
	
	// Power off FPGA
	board_sram_pwroff();
   85852:	2053      	movs	r0, #83	; 0x53
   85854:	4b02      	ldr	r3, [pc, #8]	; (85860 <ui_powerdown+0x24>)
   85856:	4798      	blx	r3
		
}
   85858:	bf00      	nop
   8585a:	bd80      	pop	{r7, pc}
   8585c:	00084365 	.word	0x00084365
   85860:	00085079 	.word	0x00085079

00085864 <ui_wakeup>:

void ui_wakeup(void)
{
   85864:	b580      	push	{r7, lr}
   85866:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   85868:	2011      	movs	r0, #17
   8586a:	4b03      	ldr	r3, [pc, #12]	; (85878 <ui_wakeup+0x14>)
   8586c:	4798      	blx	r3
	board_sram_pwron();
   8586e:	2053      	movs	r0, #83	; 0x53
   85870:	4b02      	ldr	r3, [pc, #8]	; (8587c <ui_wakeup+0x18>)
   85872:	4798      	blx	r3
}
   85874:	bf00      	nop
   85876:	bd80      	pop	{r7, pc}
   85878:	000843c1 	.word	0x000843c1
   8587c:	000850a9 	.word	0x000850a9

00085880 <ui_process>:

void ui_process(uint16_t framenumber)
{
   85880:	b580      	push	{r7, lr}
   85882:	b082      	sub	sp, #8
   85884:	af00      	add	r7, sp, #0
   85886:	4603      	mov	r3, r0
   85888:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   8588a:	88fb      	ldrh	r3, [r7, #6]
   8588c:	4a17      	ldr	r2, [pc, #92]	; (858ec <ui_process+0x6c>)
   8588e:	fba2 1203 	umull	r1, r2, r2, r3
   85892:	0992      	lsrs	r2, r2, #6
   85894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   85898:	fb01 f202 	mul.w	r2, r1, r2
   8589c:	1a9b      	subs	r3, r3, r2
   8589e:	b29b      	uxth	r3, r3
   858a0:	2b00      	cmp	r3, #0
   858a2:	d102      	bne.n	858aa <ui_process+0x2a>
		LED_On(LED0_GPIO);
   858a4:	2011      	movs	r0, #17
   858a6:	4b12      	ldr	r3, [pc, #72]	; (858f0 <ui_process+0x70>)
   858a8:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   858aa:	88fb      	ldrh	r3, [r7, #6]
   858ac:	4a0f      	ldr	r2, [pc, #60]	; (858ec <ui_process+0x6c>)
   858ae:	fba2 1203 	umull	r1, r2, r2, r3
   858b2:	0992      	lsrs	r2, r2, #6
   858b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   858b8:	fb01 f202 	mul.w	r2, r1, r2
   858bc:	1a9b      	subs	r3, r3, r2
   858be:	b29b      	uxth	r3, r3
   858c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   858c4:	d102      	bne.n	858cc <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   858c6:	2011      	movs	r0, #17
   858c8:	4b0a      	ldr	r3, [pc, #40]	; (858f4 <ui_process+0x74>)
   858ca:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   858cc:	88fb      	ldrh	r3, [r7, #6]
   858ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   858d2:	b29b      	uxth	r3, r3
   858d4:	2b00      	cmp	r3, #0
   858d6:	d105      	bne.n	858e4 <ui_process+0x64>
		LED_Off(LED1_GPIO);
   858d8:	2010      	movs	r0, #16
   858da:	4b06      	ldr	r3, [pc, #24]	; (858f4 <ui_process+0x74>)
   858dc:	4798      	blx	r3
		LED_Off(LED2_GPIO);
   858de:	204c      	movs	r0, #76	; 0x4c
   858e0:	4b04      	ldr	r3, [pc, #16]	; (858f4 <ui_process+0x74>)
   858e2:	4798      	blx	r3
	}
}
   858e4:	bf00      	nop
   858e6:	3708      	adds	r7, #8
   858e8:	46bd      	mov	sp, r7
   858ea:	bd80      	pop	{r7, pc}
   858ec:	10624dd3 	.word	0x10624dd3
   858f0:	000843c1 	.word	0x000843c1
   858f4:	00084365 	.word	0x00084365

000858f8 <__libc_init_array>:
   858f8:	b570      	push	{r4, r5, r6, lr}
   858fa:	4e0d      	ldr	r6, [pc, #52]	; (85930 <__libc_init_array+0x38>)
   858fc:	4d0d      	ldr	r5, [pc, #52]	; (85934 <__libc_init_array+0x3c>)
   858fe:	1b76      	subs	r6, r6, r5
   85900:	10b6      	asrs	r6, r6, #2
   85902:	d006      	beq.n	85912 <__libc_init_array+0x1a>
   85904:	2400      	movs	r4, #0
   85906:	f855 3b04 	ldr.w	r3, [r5], #4
   8590a:	3401      	adds	r4, #1
   8590c:	4798      	blx	r3
   8590e:	42a6      	cmp	r6, r4
   85910:	d1f9      	bne.n	85906 <__libc_init_array+0xe>
   85912:	4e09      	ldr	r6, [pc, #36]	; (85938 <__libc_init_array+0x40>)
   85914:	4d09      	ldr	r5, [pc, #36]	; (8593c <__libc_init_array+0x44>)
   85916:	f007 fa4f 	bl	8cdb8 <_init>
   8591a:	1b76      	subs	r6, r6, r5
   8591c:	10b6      	asrs	r6, r6, #2
   8591e:	d006      	beq.n	8592e <__libc_init_array+0x36>
   85920:	2400      	movs	r4, #0
   85922:	f855 3b04 	ldr.w	r3, [r5], #4
   85926:	3401      	adds	r4, #1
   85928:	4798      	blx	r3
   8592a:	42a6      	cmp	r6, r4
   8592c:	d1f9      	bne.n	85922 <__libc_init_array+0x2a>
   8592e:	bd70      	pop	{r4, r5, r6, pc}
   85930:	0008cdc4 	.word	0x0008cdc4
   85934:	0008cdc4 	.word	0x0008cdc4
   85938:	0008cdcc 	.word	0x0008cdcc
   8593c:	0008cdc4 	.word	0x0008cdc4

00085940 <iprintf>:
   85940:	b40f      	push	{r0, r1, r2, r3}
   85942:	b500      	push	{lr}
   85944:	4a07      	ldr	r2, [pc, #28]	; (85964 <iprintf+0x24>)
   85946:	b083      	sub	sp, #12
   85948:	ab04      	add	r3, sp, #16
   8594a:	6810      	ldr	r0, [r2, #0]
   8594c:	f853 2b04 	ldr.w	r2, [r3], #4
   85950:	6881      	ldr	r1, [r0, #8]
   85952:	9301      	str	r3, [sp, #4]
   85954:	f001 ffc2 	bl	878dc <_vfiprintf_r>
   85958:	b003      	add	sp, #12
   8595a:	f85d eb04 	ldr.w	lr, [sp], #4
   8595e:	b004      	add	sp, #16
   85960:	4770      	bx	lr
   85962:	bf00      	nop
   85964:	20000480 	.word	0x20000480

00085968 <memcpy>:
   85968:	4684      	mov	ip, r0
   8596a:	ea41 0300 	orr.w	r3, r1, r0
   8596e:	f013 0303 	ands.w	r3, r3, #3
   85972:	d149      	bne.n	85a08 <memcpy+0xa0>
   85974:	3a40      	subs	r2, #64	; 0x40
   85976:	d323      	bcc.n	859c0 <memcpy+0x58>
   85978:	680b      	ldr	r3, [r1, #0]
   8597a:	6003      	str	r3, [r0, #0]
   8597c:	684b      	ldr	r3, [r1, #4]
   8597e:	6043      	str	r3, [r0, #4]
   85980:	688b      	ldr	r3, [r1, #8]
   85982:	6083      	str	r3, [r0, #8]
   85984:	68cb      	ldr	r3, [r1, #12]
   85986:	60c3      	str	r3, [r0, #12]
   85988:	690b      	ldr	r3, [r1, #16]
   8598a:	6103      	str	r3, [r0, #16]
   8598c:	694b      	ldr	r3, [r1, #20]
   8598e:	6143      	str	r3, [r0, #20]
   85990:	698b      	ldr	r3, [r1, #24]
   85992:	6183      	str	r3, [r0, #24]
   85994:	69cb      	ldr	r3, [r1, #28]
   85996:	61c3      	str	r3, [r0, #28]
   85998:	6a0b      	ldr	r3, [r1, #32]
   8599a:	6203      	str	r3, [r0, #32]
   8599c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8599e:	6243      	str	r3, [r0, #36]	; 0x24
   859a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   859a2:	6283      	str	r3, [r0, #40]	; 0x28
   859a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   859a6:	62c3      	str	r3, [r0, #44]	; 0x2c
   859a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   859aa:	6303      	str	r3, [r0, #48]	; 0x30
   859ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   859ae:	6343      	str	r3, [r0, #52]	; 0x34
   859b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   859b2:	6383      	str	r3, [r0, #56]	; 0x38
   859b4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   859b6:	63c3      	str	r3, [r0, #60]	; 0x3c
   859b8:	3040      	adds	r0, #64	; 0x40
   859ba:	3140      	adds	r1, #64	; 0x40
   859bc:	3a40      	subs	r2, #64	; 0x40
   859be:	d2db      	bcs.n	85978 <memcpy+0x10>
   859c0:	3230      	adds	r2, #48	; 0x30
   859c2:	d30b      	bcc.n	859dc <memcpy+0x74>
   859c4:	680b      	ldr	r3, [r1, #0]
   859c6:	6003      	str	r3, [r0, #0]
   859c8:	684b      	ldr	r3, [r1, #4]
   859ca:	6043      	str	r3, [r0, #4]
   859cc:	688b      	ldr	r3, [r1, #8]
   859ce:	6083      	str	r3, [r0, #8]
   859d0:	68cb      	ldr	r3, [r1, #12]
   859d2:	60c3      	str	r3, [r0, #12]
   859d4:	3010      	adds	r0, #16
   859d6:	3110      	adds	r1, #16
   859d8:	3a10      	subs	r2, #16
   859da:	d2f3      	bcs.n	859c4 <memcpy+0x5c>
   859dc:	320c      	adds	r2, #12
   859de:	d305      	bcc.n	859ec <memcpy+0x84>
   859e0:	f851 3b04 	ldr.w	r3, [r1], #4
   859e4:	f840 3b04 	str.w	r3, [r0], #4
   859e8:	3a04      	subs	r2, #4
   859ea:	d2f9      	bcs.n	859e0 <memcpy+0x78>
   859ec:	3204      	adds	r2, #4
   859ee:	d008      	beq.n	85a02 <memcpy+0x9a>
   859f0:	07d2      	lsls	r2, r2, #31
   859f2:	bf1c      	itt	ne
   859f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   859f8:	f800 3b01 	strbne.w	r3, [r0], #1
   859fc:	d301      	bcc.n	85a02 <memcpy+0x9a>
   859fe:	880b      	ldrh	r3, [r1, #0]
   85a00:	8003      	strh	r3, [r0, #0]
   85a02:	4660      	mov	r0, ip
   85a04:	4770      	bx	lr
   85a06:	bf00      	nop
   85a08:	2a08      	cmp	r2, #8
   85a0a:	d313      	bcc.n	85a34 <memcpy+0xcc>
   85a0c:	078b      	lsls	r3, r1, #30
   85a0e:	d0b1      	beq.n	85974 <memcpy+0xc>
   85a10:	f010 0303 	ands.w	r3, r0, #3
   85a14:	d0ae      	beq.n	85974 <memcpy+0xc>
   85a16:	f1c3 0304 	rsb	r3, r3, #4
   85a1a:	1ad2      	subs	r2, r2, r3
   85a1c:	07db      	lsls	r3, r3, #31
   85a1e:	bf1c      	itt	ne
   85a20:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85a24:	f800 3b01 	strbne.w	r3, [r0], #1
   85a28:	d3a4      	bcc.n	85974 <memcpy+0xc>
   85a2a:	f831 3b02 	ldrh.w	r3, [r1], #2
   85a2e:	f820 3b02 	strh.w	r3, [r0], #2
   85a32:	e79f      	b.n	85974 <memcpy+0xc>
   85a34:	3a04      	subs	r2, #4
   85a36:	d3d9      	bcc.n	859ec <memcpy+0x84>
   85a38:	3a01      	subs	r2, #1
   85a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
   85a3e:	f800 3b01 	strb.w	r3, [r0], #1
   85a42:	d2f9      	bcs.n	85a38 <memcpy+0xd0>
   85a44:	780b      	ldrb	r3, [r1, #0]
   85a46:	7003      	strb	r3, [r0, #0]
   85a48:	784b      	ldrb	r3, [r1, #1]
   85a4a:	7043      	strb	r3, [r0, #1]
   85a4c:	788b      	ldrb	r3, [r1, #2]
   85a4e:	7083      	strb	r3, [r0, #2]
   85a50:	4660      	mov	r0, ip
   85a52:	4770      	bx	lr

00085a54 <memset>:
   85a54:	0783      	lsls	r3, r0, #30
   85a56:	b530      	push	{r4, r5, lr}
   85a58:	d048      	beq.n	85aec <memset+0x98>
   85a5a:	1e54      	subs	r4, r2, #1
   85a5c:	2a00      	cmp	r2, #0
   85a5e:	d03f      	beq.n	85ae0 <memset+0x8c>
   85a60:	4603      	mov	r3, r0
   85a62:	b2ca      	uxtb	r2, r1
   85a64:	e001      	b.n	85a6a <memset+0x16>
   85a66:	3c01      	subs	r4, #1
   85a68:	d33a      	bcc.n	85ae0 <memset+0x8c>
   85a6a:	f803 2b01 	strb.w	r2, [r3], #1
   85a6e:	079d      	lsls	r5, r3, #30
   85a70:	d1f9      	bne.n	85a66 <memset+0x12>
   85a72:	2c03      	cmp	r4, #3
   85a74:	d92d      	bls.n	85ad2 <memset+0x7e>
   85a76:	b2cd      	uxtb	r5, r1
   85a78:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85a7c:	2c0f      	cmp	r4, #15
   85a7e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85a82:	d936      	bls.n	85af2 <memset+0x9e>
   85a84:	f1a4 0210 	sub.w	r2, r4, #16
   85a88:	f022 0c0f 	bic.w	ip, r2, #15
   85a8c:	f103 0e20 	add.w	lr, r3, #32
   85a90:	44e6      	add	lr, ip
   85a92:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   85a96:	f103 0210 	add.w	r2, r3, #16
   85a9a:	e942 5504 	strd	r5, r5, [r2, #-16]
   85a9e:	e942 5502 	strd	r5, r5, [r2, #-8]
   85aa2:	3210      	adds	r2, #16
   85aa4:	4572      	cmp	r2, lr
   85aa6:	d1f8      	bne.n	85a9a <memset+0x46>
   85aa8:	f10c 0201 	add.w	r2, ip, #1
   85aac:	f014 0f0c 	tst.w	r4, #12
   85ab0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85ab4:	f004 0c0f 	and.w	ip, r4, #15
   85ab8:	d013      	beq.n	85ae2 <memset+0x8e>
   85aba:	f1ac 0304 	sub.w	r3, ip, #4
   85abe:	f023 0303 	bic.w	r3, r3, #3
   85ac2:	3304      	adds	r3, #4
   85ac4:	4413      	add	r3, r2
   85ac6:	f842 5b04 	str.w	r5, [r2], #4
   85aca:	4293      	cmp	r3, r2
   85acc:	d1fb      	bne.n	85ac6 <memset+0x72>
   85ace:	f00c 0403 	and.w	r4, ip, #3
   85ad2:	b12c      	cbz	r4, 85ae0 <memset+0x8c>
   85ad4:	b2ca      	uxtb	r2, r1
   85ad6:	441c      	add	r4, r3
   85ad8:	f803 2b01 	strb.w	r2, [r3], #1
   85adc:	429c      	cmp	r4, r3
   85ade:	d1fb      	bne.n	85ad8 <memset+0x84>
   85ae0:	bd30      	pop	{r4, r5, pc}
   85ae2:	4664      	mov	r4, ip
   85ae4:	4613      	mov	r3, r2
   85ae6:	2c00      	cmp	r4, #0
   85ae8:	d1f4      	bne.n	85ad4 <memset+0x80>
   85aea:	e7f9      	b.n	85ae0 <memset+0x8c>
   85aec:	4603      	mov	r3, r0
   85aee:	4614      	mov	r4, r2
   85af0:	e7bf      	b.n	85a72 <memset+0x1e>
   85af2:	461a      	mov	r2, r3
   85af4:	46a4      	mov	ip, r4
   85af6:	e7e0      	b.n	85aba <memset+0x66>

00085af8 <setbuf>:
   85af8:	2900      	cmp	r1, #0
   85afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85afe:	bf0c      	ite	eq
   85b00:	2202      	moveq	r2, #2
   85b02:	2200      	movne	r2, #0
   85b04:	f000 b800 	b.w	85b08 <setvbuf>

00085b08 <setvbuf>:
   85b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85b0c:	4c69      	ldr	r4, [pc, #420]	; (85cb4 <setvbuf+0x1ac>)
   85b0e:	460e      	mov	r6, r1
   85b10:	f8d4 8000 	ldr.w	r8, [r4]
   85b14:	4617      	mov	r7, r2
   85b16:	4604      	mov	r4, r0
   85b18:	461d      	mov	r5, r3
   85b1a:	b083      	sub	sp, #12
   85b1c:	f1b8 0f00 	cmp.w	r8, #0
   85b20:	d003      	beq.n	85b2a <setvbuf+0x22>
   85b22:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   85b26:	2b00      	cmp	r3, #0
   85b28:	d077      	beq.n	85c1a <setvbuf+0x112>
   85b2a:	2f02      	cmp	r7, #2
   85b2c:	d005      	beq.n	85b3a <setvbuf+0x32>
   85b2e:	2f01      	cmp	r7, #1
   85b30:	f200 80ac 	bhi.w	85c8c <setvbuf+0x184>
   85b34:	2d00      	cmp	r5, #0
   85b36:	f2c0 80a9 	blt.w	85c8c <setvbuf+0x184>
   85b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85b3c:	07da      	lsls	r2, r3, #31
   85b3e:	d552      	bpl.n	85be6 <setvbuf+0xde>
   85b40:	4621      	mov	r1, r4
   85b42:	4640      	mov	r0, r8
   85b44:	f003 fee0 	bl	89908 <_fflush_r>
   85b48:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85b4a:	b141      	cbz	r1, 85b5e <setvbuf+0x56>
   85b4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85b50:	4299      	cmp	r1, r3
   85b52:	d002      	beq.n	85b5a <setvbuf+0x52>
   85b54:	4640      	mov	r0, r8
   85b56:	f004 f887 	bl	89c68 <_free_r>
   85b5a:	2300      	movs	r3, #0
   85b5c:	6323      	str	r3, [r4, #48]	; 0x30
   85b5e:	2300      	movs	r3, #0
   85b60:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   85b64:	61a3      	str	r3, [r4, #24]
   85b66:	f01c 0f80 	tst.w	ip, #128	; 0x80
   85b6a:	6063      	str	r3, [r4, #4]
   85b6c:	d164      	bne.n	85c38 <setvbuf+0x130>
   85b6e:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   85b72:	f02c 0c03 	bic.w	ip, ip, #3
   85b76:	2f02      	cmp	r7, #2
   85b78:	f8a4 c00c 	strh.w	ip, [r4, #12]
   85b7c:	d06a      	beq.n	85c54 <setvbuf+0x14c>
   85b7e:	ab01      	add	r3, sp, #4
   85b80:	4621      	mov	r1, r4
   85b82:	4640      	mov	r0, r8
   85b84:	466a      	mov	r2, sp
   85b86:	f004 fb8d 	bl	8a2a4 <__swhatbuf_r>
   85b8a:	89a3      	ldrh	r3, [r4, #12]
   85b8c:	4318      	orrs	r0, r3
   85b8e:	81a0      	strh	r0, [r4, #12]
   85b90:	2d00      	cmp	r5, #0
   85b92:	d02f      	beq.n	85bf4 <setvbuf+0xec>
   85b94:	2e00      	cmp	r6, #0
   85b96:	d02e      	beq.n	85bf6 <setvbuf+0xee>
   85b98:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   85b9c:	2b00      	cmp	r3, #0
   85b9e:	d038      	beq.n	85c12 <setvbuf+0x10a>
   85ba0:	9b00      	ldr	r3, [sp, #0]
   85ba2:	e9c4 6504 	strd	r6, r5, [r4, #16]
   85ba6:	42ab      	cmp	r3, r5
   85ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85bac:	6026      	str	r6, [r4, #0]
   85bae:	bf1c      	itt	ne
   85bb0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   85bb4:	81a3      	strhne	r3, [r4, #12]
   85bb6:	2f01      	cmp	r7, #1
   85bb8:	bf04      	itt	eq
   85bba:	f043 0301 	orreq.w	r3, r3, #1
   85bbe:	81a3      	strheq	r3, [r4, #12]
   85bc0:	b29a      	uxth	r2, r3
   85bc2:	f013 0308 	ands.w	r3, r3, #8
   85bc6:	d02c      	beq.n	85c22 <setvbuf+0x11a>
   85bc8:	07d1      	lsls	r1, r2, #31
   85bca:	d55d      	bpl.n	85c88 <setvbuf+0x180>
   85bcc:	2100      	movs	r1, #0
   85bce:	426d      	negs	r5, r5
   85bd0:	61a5      	str	r5, [r4, #24]
   85bd2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   85bd4:	60a1      	str	r1, [r4, #8]
   85bd6:	f015 0501 	ands.w	r5, r5, #1
   85bda:	d027      	beq.n	85c2c <setvbuf+0x124>
   85bdc:	2500      	movs	r5, #0
   85bde:	4628      	mov	r0, r5
   85be0:	b003      	add	sp, #12
   85be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85be6:	89a3      	ldrh	r3, [r4, #12]
   85be8:	059b      	lsls	r3, r3, #22
   85bea:	d4a9      	bmi.n	85b40 <setvbuf+0x38>
   85bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85bee:	f004 fae5 	bl	8a1bc <__retarget_lock_acquire_recursive>
   85bf2:	e7a5      	b.n	85b40 <setvbuf+0x38>
   85bf4:	9d00      	ldr	r5, [sp, #0]
   85bf6:	4628      	mov	r0, r5
   85bf8:	f004 fb84 	bl	8a304 <malloc>
   85bfc:	4606      	mov	r6, r0
   85bfe:	2800      	cmp	r0, #0
   85c00:	d047      	beq.n	85c92 <setvbuf+0x18a>
   85c02:	89a3      	ldrh	r3, [r4, #12]
   85c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85c08:	81a3      	strh	r3, [r4, #12]
   85c0a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   85c0e:	2b00      	cmp	r3, #0
   85c10:	d1c6      	bne.n	85ba0 <setvbuf+0x98>
   85c12:	4640      	mov	r0, r8
   85c14:	f003 feac 	bl	89970 <__sinit>
   85c18:	e7c2      	b.n	85ba0 <setvbuf+0x98>
   85c1a:	4640      	mov	r0, r8
   85c1c:	f003 fea8 	bl	89970 <__sinit>
   85c20:	e783      	b.n	85b2a <setvbuf+0x22>
   85c22:	60a3      	str	r3, [r4, #8]
   85c24:	6e65      	ldr	r5, [r4, #100]	; 0x64
   85c26:	f015 0501 	ands.w	r5, r5, #1
   85c2a:	d1d7      	bne.n	85bdc <setvbuf+0xd4>
   85c2c:	0593      	lsls	r3, r2, #22
   85c2e:	d524      	bpl.n	85c7a <setvbuf+0x172>
   85c30:	4628      	mov	r0, r5
   85c32:	b003      	add	sp, #12
   85c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85c38:	4640      	mov	r0, r8
   85c3a:	6921      	ldr	r1, [r4, #16]
   85c3c:	f004 f814 	bl	89c68 <_free_r>
   85c40:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   85c44:	2f02      	cmp	r7, #2
   85c46:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   85c4a:	f02c 0c03 	bic.w	ip, ip, #3
   85c4e:	f8a4 c00c 	strh.w	ip, [r4, #12]
   85c52:	d194      	bne.n	85b7e <setvbuf+0x76>
   85c54:	2500      	movs	r5, #0
   85c56:	2100      	movs	r1, #0
   85c58:	2201      	movs	r2, #1
   85c5a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   85c5e:	6023      	str	r3, [r4, #0]
   85c60:	6123      	str	r3, [r4, #16]
   85c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85c64:	f04c 0c02 	orr.w	ip, ip, #2
   85c68:	07d8      	lsls	r0, r3, #31
   85c6a:	f8a4 c00c 	strh.w	ip, [r4, #12]
   85c6e:	60a1      	str	r1, [r4, #8]
   85c70:	6162      	str	r2, [r4, #20]
   85c72:	d4dd      	bmi.n	85c30 <setvbuf+0x128>
   85c74:	f41c 7f00 	tst.w	ip, #512	; 0x200
   85c78:	d1da      	bne.n	85c30 <setvbuf+0x128>
   85c7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85c7c:	f004 faa0 	bl	8a1c0 <__retarget_lock_release_recursive>
   85c80:	4628      	mov	r0, r5
   85c82:	b003      	add	sp, #12
   85c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85c88:	60a5      	str	r5, [r4, #8]
   85c8a:	e7cb      	b.n	85c24 <setvbuf+0x11c>
   85c8c:	f04f 35ff 	mov.w	r5, #4294967295
   85c90:	e7ce      	b.n	85c30 <setvbuf+0x128>
   85c92:	f8dd 9000 	ldr.w	r9, [sp]
   85c96:	45a9      	cmp	r9, r5
   85c98:	d004      	beq.n	85ca4 <setvbuf+0x19c>
   85c9a:	4648      	mov	r0, r9
   85c9c:	f004 fb32 	bl	8a304 <malloc>
   85ca0:	4606      	mov	r6, r0
   85ca2:	b920      	cbnz	r0, 85cae <setvbuf+0x1a6>
   85ca4:	f04f 35ff 	mov.w	r5, #4294967295
   85ca8:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   85cac:	e7d3      	b.n	85c56 <setvbuf+0x14e>
   85cae:	464d      	mov	r5, r9
   85cb0:	e7a7      	b.n	85c02 <setvbuf+0xfa>
   85cb2:	bf00      	nop
   85cb4:	20000480 	.word	0x20000480

00085cb8 <sprintf>:
   85cb8:	b40e      	push	{r1, r2, r3}
   85cba:	b530      	push	{r4, r5, lr}
   85cbc:	4604      	mov	r4, r0
   85cbe:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85cc2:	b09c      	sub	sp, #112	; 0x70
   85cc4:	4a0b      	ldr	r2, [pc, #44]	; (85cf4 <sprintf+0x3c>)
   85cc6:	ab1f      	add	r3, sp, #124	; 0x7c
   85cc8:	490b      	ldr	r1, [pc, #44]	; (85cf8 <sprintf+0x40>)
   85cca:	9205      	str	r2, [sp, #20]
   85ccc:	f853 2b04 	ldr.w	r2, [r3], #4
   85cd0:	6808      	ldr	r0, [r1, #0]
   85cd2:	a902      	add	r1, sp, #8
   85cd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   85cd8:	9507      	str	r5, [sp, #28]
   85cda:	9504      	str	r5, [sp, #16]
   85cdc:	9406      	str	r4, [sp, #24]
   85cde:	f000 f86f 	bl	85dc0 <_svfprintf_r>
   85ce2:	2200      	movs	r2, #0
   85ce4:	9b02      	ldr	r3, [sp, #8]
   85ce6:	701a      	strb	r2, [r3, #0]
   85ce8:	b01c      	add	sp, #112	; 0x70
   85cea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85cee:	b003      	add	sp, #12
   85cf0:	4770      	bx	lr
   85cf2:	bf00      	nop
   85cf4:	ffff0208 	.word	0xffff0208
   85cf8:	20000480 	.word	0x20000480

00085cfc <strlen>:
   85cfc:	f020 0103 	bic.w	r1, r0, #3
   85d00:	f010 0003 	ands.w	r0, r0, #3
   85d04:	f1c0 0000 	rsb	r0, r0, #0
   85d08:	f851 3b04 	ldr.w	r3, [r1], #4
   85d0c:	f100 0c04 	add.w	ip, r0, #4
   85d10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85d14:	f06f 0200 	mvn.w	r2, #0
   85d18:	bf1c      	itt	ne
   85d1a:	fa22 f20c 	lsrne.w	r2, r2, ip
   85d1e:	4313      	orrne	r3, r2
   85d20:	f04f 0c01 	mov.w	ip, #1
   85d24:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85d28:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85d2c:	eba3 020c 	sub.w	r2, r3, ip
   85d30:	ea22 0203 	bic.w	r2, r2, r3
   85d34:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85d38:	bf04      	itt	eq
   85d3a:	f851 3b04 	ldreq.w	r3, [r1], #4
   85d3e:	3004      	addeq	r0, #4
   85d40:	d0f4      	beq.n	85d2c <strlen+0x30>
   85d42:	f1c2 0100 	rsb	r1, r2, #0
   85d46:	ea02 0201 	and.w	r2, r2, r1
   85d4a:	fab2 f282 	clz	r2, r2
   85d4e:	f1c2 021f 	rsb	r2, r2, #31
   85d52:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85d56:	4770      	bx	lr

00085d58 <strncpy>:
   85d58:	b530      	push	{r4, r5, lr}
   85d5a:	ea40 0401 	orr.w	r4, r0, r1
   85d5e:	07a3      	lsls	r3, r4, #30
   85d60:	d122      	bne.n	85da8 <strncpy+0x50>
   85d62:	2a03      	cmp	r2, #3
   85d64:	d920      	bls.n	85da8 <strncpy+0x50>
   85d66:	460b      	mov	r3, r1
   85d68:	4684      	mov	ip, r0
   85d6a:	4619      	mov	r1, r3
   85d6c:	f853 5b04 	ldr.w	r5, [r3], #4
   85d70:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   85d74:	ea24 0405 	bic.w	r4, r4, r5
   85d78:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   85d7c:	d115      	bne.n	85daa <strncpy+0x52>
   85d7e:	3a04      	subs	r2, #4
   85d80:	2a03      	cmp	r2, #3
   85d82:	4619      	mov	r1, r3
   85d84:	f84c 5b04 	str.w	r5, [ip], #4
   85d88:	d8ef      	bhi.n	85d6a <strncpy+0x12>
   85d8a:	f101 3eff 	add.w	lr, r1, #4294967295
   85d8e:	b152      	cbz	r2, 85da6 <strncpy+0x4e>
   85d90:	4663      	mov	r3, ip
   85d92:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   85d96:	1e54      	subs	r4, r2, #1
   85d98:	f803 1b01 	strb.w	r1, [r3], #1
   85d9c:	b141      	cbz	r1, 85db0 <strncpy+0x58>
   85d9e:	4622      	mov	r2, r4
   85da0:	469c      	mov	ip, r3
   85da2:	2a00      	cmp	r2, #0
   85da4:	d1f4      	bne.n	85d90 <strncpy+0x38>
   85da6:	bd30      	pop	{r4, r5, pc}
   85da8:	4684      	mov	ip, r0
   85daa:	f101 3eff 	add.w	lr, r1, #4294967295
   85dae:	e7ee      	b.n	85d8e <strncpy+0x36>
   85db0:	4462      	add	r2, ip
   85db2:	2c00      	cmp	r4, #0
   85db4:	d0f7      	beq.n	85da6 <strncpy+0x4e>
   85db6:	f803 1b01 	strb.w	r1, [r3], #1
   85dba:	4293      	cmp	r3, r2
   85dbc:	d1fb      	bne.n	85db6 <strncpy+0x5e>
   85dbe:	bd30      	pop	{r4, r5, pc}

00085dc0 <_svfprintf_r>:
   85dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85dc4:	b0d5      	sub	sp, #340	; 0x154
   85dc6:	460c      	mov	r4, r1
   85dc8:	910c      	str	r1, [sp, #48]	; 0x30
   85dca:	4691      	mov	r9, r2
   85dcc:	930e      	str	r3, [sp, #56]	; 0x38
   85dce:	900a      	str	r0, [sp, #40]	; 0x28
   85dd0:	f004 f9ec 	bl	8a1ac <_localeconv_r>
   85dd4:	6803      	ldr	r3, [r0, #0]
   85dd6:	4618      	mov	r0, r3
   85dd8:	9317      	str	r3, [sp, #92]	; 0x5c
   85dda:	f7ff ff8f 	bl	85cfc <strlen>
   85dde:	89a3      	ldrh	r3, [r4, #12]
   85de0:	9016      	str	r0, [sp, #88]	; 0x58
   85de2:	0619      	lsls	r1, r3, #24
   85de4:	d503      	bpl.n	85dee <_svfprintf_r+0x2e>
   85de6:	6923      	ldr	r3, [r4, #16]
   85de8:	2b00      	cmp	r3, #0
   85dea:	f000 878f 	beq.w	86d0c <_svfprintf_r+0xf4c>
   85dee:	2400      	movs	r4, #0
   85df0:	ab2b      	add	r3, sp, #172	; 0xac
   85df2:	4622      	mov	r2, r4
   85df4:	4698      	mov	r8, r3
   85df6:	464d      	mov	r5, r9
   85df8:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   85dfc:	9328      	str	r3, [sp, #160]	; 0xa0
   85dfe:	9412      	str	r4, [sp, #72]	; 0x48
   85e00:	2300      	movs	r3, #0
   85e02:	2400      	movs	r4, #0
   85e04:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   85e08:	782b      	ldrb	r3, [r5, #0]
   85e0a:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   85e0e:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   85e12:	9218      	str	r2, [sp, #96]	; 0x60
   85e14:	9208      	str	r2, [sp, #32]
   85e16:	2b00      	cmp	r3, #0
   85e18:	f000 81ce 	beq.w	861b8 <_svfprintf_r+0x3f8>
   85e1c:	46aa      	mov	sl, r5
   85e1e:	e004      	b.n	85e2a <_svfprintf_r+0x6a>
   85e20:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   85e24:	2b00      	cmp	r3, #0
   85e26:	f000 8109 	beq.w	8603c <_svfprintf_r+0x27c>
   85e2a:	2b25      	cmp	r3, #37	; 0x25
   85e2c:	d1f8      	bne.n	85e20 <_svfprintf_r+0x60>
   85e2e:	ebba 0605 	subs.w	r6, sl, r5
   85e32:	f040 8107 	bne.w	86044 <_svfprintf_r+0x284>
   85e36:	f89a 3000 	ldrb.w	r3, [sl]
   85e3a:	2b00      	cmp	r3, #0
   85e3c:	f000 81bc 	beq.w	861b8 <_svfprintf_r+0x3f8>
   85e40:	2300      	movs	r3, #0
   85e42:	f04f 32ff 	mov.w	r2, #4294967295
   85e46:	f04f 092b 	mov.w	r9, #43	; 0x2b
   85e4a:	2420      	movs	r4, #32
   85e4c:	461f      	mov	r7, r3
   85e4e:	f89a 6001 	ldrb.w	r6, [sl, #1]
   85e52:	9207      	str	r2, [sp, #28]
   85e54:	f10a 0a01 	add.w	sl, sl, #1
   85e58:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   85e5c:	9309      	str	r3, [sp, #36]	; 0x24
   85e5e:	f10a 0a01 	add.w	sl, sl, #1
   85e62:	f1a6 0320 	sub.w	r3, r6, #32
   85e66:	2b5a      	cmp	r3, #90	; 0x5a
   85e68:	f200 8120 	bhi.w	860ac <_svfprintf_r+0x2ec>
   85e6c:	e8df f013 	tbh	[pc, r3, lsl #1]
   85e70:	011e02ca 	.word	0x011e02ca
   85e74:	02c5011e 	.word	0x02c5011e
   85e78:	011e011e 	.word	0x011e011e
   85e7c:	02a3011e 	.word	0x02a3011e
   85e80:	011e011e 	.word	0x011e011e
   85e84:	02f3006a 	.word	0x02f3006a
   85e88:	0247011e 	.word	0x0247011e
   85e8c:	011e02d9 	.word	0x011e02d9
   85e90:	005b02d4 	.word	0x005b02d4
   85e94:	005b005b 	.word	0x005b005b
   85e98:	005b005b 	.word	0x005b005b
   85e9c:	005b005b 	.word	0x005b005b
   85ea0:	005b005b 	.word	0x005b005b
   85ea4:	011e011e 	.word	0x011e011e
   85ea8:	011e011e 	.word	0x011e011e
   85eac:	011e011e 	.word	0x011e011e
   85eb0:	01b0011e 	.word	0x01b0011e
   85eb4:	020b011e 	.word	0x020b011e
   85eb8:	01b0007a 	.word	0x01b0007a
   85ebc:	01b001b0 	.word	0x01b001b0
   85ec0:	011e011e 	.word	0x011e011e
   85ec4:	011e011e 	.word	0x011e011e
   85ec8:	011e029e 	.word	0x011e029e
   85ecc:	00b6011e 	.word	0x00b6011e
   85ed0:	011e011e 	.word	0x011e011e
   85ed4:	0219011e 	.word	0x0219011e
   85ed8:	024c011e 	.word	0x024c011e
   85edc:	011e011e 	.word	0x011e011e
   85ee0:	011e073f 	.word	0x011e073f
   85ee4:	011e011e 	.word	0x011e011e
   85ee8:	011e011e 	.word	0x011e011e
   85eec:	011e011e 	.word	0x011e011e
   85ef0:	01b0011e 	.word	0x01b0011e
   85ef4:	020b011e 	.word	0x020b011e
   85ef8:	01b0007c 	.word	0x01b0007c
   85efc:	01b001b0 	.word	0x01b001b0
   85f00:	007c0291 	.word	0x007c0291
   85f04:	011e0075 	.word	0x011e0075
   85f08:	011e0284 	.word	0x011e0284
   85f0c:	00b80270 	.word	0x00b80270
   85f10:	0075025e 	.word	0x0075025e
   85f14:	0219011e 	.word	0x0219011e
   85f18:	071c0072 	.word	0x071c0072
   85f1c:	011e011e 	.word	0x011e011e
   85f20:	011e071f 	.word	0x011e071f
   85f24:	0072      	.short	0x0072
   85f26:	2200      	movs	r2, #0
   85f28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85f2c:	f81a 6b01 	ldrb.w	r6, [sl], #1
   85f30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   85f34:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   85f38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85f3c:	2b09      	cmp	r3, #9
   85f3e:	d9f5      	bls.n	85f2c <_svfprintf_r+0x16c>
   85f40:	9209      	str	r2, [sp, #36]	; 0x24
   85f42:	e78e      	b.n	85e62 <_svfprintf_r+0xa2>
   85f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85f46:	f853 2b04 	ldr.w	r2, [r3], #4
   85f4a:	2a00      	cmp	r2, #0
   85f4c:	9209      	str	r2, [sp, #36]	; 0x24
   85f4e:	930e      	str	r3, [sp, #56]	; 0x38
   85f50:	f2c0 81d2 	blt.w	862f8 <_svfprintf_r+0x538>
   85f54:	f89a 6000 	ldrb.w	r6, [sl]
   85f58:	e781      	b.n	85e5e <_svfprintf_r+0x9e>
   85f5a:	f89a 6000 	ldrb.w	r6, [sl]
   85f5e:	f047 0720 	orr.w	r7, r7, #32
   85f62:	e77c      	b.n	85e5e <_svfprintf_r+0x9e>
   85f64:	f047 0710 	orr.w	r7, r7, #16
   85f68:	06ba      	lsls	r2, r7, #26
   85f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85f6c:	f140 817d 	bpl.w	8626a <_svfprintf_r+0x4aa>
   85f70:	3307      	adds	r3, #7
   85f72:	f023 0307 	bic.w	r3, r3, #7
   85f76:	461a      	mov	r2, r3
   85f78:	685b      	ldr	r3, [r3, #4]
   85f7a:	f852 4b08 	ldr.w	r4, [r2], #8
   85f7e:	4699      	mov	r9, r3
   85f80:	920e      	str	r2, [sp, #56]	; 0x38
   85f82:	2b00      	cmp	r3, #0
   85f84:	f2c0 857f 	blt.w	86a86 <_svfprintf_r+0xcc6>
   85f88:	9b07      	ldr	r3, [sp, #28]
   85f8a:	3301      	adds	r3, #1
   85f8c:	f001 8039 	beq.w	87002 <_svfprintf_r+0x1242>
   85f90:	ea54 0309 	orrs.w	r3, r4, r9
   85f94:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   85f98:	f000 8505 	beq.w	869a6 <_svfprintf_r+0xbe6>
   85f9c:	2c0a      	cmp	r4, #10
   85f9e:	f179 0300 	sbcs.w	r3, r9, #0
   85fa2:	f080 8793 	bcs.w	86ecc <_svfprintf_r+0x110c>
   85fa6:	2301      	movs	r3, #1
   85fa8:	465f      	mov	r7, fp
   85faa:	3430      	adds	r4, #48	; 0x30
   85fac:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   85fb0:	930b      	str	r3, [sp, #44]	; 0x2c
   85fb2:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   85fb6:	9a07      	ldr	r2, [sp, #28]
   85fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fba:	2300      	movs	r3, #0
   85fbc:	428a      	cmp	r2, r1
   85fbe:	bfb8      	it	lt
   85fc0:	460a      	movlt	r2, r1
   85fc2:	9206      	str	r2, [sp, #24]
   85fc4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   85fc8:	930d      	str	r3, [sp, #52]	; 0x34
   85fca:	930f      	str	r3, [sp, #60]	; 0x3c
   85fcc:	9313      	str	r3, [sp, #76]	; 0x4c
   85fce:	9310      	str	r3, [sp, #64]	; 0x40
   85fd0:	2a00      	cmp	r2, #0
   85fd2:	d07c      	beq.n	860ce <_svfprintf_r+0x30e>
   85fd4:	9b06      	ldr	r3, [sp, #24]
   85fd6:	3301      	adds	r3, #1
   85fd8:	9306      	str	r3, [sp, #24]
   85fda:	e078      	b.n	860ce <_svfprintf_r+0x30e>
   85fdc:	f047 0710 	orr.w	r7, r7, #16
   85fe0:	f017 0920 	ands.w	r9, r7, #32
   85fe4:	f000 8132 	beq.w	8624c <_svfprintf_r+0x48c>
   85fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85fea:	3307      	adds	r3, #7
   85fec:	f023 0307 	bic.w	r3, r3, #7
   85ff0:	f8d3 9004 	ldr.w	r9, [r3, #4]
   85ff4:	f853 4b08 	ldr.w	r4, [r3], #8
   85ff8:	930e      	str	r3, [sp, #56]	; 0x38
   85ffa:	2300      	movs	r3, #0
   85ffc:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86000:	2200      	movs	r2, #0
   86002:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86006:	9a07      	ldr	r2, [sp, #28]
   86008:	1c51      	adds	r1, r2, #1
   8600a:	f000 822a 	beq.w	86462 <_svfprintf_r+0x6a2>
   8600e:	ea54 0109 	orrs.w	r1, r4, r9
   86012:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   86016:	f040 8223 	bne.w	86460 <_svfprintf_r+0x6a0>
   8601a:	2a00      	cmp	r2, #0
   8601c:	f041 802b 	bne.w	87076 <_svfprintf_r+0x12b6>
   86020:	2b00      	cmp	r3, #0
   86022:	f040 84c5 	bne.w	869b0 <_svfprintf_r+0xbf0>
   86026:	f01b 0301 	ands.w	r3, fp, #1
   8602a:	930b      	str	r3, [sp, #44]	; 0x2c
   8602c:	f000 8554 	beq.w	86ad8 <_svfprintf_r+0xd18>
   86030:	2330      	movs	r3, #48	; 0x30
   86032:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   86036:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   8603a:	e7bc      	b.n	85fb6 <_svfprintf_r+0x1f6>
   8603c:	ebba 0605 	subs.w	r6, sl, r5
   86040:	f000 80ba 	beq.w	861b8 <_svfprintf_r+0x3f8>
   86044:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   86046:	e9c8 5600 	strd	r5, r6, [r8]
   8604a:	4433      	add	r3, r6
   8604c:	932a      	str	r3, [sp, #168]	; 0xa8
   8604e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86050:	3301      	adds	r3, #1
   86052:	2b07      	cmp	r3, #7
   86054:	9329      	str	r3, [sp, #164]	; 0xa4
   86056:	dc05      	bgt.n	86064 <_svfprintf_r+0x2a4>
   86058:	f108 0808 	add.w	r8, r8, #8
   8605c:	9b08      	ldr	r3, [sp, #32]
   8605e:	4433      	add	r3, r6
   86060:	9308      	str	r3, [sp, #32]
   86062:	e6e8      	b.n	85e36 <_svfprintf_r+0x76>
   86064:	990c      	ldr	r1, [sp, #48]	; 0x30
   86066:	980a      	ldr	r0, [sp, #40]	; 0x28
   86068:	aa28      	add	r2, sp, #160	; 0xa0
   8606a:	f005 fb07 	bl	8b67c <__ssprint_r>
   8606e:	b980      	cbnz	r0, 86092 <_svfprintf_r+0x2d2>
   86070:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86074:	e7f2      	b.n	8605c <_svfprintf_r+0x29c>
   86076:	990c      	ldr	r1, [sp, #48]	; 0x30
   86078:	980a      	ldr	r0, [sp, #40]	; 0x28
   8607a:	aa28      	add	r2, sp, #160	; 0xa0
   8607c:	f005 fafe 	bl	8b67c <__ssprint_r>
   86080:	2800      	cmp	r0, #0
   86082:	f000 808a 	beq.w	8619a <_svfprintf_r+0x3da>
   86086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86088:	b11b      	cbz	r3, 86092 <_svfprintf_r+0x2d2>
   8608a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8608c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8608e:	f003 fdeb 	bl	89c68 <_free_r>
   86092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86094:	899b      	ldrh	r3, [r3, #12]
   86096:	f013 0f40 	tst.w	r3, #64	; 0x40
   8609a:	9b08      	ldr	r3, [sp, #32]
   8609c:	bf18      	it	ne
   8609e:	f04f 33ff 	movne.w	r3, #4294967295
   860a2:	9308      	str	r3, [sp, #32]
   860a4:	9808      	ldr	r0, [sp, #32]
   860a6:	b055      	add	sp, #340	; 0x154
   860a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860ac:	2e00      	cmp	r6, #0
   860ae:	f000 8083 	beq.w	861b8 <_svfprintf_r+0x3f8>
   860b2:	2301      	movs	r3, #1
   860b4:	2200      	movs	r2, #0
   860b6:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   860ba:	9306      	str	r3, [sp, #24]
   860bc:	ad3b      	add	r5, sp, #236	; 0xec
   860be:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   860c2:	930b      	str	r3, [sp, #44]	; 0x2c
   860c4:	920d      	str	r2, [sp, #52]	; 0x34
   860c6:	9207      	str	r2, [sp, #28]
   860c8:	920f      	str	r2, [sp, #60]	; 0x3c
   860ca:	9213      	str	r2, [sp, #76]	; 0x4c
   860cc:	9210      	str	r2, [sp, #64]	; 0x40
   860ce:	f017 0302 	ands.w	r3, r7, #2
   860d2:	d002      	beq.n	860da <_svfprintf_r+0x31a>
   860d4:	9906      	ldr	r1, [sp, #24]
   860d6:	3102      	adds	r1, #2
   860d8:	9106      	str	r1, [sp, #24]
   860da:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   860de:	d107      	bne.n	860f0 <_svfprintf_r+0x330>
   860e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   860e2:	9806      	ldr	r0, [sp, #24]
   860e4:	eba1 0900 	sub.w	r9, r1, r0
   860e8:	f1b9 0f00 	cmp.w	r9, #0
   860ec:	f300 8336 	bgt.w	8675c <_svfprintf_r+0x99c>
   860f0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   860f2:	b182      	cbz	r2, 86116 <_svfprintf_r+0x356>
   860f4:	2201      	movs	r2, #1
   860f6:	f8c8 2004 	str.w	r2, [r8, #4]
   860fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   860fc:	3401      	adds	r4, #1
   860fe:	3201      	adds	r2, #1
   86100:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   86104:	2a07      	cmp	r2, #7
   86106:	942a      	str	r4, [sp, #168]	; 0xa8
   86108:	9229      	str	r2, [sp, #164]	; 0xa4
   8610a:	f8c8 1000 	str.w	r1, [r8]
   8610e:	f300 8369 	bgt.w	867e4 <_svfprintf_r+0xa24>
   86112:	f108 0808 	add.w	r8, r8, #8
   86116:	b17b      	cbz	r3, 86138 <_svfprintf_r+0x378>
   86118:	2302      	movs	r3, #2
   8611a:	f8c8 3004 	str.w	r3, [r8, #4]
   8611e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86120:	3402      	adds	r4, #2
   86122:	3301      	adds	r3, #1
   86124:	aa21      	add	r2, sp, #132	; 0x84
   86126:	2b07      	cmp	r3, #7
   86128:	942a      	str	r4, [sp, #168]	; 0xa8
   8612a:	9329      	str	r3, [sp, #164]	; 0xa4
   8612c:	f8c8 2000 	str.w	r2, [r8]
   86130:	f300 836c 	bgt.w	8680c <_svfprintf_r+0xa4c>
   86134:	f108 0808 	add.w	r8, r8, #8
   86138:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   8613c:	f000 822e 	beq.w	8659c <_svfprintf_r+0x7dc>
   86140:	9b07      	ldr	r3, [sp, #28]
   86142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86144:	eba3 0b02 	sub.w	fp, r3, r2
   86148:	f1bb 0f00 	cmp.w	fp, #0
   8614c:	f300 8271 	bgt.w	86632 <_svfprintf_r+0x872>
   86150:	05fb      	lsls	r3, r7, #23
   86152:	f100 81c5 	bmi.w	864e0 <_svfprintf_r+0x720>
   86156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86158:	f8c8 5000 	str.w	r5, [r8]
   8615c:	441c      	add	r4, r3
   8615e:	f8c8 3004 	str.w	r3, [r8, #4]
   86162:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86164:	942a      	str	r4, [sp, #168]	; 0xa8
   86166:	3301      	adds	r3, #1
   86168:	2b07      	cmp	r3, #7
   8616a:	9329      	str	r3, [sp, #164]	; 0xa4
   8616c:	f300 82ea 	bgt.w	86744 <_svfprintf_r+0x984>
   86170:	f108 0808 	add.w	r8, r8, #8
   86174:	077b      	lsls	r3, r7, #29
   86176:	d505      	bpl.n	86184 <_svfprintf_r+0x3c4>
   86178:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8617a:	9a06      	ldr	r2, [sp, #24]
   8617c:	1a9d      	subs	r5, r3, r2
   8617e:	2d00      	cmp	r5, #0
   86180:	f300 8350 	bgt.w	86824 <_svfprintf_r+0xa64>
   86184:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   86188:	9906      	ldr	r1, [sp, #24]
   8618a:	428a      	cmp	r2, r1
   8618c:	bfac      	ite	ge
   8618e:	189b      	addge	r3, r3, r2
   86190:	185b      	addlt	r3, r3, r1
   86192:	9308      	str	r3, [sp, #32]
   86194:	2c00      	cmp	r4, #0
   86196:	f47f af6e 	bne.w	86076 <_svfprintf_r+0x2b6>
   8619a:	2300      	movs	r3, #0
   8619c:	9329      	str	r3, [sp, #164]	; 0xa4
   8619e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   861a0:	b11b      	cbz	r3, 861aa <_svfprintf_r+0x3ea>
   861a2:	990d      	ldr	r1, [sp, #52]	; 0x34
   861a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   861a6:	f003 fd5f 	bl	89c68 <_free_r>
   861aa:	4655      	mov	r5, sl
   861ac:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   861b0:	782b      	ldrb	r3, [r5, #0]
   861b2:	2b00      	cmp	r3, #0
   861b4:	f47f ae32 	bne.w	85e1c <_svfprintf_r+0x5c>
   861b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   861ba:	2b00      	cmp	r3, #0
   861bc:	f43f af69 	beq.w	86092 <_svfprintf_r+0x2d2>
   861c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   861c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   861c4:	4621      	mov	r1, r4
   861c6:	aa28      	add	r2, sp, #160	; 0xa0
   861c8:	f005 fa58 	bl	8b67c <__ssprint_r>
   861cc:	89a3      	ldrh	r3, [r4, #12]
   861ce:	e762      	b.n	86096 <_svfprintf_r+0x2d6>
   861d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   861d2:	3307      	adds	r3, #7
   861d4:	f023 0207 	bic.w	r2, r3, #7
   861d8:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   861dc:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   861e0:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   861e4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   861e8:	4699      	mov	r9, r3
   861ea:	4618      	mov	r0, r3
   861ec:	920e      	str	r2, [sp, #56]	; 0x38
   861ee:	4621      	mov	r1, r4
   861f0:	f04f 32ff 	mov.w	r2, #4294967295
   861f4:	4bb6      	ldr	r3, [pc, #728]	; (864d0 <_svfprintf_r+0x710>)
   861f6:	f006 f981 	bl	8c4fc <__aeabi_dcmpun>
   861fa:	2800      	cmp	r0, #0
   861fc:	f040 8496 	bne.w	86b2c <_svfprintf_r+0xd6c>
   86200:	4648      	mov	r0, r9
   86202:	4621      	mov	r1, r4
   86204:	f04f 32ff 	mov.w	r2, #4294967295
   86208:	4bb1      	ldr	r3, [pc, #708]	; (864d0 <_svfprintf_r+0x710>)
   8620a:	f006 f959 	bl	8c4c0 <__aeabi_dcmple>
   8620e:	2800      	cmp	r0, #0
   86210:	f040 848c 	bne.w	86b2c <_svfprintf_r+0xd6c>
   86214:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86218:	2200      	movs	r2, #0
   8621a:	2300      	movs	r3, #0
   8621c:	f006 f946 	bl	8c4ac <__aeabi_dcmplt>
   86220:	2800      	cmp	r0, #0
   86222:	f040 87a6 	bne.w	87172 <_svfprintf_r+0x13b2>
   86226:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8622a:	2100      	movs	r1, #0
   8622c:	2003      	movs	r0, #3
   8622e:	4da9      	ldr	r5, [pc, #676]	; (864d4 <_svfprintf_r+0x714>)
   86230:	4ba9      	ldr	r3, [pc, #676]	; (864d8 <_svfprintf_r+0x718>)
   86232:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   86236:	910d      	str	r1, [sp, #52]	; 0x34
   86238:	9006      	str	r0, [sp, #24]
   8623a:	2e47      	cmp	r6, #71	; 0x47
   8623c:	bfc8      	it	gt
   8623e:	461d      	movgt	r5, r3
   86240:	9107      	str	r1, [sp, #28]
   86242:	900b      	str	r0, [sp, #44]	; 0x2c
   86244:	910f      	str	r1, [sp, #60]	; 0x3c
   86246:	9113      	str	r1, [sp, #76]	; 0x4c
   86248:	9110      	str	r1, [sp, #64]	; 0x40
   8624a:	e6c1      	b.n	85fd0 <_svfprintf_r+0x210>
   8624c:	f017 0310 	ands.w	r3, r7, #16
   86250:	f040 8462 	bne.w	86b18 <_svfprintf_r+0xd58>
   86254:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86258:	f000 877b 	beq.w	87152 <_svfprintf_r+0x1392>
   8625c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8625e:	4699      	mov	r9, r3
   86260:	f852 4b04 	ldr.w	r4, [r2], #4
   86264:	920e      	str	r2, [sp, #56]	; 0x38
   86266:	b2a4      	uxth	r4, r4
   86268:	e6c7      	b.n	85ffa <_svfprintf_r+0x23a>
   8626a:	f853 4b04 	ldr.w	r4, [r3], #4
   8626e:	930e      	str	r3, [sp, #56]	; 0x38
   86270:	06fb      	lsls	r3, r7, #27
   86272:	f100 8441 	bmi.w	86af8 <_svfprintf_r+0xd38>
   86276:	067d      	lsls	r5, r7, #25
   86278:	f140 843b 	bpl.w	86af2 <_svfprintf_r+0xd32>
   8627c:	f344 39c0 	sbfx	r9, r4, #15, #1
   86280:	464b      	mov	r3, r9
   86282:	b224      	sxth	r4, r4
   86284:	e67d      	b.n	85f82 <_svfprintf_r+0x1c2>
   86286:	2001      	movs	r0, #1
   86288:	2200      	movs	r2, #0
   8628a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8628c:	9006      	str	r0, [sp, #24]
   8628e:	f853 1b04 	ldr.w	r1, [r3], #4
   86292:	ad3b      	add	r5, sp, #236	; 0xec
   86294:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86298:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   8629c:	930e      	str	r3, [sp, #56]	; 0x38
   8629e:	900b      	str	r0, [sp, #44]	; 0x2c
   862a0:	e710      	b.n	860c4 <_svfprintf_r+0x304>
   862a2:	f04f 0900 	mov.w	r9, #0
   862a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   862a8:	9b07      	ldr	r3, [sp, #28]
   862aa:	f854 5b04 	ldr.w	r5, [r4], #4
   862ae:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   862b2:	2d00      	cmp	r5, #0
   862b4:	f000 86ee 	beq.w	87094 <_svfprintf_r+0x12d4>
   862b8:	1c5a      	adds	r2, r3, #1
   862ba:	f000 8560 	beq.w	86d7e <_svfprintf_r+0xfbe>
   862be:	461a      	mov	r2, r3
   862c0:	4649      	mov	r1, r9
   862c2:	4628      	mov	r0, r5
   862c4:	f004 fae8 	bl	8a898 <memchr>
   862c8:	900d      	str	r0, [sp, #52]	; 0x34
   862ca:	2800      	cmp	r0, #0
   862cc:	f001 809e 	beq.w	8740c <_svfprintf_r+0x164c>
   862d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   862d2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   862d6:	1b5b      	subs	r3, r3, r5
   862d8:	930b      	str	r3, [sp, #44]	; 0x2c
   862da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   862de:	f8cd 901c 	str.w	r9, [sp, #28]
   862e2:	940e      	str	r4, [sp, #56]	; 0x38
   862e4:	9306      	str	r3, [sp, #24]
   862e6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   862ea:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   862ee:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   862f2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   862f6:	e66b      	b.n	85fd0 <_svfprintf_r+0x210>
   862f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   862fa:	425b      	negs	r3, r3
   862fc:	9309      	str	r3, [sp, #36]	; 0x24
   862fe:	f89a 6000 	ldrb.w	r6, [sl]
   86302:	f047 0704 	orr.w	r7, r7, #4
   86306:	e5aa      	b.n	85e5e <_svfprintf_r+0x9e>
   86308:	f047 0b10 	orr.w	fp, r7, #16
   8630c:	f01b 0920 	ands.w	r9, fp, #32
   86310:	f000 83aa 	beq.w	86a68 <_svfprintf_r+0xca8>
   86314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86316:	3307      	adds	r3, #7
   86318:	f023 0307 	bic.w	r3, r3, #7
   8631c:	461a      	mov	r2, r3
   8631e:	f852 4b08 	ldr.w	r4, [r2], #8
   86322:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86326:	920e      	str	r2, [sp, #56]	; 0x38
   86328:	2301      	movs	r3, #1
   8632a:	e669      	b.n	86000 <_svfprintf_r+0x240>
   8632c:	2230      	movs	r2, #48	; 0x30
   8632e:	2678      	movs	r6, #120	; 0x78
   86330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86332:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86336:	f853 4b04 	ldr.w	r4, [r3], #4
   8633a:	4a68      	ldr	r2, [pc, #416]	; (864dc <_svfprintf_r+0x71c>)
   8633c:	930e      	str	r3, [sp, #56]	; 0x38
   8633e:	f04f 0900 	mov.w	r9, #0
   86342:	2302      	movs	r3, #2
   86344:	f047 0b02 	orr.w	fp, r7, #2
   86348:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   8634c:	9218      	str	r2, [sp, #96]	; 0x60
   8634e:	e657      	b.n	86000 <_svfprintf_r+0x240>
   86350:	06bd      	lsls	r5, r7, #26
   86352:	f100 83d6 	bmi.w	86b02 <_svfprintf_r+0xd42>
   86356:	06fc      	lsls	r4, r7, #27
   86358:	f100 8693 	bmi.w	87082 <_svfprintf_r+0x12c2>
   8635c:	0678      	lsls	r0, r7, #25
   8635e:	f100 875d 	bmi.w	8721c <_svfprintf_r+0x145c>
   86362:	05b9      	lsls	r1, r7, #22
   86364:	f140 868d 	bpl.w	87082 <_svfprintf_r+0x12c2>
   86368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8636a:	9908      	ldr	r1, [sp, #32]
   8636c:	f853 2b04 	ldr.w	r2, [r3], #4
   86370:	4655      	mov	r5, sl
   86372:	7011      	strb	r1, [r2, #0]
   86374:	930e      	str	r3, [sp, #56]	; 0x38
   86376:	e71b      	b.n	861b0 <_svfprintf_r+0x3f0>
   86378:	f89a 6000 	ldrb.w	r6, [sl]
   8637c:	2e6c      	cmp	r6, #108	; 0x6c
   8637e:	bf03      	ittte	eq
   86380:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   86384:	f047 0720 	orreq.w	r7, r7, #32
   86388:	f10a 0a01 	addeq.w	sl, sl, #1
   8638c:	f047 0710 	orrne.w	r7, r7, #16
   86390:	e565      	b.n	85e5e <_svfprintf_r+0x9e>
   86392:	f89a 6000 	ldrb.w	r6, [sl]
   86396:	2e68      	cmp	r6, #104	; 0x68
   86398:	bf03      	ittte	eq
   8639a:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   8639e:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   863a2:	f10a 0a01 	addeq.w	sl, sl, #1
   863a6:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   863aa:	e558      	b.n	85e5e <_svfprintf_r+0x9e>
   863ac:	f89a 6000 	ldrb.w	r6, [sl]
   863b0:	f047 0708 	orr.w	r7, r7, #8
   863b4:	e553      	b.n	85e5e <_svfprintf_r+0x9e>
   863b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   863b8:	4630      	mov	r0, r6
   863ba:	f003 fef7 	bl	8a1ac <_localeconv_r>
   863be:	6843      	ldr	r3, [r0, #4]
   863c0:	4618      	mov	r0, r3
   863c2:	931b      	str	r3, [sp, #108]	; 0x6c
   863c4:	f7ff fc9a 	bl	85cfc <strlen>
   863c8:	4603      	mov	r3, r0
   863ca:	4630      	mov	r0, r6
   863cc:	931c      	str	r3, [sp, #112]	; 0x70
   863ce:	461e      	mov	r6, r3
   863d0:	f003 feec 	bl	8a1ac <_localeconv_r>
   863d4:	6883      	ldr	r3, [r0, #8]
   863d6:	9319      	str	r3, [sp, #100]	; 0x64
   863d8:	2e00      	cmp	r6, #0
   863da:	f43f adbb 	beq.w	85f54 <_svfprintf_r+0x194>
   863de:	9b19      	ldr	r3, [sp, #100]	; 0x64
   863e0:	2b00      	cmp	r3, #0
   863e2:	f43f adb7 	beq.w	85f54 <_svfprintf_r+0x194>
   863e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   863e8:	781b      	ldrb	r3, [r3, #0]
   863ea:	2b00      	cmp	r3, #0
   863ec:	f43f adb2 	beq.w	85f54 <_svfprintf_r+0x194>
   863f0:	f89a 6000 	ldrb.w	r6, [sl]
   863f4:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   863f8:	e531      	b.n	85e5e <_svfprintf_r+0x9e>
   863fa:	f89a 6000 	ldrb.w	r6, [sl]
   863fe:	f047 0701 	orr.w	r7, r7, #1
   86402:	e52c      	b.n	85e5e <_svfprintf_r+0x9e>
   86404:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   86408:	2b00      	cmp	r3, #0
   8640a:	f47f ada3 	bne.w	85f54 <_svfprintf_r+0x194>
   8640e:	f89a 6000 	ldrb.w	r6, [sl]
   86412:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   86416:	e522      	b.n	85e5e <_svfprintf_r+0x9e>
   86418:	f89a 6000 	ldrb.w	r6, [sl]
   8641c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   86420:	e51d      	b.n	85e5e <_svfprintf_r+0x9e>
   86422:	4652      	mov	r2, sl
   86424:	f812 6b01 	ldrb.w	r6, [r2], #1
   86428:	2e2a      	cmp	r6, #42	; 0x2a
   8642a:	f001 81eb 	beq.w	87804 <_svfprintf_r+0x1a44>
   8642e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86432:	2b09      	cmp	r3, #9
   86434:	4692      	mov	sl, r2
   86436:	bf98      	it	ls
   86438:	2200      	movls	r2, #0
   8643a:	f201 8003 	bhi.w	87444 <_svfprintf_r+0x1684>
   8643e:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86442:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86446:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8644a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8644e:	2b09      	cmp	r3, #9
   86450:	d9f5      	bls.n	8643e <_svfprintf_r+0x67e>
   86452:	9207      	str	r2, [sp, #28]
   86454:	e505      	b.n	85e62 <_svfprintf_r+0xa2>
   86456:	f89a 6000 	ldrb.w	r6, [sl]
   8645a:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   8645e:	e4fe      	b.n	85e5e <_svfprintf_r+0x9e>
   86460:	46bb      	mov	fp, r7
   86462:	2b01      	cmp	r3, #1
   86464:	f43f ad9a 	beq.w	85f9c <_svfprintf_r+0x1dc>
   86468:	2b02      	cmp	r3, #2
   8646a:	ad54      	add	r5, sp, #336	; 0x150
   8646c:	d112      	bne.n	86494 <_svfprintf_r+0x6d4>
   8646e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86470:	f004 030f 	and.w	r3, r4, #15
   86474:	5cd3      	ldrb	r3, [r2, r3]
   86476:	0924      	lsrs	r4, r4, #4
   86478:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   8647c:	ea4f 1919 	mov.w	r9, r9, lsr #4
   86480:	f805 3d01 	strb.w	r3, [r5, #-1]!
   86484:	ea54 0309 	orrs.w	r3, r4, r9
   86488:	d1f2      	bne.n	86470 <_svfprintf_r+0x6b0>
   8648a:	ab54      	add	r3, sp, #336	; 0x150
   8648c:	1b5b      	subs	r3, r3, r5
   8648e:	465f      	mov	r7, fp
   86490:	930b      	str	r3, [sp, #44]	; 0x2c
   86492:	e590      	b.n	85fb6 <_svfprintf_r+0x1f6>
   86494:	f004 0307 	and.w	r3, r4, #7
   86498:	08e4      	lsrs	r4, r4, #3
   8649a:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   8649e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   864a2:	3330      	adds	r3, #48	; 0x30
   864a4:	ea54 0109 	orrs.w	r1, r4, r9
   864a8:	462a      	mov	r2, r5
   864aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
   864ae:	d1f1      	bne.n	86494 <_svfprintf_r+0x6d4>
   864b0:	f01b 0f01 	tst.w	fp, #1
   864b4:	d0e9      	beq.n	8648a <_svfprintf_r+0x6ca>
   864b6:	2b30      	cmp	r3, #48	; 0x30
   864b8:	d0e7      	beq.n	8648a <_svfprintf_r+0x6ca>
   864ba:	2330      	movs	r3, #48	; 0x30
   864bc:	3a02      	subs	r2, #2
   864be:	f805 3c01 	strb.w	r3, [r5, #-1]
   864c2:	ab54      	add	r3, sp, #336	; 0x150
   864c4:	1a9b      	subs	r3, r3, r2
   864c6:	465f      	mov	r7, fp
   864c8:	4615      	mov	r5, r2
   864ca:	930b      	str	r3, [sp, #44]	; 0x2c
   864cc:	e573      	b.n	85fb6 <_svfprintf_r+0x1f6>
   864ce:	bf00      	nop
   864d0:	7fefffff 	.word	0x7fefffff
   864d4:	0008c9bc 	.word	0x0008c9bc
   864d8:	0008c9c0 	.word	0x0008c9c0
   864dc:	0008c9cc 	.word	0x0008c9cc
   864e0:	2e65      	cmp	r6, #101	; 0x65
   864e2:	f340 80e9 	ble.w	866b8 <_svfprintf_r+0x8f8>
   864e6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   864ea:	2200      	movs	r2, #0
   864ec:	2300      	movs	r3, #0
   864ee:	f005 ffd3 	bl	8c498 <__aeabi_dcmpeq>
   864f2:	2800      	cmp	r0, #0
   864f4:	f000 81d2 	beq.w	8689c <_svfprintf_r+0xadc>
   864f8:	2301      	movs	r3, #1
   864fa:	f8c8 3004 	str.w	r3, [r8, #4]
   864fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86500:	4abf      	ldr	r2, [pc, #764]	; (86800 <_svfprintf_r+0xa40>)
   86502:	3301      	adds	r3, #1
   86504:	3401      	adds	r4, #1
   86506:	2b07      	cmp	r3, #7
   86508:	942a      	str	r4, [sp, #168]	; 0xa8
   8650a:	9329      	str	r3, [sp, #164]	; 0xa4
   8650c:	f8c8 2000 	str.w	r2, [r8]
   86510:	f300 857a 	bgt.w	87008 <_svfprintf_r+0x1248>
   86514:	f108 0808 	add.w	r8, r8, #8
   86518:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8651a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8651c:	4293      	cmp	r3, r2
   8651e:	f280 82d7 	bge.w	86ad0 <_svfprintf_r+0xd10>
   86522:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86526:	441c      	add	r4, r3
   86528:	e9c8 2300 	strd	r2, r3, [r8]
   8652c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8652e:	942a      	str	r4, [sp, #168]	; 0xa8
   86530:	3301      	adds	r3, #1
   86532:	2b07      	cmp	r3, #7
   86534:	9329      	str	r3, [sp, #164]	; 0xa4
   86536:	f300 83dd 	bgt.w	86cf4 <_svfprintf_r+0xf34>
   8653a:	f108 0808 	add.w	r8, r8, #8
   8653e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86540:	1e5d      	subs	r5, r3, #1
   86542:	2d00      	cmp	r5, #0
   86544:	f77f ae16 	ble.w	86174 <_svfprintf_r+0x3b4>
   86548:	2d10      	cmp	r5, #16
   8654a:	f341 8141 	ble.w	877d0 <_svfprintf_r+0x1a10>
   8654e:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 86804 <_svfprintf_r+0xa44>
   86552:	4622      	mov	r2, r4
   86554:	4649      	mov	r1, r9
   86556:	2610      	movs	r6, #16
   86558:	46b9      	mov	r9, r7
   8655a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8655c:	460f      	mov	r7, r1
   8655e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86562:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86564:	e005      	b.n	86572 <_svfprintf_r+0x7b2>
   86566:	f108 0808 	add.w	r8, r8, #8
   8656a:	3d10      	subs	r5, #16
   8656c:	2d10      	cmp	r5, #16
   8656e:	f340 8558 	ble.w	87022 <_svfprintf_r+0x1262>
   86572:	3301      	adds	r3, #1
   86574:	3210      	adds	r2, #16
   86576:	2b07      	cmp	r3, #7
   86578:	e9c8 7600 	strd	r7, r6, [r8]
   8657c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86580:	ddf1      	ble.n	86566 <_svfprintf_r+0x7a6>
   86582:	4621      	mov	r1, r4
   86584:	4658      	mov	r0, fp
   86586:	aa28      	add	r2, sp, #160	; 0xa0
   86588:	f005 f878 	bl	8b67c <__ssprint_r>
   8658c:	2800      	cmp	r0, #0
   8658e:	f47f ad7a 	bne.w	86086 <_svfprintf_r+0x2c6>
   86592:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86596:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8659a:	e7e6      	b.n	8656a <_svfprintf_r+0x7aa>
   8659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8659e:	9a06      	ldr	r2, [sp, #24]
   865a0:	eba3 0b02 	sub.w	fp, r3, r2
   865a4:	f1bb 0f00 	cmp.w	fp, #0
   865a8:	f77f adca 	ble.w	86140 <_svfprintf_r+0x380>
   865ac:	f1bb 0f10 	cmp.w	fp, #16
   865b0:	f341 8005 	ble.w	875be <_svfprintf_r+0x17fe>
   865b4:	f8df 924c 	ldr.w	r9, [pc, #588]	; 86804 <_svfprintf_r+0xa44>
   865b8:	4641      	mov	r1, r8
   865ba:	4620      	mov	r0, r4
   865bc:	46a8      	mov	r8, r5
   865be:	464c      	mov	r4, r9
   865c0:	2310      	movs	r3, #16
   865c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   865c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   865c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   865ca:	e006      	b.n	865da <_svfprintf_r+0x81a>
   865cc:	f1ab 0b10 	sub.w	fp, fp, #16
   865d0:	f1bb 0f10 	cmp.w	fp, #16
   865d4:	f101 0108 	add.w	r1, r1, #8
   865d8:	dd19      	ble.n	8660e <_svfprintf_r+0x84e>
   865da:	3201      	adds	r2, #1
   865dc:	3010      	adds	r0, #16
   865de:	2a07      	cmp	r2, #7
   865e0:	e9c1 4300 	strd	r4, r3, [r1]
   865e4:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   865e8:	ddf0      	ble.n	865cc <_svfprintf_r+0x80c>
   865ea:	4629      	mov	r1, r5
   865ec:	4648      	mov	r0, r9
   865ee:	aa28      	add	r2, sp, #160	; 0xa0
   865f0:	f005 f844 	bl	8b67c <__ssprint_r>
   865f4:	2800      	cmp	r0, #0
   865f6:	f47f ad46 	bne.w	86086 <_svfprintf_r+0x2c6>
   865fa:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   865fe:	f1ab 0b10 	sub.w	fp, fp, #16
   86602:	f1bb 0f10 	cmp.w	fp, #16
   86606:	f04f 0310 	mov.w	r3, #16
   8660a:	a92b      	add	r1, sp, #172	; 0xac
   8660c:	dce5      	bgt.n	865da <_svfprintf_r+0x81a>
   8660e:	4645      	mov	r5, r8
   86610:	46a1      	mov	r9, r4
   86612:	4688      	mov	r8, r1
   86614:	4604      	mov	r4, r0
   86616:	3201      	adds	r2, #1
   86618:	445c      	add	r4, fp
   8661a:	2a07      	cmp	r2, #7
   8661c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86620:	f8c8 9000 	str.w	r9, [r8]
   86624:	f8c8 b004 	str.w	fp, [r8, #4]
   86628:	f300 8518 	bgt.w	8705c <_svfprintf_r+0x129c>
   8662c:	f108 0808 	add.w	r8, r8, #8
   86630:	e586      	b.n	86140 <_svfprintf_r+0x380>
   86632:	f1bb 0f10 	cmp.w	fp, #16
   86636:	f340 8597 	ble.w	87168 <_svfprintf_r+0x13a8>
   8663a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 86804 <_svfprintf_r+0xa44>
   8663e:	4641      	mov	r1, r8
   86640:	4620      	mov	r0, r4
   86642:	46a8      	mov	r8, r5
   86644:	464c      	mov	r4, r9
   86646:	2310      	movs	r3, #16
   86648:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8664a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8664c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86650:	e006      	b.n	86660 <_svfprintf_r+0x8a0>
   86652:	f1ab 0b10 	sub.w	fp, fp, #16
   86656:	f1bb 0f10 	cmp.w	fp, #16
   8665a:	f101 0108 	add.w	r1, r1, #8
   8665e:	dd19      	ble.n	86694 <_svfprintf_r+0x8d4>
   86660:	3201      	adds	r2, #1
   86662:	3010      	adds	r0, #16
   86664:	2a07      	cmp	r2, #7
   86666:	e9c1 4300 	strd	r4, r3, [r1]
   8666a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   8666e:	ddf0      	ble.n	86652 <_svfprintf_r+0x892>
   86670:	4629      	mov	r1, r5
   86672:	4648      	mov	r0, r9
   86674:	aa28      	add	r2, sp, #160	; 0xa0
   86676:	f005 f801 	bl	8b67c <__ssprint_r>
   8667a:	2800      	cmp	r0, #0
   8667c:	f47f ad03 	bne.w	86086 <_svfprintf_r+0x2c6>
   86680:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   86684:	f1ab 0b10 	sub.w	fp, fp, #16
   86688:	f1bb 0f10 	cmp.w	fp, #16
   8668c:	f04f 0310 	mov.w	r3, #16
   86690:	a92b      	add	r1, sp, #172	; 0xac
   86692:	dce5      	bgt.n	86660 <_svfprintf_r+0x8a0>
   86694:	4645      	mov	r5, r8
   86696:	46a1      	mov	r9, r4
   86698:	4688      	mov	r8, r1
   8669a:	4604      	mov	r4, r0
   8669c:	3201      	adds	r2, #1
   8669e:	445c      	add	r4, fp
   866a0:	2a07      	cmp	r2, #7
   866a2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   866a6:	f8c8 9000 	str.w	r9, [r8]
   866aa:	f8c8 b004 	str.w	fp, [r8, #4]
   866ae:	f300 81ce 	bgt.w	86a4e <_svfprintf_r+0xc8e>
   866b2:	f108 0808 	add.w	r8, r8, #8
   866b6:	e54b      	b.n	86150 <_svfprintf_r+0x390>
   866b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   866ba:	2b01      	cmp	r3, #1
   866bc:	f340 817e 	ble.w	869bc <_svfprintf_r+0xbfc>
   866c0:	2301      	movs	r3, #1
   866c2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   866c4:	3401      	adds	r4, #1
   866c6:	441e      	add	r6, r3
   866c8:	2e07      	cmp	r6, #7
   866ca:	f8c8 5000 	str.w	r5, [r8]
   866ce:	942a      	str	r4, [sp, #168]	; 0xa8
   866d0:	f8c8 3004 	str.w	r3, [r8, #4]
   866d4:	9629      	str	r6, [sp, #164]	; 0xa4
   866d6:	f300 81e1 	bgt.w	86a9c <_svfprintf_r+0xcdc>
   866da:	f108 0808 	add.w	r8, r8, #8
   866de:	9b16      	ldr	r3, [sp, #88]	; 0x58
   866e0:	3601      	adds	r6, #1
   866e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   866e4:	441c      	add	r4, r3
   866e6:	2e07      	cmp	r6, #7
   866e8:	e9c8 2300 	strd	r2, r3, [r8]
   866ec:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   866f0:	f300 81e1 	bgt.w	86ab6 <_svfprintf_r+0xcf6>
   866f4:	f108 0808 	add.w	r8, r8, #8
   866f8:	2200      	movs	r2, #0
   866fa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   866fe:	2300      	movs	r3, #0
   86700:	f005 feca 	bl	8c498 <__aeabi_dcmpeq>
   86704:	2800      	cmp	r0, #0
   86706:	f040 8176 	bne.w	869f6 <_svfprintf_r+0xc36>
   8670a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8670c:	3601      	adds	r6, #1
   8670e:	3b01      	subs	r3, #1
   86710:	3501      	adds	r5, #1
   86712:	441c      	add	r4, r3
   86714:	2e07      	cmp	r6, #7
   86716:	f8c8 5000 	str.w	r5, [r8]
   8671a:	9629      	str	r6, [sp, #164]	; 0xa4
   8671c:	f8c8 3004 	str.w	r3, [r8, #4]
   86720:	942a      	str	r4, [sp, #168]	; 0xa8
   86722:	f300 815b 	bgt.w	869dc <_svfprintf_r+0xc1c>
   86726:	f108 0808 	add.w	r8, r8, #8
   8672a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8672c:	3601      	adds	r6, #1
   8672e:	441c      	add	r4, r3
   86730:	f8c8 3004 	str.w	r3, [r8, #4]
   86734:	2e07      	cmp	r6, #7
   86736:	ab24      	add	r3, sp, #144	; 0x90
   86738:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   8673c:	f8c8 3000 	str.w	r3, [r8]
   86740:	f77f ad16 	ble.w	86170 <_svfprintf_r+0x3b0>
   86744:	990c      	ldr	r1, [sp, #48]	; 0x30
   86746:	980a      	ldr	r0, [sp, #40]	; 0x28
   86748:	aa28      	add	r2, sp, #160	; 0xa0
   8674a:	f004 ff97 	bl	8b67c <__ssprint_r>
   8674e:	2800      	cmp	r0, #0
   86750:	f47f ac99 	bne.w	86086 <_svfprintf_r+0x2c6>
   86754:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86756:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8675a:	e50b      	b.n	86174 <_svfprintf_r+0x3b4>
   8675c:	f1b9 0f10 	cmp.w	r9, #16
   86760:	f340 8650 	ble.w	87404 <_svfprintf_r+0x1644>
   86764:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86768:	4640      	mov	r0, r8
   8676a:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   8676e:	46b8      	mov	r8, r7
   86770:	2410      	movs	r4, #16
   86772:	464f      	mov	r7, r9
   86774:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86776:	46a9      	mov	r9, r5
   86778:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8677a:	e004      	b.n	86786 <_svfprintf_r+0x9c6>
   8677c:	3f10      	subs	r7, #16
   8677e:	2f10      	cmp	r7, #16
   86780:	f100 0008 	add.w	r0, r0, #8
   86784:	dd16      	ble.n	867b4 <_svfprintf_r+0x9f4>
   86786:	3201      	adds	r2, #1
   86788:	4b1f      	ldr	r3, [pc, #124]	; (86808 <_svfprintf_r+0xa48>)
   8678a:	3110      	adds	r1, #16
   8678c:	2a07      	cmp	r2, #7
   8678e:	e9c0 3400 	strd	r3, r4, [r0]
   86792:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   86796:	ddf1      	ble.n	8677c <_svfprintf_r+0x9bc>
   86798:	4631      	mov	r1, r6
   8679a:	4628      	mov	r0, r5
   8679c:	aa28      	add	r2, sp, #160	; 0xa0
   8679e:	f004 ff6d 	bl	8b67c <__ssprint_r>
   867a2:	2800      	cmp	r0, #0
   867a4:	f47f ac6f 	bne.w	86086 <_svfprintf_r+0x2c6>
   867a8:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   867ac:	3f10      	subs	r7, #16
   867ae:	2f10      	cmp	r7, #16
   867b0:	a82b      	add	r0, sp, #172	; 0xac
   867b2:	dce8      	bgt.n	86786 <_svfprintf_r+0x9c6>
   867b4:	464d      	mov	r5, r9
   867b6:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   867ba:	46b9      	mov	r9, r7
   867bc:	4647      	mov	r7, r8
   867be:	4680      	mov	r8, r0
   867c0:	eb09 0401 	add.w	r4, r9, r1
   867c4:	3201      	adds	r2, #1
   867c6:	4910      	ldr	r1, [pc, #64]	; (86808 <_svfprintf_r+0xa48>)
   867c8:	2a07      	cmp	r2, #7
   867ca:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   867ce:	f8c8 9004 	str.w	r9, [r8, #4]
   867d2:	f8c8 1000 	str.w	r1, [r8]
   867d6:	f300 83c3 	bgt.w	86f60 <_svfprintf_r+0x11a0>
   867da:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   867de:	f108 0808 	add.w	r8, r8, #8
   867e2:	e486      	b.n	860f2 <_svfprintf_r+0x332>
   867e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   867e6:	980a      	ldr	r0, [sp, #40]	; 0x28
   867e8:	aa28      	add	r2, sp, #160	; 0xa0
   867ea:	931d      	str	r3, [sp, #116]	; 0x74
   867ec:	f004 ff46 	bl	8b67c <__ssprint_r>
   867f0:	2800      	cmp	r0, #0
   867f2:	f47f ac48 	bne.w	86086 <_svfprintf_r+0x2c6>
   867f6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   867f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   867fa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   867fe:	e48a      	b.n	86116 <_svfprintf_r+0x356>
   86800:	0008c9fc 	.word	0x0008c9fc
   86804:	0008ca10 	.word	0x0008ca10
   86808:	0008ca00 	.word	0x0008ca00
   8680c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8680e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86810:	aa28      	add	r2, sp, #160	; 0xa0
   86812:	f004 ff33 	bl	8b67c <__ssprint_r>
   86816:	2800      	cmp	r0, #0
   86818:	f47f ac35 	bne.w	86086 <_svfprintf_r+0x2c6>
   8681c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8681e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86822:	e489      	b.n	86138 <_svfprintf_r+0x378>
   86824:	2d10      	cmp	r5, #16
   86826:	f340 86c4 	ble.w	875b2 <_svfprintf_r+0x17f2>
   8682a:	2610      	movs	r6, #16
   8682c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8682e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   86830:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   86834:	e004      	b.n	86840 <_svfprintf_r+0xa80>
   86836:	3d10      	subs	r5, #16
   86838:	2d10      	cmp	r5, #16
   8683a:	f108 0808 	add.w	r8, r8, #8
   8683e:	dd17      	ble.n	86870 <_svfprintf_r+0xab0>
   86840:	3301      	adds	r3, #1
   86842:	4ab8      	ldr	r2, [pc, #736]	; (86b24 <_svfprintf_r+0xd64>)
   86844:	3410      	adds	r4, #16
   86846:	2b07      	cmp	r3, #7
   86848:	e9c8 2600 	strd	r2, r6, [r8]
   8684c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86850:	ddf1      	ble.n	86836 <_svfprintf_r+0xa76>
   86852:	4649      	mov	r1, r9
   86854:	4638      	mov	r0, r7
   86856:	aa28      	add	r2, sp, #160	; 0xa0
   86858:	f004 ff10 	bl	8b67c <__ssprint_r>
   8685c:	2800      	cmp	r0, #0
   8685e:	f47f ac12 	bne.w	86086 <_svfprintf_r+0x2c6>
   86862:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   86866:	3d10      	subs	r5, #16
   86868:	2d10      	cmp	r5, #16
   8686a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8686e:	dce7      	bgt.n	86840 <_svfprintf_r+0xa80>
   86870:	3301      	adds	r3, #1
   86872:	4aac      	ldr	r2, [pc, #688]	; (86b24 <_svfprintf_r+0xd64>)
   86874:	442c      	add	r4, r5
   86876:	2b07      	cmp	r3, #7
   86878:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8687c:	f8c8 5004 	str.w	r5, [r8, #4]
   86880:	f8c8 2000 	str.w	r2, [r8]
   86884:	f77f ac7e 	ble.w	86184 <_svfprintf_r+0x3c4>
   86888:	990c      	ldr	r1, [sp, #48]	; 0x30
   8688a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8688c:	aa28      	add	r2, sp, #160	; 0xa0
   8688e:	f004 fef5 	bl	8b67c <__ssprint_r>
   86892:	2800      	cmp	r0, #0
   86894:	f47f abf7 	bne.w	86086 <_svfprintf_r+0x2c6>
   86898:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8689a:	e473      	b.n	86184 <_svfprintf_r+0x3c4>
   8689c:	9922      	ldr	r1, [sp, #136]	; 0x88
   8689e:	2900      	cmp	r1, #0
   868a0:	f340 836f 	ble.w	86f82 <_svfprintf_r+0x11c2>
   868a4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   868a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   868aa:	4599      	cmp	r9, r3
   868ac:	bfa8      	it	ge
   868ae:	4699      	movge	r9, r3
   868b0:	f1b9 0f00 	cmp.w	r9, #0
   868b4:	dd0b      	ble.n	868ce <_svfprintf_r+0xb0e>
   868b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   868b8:	444c      	add	r4, r9
   868ba:	3301      	adds	r3, #1
   868bc:	2b07      	cmp	r3, #7
   868be:	e9c8 5900 	strd	r5, r9, [r8]
   868c2:	942a      	str	r4, [sp, #168]	; 0xa8
   868c4:	9329      	str	r3, [sp, #164]	; 0xa4
   868c6:	f300 851d 	bgt.w	87304 <_svfprintf_r+0x1544>
   868ca:	f108 0808 	add.w	r8, r8, #8
   868ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
   868d0:	f1b9 0f00 	cmp.w	r9, #0
   868d4:	bfa8      	it	ge
   868d6:	eba6 0609 	subge.w	r6, r6, r9
   868da:	2e00      	cmp	r6, #0
   868dc:	f300 8225 	bgt.w	86d2a <_svfprintf_r+0xf6a>
   868e0:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   868e4:	0578      	lsls	r0, r7, #21
   868e6:	44ab      	add	fp, r5
   868e8:	f100 825f 	bmi.w	86daa <_svfprintf_r+0xfea>
   868ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   868ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   868f0:	4293      	cmp	r3, r2
   868f2:	db02      	blt.n	868fa <_svfprintf_r+0xb3a>
   868f4:	07f9      	lsls	r1, r7, #31
   868f6:	f140 8476 	bpl.w	871e6 <_svfprintf_r+0x1426>
   868fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   868fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   868fe:	4414      	add	r4, r2
   86900:	e9c8 1200 	strd	r1, r2, [r8]
   86904:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86906:	942a      	str	r4, [sp, #168]	; 0xa8
   86908:	3201      	adds	r2, #1
   8690a:	2a07      	cmp	r2, #7
   8690c:	9229      	str	r2, [sp, #164]	; 0xa4
   8690e:	f300 8513 	bgt.w	87338 <_svfprintf_r+0x1578>
   86912:	f108 0808 	add.w	r8, r8, #8
   86916:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86918:	18ae      	adds	r6, r5, r2
   8691a:	eba6 060b 	sub.w	r6, r6, fp
   8691e:	1ad5      	subs	r5, r2, r3
   86920:	42ae      	cmp	r6, r5
   86922:	bfa8      	it	ge
   86924:	462e      	movge	r6, r5
   86926:	2e00      	cmp	r6, #0
   86928:	dd0d      	ble.n	86946 <_svfprintf_r+0xb86>
   8692a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8692c:	4434      	add	r4, r6
   8692e:	3301      	adds	r3, #1
   86930:	2b07      	cmp	r3, #7
   86932:	f8c8 b000 	str.w	fp, [r8]
   86936:	f8c8 6004 	str.w	r6, [r8, #4]
   8693a:	942a      	str	r4, [sp, #168]	; 0xa8
   8693c:	9329      	str	r3, [sp, #164]	; 0xa4
   8693e:	f300 8571 	bgt.w	87424 <_svfprintf_r+0x1664>
   86942:	f108 0808 	add.w	r8, r8, #8
   86946:	2e00      	cmp	r6, #0
   86948:	bfa8      	it	ge
   8694a:	1bad      	subge	r5, r5, r6
   8694c:	2d00      	cmp	r5, #0
   8694e:	f77f ac11 	ble.w	86174 <_svfprintf_r+0x3b4>
   86952:	2d10      	cmp	r5, #16
   86954:	f340 873c 	ble.w	877d0 <_svfprintf_r+0x1a10>
   86958:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 86b28 <_svfprintf_r+0xd68>
   8695c:	4622      	mov	r2, r4
   8695e:	4649      	mov	r1, r9
   86960:	2610      	movs	r6, #16
   86962:	46b9      	mov	r9, r7
   86964:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86966:	460f      	mov	r7, r1
   86968:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8696c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8696e:	e005      	b.n	8697c <_svfprintf_r+0xbbc>
   86970:	f108 0808 	add.w	r8, r8, #8
   86974:	3d10      	subs	r5, #16
   86976:	2d10      	cmp	r5, #16
   86978:	f340 8353 	ble.w	87022 <_svfprintf_r+0x1262>
   8697c:	3301      	adds	r3, #1
   8697e:	3210      	adds	r2, #16
   86980:	2b07      	cmp	r3, #7
   86982:	e9c8 7600 	strd	r7, r6, [r8]
   86986:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   8698a:	ddf1      	ble.n	86970 <_svfprintf_r+0xbb0>
   8698c:	4621      	mov	r1, r4
   8698e:	4658      	mov	r0, fp
   86990:	aa28      	add	r2, sp, #160	; 0xa0
   86992:	f004 fe73 	bl	8b67c <__ssprint_r>
   86996:	2800      	cmp	r0, #0
   86998:	f47f ab75 	bne.w	86086 <_svfprintf_r+0x2c6>
   8699c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   869a0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   869a4:	e7e6      	b.n	86974 <_svfprintf_r+0xbb4>
   869a6:	9b07      	ldr	r3, [sp, #28]
   869a8:	2b00      	cmp	r3, #0
   869aa:	f47f aafc 	bne.w	85fa6 <_svfprintf_r+0x1e6>
   869ae:	465f      	mov	r7, fp
   869b0:	2300      	movs	r3, #0
   869b2:	ad54      	add	r5, sp, #336	; 0x150
   869b4:	9307      	str	r3, [sp, #28]
   869b6:	930b      	str	r3, [sp, #44]	; 0x2c
   869b8:	f7ff bafd 	b.w	85fb6 <_svfprintf_r+0x1f6>
   869bc:	07fa      	lsls	r2, r7, #31
   869be:	f53f ae7f 	bmi.w	866c0 <_svfprintf_r+0x900>
   869c2:	2301      	movs	r3, #1
   869c4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   869c6:	3401      	adds	r4, #1
   869c8:	441e      	add	r6, r3
   869ca:	2e07      	cmp	r6, #7
   869cc:	f8c8 5000 	str.w	r5, [r8]
   869d0:	942a      	str	r4, [sp, #168]	; 0xa8
   869d2:	f8c8 3004 	str.w	r3, [r8, #4]
   869d6:	9629      	str	r6, [sp, #164]	; 0xa4
   869d8:	f77f aea5 	ble.w	86726 <_svfprintf_r+0x966>
   869dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   869de:	980a      	ldr	r0, [sp, #40]	; 0x28
   869e0:	aa28      	add	r2, sp, #160	; 0xa0
   869e2:	f004 fe4b 	bl	8b67c <__ssprint_r>
   869e6:	2800      	cmp	r0, #0
   869e8:	f47f ab4d 	bne.w	86086 <_svfprintf_r+0x2c6>
   869ec:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   869f0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   869f4:	e699      	b.n	8672a <_svfprintf_r+0x96a>
   869f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869f8:	1e5d      	subs	r5, r3, #1
   869fa:	2d00      	cmp	r5, #0
   869fc:	f77f ae95 	ble.w	8672a <_svfprintf_r+0x96a>
   86a00:	2d10      	cmp	r5, #16
   86a02:	f340 86df 	ble.w	877c4 <_svfprintf_r+0x1a04>
   86a06:	4622      	mov	r2, r4
   86a08:	9707      	str	r7, [sp, #28]
   86a0a:	f04f 0b10 	mov.w	fp, #16
   86a0e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 86b28 <_svfprintf_r+0xd68>
   86a12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86a14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86a16:	e005      	b.n	86a24 <_svfprintf_r+0xc64>
   86a18:	f108 0808 	add.w	r8, r8, #8
   86a1c:	3d10      	subs	r5, #16
   86a1e:	2d10      	cmp	r5, #16
   86a20:	f340 837f 	ble.w	87122 <_svfprintf_r+0x1362>
   86a24:	3601      	adds	r6, #1
   86a26:	3210      	adds	r2, #16
   86a28:	2e07      	cmp	r6, #7
   86a2a:	e9c8 9b00 	strd	r9, fp, [r8]
   86a2e:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   86a32:	ddf1      	ble.n	86a18 <_svfprintf_r+0xc58>
   86a34:	4639      	mov	r1, r7
   86a36:	4620      	mov	r0, r4
   86a38:	aa28      	add	r2, sp, #160	; 0xa0
   86a3a:	f004 fe1f 	bl	8b67c <__ssprint_r>
   86a3e:	2800      	cmp	r0, #0
   86a40:	f47f ab21 	bne.w	86086 <_svfprintf_r+0x2c6>
   86a44:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   86a48:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a4c:	e7e6      	b.n	86a1c <_svfprintf_r+0xc5c>
   86a4e:	990c      	ldr	r1, [sp, #48]	; 0x30
   86a50:	980a      	ldr	r0, [sp, #40]	; 0x28
   86a52:	aa28      	add	r2, sp, #160	; 0xa0
   86a54:	f004 fe12 	bl	8b67c <__ssprint_r>
   86a58:	2800      	cmp	r0, #0
   86a5a:	f47f ab14 	bne.w	86086 <_svfprintf_r+0x2c6>
   86a5e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86a60:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a64:	f7ff bb74 	b.w	86150 <_svfprintf_r+0x390>
   86a68:	f01b 0310 	ands.w	r3, fp, #16
   86a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86a6e:	d13a      	bne.n	86ae6 <_svfprintf_r+0xd26>
   86a70:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   86a74:	d033      	beq.n	86ade <_svfprintf_r+0xd1e>
   86a76:	f852 4b04 	ldr.w	r4, [r2], #4
   86a7a:	4699      	mov	r9, r3
   86a7c:	920e      	str	r2, [sp, #56]	; 0x38
   86a7e:	2301      	movs	r3, #1
   86a80:	b2a4      	uxth	r4, r4
   86a82:	f7ff babd 	b.w	86000 <_svfprintf_r+0x240>
   86a86:	232d      	movs	r3, #45	; 0x2d
   86a88:	4264      	negs	r4, r4
   86a8a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86a8e:	46bb      	mov	fp, r7
   86a90:	f04f 0301 	mov.w	r3, #1
   86a94:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   86a98:	f7ff bab5 	b.w	86006 <_svfprintf_r+0x246>
   86a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
   86a9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86aa0:	aa28      	add	r2, sp, #160	; 0xa0
   86aa2:	f004 fdeb 	bl	8b67c <__ssprint_r>
   86aa6:	2800      	cmp	r0, #0
   86aa8:	f47f aaed 	bne.w	86086 <_svfprintf_r+0x2c6>
   86aac:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86ab0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ab4:	e613      	b.n	866de <_svfprintf_r+0x91e>
   86ab6:	990c      	ldr	r1, [sp, #48]	; 0x30
   86ab8:	980a      	ldr	r0, [sp, #40]	; 0x28
   86aba:	aa28      	add	r2, sp, #160	; 0xa0
   86abc:	f004 fdde 	bl	8b67c <__ssprint_r>
   86ac0:	2800      	cmp	r0, #0
   86ac2:	f47f aae0 	bne.w	86086 <_svfprintf_r+0x2c6>
   86ac6:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86aca:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ace:	e613      	b.n	866f8 <_svfprintf_r+0x938>
   86ad0:	07fd      	lsls	r5, r7, #31
   86ad2:	f57f ab4f 	bpl.w	86174 <_svfprintf_r+0x3b4>
   86ad6:	e524      	b.n	86522 <_svfprintf_r+0x762>
   86ad8:	ad54      	add	r5, sp, #336	; 0x150
   86ada:	f7ff ba6c 	b.w	85fb6 <_svfprintf_r+0x1f6>
   86ade:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   86ae2:	f040 838a 	bne.w	871fa <_svfprintf_r+0x143a>
   86ae6:	f852 4b04 	ldr.w	r4, [r2], #4
   86aea:	2301      	movs	r3, #1
   86aec:	920e      	str	r2, [sp, #56]	; 0x38
   86aee:	f7ff ba87 	b.w	86000 <_svfprintf_r+0x240>
   86af2:	05b8      	lsls	r0, r7, #22
   86af4:	f100 839b 	bmi.w	8722e <_svfprintf_r+0x146e>
   86af8:	ea4f 79e4 	mov.w	r9, r4, asr #31
   86afc:	464b      	mov	r3, r9
   86afe:	f7ff ba40 	b.w	85f82 <_svfprintf_r+0x1c2>
   86b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b04:	9808      	ldr	r0, [sp, #32]
   86b06:	f853 1b04 	ldr.w	r1, [r3], #4
   86b0a:	17c2      	asrs	r2, r0, #31
   86b0c:	4655      	mov	r5, sl
   86b0e:	e9c1 0200 	strd	r0, r2, [r1]
   86b12:	930e      	str	r3, [sp, #56]	; 0x38
   86b14:	f7ff bb4c 	b.w	861b0 <_svfprintf_r+0x3f0>
   86b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b1a:	f853 4b04 	ldr.w	r4, [r3], #4
   86b1e:	930e      	str	r3, [sp, #56]	; 0x38
   86b20:	f7ff ba6b 	b.w	85ffa <_svfprintf_r+0x23a>
   86b24:	0008ca00 	.word	0x0008ca00
   86b28:	0008ca10 	.word	0x0008ca10
   86b2c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86b30:	4602      	mov	r2, r0
   86b32:	460b      	mov	r3, r1
   86b34:	f005 fce2 	bl	8c4fc <__aeabi_dcmpun>
   86b38:	2800      	cmp	r0, #0
   86b3a:	f040 85e9 	bne.w	87710 <_svfprintf_r+0x1950>
   86b3e:	2e61      	cmp	r6, #97	; 0x61
   86b40:	f000 857d 	beq.w	8763e <_svfprintf_r+0x187e>
   86b44:	2e41      	cmp	r6, #65	; 0x41
   86b46:	f000 848b 	beq.w	87460 <_svfprintf_r+0x16a0>
   86b4a:	9b07      	ldr	r3, [sp, #28]
   86b4c:	3301      	adds	r3, #1
   86b4e:	f000 838f 	beq.w	87270 <_svfprintf_r+0x14b0>
   86b52:	f026 0320 	bic.w	r3, r6, #32
   86b56:	2b47      	cmp	r3, #71	; 0x47
   86b58:	9306      	str	r3, [sp, #24]
   86b5a:	f000 858f 	beq.w	8767c <_svfprintf_r+0x18bc>
   86b5e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86b62:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86b66:	930f      	str	r3, [sp, #60]	; 0x3c
   86b68:	4613      	mov	r3, r2
   86b6a:	2b00      	cmp	r3, #0
   86b6c:	f2c0 85b0 	blt.w	876d0 <_svfprintf_r+0x1910>
   86b70:	930b      	str	r3, [sp, #44]	; 0x2c
   86b72:	2300      	movs	r3, #0
   86b74:	468b      	mov	fp, r1
   86b76:	931d      	str	r3, [sp, #116]	; 0x74
   86b78:	930d      	str	r3, [sp, #52]	; 0x34
   86b7a:	9b06      	ldr	r3, [sp, #24]
   86b7c:	2b46      	cmp	r3, #70	; 0x46
   86b7e:	f000 83e9 	beq.w	87354 <_svfprintf_r+0x1594>
   86b82:	2b45      	cmp	r3, #69	; 0x45
   86b84:	f000 8546 	beq.w	87614 <_svfprintf_r+0x1854>
   86b88:	9907      	ldr	r1, [sp, #28]
   86b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86b8c:	9101      	str	r1, [sp, #4]
   86b8e:	2102      	movs	r1, #2
   86b90:	9100      	str	r1, [sp, #0]
   86b92:	a926      	add	r1, sp, #152	; 0x98
   86b94:	9104      	str	r1, [sp, #16]
   86b96:	a923      	add	r1, sp, #140	; 0x8c
   86b98:	9103      	str	r1, [sp, #12]
   86b9a:	a922      	add	r1, sp, #136	; 0x88
   86b9c:	465a      	mov	r2, fp
   86b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86ba0:	9102      	str	r1, [sp, #8]
   86ba2:	f001 feb9 	bl	88918 <_dtoa_r>
   86ba6:	9b06      	ldr	r3, [sp, #24]
   86ba8:	4605      	mov	r5, r0
   86baa:	2b47      	cmp	r3, #71	; 0x47
   86bac:	f040 863a 	bne.w	87824 <_svfprintf_r+0x1a64>
   86bb0:	f017 0f01 	tst.w	r7, #1
   86bb4:	46b9      	mov	r9, r7
   86bb6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86bb8:	f040 84fe 	bne.w	875b8 <_svfprintf_r+0x17f8>
   86bbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86bbe:	1b5b      	subs	r3, r3, r5
   86bc0:	9312      	str	r3, [sp, #72]	; 0x48
   86bc2:	9b06      	ldr	r3, [sp, #24]
   86bc4:	2b47      	cmp	r3, #71	; 0x47
   86bc6:	f000 836e 	beq.w	872a6 <_svfprintf_r+0x14e6>
   86bca:	9b06      	ldr	r3, [sp, #24]
   86bcc:	2b46      	cmp	r3, #70	; 0x46
   86bce:	f000 83f0 	beq.w	873b2 <_svfprintf_r+0x15f2>
   86bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86bd4:	9310      	str	r3, [sp, #64]	; 0x40
   86bd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86bd8:	9a06      	ldr	r2, [sp, #24]
   86bda:	3b01      	subs	r3, #1
   86bdc:	2a41      	cmp	r2, #65	; 0x41
   86bde:	9322      	str	r3, [sp, #136]	; 0x88
   86be0:	f000 85bb 	beq.w	8775a <_svfprintf_r+0x199a>
   86be4:	2100      	movs	r1, #0
   86be6:	b2f2      	uxtb	r2, r6
   86be8:	2b00      	cmp	r3, #0
   86bea:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   86bee:	bfb6      	itet	lt
   86bf0:	222d      	movlt	r2, #45	; 0x2d
   86bf2:	222b      	movge	r2, #43	; 0x2b
   86bf4:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   86bf6:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   86bfa:	bfb8      	it	lt
   86bfc:	f1c3 0301 	rsblt	r3, r3, #1
   86c00:	2b09      	cmp	r3, #9
   86c02:	f340 859b 	ble.w	8773c <_svfprintf_r+0x197c>
   86c06:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   86c0a:	4662      	mov	r2, ip
   86c0c:	4fb6      	ldr	r7, [pc, #728]	; (86ee8 <_svfprintf_r+0x1128>)
   86c0e:	461c      	mov	r4, r3
   86c10:	4610      	mov	r0, r2
   86c12:	fb87 1203 	smull	r1, r2, r7, r3
   86c16:	17d9      	asrs	r1, r3, #31
   86c18:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   86c1c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   86c20:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86c24:	3230      	adds	r2, #48	; 0x30
   86c26:	2c63      	cmp	r4, #99	; 0x63
   86c28:	f800 2c01 	strb.w	r2, [r0, #-1]
   86c2c:	460b      	mov	r3, r1
   86c2e:	f100 32ff 	add.w	r2, r0, #4294967295
   86c32:	dcec      	bgt.n	86c0e <_svfprintf_r+0xe4e>
   86c34:	3330      	adds	r3, #48	; 0x30
   86c36:	1e81      	subs	r1, r0, #2
   86c38:	b2db      	uxtb	r3, r3
   86c3a:	458c      	cmp	ip, r1
   86c3c:	f802 3c01 	strb.w	r3, [r2, #-1]
   86c40:	f240 85f9 	bls.w	87836 <_svfprintf_r+0x1a76>
   86c44:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   86c48:	e001      	b.n	86c4e <_svfprintf_r+0xe8e>
   86c4a:	f812 3b01 	ldrb.w	r3, [r2], #1
   86c4e:	4594      	cmp	ip, r2
   86c50:	f801 3b01 	strb.w	r3, [r1], #1
   86c54:	d1f9      	bne.n	86c4a <_svfprintf_r+0xe8a>
   86c56:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   86c5a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86c5e:	1a1b      	subs	r3, r3, r0
   86c60:	4413      	add	r3, r2
   86c62:	aa24      	add	r2, sp, #144	; 0x90
   86c64:	1a9b      	subs	r3, r3, r2
   86c66:	931a      	str	r3, [sp, #104]	; 0x68
   86c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86c6a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86c6c:	2b01      	cmp	r3, #1
   86c6e:	441a      	add	r2, r3
   86c70:	920b      	str	r2, [sp, #44]	; 0x2c
   86c72:	f340 8581 	ble.w	87778 <_svfprintf_r+0x19b8>
   86c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86c78:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86c7a:	4413      	add	r3, r2
   86c7c:	930b      	str	r3, [sp, #44]	; 0x2c
   86c7e:	2300      	movs	r3, #0
   86c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86c82:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   86c86:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86c8a:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   86c8e:	930f      	str	r3, [sp, #60]	; 0x3c
   86c90:	9206      	str	r2, [sp, #24]
   86c92:	9313      	str	r3, [sp, #76]	; 0x4c
   86c94:	9310      	str	r3, [sp, #64]	; 0x40
   86c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86c98:	2b00      	cmp	r3, #0
   86c9a:	f040 832c 	bne.w	872f6 <_svfprintf_r+0x1536>
   86c9e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86ca2:	9307      	str	r3, [sp, #28]
   86ca4:	f7ff b994 	b.w	85fd0 <_svfprintf_r+0x210>
   86ca8:	46bb      	mov	fp, r7
   86caa:	f7ff bb2f 	b.w	8630c <_svfprintf_r+0x54c>
   86cae:	4b8f      	ldr	r3, [pc, #572]	; (86eec <_svfprintf_r+0x112c>)
   86cb0:	9318      	str	r3, [sp, #96]	; 0x60
   86cb2:	f017 0920 	ands.w	r9, r7, #32
   86cb6:	f000 80f5 	beq.w	86ea4 <_svfprintf_r+0x10e4>
   86cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86cbc:	3307      	adds	r3, #7
   86cbe:	f023 0307 	bic.w	r3, r3, #7
   86cc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86cc6:	f853 4b08 	ldr.w	r4, [r3], #8
   86cca:	930e      	str	r3, [sp, #56]	; 0x38
   86ccc:	07f8      	lsls	r0, r7, #31
   86cce:	d509      	bpl.n	86ce4 <_svfprintf_r+0xf24>
   86cd0:	ea54 0309 	orrs.w	r3, r4, r9
   86cd4:	d006      	beq.n	86ce4 <_svfprintf_r+0xf24>
   86cd6:	2330      	movs	r3, #48	; 0x30
   86cd8:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86cdc:	f047 0702 	orr.w	r7, r7, #2
   86ce0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86ce4:	2302      	movs	r3, #2
   86ce6:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86cea:	f7ff b989 	b.w	86000 <_svfprintf_r+0x240>
   86cee:	4b80      	ldr	r3, [pc, #512]	; (86ef0 <_svfprintf_r+0x1130>)
   86cf0:	9318      	str	r3, [sp, #96]	; 0x60
   86cf2:	e7de      	b.n	86cb2 <_svfprintf_r+0xef2>
   86cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
   86cf6:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cf8:	aa28      	add	r2, sp, #160	; 0xa0
   86cfa:	f004 fcbf 	bl	8b67c <__ssprint_r>
   86cfe:	2800      	cmp	r0, #0
   86d00:	f47f a9c1 	bne.w	86086 <_svfprintf_r+0x2c6>
   86d04:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86d06:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86d0a:	e418      	b.n	8653e <_svfprintf_r+0x77e>
   86d0c:	2140      	movs	r1, #64	; 0x40
   86d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86d10:	f003 fb00 	bl	8a314 <_malloc_r>
   86d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86d16:	6018      	str	r0, [r3, #0]
   86d18:	6118      	str	r0, [r3, #16]
   86d1a:	2800      	cmp	r0, #0
   86d1c:	f000 8597 	beq.w	8784e <_svfprintf_r+0x1a8e>
   86d20:	2340      	movs	r3, #64	; 0x40
   86d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86d24:	6153      	str	r3, [r2, #20]
   86d26:	f7ff b862 	b.w	85dee <_svfprintf_r+0x2e>
   86d2a:	2e10      	cmp	r6, #16
   86d2c:	f340 8576 	ble.w	8781c <_svfprintf_r+0x1a5c>
   86d30:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 86ef4 <_svfprintf_r+0x1134>
   86d34:	4642      	mov	r2, r8
   86d36:	4648      	mov	r0, r9
   86d38:	4621      	mov	r1, r4
   86d3a:	46a8      	mov	r8, r5
   86d3c:	46b9      	mov	r9, r7
   86d3e:	f04f 0b10 	mov.w	fp, #16
   86d42:	4607      	mov	r7, r0
   86d44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86d46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86d48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   86d4a:	e004      	b.n	86d56 <_svfprintf_r+0xf96>
   86d4c:	3208      	adds	r2, #8
   86d4e:	3e10      	subs	r6, #16
   86d50:	2e10      	cmp	r6, #16
   86d52:	f340 8213 	ble.w	8717c <_svfprintf_r+0x13bc>
   86d56:	3301      	adds	r3, #1
   86d58:	3110      	adds	r1, #16
   86d5a:	2b07      	cmp	r3, #7
   86d5c:	e9c2 7b00 	strd	r7, fp, [r2]
   86d60:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   86d64:	ddf2      	ble.n	86d4c <_svfprintf_r+0xf8c>
   86d66:	4629      	mov	r1, r5
   86d68:	4620      	mov	r0, r4
   86d6a:	aa28      	add	r2, sp, #160	; 0xa0
   86d6c:	f004 fc86 	bl	8b67c <__ssprint_r>
   86d70:	2800      	cmp	r0, #0
   86d72:	f47f a988 	bne.w	86086 <_svfprintf_r+0x2c6>
   86d76:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   86d7a:	aa2b      	add	r2, sp, #172	; 0xac
   86d7c:	e7e7      	b.n	86d4e <_svfprintf_r+0xf8e>
   86d7e:	4628      	mov	r0, r5
   86d80:	f8cd 901c 	str.w	r9, [sp, #28]
   86d84:	940e      	str	r4, [sp, #56]	; 0x38
   86d86:	f7fe ffb9 	bl	85cfc <strlen>
   86d8a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   86d8e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86d92:	900b      	str	r0, [sp, #44]	; 0x2c
   86d94:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   86d98:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   86d9c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86da0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86da4:	9306      	str	r3, [sp, #24]
   86da6:	f7ff b913 	b.w	85fd0 <_svfprintf_r+0x210>
   86daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86dac:	4642      	mov	r2, r8
   86dae:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   86db2:	18eb      	adds	r3, r5, r3
   86db4:	465e      	mov	r6, fp
   86db6:	9307      	str	r3, [sp, #28]
   86db8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86dbc:	9710      	str	r7, [sp, #64]	; 0x40
   86dbe:	4621      	mov	r1, r4
   86dc0:	9f19      	ldr	r7, [sp, #100]	; 0x64
   86dc2:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   86dc6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   86dca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86dd0:	9513      	str	r5, [sp, #76]	; 0x4c
   86dd2:	f1b8 0f00 	cmp.w	r8, #0
   86dd6:	d02e      	beq.n	86e36 <_svfprintf_r+0x1076>
   86dd8:	bb83      	cbnz	r3, 86e3c <_svfprintf_r+0x107c>
   86dda:	3f01      	subs	r7, #1
   86ddc:	f108 38ff 	add.w	r8, r8, #4294967295
   86de0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   86de2:	4449      	add	r1, r9
   86de4:	e9c2 3900 	strd	r3, r9, [r2]
   86de8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86dea:	912a      	str	r1, [sp, #168]	; 0xa8
   86dec:	3301      	adds	r3, #1
   86dee:	2b07      	cmp	r3, #7
   86df0:	9329      	str	r3, [sp, #164]	; 0xa4
   86df2:	dc60      	bgt.n	86eb6 <_svfprintf_r+0x10f6>
   86df4:	3208      	adds	r2, #8
   86df6:	9b07      	ldr	r3, [sp, #28]
   86df8:	7838      	ldrb	r0, [r7, #0]
   86dfa:	1b9b      	subs	r3, r3, r6
   86dfc:	4283      	cmp	r3, r0
   86dfe:	bfa8      	it	ge
   86e00:	4603      	movge	r3, r0
   86e02:	2b00      	cmp	r3, #0
   86e04:	461c      	mov	r4, r3
   86e06:	dd0b      	ble.n	86e20 <_svfprintf_r+0x1060>
   86e08:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86e0a:	4419      	add	r1, r3
   86e0c:	3001      	adds	r0, #1
   86e0e:	2807      	cmp	r0, #7
   86e10:	e9c2 6300 	strd	r6, r3, [r2]
   86e14:	912a      	str	r1, [sp, #168]	; 0xa8
   86e16:	9029      	str	r0, [sp, #164]	; 0xa4
   86e18:	f300 8114 	bgt.w	87044 <_svfprintf_r+0x1284>
   86e1c:	7838      	ldrb	r0, [r7, #0]
   86e1e:	3208      	adds	r2, #8
   86e20:	2c00      	cmp	r4, #0
   86e22:	bfb4      	ite	lt
   86e24:	4605      	movlt	r5, r0
   86e26:	1b05      	subge	r5, r0, r4
   86e28:	2d00      	cmp	r5, #0
   86e2a:	dc0b      	bgt.n	86e44 <_svfprintf_r+0x1084>
   86e2c:	4406      	add	r6, r0
   86e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86e30:	f1b8 0f00 	cmp.w	r8, #0
   86e34:	d1d0      	bne.n	86dd8 <_svfprintf_r+0x1018>
   86e36:	2b00      	cmp	r3, #0
   86e38:	f000 8226 	beq.w	87288 <_svfprintf_r+0x14c8>
   86e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86e3e:	3b01      	subs	r3, #1
   86e40:	930f      	str	r3, [sp, #60]	; 0x3c
   86e42:	e7cd      	b.n	86de0 <_svfprintf_r+0x1020>
   86e44:	2d10      	cmp	r5, #16
   86e46:	f340 849d 	ble.w	87784 <_svfprintf_r+0x19c4>
   86e4a:	2410      	movs	r4, #16
   86e4c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86e4e:	e004      	b.n	86e5a <_svfprintf_r+0x109a>
   86e50:	3d10      	subs	r5, #16
   86e52:	2d10      	cmp	r5, #16
   86e54:	f102 0208 	add.w	r2, r2, #8
   86e58:	dd16      	ble.n	86e88 <_svfprintf_r+0x10c8>
   86e5a:	3001      	adds	r0, #1
   86e5c:	4b25      	ldr	r3, [pc, #148]	; (86ef4 <_svfprintf_r+0x1134>)
   86e5e:	3110      	adds	r1, #16
   86e60:	2807      	cmp	r0, #7
   86e62:	e9c2 3400 	strd	r3, r4, [r2]
   86e66:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86e6a:	ddf1      	ble.n	86e50 <_svfprintf_r+0x1090>
   86e6c:	4659      	mov	r1, fp
   86e6e:	4650      	mov	r0, sl
   86e70:	aa28      	add	r2, sp, #160	; 0xa0
   86e72:	f004 fc03 	bl	8b67c <__ssprint_r>
   86e76:	2800      	cmp	r0, #0
   86e78:	f47f a905 	bne.w	86086 <_svfprintf_r+0x2c6>
   86e7c:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   86e80:	3d10      	subs	r5, #16
   86e82:	2d10      	cmp	r5, #16
   86e84:	aa2b      	add	r2, sp, #172	; 0xac
   86e86:	dce8      	bgt.n	86e5a <_svfprintf_r+0x109a>
   86e88:	3001      	adds	r0, #1
   86e8a:	4b1a      	ldr	r3, [pc, #104]	; (86ef4 <_svfprintf_r+0x1134>)
   86e8c:	4429      	add	r1, r5
   86e8e:	2807      	cmp	r0, #7
   86e90:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86e94:	6055      	str	r5, [r2, #4]
   86e96:	6013      	str	r3, [r2, #0]
   86e98:	f300 8241 	bgt.w	8731e <_svfprintf_r+0x155e>
   86e9c:	7838      	ldrb	r0, [r7, #0]
   86e9e:	3208      	adds	r2, #8
   86ea0:	4406      	add	r6, r0
   86ea2:	e7c4      	b.n	86e2e <_svfprintf_r+0x106e>
   86ea4:	f017 0310 	ands.w	r3, r7, #16
   86ea8:	f000 80a0 	beq.w	86fec <_svfprintf_r+0x122c>
   86eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86eae:	f853 4b04 	ldr.w	r4, [r3], #4
   86eb2:	930e      	str	r3, [sp, #56]	; 0x38
   86eb4:	e70a      	b.n	86ccc <_svfprintf_r+0xf0c>
   86eb6:	4659      	mov	r1, fp
   86eb8:	4650      	mov	r0, sl
   86eba:	aa28      	add	r2, sp, #160	; 0xa0
   86ebc:	f004 fbde 	bl	8b67c <__ssprint_r>
   86ec0:	2800      	cmp	r0, #0
   86ec2:	f47f a8e0 	bne.w	86086 <_svfprintf_r+0x2c6>
   86ec6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   86ec8:	aa2b      	add	r2, sp, #172	; 0xac
   86eca:	e794      	b.n	86df6 <_svfprintf_r+0x1036>
   86ecc:	2300      	movs	r3, #0
   86ece:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   86ed2:	9606      	str	r6, [sp, #24]
   86ed4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86ed8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   86edc:	4692      	mov	sl, r2
   86ede:	461e      	mov	r6, r3
   86ee0:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   86ee4:	af54      	add	r7, sp, #336	; 0x150
   86ee6:	e014      	b.n	86f12 <_svfprintf_r+0x1152>
   86ee8:	66666667 	.word	0x66666667
   86eec:	0008c9cc 	.word	0x0008c9cc
   86ef0:	0008c9e0 	.word	0x0008c9e0
   86ef4:	0008ca10 	.word	0x0008ca10
   86ef8:	2300      	movs	r3, #0
   86efa:	4620      	mov	r0, r4
   86efc:	4649      	mov	r1, r9
   86efe:	220a      	movs	r2, #10
   86f00:	f005 fb3a 	bl	8c578 <__aeabi_uldivmod>
   86f04:	2c0a      	cmp	r4, #10
   86f06:	f179 0300 	sbcs.w	r3, r9, #0
   86f0a:	d31b      	bcc.n	86f44 <_svfprintf_r+0x1184>
   86f0c:	4604      	mov	r4, r0
   86f0e:	4689      	mov	r9, r1
   86f10:	462f      	mov	r7, r5
   86f12:	4620      	mov	r0, r4
   86f14:	220a      	movs	r2, #10
   86f16:	2300      	movs	r3, #0
   86f18:	4649      	mov	r1, r9
   86f1a:	f005 fb2d 	bl	8c578 <__aeabi_uldivmod>
   86f1e:	3230      	adds	r2, #48	; 0x30
   86f20:	1e7d      	subs	r5, r7, #1
   86f22:	3601      	adds	r6, #1
   86f24:	f807 2c01 	strb.w	r2, [r7, #-1]
   86f28:	f1ba 0f00 	cmp.w	sl, #0
   86f2c:	d0e4      	beq.n	86ef8 <_svfprintf_r+0x1138>
   86f2e:	f898 3000 	ldrb.w	r3, [r8]
   86f32:	429e      	cmp	r6, r3
   86f34:	d1e0      	bne.n	86ef8 <_svfprintf_r+0x1138>
   86f36:	2eff      	cmp	r6, #255	; 0xff
   86f38:	d0de      	beq.n	86ef8 <_svfprintf_r+0x1138>
   86f3a:	2c0a      	cmp	r4, #10
   86f3c:	f179 0300 	sbcs.w	r3, r9, #0
   86f40:	f080 8130 	bcs.w	871a4 <_svfprintf_r+0x13e4>
   86f44:	ab54      	add	r3, sp, #336	; 0x150
   86f46:	1b5b      	subs	r3, r3, r5
   86f48:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   86f4c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   86f50:	9612      	str	r6, [sp, #72]	; 0x48
   86f52:	465f      	mov	r7, fp
   86f54:	9e06      	ldr	r6, [sp, #24]
   86f56:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   86f5a:	930b      	str	r3, [sp, #44]	; 0x2c
   86f5c:	f7ff b82b 	b.w	85fb6 <_svfprintf_r+0x1f6>
   86f60:	990c      	ldr	r1, [sp, #48]	; 0x30
   86f62:	980a      	ldr	r0, [sp, #40]	; 0x28
   86f64:	aa28      	add	r2, sp, #160	; 0xa0
   86f66:	931d      	str	r3, [sp, #116]	; 0x74
   86f68:	f004 fb88 	bl	8b67c <__ssprint_r>
   86f6c:	2800      	cmp	r0, #0
   86f6e:	f47f a88a 	bne.w	86086 <_svfprintf_r+0x2c6>
   86f72:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86f76:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86f78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86f7a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86f7e:	f7ff b8b8 	b.w	860f2 <_svfprintf_r+0x332>
   86f82:	2301      	movs	r3, #1
   86f84:	f8c8 3004 	str.w	r3, [r8, #4]
   86f88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86f8a:	4abc      	ldr	r2, [pc, #752]	; (8727c <_svfprintf_r+0x14bc>)
   86f8c:	3301      	adds	r3, #1
   86f8e:	3401      	adds	r4, #1
   86f90:	2b07      	cmp	r3, #7
   86f92:	942a      	str	r4, [sp, #168]	; 0xa8
   86f94:	9329      	str	r3, [sp, #164]	; 0xa4
   86f96:	f8c8 2000 	str.w	r2, [r8]
   86f9a:	f300 8117 	bgt.w	871cc <_svfprintf_r+0x140c>
   86f9e:	f108 0808 	add.w	r8, r8, #8
   86fa2:	2900      	cmp	r1, #0
   86fa4:	f040 8086 	bne.w	870b4 <_svfprintf_r+0x12f4>
   86fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86faa:	f007 0301 	and.w	r3, r7, #1
   86fae:	4313      	orrs	r3, r2
   86fb0:	f43f a8e0 	beq.w	86174 <_svfprintf_r+0x3b4>
   86fb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86fb6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86fb8:	191a      	adds	r2, r3, r4
   86fba:	e9c8 1300 	strd	r1, r3, [r8]
   86fbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86fc0:	922a      	str	r2, [sp, #168]	; 0xa8
   86fc2:	3301      	adds	r3, #1
   86fc4:	2b07      	cmp	r3, #7
   86fc6:	9329      	str	r3, [sp, #164]	; 0xa4
   86fc8:	f300 8137 	bgt.w	8723a <_svfprintf_r+0x147a>
   86fcc:	f108 0808 	add.w	r8, r8, #8
   86fd0:	9912      	ldr	r1, [sp, #72]	; 0x48
   86fd2:	3301      	adds	r3, #1
   86fd4:	188c      	adds	r4, r1, r2
   86fd6:	2b07      	cmp	r3, #7
   86fd8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86fdc:	f8c8 5000 	str.w	r5, [r8]
   86fe0:	f8c8 1004 	str.w	r1, [r8, #4]
   86fe4:	f77f a8c4 	ble.w	86170 <_svfprintf_r+0x3b0>
   86fe8:	f7ff bbac 	b.w	86744 <_svfprintf_r+0x984>
   86fec:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86ff0:	f000 80a5 	beq.w	8713e <_svfprintf_r+0x137e>
   86ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86ff6:	4699      	mov	r9, r3
   86ff8:	f852 4b04 	ldr.w	r4, [r2], #4
   86ffc:	920e      	str	r2, [sp, #56]	; 0x38
   86ffe:	b2a4      	uxth	r4, r4
   87000:	e664      	b.n	86ccc <_svfprintf_r+0xf0c>
   87002:	46bb      	mov	fp, r7
   87004:	f7fe bfca 	b.w	85f9c <_svfprintf_r+0x1dc>
   87008:	990c      	ldr	r1, [sp, #48]	; 0x30
   8700a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8700c:	aa28      	add	r2, sp, #160	; 0xa0
   8700e:	f004 fb35 	bl	8b67c <__ssprint_r>
   87012:	2800      	cmp	r0, #0
   87014:	f47f a837 	bne.w	86086 <_svfprintf_r+0x2c6>
   87018:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8701a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8701e:	f7ff ba7b 	b.w	86518 <_svfprintf_r+0x758>
   87022:	4614      	mov	r4, r2
   87024:	463a      	mov	r2, r7
   87026:	464f      	mov	r7, r9
   87028:	4691      	mov	r9, r2
   8702a:	3301      	adds	r3, #1
   8702c:	442c      	add	r4, r5
   8702e:	2b07      	cmp	r3, #7
   87030:	f8c8 9000 	str.w	r9, [r8]
   87034:	f8c8 5004 	str.w	r5, [r8, #4]
   87038:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8703c:	f77f a898 	ble.w	86170 <_svfprintf_r+0x3b0>
   87040:	f7ff bb80 	b.w	86744 <_svfprintf_r+0x984>
   87044:	4659      	mov	r1, fp
   87046:	4650      	mov	r0, sl
   87048:	aa28      	add	r2, sp, #160	; 0xa0
   8704a:	f004 fb17 	bl	8b67c <__ssprint_r>
   8704e:	2800      	cmp	r0, #0
   87050:	f47f a819 	bne.w	86086 <_svfprintf_r+0x2c6>
   87054:	7838      	ldrb	r0, [r7, #0]
   87056:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87058:	aa2b      	add	r2, sp, #172	; 0xac
   8705a:	e6e1      	b.n	86e20 <_svfprintf_r+0x1060>
   8705c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8705e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87060:	aa28      	add	r2, sp, #160	; 0xa0
   87062:	f004 fb0b 	bl	8b67c <__ssprint_r>
   87066:	2800      	cmp	r0, #0
   87068:	f47f a80d 	bne.w	86086 <_svfprintf_r+0x2c6>
   8706c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8706e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87072:	f7ff b865 	b.w	86140 <_svfprintf_r+0x380>
   87076:	2b01      	cmp	r3, #1
   87078:	46bb      	mov	fp, r7
   8707a:	f47f a9f5 	bne.w	86468 <_svfprintf_r+0x6a8>
   8707e:	f7fe bf92 	b.w	85fa6 <_svfprintf_r+0x1e6>
   87082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87084:	9908      	ldr	r1, [sp, #32]
   87086:	f853 2b04 	ldr.w	r2, [r3], #4
   8708a:	4655      	mov	r5, sl
   8708c:	6011      	str	r1, [r2, #0]
   8708e:	930e      	str	r3, [sp, #56]	; 0x38
   87090:	f7ff b88e 	b.w	861b0 <_svfprintf_r+0x3f0>
   87094:	2b06      	cmp	r3, #6
   87096:	4629      	mov	r1, r5
   87098:	bf28      	it	cs
   8709a:	2306      	movcs	r3, #6
   8709c:	462a      	mov	r2, r5
   8709e:	9507      	str	r5, [sp, #28]
   870a0:	950d      	str	r5, [sp, #52]	; 0x34
   870a2:	9306      	str	r3, [sp, #24]
   870a4:	4d76      	ldr	r5, [pc, #472]	; (87280 <_svfprintf_r+0x14c0>)
   870a6:	940e      	str	r4, [sp, #56]	; 0x38
   870a8:	930b      	str	r3, [sp, #44]	; 0x2c
   870aa:	910f      	str	r1, [sp, #60]	; 0x3c
   870ac:	9113      	str	r1, [sp, #76]	; 0x4c
   870ae:	9110      	str	r1, [sp, #64]	; 0x40
   870b0:	f7fe bf8e 	b.w	85fd0 <_svfprintf_r+0x210>
   870b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   870b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   870b8:	191a      	adds	r2, r3, r4
   870ba:	e9c8 0300 	strd	r0, r3, [r8]
   870be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   870c0:	922a      	str	r2, [sp, #168]	; 0xa8
   870c2:	3301      	adds	r3, #1
   870c4:	2b07      	cmp	r3, #7
   870c6:	9329      	str	r3, [sp, #164]	; 0xa4
   870c8:	f300 80b7 	bgt.w	8723a <_svfprintf_r+0x147a>
   870cc:	f108 0808 	add.w	r8, r8, #8
   870d0:	2900      	cmp	r1, #0
   870d2:	f6bf af7d 	bge.w	86fd0 <_svfprintf_r+0x1210>
   870d6:	424e      	negs	r6, r1
   870d8:	3110      	adds	r1, #16
   870da:	f280 83a9 	bge.w	87830 <_svfprintf_r+0x1a70>
   870de:	4641      	mov	r1, r8
   870e0:	2410      	movs	r4, #16
   870e2:	46a8      	mov	r8, r5
   870e4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 87284 <_svfprintf_r+0x14c4>
   870e8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   870ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   870ee:	e004      	b.n	870fa <_svfprintf_r+0x133a>
   870f0:	3108      	adds	r1, #8
   870f2:	3e10      	subs	r6, #16
   870f4:	2e10      	cmp	r6, #16
   870f6:	f340 82a7 	ble.w	87648 <_svfprintf_r+0x1888>
   870fa:	3301      	adds	r3, #1
   870fc:	3210      	adds	r2, #16
   870fe:	2b07      	cmp	r3, #7
   87100:	e9c1 9400 	strd	r9, r4, [r1]
   87104:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87108:	ddf2      	ble.n	870f0 <_svfprintf_r+0x1330>
   8710a:	4629      	mov	r1, r5
   8710c:	4658      	mov	r0, fp
   8710e:	aa28      	add	r2, sp, #160	; 0xa0
   87110:	f004 fab4 	bl	8b67c <__ssprint_r>
   87114:	2800      	cmp	r0, #0
   87116:	f47e afb6 	bne.w	86086 <_svfprintf_r+0x2c6>
   8711a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8711e:	a92b      	add	r1, sp, #172	; 0xac
   87120:	e7e7      	b.n	870f2 <_svfprintf_r+0x1332>
   87122:	4614      	mov	r4, r2
   87124:	9f07      	ldr	r7, [sp, #28]
   87126:	3601      	adds	r6, #1
   87128:	442c      	add	r4, r5
   8712a:	2e07      	cmp	r6, #7
   8712c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87130:	f8c8 9000 	str.w	r9, [r8]
   87134:	f8c8 5004 	str.w	r5, [r8, #4]
   87138:	f77f aaf5 	ble.w	86726 <_svfprintf_r+0x966>
   8713c:	e44e      	b.n	869dc <_svfprintf_r+0xc1c>
   8713e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87144:	d066      	beq.n	87214 <_svfprintf_r+0x1454>
   87146:	f853 4b04 	ldr.w	r4, [r3], #4
   8714a:	4691      	mov	r9, r2
   8714c:	930e      	str	r3, [sp, #56]	; 0x38
   8714e:	b2e4      	uxtb	r4, r4
   87150:	e5bc      	b.n	86ccc <_svfprintf_r+0xf0c>
   87152:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87158:	d057      	beq.n	8720a <_svfprintf_r+0x144a>
   8715a:	f853 4b04 	ldr.w	r4, [r3], #4
   8715e:	4691      	mov	r9, r2
   87160:	930e      	str	r3, [sp, #56]	; 0x38
   87162:	b2e4      	uxtb	r4, r4
   87164:	f7fe bf49 	b.w	85ffa <_svfprintf_r+0x23a>
   87168:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8716a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 87284 <_svfprintf_r+0x14c4>
   8716e:	f7ff ba95 	b.w	8669c <_svfprintf_r+0x8dc>
   87172:	222d      	movs	r2, #45	; 0x2d
   87174:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87178:	f7ff b857 	b.w	8622a <_svfprintf_r+0x46a>
   8717c:	4645      	mov	r5, r8
   8717e:	4690      	mov	r8, r2
   87180:	463a      	mov	r2, r7
   87182:	460c      	mov	r4, r1
   87184:	464f      	mov	r7, r9
   87186:	4691      	mov	r9, r2
   87188:	3301      	adds	r3, #1
   8718a:	4434      	add	r4, r6
   8718c:	2b07      	cmp	r3, #7
   8718e:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87192:	f8c8 9000 	str.w	r9, [r8]
   87196:	f8c8 6004 	str.w	r6, [r8, #4]
   8719a:	dc5c      	bgt.n	87256 <_svfprintf_r+0x1496>
   8719c:	f108 0808 	add.w	r8, r8, #8
   871a0:	f7ff bb9e 	b.w	868e0 <_svfprintf_r+0xb20>
   871a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   871a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   871a8:	1aed      	subs	r5, r5, r3
   871aa:	461a      	mov	r2, r3
   871ac:	4628      	mov	r0, r5
   871ae:	f7fe fdd3 	bl	85d58 <strncpy>
   871b2:	f898 3001 	ldrb.w	r3, [r8, #1]
   871b6:	b10b      	cbz	r3, 871bc <_svfprintf_r+0x13fc>
   871b8:	f108 0801 	add.w	r8, r8, #1
   871bc:	4620      	mov	r0, r4
   871be:	4649      	mov	r1, r9
   871c0:	220a      	movs	r2, #10
   871c2:	2300      	movs	r3, #0
   871c4:	2600      	movs	r6, #0
   871c6:	f005 f9d7 	bl	8c578 <__aeabi_uldivmod>
   871ca:	e69f      	b.n	86f0c <_svfprintf_r+0x114c>
   871cc:	990c      	ldr	r1, [sp, #48]	; 0x30
   871ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   871d0:	aa28      	add	r2, sp, #160	; 0xa0
   871d2:	f004 fa53 	bl	8b67c <__ssprint_r>
   871d6:	2800      	cmp	r0, #0
   871d8:	f47e af55 	bne.w	86086 <_svfprintf_r+0x2c6>
   871dc:	9922      	ldr	r1, [sp, #136]	; 0x88
   871de:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   871e0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   871e4:	e6dd      	b.n	86fa2 <_svfprintf_r+0x11e2>
   871e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   871e8:	18ae      	adds	r6, r5, r2
   871ea:	eba6 060b 	sub.w	r6, r6, fp
   871ee:	1ad5      	subs	r5, r2, r3
   871f0:	42ae      	cmp	r6, r5
   871f2:	bfa8      	it	ge
   871f4:	462e      	movge	r6, r5
   871f6:	f7ff bba6 	b.w	86946 <_svfprintf_r+0xb86>
   871fa:	f852 4b04 	ldr.w	r4, [r2], #4
   871fe:	4689      	mov	r9, r1
   87200:	2301      	movs	r3, #1
   87202:	920e      	str	r2, [sp, #56]	; 0x38
   87204:	b2e4      	uxtb	r4, r4
   87206:	f7fe befb 	b.w	86000 <_svfprintf_r+0x240>
   8720a:	f853 4b04 	ldr.w	r4, [r3], #4
   8720e:	930e      	str	r3, [sp, #56]	; 0x38
   87210:	f7fe bef3 	b.w	85ffa <_svfprintf_r+0x23a>
   87214:	f853 4b04 	ldr.w	r4, [r3], #4
   87218:	930e      	str	r3, [sp, #56]	; 0x38
   8721a:	e557      	b.n	86ccc <_svfprintf_r+0xf0c>
   8721c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8721e:	9908      	ldr	r1, [sp, #32]
   87220:	f853 2b04 	ldr.w	r2, [r3], #4
   87224:	4655      	mov	r5, sl
   87226:	8011      	strh	r1, [r2, #0]
   87228:	930e      	str	r3, [sp, #56]	; 0x38
   8722a:	f7fe bfc1 	b.w	861b0 <_svfprintf_r+0x3f0>
   8722e:	f344 19c0 	sbfx	r9, r4, #7, #1
   87232:	464b      	mov	r3, r9
   87234:	b264      	sxtb	r4, r4
   87236:	f7fe bea4 	b.w	85f82 <_svfprintf_r+0x1c2>
   8723a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8723c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8723e:	aa28      	add	r2, sp, #160	; 0xa0
   87240:	f004 fa1c 	bl	8b67c <__ssprint_r>
   87244:	2800      	cmp	r0, #0
   87246:	f47e af1e 	bne.w	86086 <_svfprintf_r+0x2c6>
   8724a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8724e:	9922      	ldr	r1, [sp, #136]	; 0x88
   87250:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87254:	e73c      	b.n	870d0 <_svfprintf_r+0x1310>
   87256:	990c      	ldr	r1, [sp, #48]	; 0x30
   87258:	980a      	ldr	r0, [sp, #40]	; 0x28
   8725a:	aa28      	add	r2, sp, #160	; 0xa0
   8725c:	f004 fa0e 	bl	8b67c <__ssprint_r>
   87260:	2800      	cmp	r0, #0
   87262:	f47e af10 	bne.w	86086 <_svfprintf_r+0x2c6>
   87266:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87268:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8726c:	f7ff bb38 	b.w	868e0 <_svfprintf_r+0xb20>
   87270:	2306      	movs	r3, #6
   87272:	9307      	str	r3, [sp, #28]
   87274:	f026 0320 	bic.w	r3, r6, #32
   87278:	9306      	str	r3, [sp, #24]
   8727a:	e470      	b.n	86b5e <_svfprintf_r+0xd9e>
   8727c:	0008c9fc 	.word	0x0008c9fc
   87280:	0008c9f4 	.word	0x0008c9f4
   87284:	0008ca10 	.word	0x0008ca10
   87288:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   8728c:	18eb      	adds	r3, r5, r3
   8728e:	429e      	cmp	r6, r3
   87290:	46b3      	mov	fp, r6
   87292:	9719      	str	r7, [sp, #100]	; 0x64
   87294:	4690      	mov	r8, r2
   87296:	460c      	mov	r4, r1
   87298:	bf28      	it	cs
   8729a:	469b      	movcs	fp, r3
   8729c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   872a0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   872a2:	f7ff bb23 	b.w	868ec <_svfprintf_r+0xb2c>
   872a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   872a8:	1cda      	adds	r2, r3, #3
   872aa:	9310      	str	r3, [sp, #64]	; 0x40
   872ac:	db02      	blt.n	872b4 <_svfprintf_r+0x14f4>
   872ae:	9a07      	ldr	r2, [sp, #28]
   872b0:	4293      	cmp	r3, r2
   872b2:	dd04      	ble.n	872be <_svfprintf_r+0x14fe>
   872b4:	3e02      	subs	r6, #2
   872b6:	f026 0320 	bic.w	r3, r6, #32
   872ba:	9306      	str	r3, [sp, #24]
   872bc:	e48b      	b.n	86bd6 <_svfprintf_r+0xe16>
   872be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   872c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   872c2:	4293      	cmp	r3, r2
   872c4:	f2c0 80c2 	blt.w	8744c <_svfprintf_r+0x168c>
   872c8:	f019 0f01 	tst.w	r9, #1
   872cc:	f000 821d 	beq.w	8770a <_svfprintf_r+0x194a>
   872d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   872d2:	4413      	add	r3, r2
   872d4:	930b      	str	r3, [sp, #44]	; 0x2c
   872d6:	f419 6f80 	tst.w	r9, #1024	; 0x400
   872da:	f000 8214 	beq.w	87706 <_svfprintf_r+0x1946>
   872de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   872e0:	2667      	movs	r6, #103	; 0x67
   872e2:	2b00      	cmp	r3, #0
   872e4:	dc76      	bgt.n	873d4 <_svfprintf_r+0x1614>
   872e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   872e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   872ec:	9306      	str	r3, [sp, #24]
   872ee:	2300      	movs	r3, #0
   872f0:	930f      	str	r3, [sp, #60]	; 0x3c
   872f2:	9313      	str	r3, [sp, #76]	; 0x4c
   872f4:	e4cf      	b.n	86c96 <_svfprintf_r+0xed6>
   872f6:	222d      	movs	r2, #45	; 0x2d
   872f8:	2300      	movs	r3, #0
   872fa:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   872fe:	9307      	str	r3, [sp, #28]
   87300:	f7fe be68 	b.w	85fd4 <_svfprintf_r+0x214>
   87304:	990c      	ldr	r1, [sp, #48]	; 0x30
   87306:	980a      	ldr	r0, [sp, #40]	; 0x28
   87308:	aa28      	add	r2, sp, #160	; 0xa0
   8730a:	f004 f9b7 	bl	8b67c <__ssprint_r>
   8730e:	2800      	cmp	r0, #0
   87310:	f47e aeb9 	bne.w	86086 <_svfprintf_r+0x2c6>
   87314:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87316:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8731a:	f7ff bad8 	b.w	868ce <_svfprintf_r+0xb0e>
   8731e:	4659      	mov	r1, fp
   87320:	4650      	mov	r0, sl
   87322:	aa28      	add	r2, sp, #160	; 0xa0
   87324:	f004 f9aa 	bl	8b67c <__ssprint_r>
   87328:	2800      	cmp	r0, #0
   8732a:	f47e aeac 	bne.w	86086 <_svfprintf_r+0x2c6>
   8732e:	7838      	ldrb	r0, [r7, #0]
   87330:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87332:	aa2b      	add	r2, sp, #172	; 0xac
   87334:	4406      	add	r6, r0
   87336:	e57a      	b.n	86e2e <_svfprintf_r+0x106e>
   87338:	990c      	ldr	r1, [sp, #48]	; 0x30
   8733a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8733c:	aa28      	add	r2, sp, #160	; 0xa0
   8733e:	f004 f99d 	bl	8b67c <__ssprint_r>
   87342:	2800      	cmp	r0, #0
   87344:	f47e ae9f 	bne.w	86086 <_svfprintf_r+0x2c6>
   87348:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8734a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8734c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87350:	f7ff bae1 	b.w	86916 <_svfprintf_r+0xb56>
   87354:	9907      	ldr	r1, [sp, #28]
   87356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87358:	9101      	str	r1, [sp, #4]
   8735a:	2103      	movs	r1, #3
   8735c:	9100      	str	r1, [sp, #0]
   8735e:	a926      	add	r1, sp, #152	; 0x98
   87360:	9104      	str	r1, [sp, #16]
   87362:	a923      	add	r1, sp, #140	; 0x8c
   87364:	9103      	str	r1, [sp, #12]
   87366:	a922      	add	r1, sp, #136	; 0x88
   87368:	465a      	mov	r2, fp
   8736a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8736c:	9102      	str	r1, [sp, #8]
   8736e:	f001 fad3 	bl	88918 <_dtoa_r>
   87372:	7803      	ldrb	r3, [r0, #0]
   87374:	4605      	mov	r5, r0
   87376:	2b30      	cmp	r3, #48	; 0x30
   87378:	f000 8216 	beq.w	877a8 <_svfprintf_r+0x19e8>
   8737c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8737e:	9a07      	ldr	r2, [sp, #28]
   87380:	46b9      	mov	r9, r7
   87382:	4413      	add	r3, r2
   87384:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87386:	18ec      	adds	r4, r5, r3
   87388:	4658      	mov	r0, fp
   8738a:	2200      	movs	r2, #0
   8738c:	2300      	movs	r3, #0
   8738e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87390:	f005 f882 	bl	8c498 <__aeabi_dcmpeq>
   87394:	b108      	cbz	r0, 8739a <_svfprintf_r+0x15da>
   87396:	4623      	mov	r3, r4
   87398:	e411      	b.n	86bbe <_svfprintf_r+0xdfe>
   8739a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8739c:	42a3      	cmp	r3, r4
   8739e:	f4bf ac0e 	bcs.w	86bbe <_svfprintf_r+0xdfe>
   873a2:	2130      	movs	r1, #48	; 0x30
   873a4:	1c5a      	adds	r2, r3, #1
   873a6:	9226      	str	r2, [sp, #152]	; 0x98
   873a8:	7019      	strb	r1, [r3, #0]
   873aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   873ac:	429c      	cmp	r4, r3
   873ae:	d8f9      	bhi.n	873a4 <_svfprintf_r+0x15e4>
   873b0:	e405      	b.n	86bbe <_svfprintf_r+0xdfe>
   873b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   873b4:	2a00      	cmp	r2, #0
   873b6:	9210      	str	r2, [sp, #64]	; 0x40
   873b8:	f340 820e 	ble.w	877d8 <_svfprintf_r+0x1a18>
   873bc:	9907      	ldr	r1, [sp, #28]
   873be:	f009 0301 	and.w	r3, r9, #1
   873c2:	430b      	orrs	r3, r1
   873c4:	f040 817e 	bne.w	876c4 <_svfprintf_r+0x1904>
   873c8:	2666      	movs	r6, #102	; 0x66
   873ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   873cc:	930b      	str	r3, [sp, #44]	; 0x2c
   873ce:	f419 6f80 	tst.w	r9, #1024	; 0x400
   873d2:	d088      	beq.n	872e6 <_svfprintf_r+0x1526>
   873d4:	9919      	ldr	r1, [sp, #100]	; 0x64
   873d6:	780b      	ldrb	r3, [r1, #0]
   873d8:	2bff      	cmp	r3, #255	; 0xff
   873da:	f000 8225 	beq.w	87828 <_svfprintf_r+0x1a68>
   873de:	2400      	movs	r4, #0
   873e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   873e2:	4620      	mov	r0, r4
   873e4:	e004      	b.n	873f0 <_svfprintf_r+0x1630>
   873e6:	3001      	adds	r0, #1
   873e8:	3101      	adds	r1, #1
   873ea:	2bff      	cmp	r3, #255	; 0xff
   873ec:	f000 8159 	beq.w	876a2 <_svfprintf_r+0x18e2>
   873f0:	4293      	cmp	r3, r2
   873f2:	f280 8156 	bge.w	876a2 <_svfprintf_r+0x18e2>
   873f6:	1ad2      	subs	r2, r2, r3
   873f8:	784b      	ldrb	r3, [r1, #1]
   873fa:	2b00      	cmp	r3, #0
   873fc:	d1f3      	bne.n	873e6 <_svfprintf_r+0x1626>
   873fe:	780b      	ldrb	r3, [r1, #0]
   87400:	3401      	adds	r4, #1
   87402:	e7f2      	b.n	873ea <_svfprintf_r+0x162a>
   87404:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   87408:	f7ff b9da 	b.w	867c0 <_svfprintf_r+0xa00>
   8740c:	9b07      	ldr	r3, [sp, #28]
   8740e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87412:	940e      	str	r4, [sp, #56]	; 0x38
   87414:	9306      	str	r3, [sp, #24]
   87416:	930b      	str	r3, [sp, #44]	; 0x2c
   87418:	9007      	str	r0, [sp, #28]
   8741a:	900f      	str	r0, [sp, #60]	; 0x3c
   8741c:	9013      	str	r0, [sp, #76]	; 0x4c
   8741e:	9010      	str	r0, [sp, #64]	; 0x40
   87420:	f7fe bdd6 	b.w	85fd0 <_svfprintf_r+0x210>
   87424:	990c      	ldr	r1, [sp, #48]	; 0x30
   87426:	980a      	ldr	r0, [sp, #40]	; 0x28
   87428:	aa28      	add	r2, sp, #160	; 0xa0
   8742a:	f004 f927 	bl	8b67c <__ssprint_r>
   8742e:	2800      	cmp	r0, #0
   87430:	f47e ae29 	bne.w	86086 <_svfprintf_r+0x2c6>
   87434:	9d22      	ldr	r5, [sp, #136]	; 0x88
   87436:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87438:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8743a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8743e:	1b5d      	subs	r5, r3, r5
   87440:	f7ff ba81 	b.w	86946 <_svfprintf_r+0xb86>
   87444:	2300      	movs	r3, #0
   87446:	9307      	str	r3, [sp, #28]
   87448:	f7fe bd0b 	b.w	85e62 <_svfprintf_r+0xa2>
   8744c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8744e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87450:	189a      	adds	r2, r3, r2
   87452:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87454:	920b      	str	r2, [sp, #44]	; 0x2c
   87456:	2b00      	cmp	r3, #0
   87458:	f340 8185 	ble.w	87766 <_svfprintf_r+0x19a6>
   8745c:	2667      	movs	r6, #103	; 0x67
   8745e:	e7b6      	b.n	873ce <_svfprintf_r+0x160e>
   87460:	2330      	movs	r3, #48	; 0x30
   87462:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87466:	2358      	movs	r3, #88	; 0x58
   87468:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   8746c:	9b07      	ldr	r3, [sp, #28]
   8746e:	f047 0402 	orr.w	r4, r7, #2
   87472:	2b63      	cmp	r3, #99	; 0x63
   87474:	f300 80c4 	bgt.w	87600 <_svfprintf_r+0x1840>
   87478:	2300      	movs	r3, #0
   8747a:	ad3b      	add	r5, sp, #236	; 0xec
   8747c:	930d      	str	r3, [sp, #52]	; 0x34
   8747e:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   87482:	930f      	str	r3, [sp, #60]	; 0x3c
   87484:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87488:	4613      	mov	r3, r2
   8748a:	2b00      	cmp	r3, #0
   8748c:	4627      	mov	r7, r4
   8748e:	f2c0 8084 	blt.w	8759a <_svfprintf_r+0x17da>
   87492:	930b      	str	r3, [sp, #44]	; 0x2c
   87494:	2300      	movs	r3, #0
   87496:	468b      	mov	fp, r1
   87498:	931d      	str	r3, [sp, #116]	; 0x74
   8749a:	f026 0320 	bic.w	r3, r6, #32
   8749e:	9306      	str	r3, [sp, #24]
   874a0:	2e61      	cmp	r6, #97	; 0x61
   874a2:	f000 8118 	beq.w	876d6 <_svfprintf_r+0x1916>
   874a6:	2e41      	cmp	r6, #65	; 0x41
   874a8:	f47f ab67 	bne.w	86b7a <_svfprintf_r+0xdba>
   874ac:	aa22      	add	r2, sp, #136	; 0x88
   874ae:	4658      	mov	r0, fp
   874b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874b2:	f004 f853 	bl	8b55c <frexp>
   874b6:	2200      	movs	r2, #0
   874b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   874bc:	f004 fd84 	bl	8bfc8 <__aeabi_dmul>
   874c0:	4602      	mov	r2, r0
   874c2:	460b      	mov	r3, r1
   874c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   874c8:	2200      	movs	r2, #0
   874ca:	2300      	movs	r3, #0
   874cc:	f004 ffe4 	bl	8c498 <__aeabi_dcmpeq>
   874d0:	b108      	cbz	r0, 874d6 <_svfprintf_r+0x1716>
   874d2:	2301      	movs	r3, #1
   874d4:	9322      	str	r3, [sp, #136]	; 0x88
   874d6:	4bad      	ldr	r3, [pc, #692]	; (8778c <_svfprintf_r+0x19cc>)
   874d8:	930b      	str	r3, [sp, #44]	; 0x2c
   874da:	9b07      	ldr	r3, [sp, #28]
   874dc:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   874e0:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   874e4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   874e8:	46ab      	mov	fp, r5
   874ea:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   874ee:	f103 39ff 	add.w	r9, r3, #4294967295
   874f2:	9510      	str	r5, [sp, #64]	; 0x40
   874f4:	e006      	b.n	87504 <_svfprintf_r+0x1744>
   874f6:	2200      	movs	r2, #0
   874f8:	2300      	movs	r3, #0
   874fa:	f109 39ff 	add.w	r9, r9, #4294967295
   874fe:	f004 ffcb 	bl	8c498 <__aeabi_dcmpeq>
   87502:	b9e8      	cbnz	r0, 87540 <_svfprintf_r+0x1780>
   87504:	2200      	movs	r2, #0
   87506:	4ba2      	ldr	r3, [pc, #648]	; (87790 <_svfprintf_r+0x19d0>)
   87508:	4630      	mov	r0, r6
   8750a:	4639      	mov	r1, r7
   8750c:	f004 fd5c 	bl	8bfc8 <__aeabi_dmul>
   87510:	460f      	mov	r7, r1
   87512:	4606      	mov	r6, r0
   87514:	f005 f808 	bl	8c528 <__aeabi_d2iz>
   87518:	4604      	mov	r4, r0
   8751a:	f004 fceb 	bl	8bef4 <__aeabi_i2d>
   8751e:	460b      	mov	r3, r1
   87520:	4602      	mov	r2, r0
   87522:	4639      	mov	r1, r7
   87524:	4630      	mov	r0, r6
   87526:	f004 fb97 	bl	8bc58 <__aeabi_dsub>
   8752a:	f81a 3004 	ldrb.w	r3, [sl, r4]
   8752e:	f1b9 3fff 	cmp.w	r9, #4294967295
   87532:	46d8      	mov	r8, fp
   87534:	464d      	mov	r5, r9
   87536:	4606      	mov	r6, r0
   87538:	460f      	mov	r7, r1
   8753a:	f80b 3b01 	strb.w	r3, [fp], #1
   8753e:	d1da      	bne.n	874f6 <_svfprintf_r+0x1736>
   87540:	4630      	mov	r0, r6
   87542:	4639      	mov	r1, r7
   87544:	2200      	movs	r2, #0
   87546:	4b93      	ldr	r3, [pc, #588]	; (87794 <_svfprintf_r+0x19d4>)
   87548:	46a9      	mov	r9, r5
   8754a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   8754e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87550:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   87554:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87558:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   8755c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8755e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   87560:	f004 ffc2 	bl	8c4e8 <__aeabi_dcmpgt>
   87564:	bb80      	cbnz	r0, 875c8 <_svfprintf_r+0x1808>
   87566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8756a:	2200      	movs	r2, #0
   8756c:	4b89      	ldr	r3, [pc, #548]	; (87794 <_svfprintf_r+0x19d4>)
   8756e:	f004 ff93 	bl	8c498 <__aeabi_dcmpeq>
   87572:	b108      	cbz	r0, 87578 <_svfprintf_r+0x17b8>
   87574:	07e1      	lsls	r1, r4, #31
   87576:	d427      	bmi.n	875c8 <_svfprintf_r+0x1808>
   87578:	464b      	mov	r3, r9
   8757a:	2b00      	cmp	r3, #0
   8757c:	db06      	blt.n	8758c <_svfprintf_r+0x17cc>
   8757e:	2230      	movs	r2, #48	; 0x30
   87580:	3301      	adds	r3, #1
   87582:	445b      	add	r3, fp
   87584:	f80b 2b01 	strb.w	r2, [fp], #1
   87588:	455b      	cmp	r3, fp
   8758a:	d1fb      	bne.n	87584 <_svfprintf_r+0x17c4>
   8758c:	ebab 0305 	sub.w	r3, fp, r5
   87590:	46b9      	mov	r9, r7
   87592:	9312      	str	r3, [sp, #72]	; 0x48
   87594:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87596:	f7ff bb14 	b.w	86bc2 <_svfprintf_r+0xe02>
   8759a:	f026 0320 	bic.w	r3, r6, #32
   8759e:	9306      	str	r3, [sp, #24]
   875a0:	222d      	movs	r2, #45	; 0x2d
   875a2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   875a6:	469b      	mov	fp, r3
   875a8:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   875ac:	921d      	str	r2, [sp, #116]	; 0x74
   875ae:	930b      	str	r3, [sp, #44]	; 0x2c
   875b0:	e776      	b.n	874a0 <_svfprintf_r+0x16e0>
   875b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   875b4:	f7ff b95c 	b.w	86870 <_svfprintf_r+0xab0>
   875b8:	9b07      	ldr	r3, [sp, #28]
   875ba:	18ec      	adds	r4, r5, r3
   875bc:	e6e4      	b.n	87388 <_svfprintf_r+0x15c8>
   875be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   875c0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 87798 <_svfprintf_r+0x19d8>
   875c4:	f7ff b827 	b.w	86616 <_svfprintf_r+0x856>
   875c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   875ca:	9326      	str	r3, [sp, #152]	; 0x98
   875cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   875ce:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   875d2:	7bd9      	ldrb	r1, [r3, #15]
   875d4:	465b      	mov	r3, fp
   875d6:	428a      	cmp	r2, r1
   875d8:	d109      	bne.n	875ee <_svfprintf_r+0x182e>
   875da:	2030      	movs	r0, #48	; 0x30
   875dc:	f803 0c01 	strb.w	r0, [r3, #-1]
   875e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   875e2:	1e5a      	subs	r2, r3, #1
   875e4:	9226      	str	r2, [sp, #152]	; 0x98
   875e6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   875ea:	4291      	cmp	r1, r2
   875ec:	d0f6      	beq.n	875dc <_svfprintf_r+0x181c>
   875ee:	2a39      	cmp	r2, #57	; 0x39
   875f0:	bf0b      	itete	eq
   875f2:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   875f4:	3201      	addne	r2, #1
   875f6:	7a92      	ldrbeq	r2, [r2, #10]
   875f8:	b2d2      	uxtbne	r2, r2
   875fa:	f803 2c01 	strb.w	r2, [r3, #-1]
   875fe:	e7c5      	b.n	8758c <_svfprintf_r+0x17cc>
   87600:	980a      	ldr	r0, [sp, #40]	; 0x28
   87602:	1c59      	adds	r1, r3, #1
   87604:	f002 fe86 	bl	8a314 <_malloc_r>
   87608:	4605      	mov	r5, r0
   8760a:	2800      	cmp	r0, #0
   8760c:	f000 8117 	beq.w	8783e <_svfprintf_r+0x1a7e>
   87610:	900d      	str	r0, [sp, #52]	; 0x34
   87612:	e734      	b.n	8747e <_svfprintf_r+0x16be>
   87614:	2102      	movs	r1, #2
   87616:	9100      	str	r1, [sp, #0]
   87618:	9907      	ldr	r1, [sp, #28]
   8761a:	465a      	mov	r2, fp
   8761c:	1c4c      	adds	r4, r1, #1
   8761e:	a926      	add	r1, sp, #152	; 0x98
   87620:	9104      	str	r1, [sp, #16]
   87622:	a923      	add	r1, sp, #140	; 0x8c
   87624:	9103      	str	r1, [sp, #12]
   87626:	a922      	add	r1, sp, #136	; 0x88
   87628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8762a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8762c:	9401      	str	r4, [sp, #4]
   8762e:	9102      	str	r1, [sp, #8]
   87630:	f001 f972 	bl	88918 <_dtoa_r>
   87634:	4605      	mov	r5, r0
   87636:	46b9      	mov	r9, r7
   87638:	442c      	add	r4, r5
   8763a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8763c:	e6a4      	b.n	87388 <_svfprintf_r+0x15c8>
   8763e:	2330      	movs	r3, #48	; 0x30
   87640:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87644:	2378      	movs	r3, #120	; 0x78
   87646:	e70f      	b.n	87468 <_svfprintf_r+0x16a8>
   87648:	4645      	mov	r5, r8
   8764a:	4688      	mov	r8, r1
   8764c:	3301      	adds	r3, #1
   8764e:	4432      	add	r2, r6
   87650:	2b07      	cmp	r3, #7
   87652:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87656:	f8c8 9000 	str.w	r9, [r8]
   8765a:	f8c8 6004 	str.w	r6, [r8, #4]
   8765e:	f77f acb5 	ble.w	86fcc <_svfprintf_r+0x120c>
   87662:	990c      	ldr	r1, [sp, #48]	; 0x30
   87664:	980a      	ldr	r0, [sp, #40]	; 0x28
   87666:	aa28      	add	r2, sp, #160	; 0xa0
   87668:	f004 f808 	bl	8b67c <__ssprint_r>
   8766c:	2800      	cmp	r0, #0
   8766e:	f47e ad0a 	bne.w	86086 <_svfprintf_r+0x2c6>
   87672:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87676:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8767a:	e4a9      	b.n	86fd0 <_svfprintf_r+0x1210>
   8767c:	9b07      	ldr	r3, [sp, #28]
   8767e:	2b00      	cmp	r3, #0
   87680:	bf08      	it	eq
   87682:	2301      	moveq	r3, #1
   87684:	9307      	str	r3, [sp, #28]
   87686:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   8768a:	930f      	str	r3, [sp, #60]	; 0x3c
   8768c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8768e:	2b00      	cmp	r3, #0
   87690:	f2c0 80b6 	blt.w	87800 <_svfprintf_r+0x1a40>
   87694:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   87698:	900d      	str	r0, [sp, #52]	; 0x34
   8769a:	930b      	str	r3, [sp, #44]	; 0x2c
   8769c:	901d      	str	r0, [sp, #116]	; 0x74
   8769e:	f7ff ba73 	b.w	86b88 <_svfprintf_r+0xdc8>
   876a2:	9119      	str	r1, [sp, #100]	; 0x64
   876a4:	9210      	str	r2, [sp, #64]	; 0x40
   876a6:	9013      	str	r0, [sp, #76]	; 0x4c
   876a8:	940f      	str	r4, [sp, #60]	; 0x3c
   876aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   876ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   876ae:	991c      	ldr	r1, [sp, #112]	; 0x70
   876b0:	4413      	add	r3, r2
   876b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   876b4:	fb01 2303 	mla	r3, r1, r3, r2
   876b8:	930b      	str	r3, [sp, #44]	; 0x2c
   876ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   876be:	9306      	str	r3, [sp, #24]
   876c0:	f7ff bae9 	b.w	86c96 <_svfprintf_r+0xed6>
   876c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   876c6:	2666      	movs	r6, #102	; 0x66
   876c8:	18d3      	adds	r3, r2, r3
   876ca:	4419      	add	r1, r3
   876cc:	910b      	str	r1, [sp, #44]	; 0x2c
   876ce:	e67e      	b.n	873ce <_svfprintf_r+0x160e>
   876d0:	2300      	movs	r3, #0
   876d2:	930d      	str	r3, [sp, #52]	; 0x34
   876d4:	e764      	b.n	875a0 <_svfprintf_r+0x17e0>
   876d6:	aa22      	add	r2, sp, #136	; 0x88
   876d8:	4658      	mov	r0, fp
   876da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   876dc:	f003 ff3e 	bl	8b55c <frexp>
   876e0:	2200      	movs	r2, #0
   876e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   876e6:	f004 fc6f 	bl	8bfc8 <__aeabi_dmul>
   876ea:	4602      	mov	r2, r0
   876ec:	460b      	mov	r3, r1
   876ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   876f2:	2200      	movs	r2, #0
   876f4:	2300      	movs	r3, #0
   876f6:	f004 fecf 	bl	8c498 <__aeabi_dcmpeq>
   876fa:	b108      	cbz	r0, 87700 <_svfprintf_r+0x1940>
   876fc:	2301      	movs	r3, #1
   876fe:	9322      	str	r3, [sp, #136]	; 0x88
   87700:	4b26      	ldr	r3, [pc, #152]	; (8779c <_svfprintf_r+0x19dc>)
   87702:	930b      	str	r3, [sp, #44]	; 0x2c
   87704:	e6e9      	b.n	874da <_svfprintf_r+0x171a>
   87706:	2667      	movs	r6, #103	; 0x67
   87708:	e5ed      	b.n	872e6 <_svfprintf_r+0x1526>
   8770a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8770c:	930b      	str	r3, [sp, #44]	; 0x2c
   8770e:	e5e2      	b.n	872d6 <_svfprintf_r+0x1516>
   87710:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87712:	2003      	movs	r0, #3
   87714:	2b00      	cmp	r3, #0
   87716:	bfb8      	it	lt
   87718:	222d      	movlt	r2, #45	; 0x2d
   8771a:	f04f 0300 	mov.w	r3, #0
   8771e:	bfa8      	it	ge
   87720:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   87724:	4619      	mov	r1, r3
   87726:	930d      	str	r3, [sp, #52]	; 0x34
   87728:	4d1d      	ldr	r5, [pc, #116]	; (877a0 <_svfprintf_r+0x19e0>)
   8772a:	4b1e      	ldr	r3, [pc, #120]	; (877a4 <_svfprintf_r+0x19e4>)
   8772c:	bfb8      	it	lt
   8772e:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   87732:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   87736:	9006      	str	r0, [sp, #24]
   87738:	f7fe bd7f 	b.w	8623a <_svfprintf_r+0x47a>
   8773c:	2900      	cmp	r1, #0
   8773e:	d144      	bne.n	877ca <_svfprintf_r+0x1a0a>
   87740:	2230      	movs	r2, #48	; 0x30
   87742:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   87746:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   8774a:	3330      	adds	r3, #48	; 0x30
   8774c:	f802 3b01 	strb.w	r3, [r2], #1
   87750:	ab24      	add	r3, sp, #144	; 0x90
   87752:	1ad3      	subs	r3, r2, r3
   87754:	931a      	str	r3, [sp, #104]	; 0x68
   87756:	f7ff ba87 	b.w	86c68 <_svfprintf_r+0xea8>
   8775a:	f106 020f 	add.w	r2, r6, #15
   8775e:	2101      	movs	r1, #1
   87760:	b2d2      	uxtb	r2, r2
   87762:	f7ff ba41 	b.w	86be8 <_svfprintf_r+0xe28>
   87766:	f1c3 0301 	rsb	r3, r3, #1
   8776a:	441a      	add	r2, r3
   8776c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87770:	2667      	movs	r6, #103	; 0x67
   87772:	920b      	str	r2, [sp, #44]	; 0x2c
   87774:	9306      	str	r3, [sp, #24]
   87776:	e5ba      	b.n	872ee <_svfprintf_r+0x152e>
   87778:	f019 0f01 	tst.w	r9, #1
   8777c:	f43f aa7f 	beq.w	86c7e <_svfprintf_r+0xebe>
   87780:	f7ff ba79 	b.w	86c76 <_svfprintf_r+0xeb6>
   87784:	9829      	ldr	r0, [sp, #164]	; 0xa4
   87786:	f7ff bb7f 	b.w	86e88 <_svfprintf_r+0x10c8>
   8778a:	bf00      	nop
   8778c:	0008c9e0 	.word	0x0008c9e0
   87790:	40300000 	.word	0x40300000
   87794:	3fe00000 	.word	0x3fe00000
   87798:	0008ca10 	.word	0x0008ca10
   8779c:	0008c9cc 	.word	0x0008c9cc
   877a0:	0008c9c4 	.word	0x0008c9c4
   877a4:	0008c9c8 	.word	0x0008c9c8
   877a8:	4658      	mov	r0, fp
   877aa:	2200      	movs	r2, #0
   877ac:	2300      	movs	r3, #0
   877ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   877b0:	f004 fe72 	bl	8c498 <__aeabi_dcmpeq>
   877b4:	2800      	cmp	r0, #0
   877b6:	f47f ade1 	bne.w	8737c <_svfprintf_r+0x15bc>
   877ba:	9b07      	ldr	r3, [sp, #28]
   877bc:	f1c3 0301 	rsb	r3, r3, #1
   877c0:	9322      	str	r3, [sp, #136]	; 0x88
   877c2:	e5dc      	b.n	8737e <_svfprintf_r+0x15be>
   877c4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87860 <_svfprintf_r+0x1aa0>
   877c8:	e4ad      	b.n	87126 <_svfprintf_r+0x1366>
   877ca:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   877ce:	e7bc      	b.n	8774a <_svfprintf_r+0x198a>
   877d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   877d2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 87860 <_svfprintf_r+0x1aa0>
   877d6:	e428      	b.n	8702a <_svfprintf_r+0x126a>
   877d8:	9a07      	ldr	r2, [sp, #28]
   877da:	f009 0901 	and.w	r9, r9, #1
   877de:	ea59 0302 	orrs.w	r3, r9, r2
   877e2:	d104      	bne.n	877ee <_svfprintf_r+0x1a2e>
   877e4:	2301      	movs	r3, #1
   877e6:	2666      	movs	r6, #102	; 0x66
   877e8:	9306      	str	r3, [sp, #24]
   877ea:	930b      	str	r3, [sp, #44]	; 0x2c
   877ec:	e57f      	b.n	872ee <_svfprintf_r+0x152e>
   877ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   877f0:	2666      	movs	r6, #102	; 0x66
   877f2:	3301      	adds	r3, #1
   877f4:	441a      	add	r2, r3
   877f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   877fa:	920b      	str	r2, [sp, #44]	; 0x2c
   877fc:	9306      	str	r3, [sp, #24]
   877fe:	e576      	b.n	872ee <_svfprintf_r+0x152e>
   87800:	900d      	str	r0, [sp, #52]	; 0x34
   87802:	e6cd      	b.n	875a0 <_svfprintf_r+0x17e0>
   87804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87806:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8780a:	4692      	mov	sl, r2
   8780c:	f853 2b04 	ldr.w	r2, [r3], #4
   87810:	930e      	str	r3, [sp, #56]	; 0x38
   87812:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   87816:	9307      	str	r3, [sp, #28]
   87818:	f7fe bb21 	b.w	85e5e <_svfprintf_r+0x9e>
   8781c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8781e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 87860 <_svfprintf_r+0x1aa0>
   87822:	e4b1      	b.n	87188 <_svfprintf_r+0x13c8>
   87824:	9c07      	ldr	r4, [sp, #28]
   87826:	e706      	b.n	87636 <_svfprintf_r+0x1876>
   87828:	2300      	movs	r3, #0
   8782a:	930f      	str	r3, [sp, #60]	; 0x3c
   8782c:	9313      	str	r3, [sp, #76]	; 0x4c
   8782e:	e73c      	b.n	876aa <_svfprintf_r+0x18ea>
   87830:	f8df 902c 	ldr.w	r9, [pc, #44]	; 87860 <_svfprintf_r+0x1aa0>
   87834:	e70a      	b.n	8764c <_svfprintf_r+0x188c>
   87836:	2302      	movs	r3, #2
   87838:	931a      	str	r3, [sp, #104]	; 0x68
   8783a:	f7ff ba15 	b.w	86c68 <_svfprintf_r+0xea8>
   8783e:	990c      	ldr	r1, [sp, #48]	; 0x30
   87840:	898b      	ldrh	r3, [r1, #12]
   87842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   87846:	4613      	mov	r3, r2
   87848:	818a      	strh	r2, [r1, #12]
   8784a:	f7fe bc24 	b.w	86096 <_svfprintf_r+0x2d6>
   8784e:	f04f 32ff 	mov.w	r2, #4294967295
   87852:	230c      	movs	r3, #12
   87854:	9208      	str	r2, [sp, #32]
   87856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87858:	6013      	str	r3, [r2, #0]
   8785a:	f7fe bc23 	b.w	860a4 <_svfprintf_r+0x2e4>
   8785e:	bf00      	nop
   87860:	0008ca10 	.word	0x0008ca10

00087864 <__sprint_r.part.0>:
   87864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87868:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8786a:	4690      	mov	r8, r2
   8786c:	049c      	lsls	r4, r3, #18
   8786e:	d52d      	bpl.n	878cc <__sprint_r.part.0+0x68>
   87870:	6893      	ldr	r3, [r2, #8]
   87872:	6812      	ldr	r2, [r2, #0]
   87874:	b343      	cbz	r3, 878c8 <__sprint_r.part.0+0x64>
   87876:	468b      	mov	fp, r1
   87878:	4606      	mov	r6, r0
   8787a:	f102 0908 	add.w	r9, r2, #8
   8787e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   87882:	ea5f 079a 	movs.w	r7, sl, lsr #2
   87886:	d015      	beq.n	878b4 <__sprint_r.part.0+0x50>
   87888:	2400      	movs	r4, #0
   8788a:	3d04      	subs	r5, #4
   8788c:	e001      	b.n	87892 <__sprint_r.part.0+0x2e>
   8788e:	42a7      	cmp	r7, r4
   87890:	d00e      	beq.n	878b0 <__sprint_r.part.0+0x4c>
   87892:	465a      	mov	r2, fp
   87894:	4630      	mov	r0, r6
   87896:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8789a:	f002 f961 	bl	89b60 <_fputwc_r>
   8789e:	1c43      	adds	r3, r0, #1
   878a0:	f104 0401 	add.w	r4, r4, #1
   878a4:	d1f3      	bne.n	8788e <__sprint_r.part.0+0x2a>
   878a6:	2300      	movs	r3, #0
   878a8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   878ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   878b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   878b4:	f02a 0a03 	bic.w	sl, sl, #3
   878b8:	eba3 030a 	sub.w	r3, r3, sl
   878bc:	f8c8 3008 	str.w	r3, [r8, #8]
   878c0:	f109 0908 	add.w	r9, r9, #8
   878c4:	2b00      	cmp	r3, #0
   878c6:	d1da      	bne.n	8787e <__sprint_r.part.0+0x1a>
   878c8:	2000      	movs	r0, #0
   878ca:	e7ec      	b.n	878a6 <__sprint_r.part.0+0x42>
   878cc:	f002 facc 	bl	89e68 <__sfvwrite_r>
   878d0:	2300      	movs	r3, #0
   878d2:	e9c8 3301 	strd	r3, r3, [r8, #4]
   878d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   878da:	bf00      	nop

000878dc <_vfiprintf_r>:
   878dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   878e0:	b0bd      	sub	sp, #244	; 0xf4
   878e2:	461c      	mov	r4, r3
   878e4:	4617      	mov	r7, r2
   878e6:	e9cd 3005 	strd	r3, r0, [sp, #20]
   878ea:	9102      	str	r1, [sp, #8]
   878ec:	b118      	cbz	r0, 878f6 <_vfiprintf_r+0x1a>
   878ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   878f0:	2b00      	cmp	r3, #0
   878f2:	f000 8277 	beq.w	87de4 <_vfiprintf_r+0x508>
   878f6:	9a02      	ldr	r2, [sp, #8]
   878f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   878fa:	07de      	lsls	r6, r3, #31
   878fc:	f140 8184 	bpl.w	87c08 <_vfiprintf_r+0x32c>
   87900:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   87904:	b28a      	uxth	r2, r1
   87906:	0490      	lsls	r0, r2, #18
   87908:	d408      	bmi.n	8791c <_vfiprintf_r+0x40>
   8790a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8790e:	9902      	ldr	r1, [sp, #8]
   87910:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87912:	818a      	strh	r2, [r1, #12]
   87914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87918:	b292      	uxth	r2, r2
   8791a:	664b      	str	r3, [r1, #100]	; 0x64
   8791c:	0711      	lsls	r1, r2, #28
   8791e:	f140 80ec 	bpl.w	87afa <_vfiprintf_r+0x21e>
   87922:	9b02      	ldr	r3, [sp, #8]
   87924:	691b      	ldr	r3, [r3, #16]
   87926:	2b00      	cmp	r3, #0
   87928:	f000 80e7 	beq.w	87afa <_vfiprintf_r+0x21e>
   8792c:	f002 031a 	and.w	r3, r2, #26
   87930:	2b0a      	cmp	r3, #10
   87932:	f000 80f0 	beq.w	87b16 <_vfiprintf_r+0x23a>
   87936:	ab13      	add	r3, sp, #76	; 0x4c
   87938:	9310      	str	r3, [sp, #64]	; 0x40
   8793a:	2300      	movs	r3, #0
   8793c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   87940:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   87944:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   87948:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8794c:	9304      	str	r3, [sp, #16]
   8794e:	783b      	ldrb	r3, [r7, #0]
   87950:	2b00      	cmp	r3, #0
   87952:	f000 8146 	beq.w	87be2 <_vfiprintf_r+0x306>
   87956:	463c      	mov	r4, r7
   87958:	e004      	b.n	87964 <_vfiprintf_r+0x88>
   8795a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8795e:	2b00      	cmp	r3, #0
   87960:	f000 8121 	beq.w	87ba6 <_vfiprintf_r+0x2ca>
   87964:	2b25      	cmp	r3, #37	; 0x25
   87966:	d1f8      	bne.n	8795a <_vfiprintf_r+0x7e>
   87968:	1be5      	subs	r5, r4, r7
   8796a:	f040 811e 	bne.w	87baa <_vfiprintf_r+0x2ce>
   8796e:	7823      	ldrb	r3, [r4, #0]
   87970:	2b00      	cmp	r3, #0
   87972:	f000 8136 	beq.w	87be2 <_vfiprintf_r+0x306>
   87976:	f04f 0300 	mov.w	r3, #0
   8797a:	2500      	movs	r5, #0
   8797c:	f04f 3bff 	mov.w	fp, #4294967295
   87980:	f04f 082b 	mov.w	r8, #43	; 0x2b
   87984:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87988:	7863      	ldrb	r3, [r4, #1]
   8798a:	9503      	str	r5, [sp, #12]
   8798c:	1c67      	adds	r7, r4, #1
   8798e:	3701      	adds	r7, #1
   87990:	f1a3 0220 	sub.w	r2, r3, #32
   87994:	2a5a      	cmp	r2, #90	; 0x5a
   87996:	f200 8146 	bhi.w	87c26 <_vfiprintf_r+0x34a>
   8799a:	e8df f012 	tbh	[pc, r2, lsl #1]
   8799e:	02a1      	.short	0x02a1
   879a0:	01440144 	.word	0x01440144
   879a4:	0144029d 	.word	0x0144029d
   879a8:	01440144 	.word	0x01440144
   879ac:	0144027c 	.word	0x0144027c
   879b0:	006a0144 	.word	0x006a0144
   879b4:	01440253 	.word	0x01440253
   879b8:	02af0229 	.word	0x02af0229
   879bc:	02ab0144 	.word	0x02ab0144
   879c0:	005b005b 	.word	0x005b005b
   879c4:	005b005b 	.word	0x005b005b
   879c8:	005b005b 	.word	0x005b005b
   879cc:	005b005b 	.word	0x005b005b
   879d0:	0144005b 	.word	0x0144005b
   879d4:	01440144 	.word	0x01440144
   879d8:	01440144 	.word	0x01440144
   879dc:	01440144 	.word	0x01440144
   879e0:	01440144 	.word	0x01440144
   879e4:	00780213 	.word	0x00780213
   879e8:	01440144 	.word	0x01440144
   879ec:	01440144 	.word	0x01440144
   879f0:	01440144 	.word	0x01440144
   879f4:	01440144 	.word	0x01440144
   879f8:	01440144 	.word	0x01440144
   879fc:	014400d1 	.word	0x014400d1
   87a00:	01440144 	.word	0x01440144
   87a04:	014401f7 	.word	0x014401f7
   87a08:	01440241 	.word	0x01440241
   87a0c:	05210144 	.word	0x05210144
   87a10:	01440144 	.word	0x01440144
   87a14:	01440144 	.word	0x01440144
   87a18:	01440144 	.word	0x01440144
   87a1c:	01440144 	.word	0x01440144
   87a20:	01440144 	.word	0x01440144
   87a24:	007a0213 	.word	0x007a0213
   87a28:	01440144 	.word	0x01440144
   87a2c:	02370144 	.word	0x02370144
   87a30:	0074007a 	.word	0x0074007a
   87a34:	022d0144 	.word	0x022d0144
   87a38:	02690144 	.word	0x02690144
   87a3c:	025700d3 	.word	0x025700d3
   87a40:	01440074 	.word	0x01440074
   87a44:	007201f7 	.word	0x007201f7
   87a48:	01440541 	.word	0x01440541
   87a4c:	05430144 	.word	0x05430144
   87a50:	00720144 	.word	0x00720144
   87a54:	2100      	movs	r1, #0
   87a56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87a5a:	f817 3b01 	ldrb.w	r3, [r7], #1
   87a5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   87a62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   87a66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87a6a:	2a09      	cmp	r2, #9
   87a6c:	d9f5      	bls.n	87a5a <_vfiprintf_r+0x17e>
   87a6e:	9103      	str	r1, [sp, #12]
   87a70:	e78e      	b.n	87990 <_vfiprintf_r+0xb4>
   87a72:	9b05      	ldr	r3, [sp, #20]
   87a74:	f853 2b04 	ldr.w	r2, [r3], #4
   87a78:	2a00      	cmp	r2, #0
   87a7a:	9203      	str	r2, [sp, #12]
   87a7c:	9305      	str	r3, [sp, #20]
   87a7e:	f2c0 81b4 	blt.w	87dea <_vfiprintf_r+0x50e>
   87a82:	783b      	ldrb	r3, [r7, #0]
   87a84:	e783      	b.n	8798e <_vfiprintf_r+0xb2>
   87a86:	783b      	ldrb	r3, [r7, #0]
   87a88:	f045 0520 	orr.w	r5, r5, #32
   87a8c:	e77f      	b.n	8798e <_vfiprintf_r+0xb2>
   87a8e:	f045 0510 	orr.w	r5, r5, #16
   87a92:	06ac      	lsls	r4, r5, #26
   87a94:	9e05      	ldr	r6, [sp, #20]
   87a96:	f140 816b 	bpl.w	87d70 <_vfiprintf_r+0x494>
   87a9a:	3607      	adds	r6, #7
   87a9c:	f026 0607 	bic.w	r6, r6, #7
   87aa0:	4632      	mov	r2, r6
   87aa2:	6873      	ldr	r3, [r6, #4]
   87aa4:	f852 6b08 	ldr.w	r6, [r2], #8
   87aa8:	4698      	mov	r8, r3
   87aaa:	9205      	str	r2, [sp, #20]
   87aac:	2b00      	cmp	r3, #0
   87aae:	f2c0 8449 	blt.w	88344 <_vfiprintf_r+0xa68>
   87ab2:	f1bb 3fff 	cmp.w	fp, #4294967295
   87ab6:	f000 8531 	beq.w	8851c <_vfiprintf_r+0xc40>
   87aba:	ea56 0308 	orrs.w	r3, r6, r8
   87abe:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   87ac2:	f000 8425 	beq.w	88310 <_vfiprintf_r+0xa34>
   87ac6:	2e0a      	cmp	r6, #10
   87ac8:	f178 0300 	sbcs.w	r3, r8, #0
   87acc:	f080 84e1 	bcs.w	88492 <_vfiprintf_r+0xbb6>
   87ad0:	2301      	movs	r3, #1
   87ad2:	4655      	mov	r5, sl
   87ad4:	3630      	adds	r6, #48	; 0x30
   87ad6:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   87ada:	9301      	str	r3, [sp, #4]
   87adc:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   87ae0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   87ae4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   87ae8:	45d8      	cmp	r8, fp
   87aea:	bfb8      	it	lt
   87aec:	46d8      	movlt	r8, fp
   87aee:	2b00      	cmp	r3, #0
   87af0:	f000 80a8 	beq.w	87c44 <_vfiprintf_r+0x368>
   87af4:	f108 0801 	add.w	r8, r8, #1
   87af8:	e0a4      	b.n	87c44 <_vfiprintf_r+0x368>
   87afa:	9d02      	ldr	r5, [sp, #8]
   87afc:	9806      	ldr	r0, [sp, #24]
   87afe:	4629      	mov	r1, r5
   87b00:	f000 fdfa 	bl	886f8 <__swsetup_r>
   87b04:	2800      	cmp	r0, #0
   87b06:	f040 8594 	bne.w	88632 <_vfiprintf_r+0xd56>
   87b0a:	89aa      	ldrh	r2, [r5, #12]
   87b0c:	f002 031a 	and.w	r3, r2, #26
   87b10:	2b0a      	cmp	r3, #10
   87b12:	f47f af10 	bne.w	87936 <_vfiprintf_r+0x5a>
   87b16:	9902      	ldr	r1, [sp, #8]
   87b18:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   87b1c:	2b00      	cmp	r3, #0
   87b1e:	f6ff af0a 	blt.w	87936 <_vfiprintf_r+0x5a>
   87b22:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87b24:	07de      	lsls	r6, r3, #31
   87b26:	d402      	bmi.n	87b2e <_vfiprintf_r+0x252>
   87b28:	0595      	lsls	r5, r2, #22
   87b2a:	f140 8562 	bpl.w	885f2 <_vfiprintf_r+0xd16>
   87b2e:	4623      	mov	r3, r4
   87b30:	463a      	mov	r2, r7
   87b32:	9902      	ldr	r1, [sp, #8]
   87b34:	9806      	ldr	r0, [sp, #24]
   87b36:	b03d      	add	sp, #244	; 0xf4
   87b38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87b3c:	f000 bd9a 	b.w	88674 <__sbprintf>
   87b40:	f045 0510 	orr.w	r5, r5, #16
   87b44:	f015 0820 	ands.w	r8, r5, #32
   87b48:	f000 8103 	beq.w	87d52 <_vfiprintf_r+0x476>
   87b4c:	9e05      	ldr	r6, [sp, #20]
   87b4e:	3607      	adds	r6, #7
   87b50:	f026 0607 	bic.w	r6, r6, #7
   87b54:	4633      	mov	r3, r6
   87b56:	f8d6 8004 	ldr.w	r8, [r6, #4]
   87b5a:	f853 6b08 	ldr.w	r6, [r3], #8
   87b5e:	9305      	str	r3, [sp, #20]
   87b60:	2300      	movs	r3, #0
   87b62:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   87b66:	f04f 0200 	mov.w	r2, #0
   87b6a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   87b6e:	f1bb 3fff 	cmp.w	fp, #4294967295
   87b72:	f000 81dd 	beq.w	87f30 <_vfiprintf_r+0x654>
   87b76:	ea56 0208 	orrs.w	r2, r6, r8
   87b7a:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   87b7e:	f040 81d6 	bne.w	87f2e <_vfiprintf_r+0x652>
   87b82:	f1bb 0f00 	cmp.w	fp, #0
   87b86:	f040 84cc 	bne.w	88522 <_vfiprintf_r+0xc46>
   87b8a:	2b00      	cmp	r3, #0
   87b8c:	f040 83c5 	bne.w	8831a <_vfiprintf_r+0xa3e>
   87b90:	f01a 0301 	ands.w	r3, sl, #1
   87b94:	9301      	str	r3, [sp, #4]
   87b96:	f000 83ec 	beq.w	88372 <_vfiprintf_r+0xa96>
   87b9a:	2330      	movs	r3, #48	; 0x30
   87b9c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   87ba0:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   87ba4:	e79c      	b.n	87ae0 <_vfiprintf_r+0x204>
   87ba6:	1be5      	subs	r5, r4, r7
   87ba8:	d01b      	beq.n	87be2 <_vfiprintf_r+0x306>
   87baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87bae:	3301      	adds	r3, #1
   87bb0:	442a      	add	r2, r5
   87bb2:	2b07      	cmp	r3, #7
   87bb4:	e9c9 7500 	strd	r7, r5, [r9]
   87bb8:	9212      	str	r2, [sp, #72]	; 0x48
   87bba:	9311      	str	r3, [sp, #68]	; 0x44
   87bbc:	dc05      	bgt.n	87bca <_vfiprintf_r+0x2ee>
   87bbe:	f109 0908 	add.w	r9, r9, #8
   87bc2:	9b04      	ldr	r3, [sp, #16]
   87bc4:	442b      	add	r3, r5
   87bc6:	9304      	str	r3, [sp, #16]
   87bc8:	e6d1      	b.n	8796e <_vfiprintf_r+0x92>
   87bca:	2a00      	cmp	r2, #0
   87bcc:	f000 839c 	beq.w	88308 <_vfiprintf_r+0xa2c>
   87bd0:	9902      	ldr	r1, [sp, #8]
   87bd2:	9806      	ldr	r0, [sp, #24]
   87bd4:	aa10      	add	r2, sp, #64	; 0x40
   87bd6:	f7ff fe45 	bl	87864 <__sprint_r.part.0>
   87bda:	b940      	cbnz	r0, 87bee <_vfiprintf_r+0x312>
   87bdc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87be0:	e7ef      	b.n	87bc2 <_vfiprintf_r+0x2e6>
   87be2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87be4:	2b00      	cmp	r3, #0
   87be6:	f040 8515 	bne.w	88614 <_vfiprintf_r+0xd38>
   87bea:	2300      	movs	r3, #0
   87bec:	9311      	str	r3, [sp, #68]	; 0x44
   87bee:	9a02      	ldr	r2, [sp, #8]
   87bf0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   87bf2:	07d9      	lsls	r1, r3, #31
   87bf4:	f140 80a2 	bpl.w	87d3c <_vfiprintf_r+0x460>
   87bf8:	8993      	ldrh	r3, [r2, #12]
   87bfa:	065b      	lsls	r3, r3, #25
   87bfc:	f100 8525 	bmi.w	8864a <_vfiprintf_r+0xd6e>
   87c00:	9804      	ldr	r0, [sp, #16]
   87c02:	b03d      	add	sp, #244	; 0xf4
   87c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c08:	9b02      	ldr	r3, [sp, #8]
   87c0a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   87c0e:	058d      	lsls	r5, r1, #22
   87c10:	b28a      	uxth	r2, r1
   87c12:	f53f ae78 	bmi.w	87906 <_vfiprintf_r+0x2a>
   87c16:	461d      	mov	r5, r3
   87c18:	6d98      	ldr	r0, [r3, #88]	; 0x58
   87c1a:	f002 facf 	bl	8a1bc <__retarget_lock_acquire_recursive>
   87c1e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   87c22:	b28a      	uxth	r2, r1
   87c24:	e66f      	b.n	87906 <_vfiprintf_r+0x2a>
   87c26:	2b00      	cmp	r3, #0
   87c28:	d0db      	beq.n	87be2 <_vfiprintf_r+0x306>
   87c2a:	f04f 0801 	mov.w	r8, #1
   87c2e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c32:	f04f 0300 	mov.w	r3, #0
   87c36:	ac23      	add	r4, sp, #140	; 0x8c
   87c38:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87c3c:	f8cd 8004 	str.w	r8, [sp, #4]
   87c40:	f04f 0b00 	mov.w	fp, #0
   87c44:	f015 0302 	ands.w	r3, r5, #2
   87c48:	9307      	str	r3, [sp, #28]
   87c4a:	bf18      	it	ne
   87c4c:	f108 0802 	addne.w	r8, r8, #2
   87c50:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   87c54:	9308      	str	r3, [sp, #32]
   87c56:	d105      	bne.n	87c64 <_vfiprintf_r+0x388>
   87c58:	9b03      	ldr	r3, [sp, #12]
   87c5a:	eba3 0608 	sub.w	r6, r3, r8
   87c5e:	2e00      	cmp	r6, #0
   87c60:	f300 828a 	bgt.w	88178 <_vfiprintf_r+0x89c>
   87c64:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87c68:	1c48      	adds	r0, r1, #1
   87c6a:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   87c6e:	b176      	cbz	r6, 87c8e <_vfiprintf_r+0x3b2>
   87c70:	2101      	movs	r1, #1
   87c72:	3201      	adds	r2, #1
   87c74:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   87c78:	2807      	cmp	r0, #7
   87c7a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87c7e:	e9c9 6100 	strd	r6, r1, [r9]
   87c82:	f300 8258 	bgt.w	88136 <_vfiprintf_r+0x85a>
   87c86:	4601      	mov	r1, r0
   87c88:	f109 0908 	add.w	r9, r9, #8
   87c8c:	3001      	adds	r0, #1
   87c8e:	9b07      	ldr	r3, [sp, #28]
   87c90:	b1d3      	cbz	r3, 87cc8 <_vfiprintf_r+0x3ec>
   87c92:	2302      	movs	r3, #2
   87c94:	3202      	adds	r2, #2
   87c96:	f8c9 3004 	str.w	r3, [r9, #4]
   87c9a:	2807      	cmp	r0, #7
   87c9c:	ab0f      	add	r3, sp, #60	; 0x3c
   87c9e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87ca2:	f8c9 3000 	str.w	r3, [r9]
   87ca6:	f340 8262 	ble.w	8816e <_vfiprintf_r+0x892>
   87caa:	2a00      	cmp	r2, #0
   87cac:	f000 8327 	beq.w	882fe <_vfiprintf_r+0xa22>
   87cb0:	9902      	ldr	r1, [sp, #8]
   87cb2:	9806      	ldr	r0, [sp, #24]
   87cb4:	aa10      	add	r2, sp, #64	; 0x40
   87cb6:	f7ff fdd5 	bl	87864 <__sprint_r.part.0>
   87cba:	2800      	cmp	r0, #0
   87cbc:	d197      	bne.n	87bee <_vfiprintf_r+0x312>
   87cbe:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87cc2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87cc6:	1c48      	adds	r0, r1, #1
   87cc8:	9b08      	ldr	r3, [sp, #32]
   87cca:	2b80      	cmp	r3, #128	; 0x80
   87ccc:	f000 8171 	beq.w	87fb2 <_vfiprintf_r+0x6d6>
   87cd0:	9b01      	ldr	r3, [sp, #4]
   87cd2:	ebab 0603 	sub.w	r6, fp, r3
   87cd6:	2e00      	cmp	r6, #0
   87cd8:	f300 81cf 	bgt.w	8807a <_vfiprintf_r+0x79e>
   87cdc:	9b01      	ldr	r3, [sp, #4]
   87cde:	2807      	cmp	r0, #7
   87ce0:	441a      	add	r2, r3
   87ce2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87ce6:	f8c9 4000 	str.w	r4, [r9]
   87cea:	f8c9 3004 	str.w	r3, [r9, #4]
   87cee:	f340 815d 	ble.w	87fac <_vfiprintf_r+0x6d0>
   87cf2:	2a00      	cmp	r2, #0
   87cf4:	f000 8293 	beq.w	8821e <_vfiprintf_r+0x942>
   87cf8:	9902      	ldr	r1, [sp, #8]
   87cfa:	9806      	ldr	r0, [sp, #24]
   87cfc:	aa10      	add	r2, sp, #64	; 0x40
   87cfe:	f7ff fdb1 	bl	87864 <__sprint_r.part.0>
   87d02:	2800      	cmp	r0, #0
   87d04:	f47f af73 	bne.w	87bee <_vfiprintf_r+0x312>
   87d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87d0a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87d0e:	0768      	lsls	r0, r5, #29
   87d10:	d505      	bpl.n	87d1e <_vfiprintf_r+0x442>
   87d12:	9b03      	ldr	r3, [sp, #12]
   87d14:	eba3 0408 	sub.w	r4, r3, r8
   87d18:	2c00      	cmp	r4, #0
   87d1a:	f300 828a 	bgt.w	88232 <_vfiprintf_r+0x956>
   87d1e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   87d22:	4541      	cmp	r1, r8
   87d24:	bfac      	ite	ge
   87d26:	185b      	addge	r3, r3, r1
   87d28:	4443      	addlt	r3, r8
   87d2a:	9304      	str	r3, [sp, #16]
   87d2c:	2a00      	cmp	r2, #0
   87d2e:	f040 81f3 	bne.w	88118 <_vfiprintf_r+0x83c>
   87d32:	2300      	movs	r3, #0
   87d34:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87d38:	9311      	str	r3, [sp, #68]	; 0x44
   87d3a:	e608      	b.n	8794e <_vfiprintf_r+0x72>
   87d3c:	9b02      	ldr	r3, [sp, #8]
   87d3e:	899b      	ldrh	r3, [r3, #12]
   87d40:	059a      	lsls	r2, r3, #22
   87d42:	f53f af5a 	bmi.w	87bfa <_vfiprintf_r+0x31e>
   87d46:	9c02      	ldr	r4, [sp, #8]
   87d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87d4a:	f002 fa39 	bl	8a1c0 <__retarget_lock_release_recursive>
   87d4e:	89a3      	ldrh	r3, [r4, #12]
   87d50:	e753      	b.n	87bfa <_vfiprintf_r+0x31e>
   87d52:	f015 0310 	ands.w	r3, r5, #16
   87d56:	f040 8318 	bne.w	8838a <_vfiprintf_r+0xaae>
   87d5a:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   87d5e:	f000 8310 	beq.w	88382 <_vfiprintf_r+0xaa6>
   87d62:	9e05      	ldr	r6, [sp, #20]
   87d64:	4698      	mov	r8, r3
   87d66:	f856 3b04 	ldr.w	r3, [r6], #4
   87d6a:	9605      	str	r6, [sp, #20]
   87d6c:	b29e      	uxth	r6, r3
   87d6e:	e6f7      	b.n	87b60 <_vfiprintf_r+0x284>
   87d70:	f856 3b04 	ldr.w	r3, [r6], #4
   87d74:	06e8      	lsls	r0, r5, #27
   87d76:	9605      	str	r6, [sp, #20]
   87d78:	f100 8310 	bmi.w	8839c <_vfiprintf_r+0xac0>
   87d7c:	0669      	lsls	r1, r5, #25
   87d7e:	f140 830a 	bpl.w	88396 <_vfiprintf_r+0xaba>
   87d82:	f343 38c0 	sbfx	r8, r3, #15, #1
   87d86:	b21e      	sxth	r6, r3
   87d88:	4643      	mov	r3, r8
   87d8a:	e68f      	b.n	87aac <_vfiprintf_r+0x1d0>
   87d8c:	f04f 0300 	mov.w	r3, #0
   87d90:	9e05      	ldr	r6, [sp, #20]
   87d92:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87d96:	f856 4b04 	ldr.w	r4, [r6], #4
   87d9a:	2c00      	cmp	r4, #0
   87d9c:	f000 83cf 	beq.w	8853e <_vfiprintf_r+0xc62>
   87da0:	f1bb 3fff 	cmp.w	fp, #4294967295
   87da4:	f000 8341 	beq.w	8842a <_vfiprintf_r+0xb4e>
   87da8:	465a      	mov	r2, fp
   87daa:	2100      	movs	r1, #0
   87dac:	4620      	mov	r0, r4
   87dae:	f002 fd73 	bl	8a898 <memchr>
   87db2:	2800      	cmp	r0, #0
   87db4:	f000 8422 	beq.w	885fc <_vfiprintf_r+0xd20>
   87db8:	1b03      	subs	r3, r0, r4
   87dba:	f04f 0b00 	mov.w	fp, #0
   87dbe:	9605      	str	r6, [sp, #20]
   87dc0:	9301      	str	r3, [sp, #4]
   87dc2:	e68d      	b.n	87ae0 <_vfiprintf_r+0x204>
   87dc4:	f04f 0300 	mov.w	r3, #0
   87dc8:	f04f 0801 	mov.w	r8, #1
   87dcc:	9e05      	ldr	r6, [sp, #20]
   87dce:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87dd2:	f856 3b04 	ldr.w	r3, [r6], #4
   87dd6:	ac23      	add	r4, sp, #140	; 0x8c
   87dd8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87ddc:	9605      	str	r6, [sp, #20]
   87dde:	f8cd 8004 	str.w	r8, [sp, #4]
   87de2:	e72d      	b.n	87c40 <_vfiprintf_r+0x364>
   87de4:	f001 fdc4 	bl	89970 <__sinit>
   87de8:	e585      	b.n	878f6 <_vfiprintf_r+0x1a>
   87dea:	9b03      	ldr	r3, [sp, #12]
   87dec:	425b      	negs	r3, r3
   87dee:	9303      	str	r3, [sp, #12]
   87df0:	783b      	ldrb	r3, [r7, #0]
   87df2:	f045 0504 	orr.w	r5, r5, #4
   87df6:	e5ca      	b.n	8798e <_vfiprintf_r+0xb2>
   87df8:	783b      	ldrb	r3, [r7, #0]
   87dfa:	2b6c      	cmp	r3, #108	; 0x6c
   87dfc:	bf03      	ittte	eq
   87dfe:	787b      	ldrbeq	r3, [r7, #1]
   87e00:	f045 0520 	orreq.w	r5, r5, #32
   87e04:	3701      	addeq	r7, #1
   87e06:	f045 0510 	orrne.w	r5, r5, #16
   87e0a:	e5c0      	b.n	8798e <_vfiprintf_r+0xb2>
   87e0c:	783b      	ldrb	r3, [r7, #0]
   87e0e:	2b68      	cmp	r3, #104	; 0x68
   87e10:	bf03      	ittte	eq
   87e12:	787b      	ldrbeq	r3, [r7, #1]
   87e14:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   87e18:	3701      	addeq	r7, #1
   87e1a:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   87e1e:	e5b6      	b.n	8798e <_vfiprintf_r+0xb2>
   87e20:	f045 0a10 	orr.w	sl, r5, #16
   87e24:	f01a 0820 	ands.w	r8, sl, #32
   87e28:	f000 827e 	beq.w	88328 <_vfiprintf_r+0xa4c>
   87e2c:	9e05      	ldr	r6, [sp, #20]
   87e2e:	2301      	movs	r3, #1
   87e30:	3607      	adds	r6, #7
   87e32:	f026 0607 	bic.w	r6, r6, #7
   87e36:	4632      	mov	r2, r6
   87e38:	f8d6 8004 	ldr.w	r8, [r6, #4]
   87e3c:	f852 6b08 	ldr.w	r6, [r2], #8
   87e40:	9205      	str	r2, [sp, #20]
   87e42:	e690      	b.n	87b66 <_vfiprintf_r+0x28a>
   87e44:	783b      	ldrb	r3, [r7, #0]
   87e46:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   87e4a:	e5a0      	b.n	8798e <_vfiprintf_r+0xb2>
   87e4c:	2230      	movs	r2, #48	; 0x30
   87e4e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   87e52:	2278      	movs	r2, #120	; 0x78
   87e54:	9b05      	ldr	r3, [sp, #20]
   87e56:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   87e5a:	f853 6b04 	ldr.w	r6, [r3], #4
   87e5e:	4abe      	ldr	r2, [pc, #760]	; (88158 <_vfiprintf_r+0x87c>)
   87e60:	9305      	str	r3, [sp, #20]
   87e62:	f04f 0800 	mov.w	r8, #0
   87e66:	2302      	movs	r3, #2
   87e68:	f045 0a02 	orr.w	sl, r5, #2
   87e6c:	9209      	str	r2, [sp, #36]	; 0x24
   87e6e:	e67a      	b.n	87b66 <_vfiprintf_r+0x28a>
   87e70:	06ae      	lsls	r6, r5, #26
   87e72:	f100 82a4 	bmi.w	883be <_vfiprintf_r+0xae2>
   87e76:	06ec      	lsls	r4, r5, #27
   87e78:	f100 8359 	bmi.w	8852e <_vfiprintf_r+0xc52>
   87e7c:	0668      	lsls	r0, r5, #25
   87e7e:	f100 83b0 	bmi.w	885e2 <_vfiprintf_r+0xd06>
   87e82:	05a9      	lsls	r1, r5, #22
   87e84:	f140 8353 	bpl.w	8852e <_vfiprintf_r+0xc52>
   87e88:	9e05      	ldr	r6, [sp, #20]
   87e8a:	9a04      	ldr	r2, [sp, #16]
   87e8c:	f856 3b04 	ldr.w	r3, [r6], #4
   87e90:	701a      	strb	r2, [r3, #0]
   87e92:	9605      	str	r6, [sp, #20]
   87e94:	e55b      	b.n	8794e <_vfiprintf_r+0x72>
   87e96:	9c06      	ldr	r4, [sp, #24]
   87e98:	4620      	mov	r0, r4
   87e9a:	f002 f987 	bl	8a1ac <_localeconv_r>
   87e9e:	6843      	ldr	r3, [r0, #4]
   87ea0:	4618      	mov	r0, r3
   87ea2:	930b      	str	r3, [sp, #44]	; 0x2c
   87ea4:	f7fd ff2a 	bl	85cfc <strlen>
   87ea8:	4603      	mov	r3, r0
   87eaa:	4620      	mov	r0, r4
   87eac:	930c      	str	r3, [sp, #48]	; 0x30
   87eae:	461c      	mov	r4, r3
   87eb0:	f002 f97c 	bl	8a1ac <_localeconv_r>
   87eb4:	6883      	ldr	r3, [r0, #8]
   87eb6:	930a      	str	r3, [sp, #40]	; 0x28
   87eb8:	2c00      	cmp	r4, #0
   87eba:	f43f ade2 	beq.w	87a82 <_vfiprintf_r+0x1a6>
   87ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87ec0:	2b00      	cmp	r3, #0
   87ec2:	f43f adde 	beq.w	87a82 <_vfiprintf_r+0x1a6>
   87ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87ec8:	781b      	ldrb	r3, [r3, #0]
   87eca:	2b00      	cmp	r3, #0
   87ecc:	f43f add9 	beq.w	87a82 <_vfiprintf_r+0x1a6>
   87ed0:	783b      	ldrb	r3, [r7, #0]
   87ed2:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   87ed6:	e55a      	b.n	8798e <_vfiprintf_r+0xb2>
   87ed8:	783b      	ldrb	r3, [r7, #0]
   87eda:	f045 0501 	orr.w	r5, r5, #1
   87ede:	e556      	b.n	8798e <_vfiprintf_r+0xb2>
   87ee0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   87ee4:	2b00      	cmp	r3, #0
   87ee6:	f47f adcc 	bne.w	87a82 <_vfiprintf_r+0x1a6>
   87eea:	2320      	movs	r3, #32
   87eec:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87ef0:	783b      	ldrb	r3, [r7, #0]
   87ef2:	e54c      	b.n	8798e <_vfiprintf_r+0xb2>
   87ef4:	783b      	ldrb	r3, [r7, #0]
   87ef6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   87efa:	e548      	b.n	8798e <_vfiprintf_r+0xb2>
   87efc:	4639      	mov	r1, r7
   87efe:	f811 3b01 	ldrb.w	r3, [r1], #1
   87f02:	2b2a      	cmp	r3, #42	; 0x2a
   87f04:	f000 83a6 	beq.w	88654 <_vfiprintf_r+0xd78>
   87f08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87f0c:	2a09      	cmp	r2, #9
   87f0e:	460f      	mov	r7, r1
   87f10:	f04f 0b00 	mov.w	fp, #0
   87f14:	f63f ad3c 	bhi.w	87990 <_vfiprintf_r+0xb4>
   87f18:	f817 3b01 	ldrb.w	r3, [r7], #1
   87f1c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   87f20:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   87f24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87f28:	2a09      	cmp	r2, #9
   87f2a:	d9f5      	bls.n	87f18 <_vfiprintf_r+0x63c>
   87f2c:	e530      	b.n	87990 <_vfiprintf_r+0xb4>
   87f2e:	46aa      	mov	sl, r5
   87f30:	2b01      	cmp	r3, #1
   87f32:	f43f adc8 	beq.w	87ac6 <_vfiprintf_r+0x1ea>
   87f36:	2b02      	cmp	r3, #2
   87f38:	ac3c      	add	r4, sp, #240	; 0xf0
   87f3a:	d112      	bne.n	87f62 <_vfiprintf_r+0x686>
   87f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87f3e:	f006 030f 	and.w	r3, r6, #15
   87f42:	5cd3      	ldrb	r3, [r2, r3]
   87f44:	0936      	lsrs	r6, r6, #4
   87f46:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   87f4a:	ea4f 1818 	mov.w	r8, r8, lsr #4
   87f4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
   87f52:	ea56 0308 	orrs.w	r3, r6, r8
   87f56:	d1f2      	bne.n	87f3e <_vfiprintf_r+0x662>
   87f58:	ab3c      	add	r3, sp, #240	; 0xf0
   87f5a:	1b1b      	subs	r3, r3, r4
   87f5c:	4655      	mov	r5, sl
   87f5e:	9301      	str	r3, [sp, #4]
   87f60:	e5be      	b.n	87ae0 <_vfiprintf_r+0x204>
   87f62:	f006 0307 	and.w	r3, r6, #7
   87f66:	08f6      	lsrs	r6, r6, #3
   87f68:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   87f6c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   87f70:	3330      	adds	r3, #48	; 0x30
   87f72:	ea56 0108 	orrs.w	r1, r6, r8
   87f76:	4622      	mov	r2, r4
   87f78:	f804 3d01 	strb.w	r3, [r4, #-1]!
   87f7c:	d1f1      	bne.n	87f62 <_vfiprintf_r+0x686>
   87f7e:	f01a 0f01 	tst.w	sl, #1
   87f82:	d0e9      	beq.n	87f58 <_vfiprintf_r+0x67c>
   87f84:	2b30      	cmp	r3, #48	; 0x30
   87f86:	d0e7      	beq.n	87f58 <_vfiprintf_r+0x67c>
   87f88:	2330      	movs	r3, #48	; 0x30
   87f8a:	3a02      	subs	r2, #2
   87f8c:	f804 3c01 	strb.w	r3, [r4, #-1]
   87f90:	ab3c      	add	r3, sp, #240	; 0xf0
   87f92:	1a9b      	subs	r3, r3, r2
   87f94:	4655      	mov	r5, sl
   87f96:	4614      	mov	r4, r2
   87f98:	9301      	str	r3, [sp, #4]
   87f9a:	e5a1      	b.n	87ae0 <_vfiprintf_r+0x204>
   87f9c:	2301      	movs	r3, #1
   87f9e:	9a01      	ldr	r2, [sp, #4]
   87fa0:	9413      	str	r4, [sp, #76]	; 0x4c
   87fa2:	9311      	str	r3, [sp, #68]	; 0x44
   87fa4:	9214      	str	r2, [sp, #80]	; 0x50
   87fa6:	9212      	str	r2, [sp, #72]	; 0x48
   87fa8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87fac:	f109 0908 	add.w	r9, r9, #8
   87fb0:	e6ad      	b.n	87d0e <_vfiprintf_r+0x432>
   87fb2:	9b03      	ldr	r3, [sp, #12]
   87fb4:	eba3 0608 	sub.w	r6, r3, r8
   87fb8:	2e00      	cmp	r6, #0
   87fba:	f77f ae89 	ble.w	87cd0 <_vfiprintf_r+0x3f4>
   87fbe:	2e10      	cmp	r6, #16
   87fc0:	f8df a198 	ldr.w	sl, [pc, #408]	; 8815c <_vfiprintf_r+0x880>
   87fc4:	dd38      	ble.n	88038 <_vfiprintf_r+0x75c>
   87fc6:	4653      	mov	r3, sl
   87fc8:	46cc      	mov	ip, r9
   87fca:	46ba      	mov	sl, r7
   87fcc:	46c1      	mov	r9, r8
   87fce:	9407      	str	r4, [sp, #28]
   87fd0:	46a8      	mov	r8, r5
   87fd2:	461f      	mov	r7, r3
   87fd4:	9c06      	ldr	r4, [sp, #24]
   87fd6:	9d02      	ldr	r5, [sp, #8]
   87fd8:	e007      	b.n	87fea <_vfiprintf_r+0x70e>
   87fda:	f101 0e02 	add.w	lr, r1, #2
   87fde:	4601      	mov	r1, r0
   87fe0:	f10c 0c08 	add.w	ip, ip, #8
   87fe4:	3e10      	subs	r6, #16
   87fe6:	2e10      	cmp	r6, #16
   87fe8:	dd1e      	ble.n	88028 <_vfiprintf_r+0x74c>
   87fea:	2310      	movs	r3, #16
   87fec:	1c48      	adds	r0, r1, #1
   87fee:	3210      	adds	r2, #16
   87ff0:	2807      	cmp	r0, #7
   87ff2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87ff6:	f8cc 7000 	str.w	r7, [ip]
   87ffa:	f8cc 3004 	str.w	r3, [ip, #4]
   87ffe:	ddec      	ble.n	87fda <_vfiprintf_r+0x6fe>
   88000:	2a00      	cmp	r2, #0
   88002:	f000 8092 	beq.w	8812a <_vfiprintf_r+0x84e>
   88006:	4629      	mov	r1, r5
   88008:	4620      	mov	r0, r4
   8800a:	aa10      	add	r2, sp, #64	; 0x40
   8800c:	f7ff fc2a 	bl	87864 <__sprint_r.part.0>
   88010:	2800      	cmp	r0, #0
   88012:	f47f adec 	bne.w	87bee <_vfiprintf_r+0x312>
   88016:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8801a:	3e10      	subs	r6, #16
   8801c:	2e10      	cmp	r6, #16
   8801e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88022:	f101 0e01 	add.w	lr, r1, #1
   88026:	dce0      	bgt.n	87fea <_vfiprintf_r+0x70e>
   88028:	463b      	mov	r3, r7
   8802a:	4645      	mov	r5, r8
   8802c:	4657      	mov	r7, sl
   8802e:	46c8      	mov	r8, r9
   88030:	4670      	mov	r0, lr
   88032:	46e1      	mov	r9, ip
   88034:	469a      	mov	sl, r3
   88036:	9c07      	ldr	r4, [sp, #28]
   88038:	4432      	add	r2, r6
   8803a:	2807      	cmp	r0, #7
   8803c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88040:	f8c9 a000 	str.w	sl, [r9]
   88044:	f8c9 6004 	str.w	r6, [r9, #4]
   88048:	f340 8196 	ble.w	88378 <_vfiprintf_r+0xa9c>
   8804c:	2a00      	cmp	r2, #0
   8804e:	f000 829a 	beq.w	88586 <_vfiprintf_r+0xcaa>
   88052:	9902      	ldr	r1, [sp, #8]
   88054:	9806      	ldr	r0, [sp, #24]
   88056:	aa10      	add	r2, sp, #64	; 0x40
   88058:	f7ff fc04 	bl	87864 <__sprint_r.part.0>
   8805c:	2800      	cmp	r0, #0
   8805e:	f47f adc6 	bne.w	87bee <_vfiprintf_r+0x312>
   88062:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88066:	9b01      	ldr	r3, [sp, #4]
   88068:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8806c:	ebab 0603 	sub.w	r6, fp, r3
   88070:	2e00      	cmp	r6, #0
   88072:	f101 0001 	add.w	r0, r1, #1
   88076:	f77f ae31 	ble.w	87cdc <_vfiprintf_r+0x400>
   8807a:	2e10      	cmp	r6, #16
   8807c:	f340 826b 	ble.w	88556 <_vfiprintf_r+0xc7a>
   88080:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8815c <_vfiprintf_r+0x880>
   88084:	46cc      	mov	ip, r9
   88086:	4653      	mov	r3, sl
   88088:	46c1      	mov	r9, r8
   8808a:	46ba      	mov	sl, r7
   8808c:	46a8      	mov	r8, r5
   8808e:	9407      	str	r4, [sp, #28]
   88090:	f04f 0b10 	mov.w	fp, #16
   88094:	461f      	mov	r7, r3
   88096:	9c06      	ldr	r4, [sp, #24]
   88098:	9d02      	ldr	r5, [sp, #8]
   8809a:	e007      	b.n	880ac <_vfiprintf_r+0x7d0>
   8809c:	f101 0e02 	add.w	lr, r1, #2
   880a0:	4601      	mov	r1, r0
   880a2:	f10c 0c08 	add.w	ip, ip, #8
   880a6:	3e10      	subs	r6, #16
   880a8:	2e10      	cmp	r6, #16
   880aa:	dd19      	ble.n	880e0 <_vfiprintf_r+0x804>
   880ac:	1c48      	adds	r0, r1, #1
   880ae:	3210      	adds	r2, #16
   880b0:	2807      	cmp	r0, #7
   880b2:	e9cc 7b00 	strd	r7, fp, [ip]
   880b6:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   880ba:	ddef      	ble.n	8809c <_vfiprintf_r+0x7c0>
   880bc:	b332      	cbz	r2, 8810c <_vfiprintf_r+0x830>
   880be:	4629      	mov	r1, r5
   880c0:	4620      	mov	r0, r4
   880c2:	aa10      	add	r2, sp, #64	; 0x40
   880c4:	f7ff fbce 	bl	87864 <__sprint_r.part.0>
   880c8:	2800      	cmp	r0, #0
   880ca:	f47f ad90 	bne.w	87bee <_vfiprintf_r+0x312>
   880ce:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   880d2:	3e10      	subs	r6, #16
   880d4:	2e10      	cmp	r6, #16
   880d6:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   880da:	f101 0e01 	add.w	lr, r1, #1
   880de:	dce5      	bgt.n	880ac <_vfiprintf_r+0x7d0>
   880e0:	463b      	mov	r3, r7
   880e2:	4645      	mov	r5, r8
   880e4:	4657      	mov	r7, sl
   880e6:	46c8      	mov	r8, r9
   880e8:	4670      	mov	r0, lr
   880ea:	46e1      	mov	r9, ip
   880ec:	469a      	mov	sl, r3
   880ee:	9c07      	ldr	r4, [sp, #28]
   880f0:	4432      	add	r2, r6
   880f2:	2807      	cmp	r0, #7
   880f4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   880f8:	f8c9 a000 	str.w	sl, [r9]
   880fc:	f8c9 6004 	str.w	r6, [r9, #4]
   88100:	f300 80e9 	bgt.w	882d6 <_vfiprintf_r+0x9fa>
   88104:	f109 0908 	add.w	r9, r9, #8
   88108:	3001      	adds	r0, #1
   8810a:	e5e7      	b.n	87cdc <_vfiprintf_r+0x400>
   8810c:	f04f 0e01 	mov.w	lr, #1
   88110:	4611      	mov	r1, r2
   88112:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88116:	e7c6      	b.n	880a6 <_vfiprintf_r+0x7ca>
   88118:	9902      	ldr	r1, [sp, #8]
   8811a:	9806      	ldr	r0, [sp, #24]
   8811c:	aa10      	add	r2, sp, #64	; 0x40
   8811e:	f7ff fba1 	bl	87864 <__sprint_r.part.0>
   88122:	2800      	cmp	r0, #0
   88124:	f43f ae05 	beq.w	87d32 <_vfiprintf_r+0x456>
   88128:	e561      	b.n	87bee <_vfiprintf_r+0x312>
   8812a:	f04f 0e01 	mov.w	lr, #1
   8812e:	4611      	mov	r1, r2
   88130:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88134:	e756      	b.n	87fe4 <_vfiprintf_r+0x708>
   88136:	2a00      	cmp	r2, #0
   88138:	f000 80de 	beq.w	882f8 <_vfiprintf_r+0xa1c>
   8813c:	9902      	ldr	r1, [sp, #8]
   8813e:	9806      	ldr	r0, [sp, #24]
   88140:	aa10      	add	r2, sp, #64	; 0x40
   88142:	f7ff fb8f 	bl	87864 <__sprint_r.part.0>
   88146:	2800      	cmp	r0, #0
   88148:	f47f ad51 	bne.w	87bee <_vfiprintf_r+0x312>
   8814c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88150:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88154:	1c48      	adds	r0, r1, #1
   88156:	e59a      	b.n	87c8e <_vfiprintf_r+0x3b2>
   88158:	0008c9cc 	.word	0x0008c9cc
   8815c:	0008ca30 	.word	0x0008ca30
   88160:	2202      	movs	r2, #2
   88162:	2001      	movs	r0, #1
   88164:	ab0f      	add	r3, sp, #60	; 0x3c
   88166:	9313      	str	r3, [sp, #76]	; 0x4c
   88168:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8816c:	9214      	str	r2, [sp, #80]	; 0x50
   8816e:	4601      	mov	r1, r0
   88170:	f109 0908 	add.w	r9, r9, #8
   88174:	1c48      	adds	r0, r1, #1
   88176:	e5a7      	b.n	87cc8 <_vfiprintf_r+0x3ec>
   88178:	2e10      	cmp	r6, #16
   8817a:	f340 8245 	ble.w	88608 <_vfiprintf_r+0xd2c>
   8817e:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   88182:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 88474 <_vfiprintf_r+0xb98>
   88186:	4619      	mov	r1, r3
   88188:	4653      	mov	r3, sl
   8818a:	46cc      	mov	ip, r9
   8818c:	46ba      	mov	sl, r7
   8818e:	46c1      	mov	r9, r8
   88190:	940d      	str	r4, [sp, #52]	; 0x34
   88192:	46a8      	mov	r8, r5
   88194:	461f      	mov	r7, r3
   88196:	9c06      	ldr	r4, [sp, #24]
   88198:	9d02      	ldr	r5, [sp, #8]
   8819a:	e007      	b.n	881ac <_vfiprintf_r+0x8d0>
   8819c:	f101 0e02 	add.w	lr, r1, #2
   881a0:	4601      	mov	r1, r0
   881a2:	f10c 0c08 	add.w	ip, ip, #8
   881a6:	3e10      	subs	r6, #16
   881a8:	2e10      	cmp	r6, #16
   881aa:	dd1c      	ble.n	881e6 <_vfiprintf_r+0x90a>
   881ac:	2310      	movs	r3, #16
   881ae:	1c48      	adds	r0, r1, #1
   881b0:	3210      	adds	r2, #16
   881b2:	2807      	cmp	r0, #7
   881b4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   881b8:	f8cc 7000 	str.w	r7, [ip]
   881bc:	f8cc 3004 	str.w	r3, [ip, #4]
   881c0:	ddec      	ble.n	8819c <_vfiprintf_r+0x8c0>
   881c2:	b332      	cbz	r2, 88212 <_vfiprintf_r+0x936>
   881c4:	4629      	mov	r1, r5
   881c6:	4620      	mov	r0, r4
   881c8:	aa10      	add	r2, sp, #64	; 0x40
   881ca:	f7ff fb4b 	bl	87864 <__sprint_r.part.0>
   881ce:	2800      	cmp	r0, #0
   881d0:	f47f ad0d 	bne.w	87bee <_vfiprintf_r+0x312>
   881d4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   881d8:	3e10      	subs	r6, #16
   881da:	2e10      	cmp	r6, #16
   881dc:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   881e0:	f101 0e01 	add.w	lr, r1, #1
   881e4:	dce2      	bgt.n	881ac <_vfiprintf_r+0x8d0>
   881e6:	463b      	mov	r3, r7
   881e8:	4645      	mov	r5, r8
   881ea:	4657      	mov	r7, sl
   881ec:	46c8      	mov	r8, r9
   881ee:	4671      	mov	r1, lr
   881f0:	46e1      	mov	r9, ip
   881f2:	469a      	mov	sl, r3
   881f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   881f6:	4432      	add	r2, r6
   881f8:	2907      	cmp	r1, #7
   881fa:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   881fe:	f8c9 a000 	str.w	sl, [r9]
   88202:	f8c9 6004 	str.w	r6, [r9, #4]
   88206:	f300 80a7 	bgt.w	88358 <_vfiprintf_r+0xa7c>
   8820a:	f109 0908 	add.w	r9, r9, #8
   8820e:	1c48      	adds	r0, r1, #1
   88210:	e52b      	b.n	87c6a <_vfiprintf_r+0x38e>
   88212:	4611      	mov	r1, r2
   88214:	f04f 0e01 	mov.w	lr, #1
   88218:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8821c:	e7c3      	b.n	881a6 <_vfiprintf_r+0x8ca>
   8821e:	076c      	lsls	r4, r5, #29
   88220:	9211      	str	r2, [sp, #68]	; 0x44
   88222:	d550      	bpl.n	882c6 <_vfiprintf_r+0x9ea>
   88224:	9b03      	ldr	r3, [sp, #12]
   88226:	eba3 0408 	sub.w	r4, r3, r8
   8822a:	2c00      	cmp	r4, #0
   8822c:	dd4b      	ble.n	882c6 <_vfiprintf_r+0x9ea>
   8822e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88232:	2c10      	cmp	r4, #16
   88234:	f340 81f8 	ble.w	88628 <_vfiprintf_r+0xd4c>
   88238:	f8df a238 	ldr.w	sl, [pc, #568]	; 88474 <_vfiprintf_r+0xb98>
   8823c:	2510      	movs	r5, #16
   8823e:	4653      	mov	r3, sl
   88240:	9911      	ldr	r1, [sp, #68]	; 0x44
   88242:	46ba      	mov	sl, r7
   88244:	9e06      	ldr	r6, [sp, #24]
   88246:	461f      	mov	r7, r3
   88248:	f8dd b008 	ldr.w	fp, [sp, #8]
   8824c:	e006      	b.n	8825c <_vfiprintf_r+0x980>
   8824e:	1c88      	adds	r0, r1, #2
   88250:	4619      	mov	r1, r3
   88252:	f109 0908 	add.w	r9, r9, #8
   88256:	3c10      	subs	r4, #16
   88258:	2c10      	cmp	r4, #16
   8825a:	dd19      	ble.n	88290 <_vfiprintf_r+0x9b4>
   8825c:	1c4b      	adds	r3, r1, #1
   8825e:	3210      	adds	r2, #16
   88260:	2b07      	cmp	r3, #7
   88262:	e9c9 7500 	strd	r7, r5, [r9]
   88266:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8826a:	ddf0      	ble.n	8824e <_vfiprintf_r+0x972>
   8826c:	b332      	cbz	r2, 882bc <_vfiprintf_r+0x9e0>
   8826e:	4659      	mov	r1, fp
   88270:	4630      	mov	r0, r6
   88272:	aa10      	add	r2, sp, #64	; 0x40
   88274:	f7ff faf6 	bl	87864 <__sprint_r.part.0>
   88278:	2800      	cmp	r0, #0
   8827a:	f47f acb8 	bne.w	87bee <_vfiprintf_r+0x312>
   8827e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88282:	3c10      	subs	r4, #16
   88284:	2c10      	cmp	r4, #16
   88286:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8828a:	f101 0001 	add.w	r0, r1, #1
   8828e:	dce5      	bgt.n	8825c <_vfiprintf_r+0x980>
   88290:	463b      	mov	r3, r7
   88292:	4657      	mov	r7, sl
   88294:	469a      	mov	sl, r3
   88296:	4422      	add	r2, r4
   88298:	2807      	cmp	r0, #7
   8829a:	e9c9 a400 	strd	sl, r4, [r9]
   8829e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   882a2:	f77f ad3c 	ble.w	87d1e <_vfiprintf_r+0x442>
   882a6:	b172      	cbz	r2, 882c6 <_vfiprintf_r+0x9ea>
   882a8:	9902      	ldr	r1, [sp, #8]
   882aa:	9806      	ldr	r0, [sp, #24]
   882ac:	aa10      	add	r2, sp, #64	; 0x40
   882ae:	f7ff fad9 	bl	87864 <__sprint_r.part.0>
   882b2:	2800      	cmp	r0, #0
   882b4:	f47f ac9b 	bne.w	87bee <_vfiprintf_r+0x312>
   882b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   882ba:	e530      	b.n	87d1e <_vfiprintf_r+0x442>
   882bc:	2001      	movs	r0, #1
   882be:	4611      	mov	r1, r2
   882c0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   882c4:	e7c7      	b.n	88256 <_vfiprintf_r+0x97a>
   882c6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   882ca:	4542      	cmp	r2, r8
   882cc:	bfac      	ite	ge
   882ce:	189b      	addge	r3, r3, r2
   882d0:	4443      	addlt	r3, r8
   882d2:	9304      	str	r3, [sp, #16]
   882d4:	e52d      	b.n	87d32 <_vfiprintf_r+0x456>
   882d6:	2a00      	cmp	r2, #0
   882d8:	f43f ae60 	beq.w	87f9c <_vfiprintf_r+0x6c0>
   882dc:	9902      	ldr	r1, [sp, #8]
   882de:	9806      	ldr	r0, [sp, #24]
   882e0:	aa10      	add	r2, sp, #64	; 0x40
   882e2:	f7ff fabf 	bl	87864 <__sprint_r.part.0>
   882e6:	2800      	cmp	r0, #0
   882e8:	f47f ac81 	bne.w	87bee <_vfiprintf_r+0x312>
   882ec:	9811      	ldr	r0, [sp, #68]	; 0x44
   882ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   882f0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   882f4:	3001      	adds	r0, #1
   882f6:	e4f1      	b.n	87cdc <_vfiprintf_r+0x400>
   882f8:	9b07      	ldr	r3, [sp, #28]
   882fa:	2b00      	cmp	r3, #0
   882fc:	d169      	bne.n	883d2 <_vfiprintf_r+0xaf6>
   882fe:	2001      	movs	r0, #1
   88300:	4611      	mov	r1, r2
   88302:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88306:	e4df      	b.n	87cc8 <_vfiprintf_r+0x3ec>
   88308:	9211      	str	r2, [sp, #68]	; 0x44
   8830a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8830e:	e458      	b.n	87bc2 <_vfiprintf_r+0x2e6>
   88310:	f1bb 0f00 	cmp.w	fp, #0
   88314:	f47f abdc 	bne.w	87ad0 <_vfiprintf_r+0x1f4>
   88318:	4655      	mov	r5, sl
   8831a:	f04f 0b00 	mov.w	fp, #0
   8831e:	ac3c      	add	r4, sp, #240	; 0xf0
   88320:	f8cd b004 	str.w	fp, [sp, #4]
   88324:	f7ff bbdc 	b.w	87ae0 <_vfiprintf_r+0x204>
   88328:	f01a 0310 	ands.w	r3, sl, #16
   8832c:	d140      	bne.n	883b0 <_vfiprintf_r+0xad4>
   8832e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   88332:	d039      	beq.n	883a8 <_vfiprintf_r+0xacc>
   88334:	9e05      	ldr	r6, [sp, #20]
   88336:	4698      	mov	r8, r3
   88338:	f856 2b04 	ldr.w	r2, [r6], #4
   8833c:	2301      	movs	r3, #1
   8833e:	9605      	str	r6, [sp, #20]
   88340:	b296      	uxth	r6, r2
   88342:	e410      	b.n	87b66 <_vfiprintf_r+0x28a>
   88344:	232d      	movs	r3, #45	; 0x2d
   88346:	4276      	negs	r6, r6
   88348:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8834c:	46aa      	mov	sl, r5
   8834e:	f04f 0301 	mov.w	r3, #1
   88352:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   88356:	e40a      	b.n	87b6e <_vfiprintf_r+0x292>
   88358:	2a00      	cmp	r2, #0
   8835a:	d06f      	beq.n	8843c <_vfiprintf_r+0xb60>
   8835c:	9902      	ldr	r1, [sp, #8]
   8835e:	9806      	ldr	r0, [sp, #24]
   88360:	aa10      	add	r2, sp, #64	; 0x40
   88362:	f7ff fa7f 	bl	87864 <__sprint_r.part.0>
   88366:	2800      	cmp	r0, #0
   88368:	f47f ac41 	bne.w	87bee <_vfiprintf_r+0x312>
   8836c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88370:	e478      	b.n	87c64 <_vfiprintf_r+0x388>
   88372:	ac3c      	add	r4, sp, #240	; 0xf0
   88374:	f7ff bbb4 	b.w	87ae0 <_vfiprintf_r+0x204>
   88378:	4601      	mov	r1, r0
   8837a:	f109 0908 	add.w	r9, r9, #8
   8837e:	3001      	adds	r0, #1
   88380:	e4a6      	b.n	87cd0 <_vfiprintf_r+0x3f4>
   88382:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   88386:	f040 811d 	bne.w	885c4 <_vfiprintf_r+0xce8>
   8838a:	9b05      	ldr	r3, [sp, #20]
   8838c:	f853 6b04 	ldr.w	r6, [r3], #4
   88390:	9305      	str	r3, [sp, #20]
   88392:	f7ff bbe5 	b.w	87b60 <_vfiprintf_r+0x284>
   88396:	05aa      	lsls	r2, r5, #22
   88398:	f100 810e 	bmi.w	885b8 <_vfiprintf_r+0xcdc>
   8839c:	ea4f 78e3 	mov.w	r8, r3, asr #31
   883a0:	461e      	mov	r6, r3
   883a2:	4643      	mov	r3, r8
   883a4:	f7ff bb82 	b.w	87aac <_vfiprintf_r+0x1d0>
   883a8:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   883ac:	f040 80fb 	bne.w	885a6 <_vfiprintf_r+0xcca>
   883b0:	9a05      	ldr	r2, [sp, #20]
   883b2:	2301      	movs	r3, #1
   883b4:	f852 6b04 	ldr.w	r6, [r2], #4
   883b8:	9205      	str	r2, [sp, #20]
   883ba:	f7ff bbd4 	b.w	87b66 <_vfiprintf_r+0x28a>
   883be:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   883c2:	f856 2b04 	ldr.w	r2, [r6], #4
   883c6:	17cb      	asrs	r3, r1, #31
   883c8:	e9c2 1300 	strd	r1, r3, [r2]
   883cc:	9605      	str	r6, [sp, #20]
   883ce:	f7ff babe 	b.w	8794e <_vfiprintf_r+0x72>
   883d2:	2202      	movs	r2, #2
   883d4:	ab0f      	add	r3, sp, #60	; 0x3c
   883d6:	9313      	str	r3, [sp, #76]	; 0x4c
   883d8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   883dc:	9214      	str	r2, [sp, #80]	; 0x50
   883de:	e6c7      	b.n	88170 <_vfiprintf_r+0x894>
   883e0:	4a25      	ldr	r2, [pc, #148]	; (88478 <_vfiprintf_r+0xb9c>)
   883e2:	9209      	str	r2, [sp, #36]	; 0x24
   883e4:	f015 0820 	ands.w	r8, r5, #32
   883e8:	d036      	beq.n	88458 <_vfiprintf_r+0xb7c>
   883ea:	9e05      	ldr	r6, [sp, #20]
   883ec:	3607      	adds	r6, #7
   883ee:	f026 0607 	bic.w	r6, r6, #7
   883f2:	4632      	mov	r2, r6
   883f4:	f8d6 8004 	ldr.w	r8, [r6, #4]
   883f8:	f852 6b08 	ldr.w	r6, [r2], #8
   883fc:	9205      	str	r2, [sp, #20]
   883fe:	07ea      	lsls	r2, r5, #31
   88400:	d509      	bpl.n	88416 <_vfiprintf_r+0xb3a>
   88402:	ea56 0208 	orrs.w	r2, r6, r8
   88406:	d006      	beq.n	88416 <_vfiprintf_r+0xb3a>
   88408:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   8840c:	2330      	movs	r3, #48	; 0x30
   8840e:	f045 0502 	orr.w	r5, r5, #2
   88412:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   88416:	2302      	movs	r3, #2
   88418:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8841c:	f7ff bba3 	b.w	87b66 <_vfiprintf_r+0x28a>
   88420:	46aa      	mov	sl, r5
   88422:	e4ff      	b.n	87e24 <_vfiprintf_r+0x548>
   88424:	4a15      	ldr	r2, [pc, #84]	; (8847c <_vfiprintf_r+0xba0>)
   88426:	9209      	str	r2, [sp, #36]	; 0x24
   88428:	e7dc      	b.n	883e4 <_vfiprintf_r+0xb08>
   8842a:	4620      	mov	r0, r4
   8842c:	9605      	str	r6, [sp, #20]
   8842e:	f7fd fc65 	bl	85cfc <strlen>
   88432:	f04f 0b00 	mov.w	fp, #0
   88436:	9001      	str	r0, [sp, #4]
   88438:	f7ff bb52 	b.w	87ae0 <_vfiprintf_r+0x204>
   8843c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   88440:	2900      	cmp	r1, #0
   88442:	f000 80a6 	beq.w	88592 <_vfiprintf_r+0xcb6>
   88446:	2001      	movs	r0, #1
   88448:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   8844c:	9213      	str	r2, [sp, #76]	; 0x4c
   8844e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88452:	4602      	mov	r2, r0
   88454:	9014      	str	r0, [sp, #80]	; 0x50
   88456:	e416      	b.n	87c86 <_vfiprintf_r+0x3aa>
   88458:	f015 0210 	ands.w	r2, r5, #16
   8845c:	d114      	bne.n	88488 <_vfiprintf_r+0xbac>
   8845e:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   88462:	d00d      	beq.n	88480 <_vfiprintf_r+0xba4>
   88464:	9e05      	ldr	r6, [sp, #20]
   88466:	4690      	mov	r8, r2
   88468:	f856 2b04 	ldr.w	r2, [r6], #4
   8846c:	9605      	str	r6, [sp, #20]
   8846e:	b296      	uxth	r6, r2
   88470:	e7c5      	b.n	883fe <_vfiprintf_r+0xb22>
   88472:	bf00      	nop
   88474:	0008ca20 	.word	0x0008ca20
   88478:	0008c9e0 	.word	0x0008c9e0
   8847c:	0008c9cc 	.word	0x0008c9cc
   88480:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   88484:	f040 80a6 	bne.w	885d4 <_vfiprintf_r+0xcf8>
   88488:	9a05      	ldr	r2, [sp, #20]
   8848a:	f852 6b04 	ldr.w	r6, [r2], #4
   8848e:	9205      	str	r2, [sp, #20]
   88490:	e7b5      	b.n	883fe <_vfiprintf_r+0xb22>
   88492:	2300      	movs	r3, #0
   88494:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   88498:	f8cd b004 	str.w	fp, [sp, #4]
   8849c:	f8cd a01c 	str.w	sl, [sp, #28]
   884a0:	46bb      	mov	fp, r7
   884a2:	f8cd 9020 	str.w	r9, [sp, #32]
   884a6:	469a      	mov	sl, r3
   884a8:	4617      	mov	r7, r2
   884aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   884ae:	ad3c      	add	r5, sp, #240	; 0xf0
   884b0:	e00c      	b.n	884cc <_vfiprintf_r+0xbf0>
   884b2:	2300      	movs	r3, #0
   884b4:	4630      	mov	r0, r6
   884b6:	4641      	mov	r1, r8
   884b8:	220a      	movs	r2, #10
   884ba:	f004 f85d 	bl	8c578 <__aeabi_uldivmod>
   884be:	2e0a      	cmp	r6, #10
   884c0:	f178 0300 	sbcs.w	r3, r8, #0
   884c4:	d31b      	bcc.n	884fe <_vfiprintf_r+0xc22>
   884c6:	4606      	mov	r6, r0
   884c8:	4688      	mov	r8, r1
   884ca:	4625      	mov	r5, r4
   884cc:	4630      	mov	r0, r6
   884ce:	4641      	mov	r1, r8
   884d0:	220a      	movs	r2, #10
   884d2:	2300      	movs	r3, #0
   884d4:	f004 f850 	bl	8c578 <__aeabi_uldivmod>
   884d8:	3230      	adds	r2, #48	; 0x30
   884da:	1e6c      	subs	r4, r5, #1
   884dc:	f10a 0a01 	add.w	sl, sl, #1
   884e0:	f805 2c01 	strb.w	r2, [r5, #-1]
   884e4:	2f00      	cmp	r7, #0
   884e6:	d0e4      	beq.n	884b2 <_vfiprintf_r+0xbd6>
   884e8:	f899 3000 	ldrb.w	r3, [r9]
   884ec:	4553      	cmp	r3, sl
   884ee:	d1e0      	bne.n	884b2 <_vfiprintf_r+0xbd6>
   884f0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   884f4:	d0dd      	beq.n	884b2 <_vfiprintf_r+0xbd6>
   884f6:	2e0a      	cmp	r6, #10
   884f8:	f178 0300 	sbcs.w	r3, r8, #0
   884fc:	d22e      	bcs.n	8855c <_vfiprintf_r+0xc80>
   884fe:	f8dd a01c 	ldr.w	sl, [sp, #28]
   88502:	ab3c      	add	r3, sp, #240	; 0xf0
   88504:	1b1b      	subs	r3, r3, r4
   88506:	465f      	mov	r7, fp
   88508:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8850c:	f8dd b004 	ldr.w	fp, [sp, #4]
   88510:	4655      	mov	r5, sl
   88512:	f8dd 9020 	ldr.w	r9, [sp, #32]
   88516:	9301      	str	r3, [sp, #4]
   88518:	f7ff bae2 	b.w	87ae0 <_vfiprintf_r+0x204>
   8851c:	46aa      	mov	sl, r5
   8851e:	f7ff bad2 	b.w	87ac6 <_vfiprintf_r+0x1ea>
   88522:	2b01      	cmp	r3, #1
   88524:	46aa      	mov	sl, r5
   88526:	f47f ad06 	bne.w	87f36 <_vfiprintf_r+0x65a>
   8852a:	f7ff bad1 	b.w	87ad0 <_vfiprintf_r+0x1f4>
   8852e:	9e05      	ldr	r6, [sp, #20]
   88530:	9a04      	ldr	r2, [sp, #16]
   88532:	f856 3b04 	ldr.w	r3, [r6], #4
   88536:	601a      	str	r2, [r3, #0]
   88538:	9605      	str	r6, [sp, #20]
   8853a:	f7ff ba08 	b.w	8794e <_vfiprintf_r+0x72>
   8853e:	f1bb 0f06 	cmp.w	fp, #6
   88542:	46d8      	mov	r8, fp
   88544:	bf28      	it	cs
   88546:	f04f 0806 	movcs.w	r8, #6
   8854a:	4c47      	ldr	r4, [pc, #284]	; (88668 <_vfiprintf_r+0xd8c>)
   8854c:	f8cd 8004 	str.w	r8, [sp, #4]
   88550:	9605      	str	r6, [sp, #20]
   88552:	f7ff bb75 	b.w	87c40 <_vfiprintf_r+0x364>
   88556:	f8df a114 	ldr.w	sl, [pc, #276]	; 8866c <_vfiprintf_r+0xd90>
   8855a:	e5c9      	b.n	880f0 <_vfiprintf_r+0x814>
   8855c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8855e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88560:	1ae4      	subs	r4, r4, r3
   88562:	461a      	mov	r2, r3
   88564:	4620      	mov	r0, r4
   88566:	f7fd fbf7 	bl	85d58 <strncpy>
   8856a:	f899 3001 	ldrb.w	r3, [r9, #1]
   8856e:	b10b      	cbz	r3, 88574 <_vfiprintf_r+0xc98>
   88570:	f109 0901 	add.w	r9, r9, #1
   88574:	4630      	mov	r0, r6
   88576:	4641      	mov	r1, r8
   88578:	220a      	movs	r2, #10
   8857a:	2300      	movs	r3, #0
   8857c:	f04f 0a00 	mov.w	sl, #0
   88580:	f003 fffa 	bl	8c578 <__aeabi_uldivmod>
   88584:	e79f      	b.n	884c6 <_vfiprintf_r+0xbea>
   88586:	2001      	movs	r0, #1
   88588:	4611      	mov	r1, r2
   8858a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8858e:	f7ff bb9f 	b.w	87cd0 <_vfiprintf_r+0x3f4>
   88592:	9b07      	ldr	r3, [sp, #28]
   88594:	2b00      	cmp	r3, #0
   88596:	f47f ade3 	bne.w	88160 <_vfiprintf_r+0x884>
   8859a:	4611      	mov	r1, r2
   8859c:	2001      	movs	r0, #1
   8859e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   885a2:	f7ff bb95 	b.w	87cd0 <_vfiprintf_r+0x3f4>
   885a6:	9e05      	ldr	r6, [sp, #20]
   885a8:	4690      	mov	r8, r2
   885aa:	f856 2b04 	ldr.w	r2, [r6], #4
   885ae:	2301      	movs	r3, #1
   885b0:	9605      	str	r6, [sp, #20]
   885b2:	b2d6      	uxtb	r6, r2
   885b4:	f7ff bad7 	b.w	87b66 <_vfiprintf_r+0x28a>
   885b8:	f343 18c0 	sbfx	r8, r3, #7, #1
   885bc:	b25e      	sxtb	r6, r3
   885be:	4643      	mov	r3, r8
   885c0:	f7ff ba74 	b.w	87aac <_vfiprintf_r+0x1d0>
   885c4:	9e05      	ldr	r6, [sp, #20]
   885c6:	4690      	mov	r8, r2
   885c8:	f856 3b04 	ldr.w	r3, [r6], #4
   885cc:	9605      	str	r6, [sp, #20]
   885ce:	b2de      	uxtb	r6, r3
   885d0:	f7ff bac6 	b.w	87b60 <_vfiprintf_r+0x284>
   885d4:	9e05      	ldr	r6, [sp, #20]
   885d6:	4688      	mov	r8, r1
   885d8:	f856 2b04 	ldr.w	r2, [r6], #4
   885dc:	9605      	str	r6, [sp, #20]
   885de:	b2d6      	uxtb	r6, r2
   885e0:	e70d      	b.n	883fe <_vfiprintf_r+0xb22>
   885e2:	9e05      	ldr	r6, [sp, #20]
   885e4:	9a04      	ldr	r2, [sp, #16]
   885e6:	f856 3b04 	ldr.w	r3, [r6], #4
   885ea:	801a      	strh	r2, [r3, #0]
   885ec:	9605      	str	r6, [sp, #20]
   885ee:	f7ff b9ae 	b.w	8794e <_vfiprintf_r+0x72>
   885f2:	6d88      	ldr	r0, [r1, #88]	; 0x58
   885f4:	f001 fde4 	bl	8a1c0 <__retarget_lock_release_recursive>
   885f8:	f7ff ba99 	b.w	87b2e <_vfiprintf_r+0x252>
   885fc:	f8cd b004 	str.w	fp, [sp, #4]
   88600:	9605      	str	r6, [sp, #20]
   88602:	4683      	mov	fp, r0
   88604:	f7ff ba6c 	b.w	87ae0 <_vfiprintf_r+0x204>
   88608:	9911      	ldr	r1, [sp, #68]	; 0x44
   8860a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8860c:	f8df a060 	ldr.w	sl, [pc, #96]	; 88670 <_vfiprintf_r+0xd94>
   88610:	3101      	adds	r1, #1
   88612:	e5f0      	b.n	881f6 <_vfiprintf_r+0x91a>
   88614:	9902      	ldr	r1, [sp, #8]
   88616:	9806      	ldr	r0, [sp, #24]
   88618:	aa10      	add	r2, sp, #64	; 0x40
   8861a:	f7ff f923 	bl	87864 <__sprint_r.part.0>
   8861e:	2800      	cmp	r0, #0
   88620:	f43f aae3 	beq.w	87bea <_vfiprintf_r+0x30e>
   88624:	f7ff bae3 	b.w	87bee <_vfiprintf_r+0x312>
   88628:	9811      	ldr	r0, [sp, #68]	; 0x44
   8862a:	f8df a044 	ldr.w	sl, [pc, #68]	; 88670 <_vfiprintf_r+0xd94>
   8862e:	3001      	adds	r0, #1
   88630:	e631      	b.n	88296 <_vfiprintf_r+0x9ba>
   88632:	9b02      	ldr	r3, [sp, #8]
   88634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   88636:	07db      	lsls	r3, r3, #31
   88638:	d407      	bmi.n	8864a <_vfiprintf_r+0xd6e>
   8863a:	9b02      	ldr	r3, [sp, #8]
   8863c:	899b      	ldrh	r3, [r3, #12]
   8863e:	059f      	lsls	r7, r3, #22
   88640:	d403      	bmi.n	8864a <_vfiprintf_r+0xd6e>
   88642:	9b02      	ldr	r3, [sp, #8]
   88644:	6d98      	ldr	r0, [r3, #88]	; 0x58
   88646:	f001 fdbb 	bl	8a1c0 <__retarget_lock_release_recursive>
   8864a:	f04f 33ff 	mov.w	r3, #4294967295
   8864e:	9304      	str	r3, [sp, #16]
   88650:	f7ff bad6 	b.w	87c00 <_vfiprintf_r+0x324>
   88654:	9a05      	ldr	r2, [sp, #20]
   88656:	787b      	ldrb	r3, [r7, #1]
   88658:	460f      	mov	r7, r1
   8865a:	f852 1b04 	ldr.w	r1, [r2], #4
   8865e:	9205      	str	r2, [sp, #20]
   88660:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   88664:	f7ff b993 	b.w	8798e <_vfiprintf_r+0xb2>
   88668:	0008c9f4 	.word	0x0008c9f4
   8866c:	0008ca30 	.word	0x0008ca30
   88670:	0008ca20 	.word	0x0008ca20

00088674 <__sbprintf>:
   88674:	b5f0      	push	{r4, r5, r6, r7, lr}
   88676:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8867a:	4615      	mov	r5, r2
   8867c:	2400      	movs	r4, #0
   8867e:	4606      	mov	r6, r0
   88680:	461f      	mov	r7, r3
   88682:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   88686:	ab1a      	add	r3, sp, #104	; 0x68
   88688:	9300      	str	r3, [sp, #0]
   8868a:	9304      	str	r3, [sp, #16]
   8868c:	898b      	ldrh	r3, [r1, #12]
   8868e:	a816      	add	r0, sp, #88	; 0x58
   88690:	f023 0302 	bic.w	r3, r3, #2
   88694:	f8ad 300c 	strh.w	r3, [sp, #12]
   88698:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8869a:	9406      	str	r4, [sp, #24]
   8869c:	9319      	str	r3, [sp, #100]	; 0x64
   8869e:	89cb      	ldrh	r3, [r1, #14]
   886a0:	460c      	mov	r4, r1
   886a2:	f8ad 300e 	strh.w	r3, [sp, #14]
   886a6:	69cb      	ldr	r3, [r1, #28]
   886a8:	f8cd c008 	str.w	ip, [sp, #8]
   886ac:	9307      	str	r3, [sp, #28]
   886ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   886b0:	f8cd c014 	str.w	ip, [sp, #20]
   886b4:	9309      	str	r3, [sp, #36]	; 0x24
   886b6:	f001 fd7d 	bl	8a1b4 <__retarget_lock_init_recursive>
   886ba:	462a      	mov	r2, r5
   886bc:	463b      	mov	r3, r7
   886be:	4669      	mov	r1, sp
   886c0:	4630      	mov	r0, r6
   886c2:	f7ff f90b 	bl	878dc <_vfiprintf_r>
   886c6:	1e05      	subs	r5, r0, #0
   886c8:	db07      	blt.n	886da <__sbprintf+0x66>
   886ca:	4669      	mov	r1, sp
   886cc:	4630      	mov	r0, r6
   886ce:	f001 f91b 	bl	89908 <_fflush_r>
   886d2:	2800      	cmp	r0, #0
   886d4:	bf18      	it	ne
   886d6:	f04f 35ff 	movne.w	r5, #4294967295
   886da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   886de:	065b      	lsls	r3, r3, #25
   886e0:	d503      	bpl.n	886ea <__sbprintf+0x76>
   886e2:	89a3      	ldrh	r3, [r4, #12]
   886e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   886e8:	81a3      	strh	r3, [r4, #12]
   886ea:	9816      	ldr	r0, [sp, #88]	; 0x58
   886ec:	f001 fd64 	bl	8a1b8 <__retarget_lock_close_recursive>
   886f0:	4628      	mov	r0, r5
   886f2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   886f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000886f8 <__swsetup_r>:
   886f8:	b538      	push	{r3, r4, r5, lr}
   886fa:	4b33      	ldr	r3, [pc, #204]	; (887c8 <__swsetup_r+0xd0>)
   886fc:	4605      	mov	r5, r0
   886fe:	681b      	ldr	r3, [r3, #0]
   88700:	460c      	mov	r4, r1
   88702:	b10b      	cbz	r3, 88708 <__swsetup_r+0x10>
   88704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   88706:	b312      	cbz	r2, 8874e <__swsetup_r+0x56>
   88708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8870c:	0718      	lsls	r0, r3, #28
   8870e:	b29a      	uxth	r2, r3
   88710:	d525      	bpl.n	8875e <__swsetup_r+0x66>
   88712:	6921      	ldr	r1, [r4, #16]
   88714:	2900      	cmp	r1, #0
   88716:	d02d      	beq.n	88774 <__swsetup_r+0x7c>
   88718:	f012 0001 	ands.w	r0, r2, #1
   8871c:	d007      	beq.n	8872e <__swsetup_r+0x36>
   8871e:	2500      	movs	r5, #0
   88720:	6960      	ldr	r0, [r4, #20]
   88722:	60a5      	str	r5, [r4, #8]
   88724:	4240      	negs	r0, r0
   88726:	61a0      	str	r0, [r4, #24]
   88728:	b139      	cbz	r1, 8873a <__swsetup_r+0x42>
   8872a:	2000      	movs	r0, #0
   8872c:	bd38      	pop	{r3, r4, r5, pc}
   8872e:	0795      	lsls	r5, r2, #30
   88730:	bf58      	it	pl
   88732:	6960      	ldrpl	r0, [r4, #20]
   88734:	60a0      	str	r0, [r4, #8]
   88736:	2900      	cmp	r1, #0
   88738:	d1f7      	bne.n	8872a <__swsetup_r+0x32>
   8873a:	0612      	lsls	r2, r2, #24
   8873c:	bf58      	it	pl
   8873e:	4608      	movpl	r0, r1
   88740:	d5f4      	bpl.n	8872c <__swsetup_r+0x34>
   88742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88746:	f04f 30ff 	mov.w	r0, #4294967295
   8874a:	81a3      	strh	r3, [r4, #12]
   8874c:	bd38      	pop	{r3, r4, r5, pc}
   8874e:	4618      	mov	r0, r3
   88750:	f001 f90e 	bl	89970 <__sinit>
   88754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88758:	0718      	lsls	r0, r3, #28
   8875a:	b29a      	uxth	r2, r3
   8875c:	d4d9      	bmi.n	88712 <__swsetup_r+0x1a>
   8875e:	06d1      	lsls	r1, r2, #27
   88760:	d52a      	bpl.n	887b8 <__swsetup_r+0xc0>
   88762:	0752      	lsls	r2, r2, #29
   88764:	d414      	bmi.n	88790 <__swsetup_r+0x98>
   88766:	6921      	ldr	r1, [r4, #16]
   88768:	f043 0308 	orr.w	r3, r3, #8
   8876c:	81a3      	strh	r3, [r4, #12]
   8876e:	b29a      	uxth	r2, r3
   88770:	2900      	cmp	r1, #0
   88772:	d1d1      	bne.n	88718 <__swsetup_r+0x20>
   88774:	f402 7020 	and.w	r0, r2, #640	; 0x280
   88778:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8877c:	d0cc      	beq.n	88718 <__swsetup_r+0x20>
   8877e:	4621      	mov	r1, r4
   88780:	4628      	mov	r0, r5
   88782:	f001 fd1f 	bl	8a1c4 <__smakebuf_r>
   88786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8878a:	6921      	ldr	r1, [r4, #16]
   8878c:	b29a      	uxth	r2, r3
   8878e:	e7c3      	b.n	88718 <__swsetup_r+0x20>
   88790:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88792:	b151      	cbz	r1, 887aa <__swsetup_r+0xb2>
   88794:	f104 0240 	add.w	r2, r4, #64	; 0x40
   88798:	4291      	cmp	r1, r2
   8879a:	d004      	beq.n	887a6 <__swsetup_r+0xae>
   8879c:	4628      	mov	r0, r5
   8879e:	f001 fa63 	bl	89c68 <_free_r>
   887a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   887a6:	2200      	movs	r2, #0
   887a8:	6322      	str	r2, [r4, #48]	; 0x30
   887aa:	2200      	movs	r2, #0
   887ac:	6921      	ldr	r1, [r4, #16]
   887ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   887b2:	e9c4 1200 	strd	r1, r2, [r4]
   887b6:	e7d7      	b.n	88768 <__swsetup_r+0x70>
   887b8:	2209      	movs	r2, #9
   887ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   887be:	602a      	str	r2, [r5, #0]
   887c0:	f04f 30ff 	mov.w	r0, #4294967295
   887c4:	81a3      	strh	r3, [r4, #12]
   887c6:	bd38      	pop	{r3, r4, r5, pc}
   887c8:	20000480 	.word	0x20000480

000887cc <register_fini>:
   887cc:	4b02      	ldr	r3, [pc, #8]	; (887d8 <register_fini+0xc>)
   887ce:	b113      	cbz	r3, 887d6 <register_fini+0xa>
   887d0:	4802      	ldr	r0, [pc, #8]	; (887dc <register_fini+0x10>)
   887d2:	f000 b805 	b.w	887e0 <atexit>
   887d6:	4770      	bx	lr
   887d8:	00000000 	.word	0x00000000
   887dc:	00089a95 	.word	0x00089a95

000887e0 <atexit>:
   887e0:	2300      	movs	r3, #0
   887e2:	4601      	mov	r1, r0
   887e4:	461a      	mov	r2, r3
   887e6:	4618      	mov	r0, r3
   887e8:	f003 b860 	b.w	8b8ac <__register_exitproc>

000887ec <quorem>:
   887ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887f0:	6903      	ldr	r3, [r0, #16]
   887f2:	690c      	ldr	r4, [r1, #16]
   887f4:	b085      	sub	sp, #20
   887f6:	42a3      	cmp	r3, r4
   887f8:	f2c0 8089 	blt.w	8890e <quorem+0x122>
   887fc:	3c01      	subs	r4, #1
   887fe:	f101 0514 	add.w	r5, r1, #20
   88802:	00a3      	lsls	r3, r4, #2
   88804:	f100 0814 	add.w	r8, r0, #20
   88808:	9301      	str	r3, [sp, #4]
   8880a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   8880e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   88812:	3301      	adds	r3, #1
   88814:	468a      	mov	sl, r1
   88816:	429a      	cmp	r2, r3
   88818:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   8881c:	4681      	mov	r9, r0
   8881e:	fbb2 f6f3 	udiv	r6, r2, r3
   88822:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   88826:	9102      	str	r1, [sp, #8]
   88828:	d33a      	bcc.n	888a0 <quorem+0xb4>
   8882a:	2100      	movs	r1, #0
   8882c:	46ae      	mov	lr, r5
   8882e:	4640      	mov	r0, r8
   88830:	460a      	mov	r2, r1
   88832:	46a3      	mov	fp, r4
   88834:	9503      	str	r5, [sp, #12]
   88836:	f85e 5b04 	ldr.w	r5, [lr], #4
   8883a:	6804      	ldr	r4, [r0, #0]
   8883c:	b2ab      	uxth	r3, r5
   8883e:	fb06 1303 	mla	r3, r6, r3, r1
   88842:	0c2d      	lsrs	r5, r5, #16
   88844:	0c19      	lsrs	r1, r3, #16
   88846:	fb06 1105 	mla	r1, r6, r5, r1
   8884a:	b29b      	uxth	r3, r3
   8884c:	1ad2      	subs	r2, r2, r3
   8884e:	fa1f fc84 	uxth.w	ip, r4
   88852:	4494      	add	ip, r2
   88854:	b28a      	uxth	r2, r1
   88856:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   8885a:	eb02 422c 	add.w	r2, r2, ip, asr #16
   8885e:	fa1f fc8c 	uxth.w	ip, ip
   88862:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   88866:	4577      	cmp	r7, lr
   88868:	f840 3b04 	str.w	r3, [r0], #4
   8886c:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88870:	ea4f 4222 	mov.w	r2, r2, asr #16
   88874:	d2df      	bcs.n	88836 <quorem+0x4a>
   88876:	9b01      	ldr	r3, [sp, #4]
   88878:	465c      	mov	r4, fp
   8887a:	f858 3003 	ldr.w	r3, [r8, r3]
   8887e:	9d03      	ldr	r5, [sp, #12]
   88880:	b973      	cbnz	r3, 888a0 <quorem+0xb4>
   88882:	9b02      	ldr	r3, [sp, #8]
   88884:	3b04      	subs	r3, #4
   88886:	4598      	cmp	r8, r3
   88888:	d304      	bcc.n	88894 <quorem+0xa8>
   8888a:	e007      	b.n	8889c <quorem+0xb0>
   8888c:	4598      	cmp	r8, r3
   8888e:	f104 34ff 	add.w	r4, r4, #4294967295
   88892:	d203      	bcs.n	8889c <quorem+0xb0>
   88894:	f853 2904 	ldr.w	r2, [r3], #-4
   88898:	2a00      	cmp	r2, #0
   8889a:	d0f7      	beq.n	8888c <quorem+0xa0>
   8889c:	f8c9 4010 	str.w	r4, [r9, #16]
   888a0:	4651      	mov	r1, sl
   888a2:	4648      	mov	r0, r9
   888a4:	f002 fb44 	bl	8af30 <__mcmp>
   888a8:	2800      	cmp	r0, #0
   888aa:	db2c      	blt.n	88906 <quorem+0x11a>
   888ac:	4640      	mov	r0, r8
   888ae:	2300      	movs	r3, #0
   888b0:	3601      	adds	r6, #1
   888b2:	f855 1b04 	ldr.w	r1, [r5], #4
   888b6:	f8d0 c000 	ldr.w	ip, [r0]
   888ba:	b28a      	uxth	r2, r1
   888bc:	1a9a      	subs	r2, r3, r2
   888be:	fa1f fe8c 	uxth.w	lr, ip
   888c2:	0c0b      	lsrs	r3, r1, #16
   888c4:	4472      	add	r2, lr
   888c6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   888ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
   888ce:	b292      	uxth	r2, r2
   888d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   888d4:	42af      	cmp	r7, r5
   888d6:	f840 2b04 	str.w	r2, [r0], #4
   888da:	ea4f 4323 	mov.w	r3, r3, asr #16
   888de:	d2e8      	bcs.n	888b2 <quorem+0xc6>
   888e0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   888e4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   888e8:	b96a      	cbnz	r2, 88906 <quorem+0x11a>
   888ea:	3b04      	subs	r3, #4
   888ec:	4598      	cmp	r8, r3
   888ee:	d304      	bcc.n	888fa <quorem+0x10e>
   888f0:	e007      	b.n	88902 <quorem+0x116>
   888f2:	4598      	cmp	r8, r3
   888f4:	f104 34ff 	add.w	r4, r4, #4294967295
   888f8:	d203      	bcs.n	88902 <quorem+0x116>
   888fa:	f853 2904 	ldr.w	r2, [r3], #-4
   888fe:	2a00      	cmp	r2, #0
   88900:	d0f7      	beq.n	888f2 <quorem+0x106>
   88902:	f8c9 4010 	str.w	r4, [r9, #16]
   88906:	4630      	mov	r0, r6
   88908:	b005      	add	sp, #20
   8890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8890e:	2000      	movs	r0, #0
   88910:	b005      	add	sp, #20
   88912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88916:	bf00      	nop

00088918 <_dtoa_r>:
   88918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8891c:	4690      	mov	r8, r2
   8891e:	4699      	mov	r9, r3
   88920:	6c01      	ldr	r1, [r0, #64]	; 0x40
   88922:	b099      	sub	sp, #100	; 0x64
   88924:	4604      	mov	r4, r0
   88926:	e9cd 8904 	strd	r8, r9, [sp, #16]
   8892a:	9d25      	ldr	r5, [sp, #148]	; 0x94
   8892c:	b141      	cbz	r1, 88940 <_dtoa_r+0x28>
   8892e:	2301      	movs	r3, #1
   88930:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88932:	4093      	lsls	r3, r2
   88934:	608b      	str	r3, [r1, #8]
   88936:	604a      	str	r2, [r1, #4]
   88938:	f002 f8a4 	bl	8aa84 <_Bfree>
   8893c:	2300      	movs	r3, #0
   8893e:	6423      	str	r3, [r4, #64]	; 0x40
   88940:	f1b9 0a00 	subs.w	sl, r9, #0
   88944:	bfb4      	ite	lt
   88946:	2301      	movlt	r3, #1
   88948:	2300      	movge	r3, #0
   8894a:	602b      	str	r3, [r5, #0]
   8894c:	4b76      	ldr	r3, [pc, #472]	; (88b28 <_dtoa_r+0x210>)
   8894e:	bfbc      	itt	lt
   88950:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   88954:	f8cd a014 	strlt.w	sl, [sp, #20]
   88958:	ea33 030a 	bics.w	r3, r3, sl
   8895c:	f000 80aa 	beq.w	88ab4 <_dtoa_r+0x19c>
   88960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88964:	4610      	mov	r0, r2
   88966:	4619      	mov	r1, r3
   88968:	2200      	movs	r2, #0
   8896a:	2300      	movs	r3, #0
   8896c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   88970:	f003 fd92 	bl	8c498 <__aeabi_dcmpeq>
   88974:	4607      	mov	r7, r0
   88976:	b170      	cbz	r0, 88996 <_dtoa_r+0x7e>
   88978:	2301      	movs	r3, #1
   8897a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8897c:	6013      	str	r3, [r2, #0]
   8897e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88980:	2b00      	cmp	r3, #0
   88982:	f000 82e6 	beq.w	88f52 <_dtoa_r+0x63a>
   88986:	4869      	ldr	r0, [pc, #420]	; (88b2c <_dtoa_r+0x214>)
   88988:	6018      	str	r0, [r3, #0]
   8898a:	1e43      	subs	r3, r0, #1
   8898c:	9303      	str	r3, [sp, #12]
   8898e:	9803      	ldr	r0, [sp, #12]
   88990:	b019      	add	sp, #100	; 0x64
   88992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88996:	ab16      	add	r3, sp, #88	; 0x58
   88998:	9301      	str	r3, [sp, #4]
   8899a:	ab17      	add	r3, sp, #92	; 0x5c
   8899c:	9300      	str	r3, [sp, #0]
   8899e:	4620      	mov	r0, r4
   889a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   889a4:	f002 fb8a 	bl	8b0bc <__d2b>
   889a8:	ea5f 561a 	movs.w	r6, sl, lsr #20
   889ac:	4605      	mov	r5, r0
   889ae:	f040 8097 	bne.w	88ae0 <_dtoa_r+0x1c8>
   889b2:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   889b6:	443e      	add	r6, r7
   889b8:	f206 4032 	addw	r0, r6, #1074	; 0x432
   889bc:	2820      	cmp	r0, #32
   889be:	f340 83b7 	ble.w	89130 <_dtoa_r+0x818>
   889c2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   889c6:	fa0a fa00 	lsl.w	sl, sl, r0
   889ca:	f206 4012 	addw	r0, r6, #1042	; 0x412
   889ce:	fa28 f000 	lsr.w	r0, r8, r0
   889d2:	ea4a 0000 	orr.w	r0, sl, r0
   889d6:	f003 fa7d 	bl	8bed4 <__aeabi_ui2d>
   889da:	2301      	movs	r3, #1
   889dc:	3e01      	subs	r6, #1
   889de:	930f      	str	r3, [sp, #60]	; 0x3c
   889e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   889e4:	2200      	movs	r2, #0
   889e6:	4b52      	ldr	r3, [pc, #328]	; (88b30 <_dtoa_r+0x218>)
   889e8:	f003 f936 	bl	8bc58 <__aeabi_dsub>
   889ec:	a348      	add	r3, pc, #288	; (adr r3, 88b10 <_dtoa_r+0x1f8>)
   889ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   889f2:	f003 fae9 	bl	8bfc8 <__aeabi_dmul>
   889f6:	a348      	add	r3, pc, #288	; (adr r3, 88b18 <_dtoa_r+0x200>)
   889f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   889fc:	f003 f92e 	bl	8bc5c <__adddf3>
   88a00:	4680      	mov	r8, r0
   88a02:	4630      	mov	r0, r6
   88a04:	4689      	mov	r9, r1
   88a06:	f003 fa75 	bl	8bef4 <__aeabi_i2d>
   88a0a:	a345      	add	r3, pc, #276	; (adr r3, 88b20 <_dtoa_r+0x208>)
   88a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88a10:	f003 fada 	bl	8bfc8 <__aeabi_dmul>
   88a14:	4602      	mov	r2, r0
   88a16:	460b      	mov	r3, r1
   88a18:	4640      	mov	r0, r8
   88a1a:	4649      	mov	r1, r9
   88a1c:	f003 f91e 	bl	8bc5c <__adddf3>
   88a20:	4680      	mov	r8, r0
   88a22:	4689      	mov	r9, r1
   88a24:	f003 fd80 	bl	8c528 <__aeabi_d2iz>
   88a28:	2200      	movs	r2, #0
   88a2a:	4683      	mov	fp, r0
   88a2c:	2300      	movs	r3, #0
   88a2e:	4640      	mov	r0, r8
   88a30:	4649      	mov	r1, r9
   88a32:	f003 fd3b 	bl	8c4ac <__aeabi_dcmplt>
   88a36:	2800      	cmp	r0, #0
   88a38:	f040 827e 	bne.w	88f38 <_dtoa_r+0x620>
   88a3c:	f1bb 0f16 	cmp.w	fp, #22
   88a40:	f200 826d 	bhi.w	88f1e <_dtoa_r+0x606>
   88a44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88a48:	4b3a      	ldr	r3, [pc, #232]	; (88b34 <_dtoa_r+0x21c>)
   88a4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   88a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88a52:	f003 fd2b 	bl	8c4ac <__aeabi_dcmplt>
   88a56:	2800      	cmp	r0, #0
   88a58:	d072      	beq.n	88b40 <_dtoa_r+0x228>
   88a5a:	2300      	movs	r3, #0
   88a5c:	1bbe      	subs	r6, r7, r6
   88a5e:	930e      	str	r3, [sp, #56]	; 0x38
   88a60:	1e73      	subs	r3, r6, #1
   88a62:	f10b 3bff 	add.w	fp, fp, #4294967295
   88a66:	9306      	str	r3, [sp, #24]
   88a68:	f100 8260 	bmi.w	88f2c <_dtoa_r+0x614>
   88a6c:	2300      	movs	r3, #0
   88a6e:	9309      	str	r3, [sp, #36]	; 0x24
   88a70:	f1bb 0f00 	cmp.w	fp, #0
   88a74:	da6b      	bge.n	88b4e <_dtoa_r+0x236>
   88a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a78:	f8cd b01c 	str.w	fp, [sp, #28]
   88a7c:	eba3 030b 	sub.w	r3, r3, fp
   88a80:	9309      	str	r3, [sp, #36]	; 0x24
   88a82:	f1cb 0300 	rsb	r3, fp, #0
   88a86:	930d      	str	r3, [sp, #52]	; 0x34
   88a88:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88a8a:	f04f 0b00 	mov.w	fp, #0
   88a8e:	2b09      	cmp	r3, #9
   88a90:	d866      	bhi.n	88b60 <_dtoa_r+0x248>
   88a92:	2b05      	cmp	r3, #5
   88a94:	f340 834a 	ble.w	8912c <_dtoa_r+0x814>
   88a98:	2600      	movs	r6, #0
   88a9a:	3b04      	subs	r3, #4
   88a9c:	9322      	str	r3, [sp, #136]	; 0x88
   88a9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88aa0:	3b02      	subs	r3, #2
   88aa2:	2b03      	cmp	r3, #3
   88aa4:	f200 866c 	bhi.w	89780 <_dtoa_r+0xe68>
   88aa8:	e8df f013 	tbh	[pc, r3, lsl #1]
   88aac:	045e0461 	.word	0x045e0461
   88ab0:	04380455 	.word	0x04380455
   88ab4:	f242 730f 	movw	r3, #9999	; 0x270f
   88ab8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88aba:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   88abe:	6013      	str	r3, [r2, #0]
   88ac0:	ea5a 0308 	orrs.w	r3, sl, r8
   88ac4:	d11a      	bne.n	88afc <_dtoa_r+0x1e4>
   88ac6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88ac8:	2b00      	cmp	r3, #0
   88aca:	f000 8668 	beq.w	8979e <_dtoa_r+0xe86>
   88ace:	4b1a      	ldr	r3, [pc, #104]	; (88b38 <_dtoa_r+0x220>)
   88ad0:	9303      	str	r3, [sp, #12]
   88ad2:	3308      	adds	r3, #8
   88ad4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88ad6:	9803      	ldr	r0, [sp, #12]
   88ad8:	6013      	str	r3, [r2, #0]
   88ada:	b019      	add	sp, #100	; 0x64
   88adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ae0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   88ae4:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88ae8:	4608      	mov	r0, r1
   88aea:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   88aee:	970f      	str	r7, [sp, #60]	; 0x3c
   88af0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   88af4:	9f16      	ldr	r7, [sp, #88]	; 0x58
   88af6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   88afa:	e773      	b.n	889e4 <_dtoa_r+0xcc>
   88afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88afe:	2b00      	cmp	r3, #0
   88b00:	f040 83ef 	bne.w	892e2 <_dtoa_r+0x9ca>
   88b04:	4b0d      	ldr	r3, [pc, #52]	; (88b3c <_dtoa_r+0x224>)
   88b06:	9303      	str	r3, [sp, #12]
   88b08:	e741      	b.n	8898e <_dtoa_r+0x76>
   88b0a:	bf00      	nop
   88b0c:	f3af 8000 	nop.w
   88b10:	636f4361 	.word	0x636f4361
   88b14:	3fd287a7 	.word	0x3fd287a7
   88b18:	8b60c8b3 	.word	0x8b60c8b3
   88b1c:	3fc68a28 	.word	0x3fc68a28
   88b20:	509f79fb 	.word	0x509f79fb
   88b24:	3fd34413 	.word	0x3fd34413
   88b28:	7ff00000 	.word	0x7ff00000
   88b2c:	0008c9fd 	.word	0x0008c9fd
   88b30:	3ff80000 	.word	0x3ff80000
   88b34:	0008cba0 	.word	0x0008cba0
   88b38:	0008ca44 	.word	0x0008ca44
   88b3c:	0008ca40 	.word	0x0008ca40
   88b40:	1bbe      	subs	r6, r7, r6
   88b42:	1e73      	subs	r3, r6, #1
   88b44:	9306      	str	r3, [sp, #24]
   88b46:	f100 848a 	bmi.w	8945e <_dtoa_r+0xb46>
   88b4a:	900e      	str	r0, [sp, #56]	; 0x38
   88b4c:	9009      	str	r0, [sp, #36]	; 0x24
   88b4e:	9b06      	ldr	r3, [sp, #24]
   88b50:	445b      	add	r3, fp
   88b52:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   88b56:	2300      	movs	r3, #0
   88b58:	930d      	str	r3, [sp, #52]	; 0x34
   88b5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88b5c:	2b09      	cmp	r3, #9
   88b5e:	d998      	bls.n	88a92 <_dtoa_r+0x17a>
   88b60:	2300      	movs	r3, #0
   88b62:	9322      	str	r3, [sp, #136]	; 0x88
   88b64:	f04f 33ff 	mov.w	r3, #4294967295
   88b68:	2601      	movs	r6, #1
   88b6a:	9308      	str	r3, [sp, #32]
   88b6c:	2300      	movs	r3, #0
   88b6e:	960c      	str	r6, [sp, #48]	; 0x30
   88b70:	9323      	str	r3, [sp, #140]	; 0x8c
   88b72:	2100      	movs	r1, #0
   88b74:	9b08      	ldr	r3, [sp, #32]
   88b76:	6461      	str	r1, [r4, #68]	; 0x44
   88b78:	9312      	str	r3, [sp, #72]	; 0x48
   88b7a:	4620      	mov	r0, r4
   88b7c:	f001 ff5c 	bl	8aa38 <_Balloc>
   88b80:	9003      	str	r0, [sp, #12]
   88b82:	2800      	cmp	r0, #0
   88b84:	f000 8604 	beq.w	89790 <_dtoa_r+0xe78>
   88b88:	9b03      	ldr	r3, [sp, #12]
   88b8a:	6423      	str	r3, [r4, #64]	; 0x40
   88b8c:	9b08      	ldr	r3, [sp, #32]
   88b8e:	2b0e      	cmp	r3, #14
   88b90:	f200 8114 	bhi.w	88dbc <_dtoa_r+0x4a4>
   88b94:	2e00      	cmp	r6, #0
   88b96:	f000 8111 	beq.w	88dbc <_dtoa_r+0x4a4>
   88b9a:	9907      	ldr	r1, [sp, #28]
   88b9c:	2900      	cmp	r1, #0
   88b9e:	f340 8460 	ble.w	89462 <_dtoa_r+0xb4a>
   88ba2:	4baf      	ldr	r3, [pc, #700]	; (88e60 <_dtoa_r+0x548>)
   88ba4:	f001 020f 	and.w	r2, r1, #15
   88ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88bac:	460a      	mov	r2, r1
   88bae:	e9d3 6700 	ldrd	r6, r7, [r3]
   88bb2:	ea4f 1821 	mov.w	r8, r1, asr #4
   88bb6:	05d1      	lsls	r1, r2, #23
   88bb8:	f140 8417 	bpl.w	893ea <_dtoa_r+0xad2>
   88bbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88bc0:	4ba8      	ldr	r3, [pc, #672]	; (88e64 <_dtoa_r+0x54c>)
   88bc2:	f04f 0a03 	mov.w	sl, #3
   88bc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   88bca:	f003 fb27 	bl	8c21c <__aeabi_ddiv>
   88bce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88bd2:	f008 080f 	and.w	r8, r8, #15
   88bd6:	f1b8 0f00 	cmp.w	r8, #0
   88bda:	d013      	beq.n	88c04 <_dtoa_r+0x2ec>
   88bdc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 88e64 <_dtoa_r+0x54c>
   88be0:	f018 0f01 	tst.w	r8, #1
   88be4:	d009      	beq.n	88bfa <_dtoa_r+0x2e2>
   88be6:	e9d9 2300 	ldrd	r2, r3, [r9]
   88bea:	4630      	mov	r0, r6
   88bec:	4639      	mov	r1, r7
   88bee:	f003 f9eb 	bl	8bfc8 <__aeabi_dmul>
   88bf2:	4606      	mov	r6, r0
   88bf4:	460f      	mov	r7, r1
   88bf6:	f10a 0a01 	add.w	sl, sl, #1
   88bfa:	ea5f 0868 	movs.w	r8, r8, asr #1
   88bfe:	f109 0908 	add.w	r9, r9, #8
   88c02:	d1ed      	bne.n	88be0 <_dtoa_r+0x2c8>
   88c04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88c08:	4632      	mov	r2, r6
   88c0a:	463b      	mov	r3, r7
   88c0c:	f003 fb06 	bl	8c21c <__aeabi_ddiv>
   88c10:	4680      	mov	r8, r0
   88c12:	4689      	mov	r9, r1
   88c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88c16:	b143      	cbz	r3, 88c2a <_dtoa_r+0x312>
   88c18:	2200      	movs	r2, #0
   88c1a:	4640      	mov	r0, r8
   88c1c:	4649      	mov	r1, r9
   88c1e:	4b92      	ldr	r3, [pc, #584]	; (88e68 <_dtoa_r+0x550>)
   88c20:	f003 fc44 	bl	8c4ac <__aeabi_dcmplt>
   88c24:	2800      	cmp	r0, #0
   88c26:	f040 8535 	bne.w	89694 <_dtoa_r+0xd7c>
   88c2a:	4650      	mov	r0, sl
   88c2c:	f003 f962 	bl	8bef4 <__aeabi_i2d>
   88c30:	4642      	mov	r2, r8
   88c32:	464b      	mov	r3, r9
   88c34:	f003 f9c8 	bl	8bfc8 <__aeabi_dmul>
   88c38:	4b8c      	ldr	r3, [pc, #560]	; (88e6c <_dtoa_r+0x554>)
   88c3a:	2200      	movs	r2, #0
   88c3c:	f003 f80e 	bl	8bc5c <__adddf3>
   88c40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88c44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88c48:	9311      	str	r3, [sp, #68]	; 0x44
   88c4a:	9b08      	ldr	r3, [sp, #32]
   88c4c:	2b00      	cmp	r3, #0
   88c4e:	f000 8097 	beq.w	88d80 <_dtoa_r+0x468>
   88c52:	9b07      	ldr	r3, [sp, #28]
   88c54:	9314      	str	r3, [sp, #80]	; 0x50
   88c56:	9b08      	ldr	r3, [sp, #32]
   88c58:	9313      	str	r3, [sp, #76]	; 0x4c
   88c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88c5c:	2b00      	cmp	r3, #0
   88c5e:	f000 84a9 	beq.w	895b4 <_dtoa_r+0xc9c>
   88c62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88c64:	4b7e      	ldr	r3, [pc, #504]	; (88e60 <_dtoa_r+0x548>)
   88c66:	2000      	movs	r0, #0
   88c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88c6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   88c70:	497f      	ldr	r1, [pc, #508]	; (88e70 <_dtoa_r+0x558>)
   88c72:	f003 fad3 	bl	8c21c <__aeabi_ddiv>
   88c76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88c7a:	f002 ffed 	bl	8bc58 <__aeabi_dsub>
   88c7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88c82:	4649      	mov	r1, r9
   88c84:	4640      	mov	r0, r8
   88c86:	f003 fc4f 	bl	8c528 <__aeabi_d2iz>
   88c8a:	4607      	mov	r7, r0
   88c8c:	f003 f932 	bl	8bef4 <__aeabi_i2d>
   88c90:	4602      	mov	r2, r0
   88c92:	460b      	mov	r3, r1
   88c94:	4640      	mov	r0, r8
   88c96:	4649      	mov	r1, r9
   88c98:	f002 ffde 	bl	8bc58 <__aeabi_dsub>
   88c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88ca0:	9e03      	ldr	r6, [sp, #12]
   88ca2:	3730      	adds	r7, #48	; 0x30
   88ca4:	f806 7b01 	strb.w	r7, [r6], #1
   88ca8:	4680      	mov	r8, r0
   88caa:	4689      	mov	r9, r1
   88cac:	f003 fbfe 	bl	8c4ac <__aeabi_dcmplt>
   88cb0:	2800      	cmp	r0, #0
   88cb2:	f040 852e 	bne.w	89712 <_dtoa_r+0xdfa>
   88cb6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   88cba:	2700      	movs	r7, #0
   88cbc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   88cc0:	9510      	str	r5, [sp, #64]	; 0x40
   88cc2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   88cc4:	9413      	str	r4, [sp, #76]	; 0x4c
   88cc6:	e02a      	b.n	88d1e <_dtoa_r+0x406>
   88cc8:	3701      	adds	r7, #1
   88cca:	42af      	cmp	r7, r5
   88ccc:	f280 852e 	bge.w	8972c <_dtoa_r+0xe14>
   88cd0:	4650      	mov	r0, sl
   88cd2:	4659      	mov	r1, fp
   88cd4:	2200      	movs	r2, #0
   88cd6:	4b67      	ldr	r3, [pc, #412]	; (88e74 <_dtoa_r+0x55c>)
   88cd8:	f003 f976 	bl	8bfc8 <__aeabi_dmul>
   88cdc:	2200      	movs	r2, #0
   88cde:	4b65      	ldr	r3, [pc, #404]	; (88e74 <_dtoa_r+0x55c>)
   88ce0:	4682      	mov	sl, r0
   88ce2:	468b      	mov	fp, r1
   88ce4:	4640      	mov	r0, r8
   88ce6:	4649      	mov	r1, r9
   88ce8:	f003 f96e 	bl	8bfc8 <__aeabi_dmul>
   88cec:	4689      	mov	r9, r1
   88cee:	4680      	mov	r8, r0
   88cf0:	f003 fc1a 	bl	8c528 <__aeabi_d2iz>
   88cf4:	4604      	mov	r4, r0
   88cf6:	f003 f8fd 	bl	8bef4 <__aeabi_i2d>
   88cfa:	4602      	mov	r2, r0
   88cfc:	460b      	mov	r3, r1
   88cfe:	4640      	mov	r0, r8
   88d00:	4649      	mov	r1, r9
   88d02:	f002 ffa9 	bl	8bc58 <__aeabi_dsub>
   88d06:	3430      	adds	r4, #48	; 0x30
   88d08:	4652      	mov	r2, sl
   88d0a:	465b      	mov	r3, fp
   88d0c:	f806 4b01 	strb.w	r4, [r6], #1
   88d10:	4680      	mov	r8, r0
   88d12:	4689      	mov	r9, r1
   88d14:	f003 fbca 	bl	8c4ac <__aeabi_dcmplt>
   88d18:	2800      	cmp	r0, #0
   88d1a:	f040 84f8 	bne.w	8970e <_dtoa_r+0xdf6>
   88d1e:	4642      	mov	r2, r8
   88d20:	464b      	mov	r3, r9
   88d22:	2000      	movs	r0, #0
   88d24:	4950      	ldr	r1, [pc, #320]	; (88e68 <_dtoa_r+0x550>)
   88d26:	f002 ff97 	bl	8bc58 <__aeabi_dsub>
   88d2a:	4652      	mov	r2, sl
   88d2c:	465b      	mov	r3, fp
   88d2e:	f003 fbbd 	bl	8c4ac <__aeabi_dcmplt>
   88d32:	2800      	cmp	r0, #0
   88d34:	d0c8      	beq.n	88cc8 <_dtoa_r+0x3b0>
   88d36:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   88d3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88d3c:	9a03      	ldr	r2, [sp, #12]
   88d3e:	9307      	str	r3, [sp, #28]
   88d40:	e002      	b.n	88d48 <_dtoa_r+0x430>
   88d42:	4296      	cmp	r6, r2
   88d44:	f000 84cd 	beq.w	896e2 <_dtoa_r+0xdca>
   88d48:	46b2      	mov	sl, r6
   88d4a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   88d4e:	2b39      	cmp	r3, #57	; 0x39
   88d50:	d0f7      	beq.n	88d42 <_dtoa_r+0x42a>
   88d52:	3301      	adds	r3, #1
   88d54:	b2db      	uxtb	r3, r3
   88d56:	7033      	strb	r3, [r6, #0]
   88d58:	9b07      	ldr	r3, [sp, #28]
   88d5a:	3301      	adds	r3, #1
   88d5c:	9307      	str	r3, [sp, #28]
   88d5e:	e1c8      	b.n	890f2 <_dtoa_r+0x7da>
   88d60:	4650      	mov	r0, sl
   88d62:	f003 f8c7 	bl	8bef4 <__aeabi_i2d>
   88d66:	4642      	mov	r2, r8
   88d68:	464b      	mov	r3, r9
   88d6a:	f003 f92d 	bl	8bfc8 <__aeabi_dmul>
   88d6e:	4b3f      	ldr	r3, [pc, #252]	; (88e6c <_dtoa_r+0x554>)
   88d70:	2200      	movs	r2, #0
   88d72:	f002 ff73 	bl	8bc5c <__adddf3>
   88d76:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88d7e:	9311      	str	r3, [sp, #68]	; 0x44
   88d80:	4640      	mov	r0, r8
   88d82:	4649      	mov	r1, r9
   88d84:	2200      	movs	r2, #0
   88d86:	4b3c      	ldr	r3, [pc, #240]	; (88e78 <_dtoa_r+0x560>)
   88d88:	f002 ff66 	bl	8bc58 <__aeabi_dsub>
   88d8c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   88d90:	464b      	mov	r3, r9
   88d92:	4642      	mov	r2, r8
   88d94:	4606      	mov	r6, r0
   88d96:	460f      	mov	r7, r1
   88d98:	f003 fba6 	bl	8c4e8 <__aeabi_dcmpgt>
   88d9c:	4681      	mov	r9, r0
   88d9e:	2800      	cmp	r0, #0
   88da0:	f040 84af 	bne.w	89702 <_dtoa_r+0xdea>
   88da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88da8:	4602      	mov	r2, r0
   88daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   88dae:	4630      	mov	r0, r6
   88db0:	4639      	mov	r1, r7
   88db2:	f003 fb7b 	bl	8c4ac <__aeabi_dcmplt>
   88db6:	2800      	cmp	r0, #0
   88db8:	f040 8348 	bne.w	8944c <_dtoa_r+0xb34>
   88dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88dbe:	2b00      	cmp	r3, #0
   88dc0:	f2c0 808c 	blt.w	88edc <_dtoa_r+0x5c4>
   88dc4:	9a07      	ldr	r2, [sp, #28]
   88dc6:	2a0e      	cmp	r2, #14
   88dc8:	f300 8088 	bgt.w	88edc <_dtoa_r+0x5c4>
   88dcc:	4b24      	ldr	r3, [pc, #144]	; (88e60 <_dtoa_r+0x548>)
   88dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88dd2:	e9d3 ab00 	ldrd	sl, fp, [r3]
   88dd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88dd8:	2b00      	cmp	r3, #0
   88dda:	da1b      	bge.n	88e14 <_dtoa_r+0x4fc>
   88ddc:	9b08      	ldr	r3, [sp, #32]
   88dde:	2b00      	cmp	r3, #0
   88de0:	dc18      	bgt.n	88e14 <_dtoa_r+0x4fc>
   88de2:	f040 8331 	bne.w	89448 <_dtoa_r+0xb30>
   88de6:	2200      	movs	r2, #0
   88de8:	4b23      	ldr	r3, [pc, #140]	; (88e78 <_dtoa_r+0x560>)
   88dea:	4650      	mov	r0, sl
   88dec:	4659      	mov	r1, fp
   88dee:	f003 f8eb 	bl	8bfc8 <__aeabi_dmul>
   88df2:	4602      	mov	r2, r0
   88df4:	460b      	mov	r3, r1
   88df6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88dfa:	f003 fb61 	bl	8c4c0 <__aeabi_dcmple>
   88dfe:	f8dd 9020 	ldr.w	r9, [sp, #32]
   88e02:	464e      	mov	r6, r9
   88e04:	2800      	cmp	r0, #0
   88e06:	f000 82ca 	beq.w	8939e <_dtoa_r+0xa86>
   88e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88e0c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   88e10:	43df      	mvns	r7, r3
   88e12:	e2cc      	b.n	893ae <_dtoa_r+0xa96>
   88e14:	4652      	mov	r2, sl
   88e16:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   88e1a:	465b      	mov	r3, fp
   88e1c:	4638      	mov	r0, r7
   88e1e:	4641      	mov	r1, r8
   88e20:	f003 f9fc 	bl	8c21c <__aeabi_ddiv>
   88e24:	f003 fb80 	bl	8c528 <__aeabi_d2iz>
   88e28:	4681      	mov	r9, r0
   88e2a:	9009      	str	r0, [sp, #36]	; 0x24
   88e2c:	f003 f862 	bl	8bef4 <__aeabi_i2d>
   88e30:	4652      	mov	r2, sl
   88e32:	465b      	mov	r3, fp
   88e34:	f003 f8c8 	bl	8bfc8 <__aeabi_dmul>
   88e38:	9e03      	ldr	r6, [sp, #12]
   88e3a:	460b      	mov	r3, r1
   88e3c:	4602      	mov	r2, r0
   88e3e:	4641      	mov	r1, r8
   88e40:	4638      	mov	r0, r7
   88e42:	f002 ff09 	bl	8bc58 <__aeabi_dsub>
   88e46:	f109 0330 	add.w	r3, r9, #48	; 0x30
   88e4a:	f806 3b01 	strb.w	r3, [r6], #1
   88e4e:	9b08      	ldr	r3, [sp, #32]
   88e50:	2b01      	cmp	r3, #1
   88e52:	f000 835f 	beq.w	89514 <_dtoa_r+0xbfc>
   88e56:	9406      	str	r4, [sp, #24]
   88e58:	2701      	movs	r7, #1
   88e5a:	461c      	mov	r4, r3
   88e5c:	9504      	str	r5, [sp, #16]
   88e5e:	e02a      	b.n	88eb6 <_dtoa_r+0x59e>
   88e60:	0008cba0 	.word	0x0008cba0
   88e64:	0008cb78 	.word	0x0008cb78
   88e68:	3ff00000 	.word	0x3ff00000
   88e6c:	401c0000 	.word	0x401c0000
   88e70:	3fe00000 	.word	0x3fe00000
   88e74:	40240000 	.word	0x40240000
   88e78:	40140000 	.word	0x40140000
   88e7c:	4652      	mov	r2, sl
   88e7e:	465b      	mov	r3, fp
   88e80:	4640      	mov	r0, r8
   88e82:	4649      	mov	r1, r9
   88e84:	f003 f9ca 	bl	8c21c <__aeabi_ddiv>
   88e88:	f003 fb4e 	bl	8c528 <__aeabi_d2iz>
   88e8c:	4605      	mov	r5, r0
   88e8e:	f003 f831 	bl	8bef4 <__aeabi_i2d>
   88e92:	4652      	mov	r2, sl
   88e94:	465b      	mov	r3, fp
   88e96:	f003 f897 	bl	8bfc8 <__aeabi_dmul>
   88e9a:	3701      	adds	r7, #1
   88e9c:	460b      	mov	r3, r1
   88e9e:	4602      	mov	r2, r0
   88ea0:	4649      	mov	r1, r9
   88ea2:	4640      	mov	r0, r8
   88ea4:	f002 fed8 	bl	8bc58 <__aeabi_dsub>
   88ea8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   88eac:	42a7      	cmp	r7, r4
   88eae:	f806 3b01 	strb.w	r3, [r6], #1
   88eb2:	f000 832c 	beq.w	8950e <_dtoa_r+0xbf6>
   88eb6:	2200      	movs	r2, #0
   88eb8:	4bab      	ldr	r3, [pc, #684]	; (89168 <_dtoa_r+0x850>)
   88eba:	f003 f885 	bl	8bfc8 <__aeabi_dmul>
   88ebe:	2200      	movs	r2, #0
   88ec0:	2300      	movs	r3, #0
   88ec2:	4680      	mov	r8, r0
   88ec4:	4689      	mov	r9, r1
   88ec6:	f003 fae7 	bl	8c498 <__aeabi_dcmpeq>
   88eca:	2800      	cmp	r0, #0
   88ecc:	d0d6      	beq.n	88e7c <_dtoa_r+0x564>
   88ece:	9d04      	ldr	r5, [sp, #16]
   88ed0:	9c06      	ldr	r4, [sp, #24]
   88ed2:	9b07      	ldr	r3, [sp, #28]
   88ed4:	46b2      	mov	sl, r6
   88ed6:	3301      	adds	r3, #1
   88ed8:	9307      	str	r3, [sp, #28]
   88eda:	e10a      	b.n	890f2 <_dtoa_r+0x7da>
   88edc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88ede:	2a00      	cmp	r2, #0
   88ee0:	d03d      	beq.n	88f5e <_dtoa_r+0x646>
   88ee2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   88ee4:	2a01      	cmp	r2, #1
   88ee6:	f340 829f 	ble.w	89428 <_dtoa_r+0xb10>
   88eea:	9b08      	ldr	r3, [sp, #32]
   88eec:	f103 38ff 	add.w	r8, r3, #4294967295
   88ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88ef2:	4543      	cmp	r3, r8
   88ef4:	f2c0 8270 	blt.w	893d8 <_dtoa_r+0xac0>
   88ef8:	eba3 0808 	sub.w	r8, r3, r8
   88efc:	9b08      	ldr	r3, [sp, #32]
   88efe:	2b00      	cmp	r3, #0
   88f00:	f2c0 8340 	blt.w	89584 <_dtoa_r+0xc6c>
   88f04:	9a06      	ldr	r2, [sp, #24]
   88f06:	441a      	add	r2, r3
   88f08:	9206      	str	r2, [sp, #24]
   88f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88f0c:	4617      	mov	r7, r2
   88f0e:	441a      	add	r2, r3
   88f10:	9209      	str	r2, [sp, #36]	; 0x24
   88f12:	2101      	movs	r1, #1
   88f14:	4620      	mov	r0, r4
   88f16:	f001 fe5d 	bl	8abd4 <__i2b>
   88f1a:	4606      	mov	r6, r0
   88f1c:	e023      	b.n	88f66 <_dtoa_r+0x64e>
   88f1e:	2301      	movs	r3, #1
   88f20:	1bbe      	subs	r6, r7, r6
   88f22:	930e      	str	r3, [sp, #56]	; 0x38
   88f24:	1e73      	subs	r3, r6, #1
   88f26:	9306      	str	r3, [sp, #24]
   88f28:	f57f ada0 	bpl.w	88a6c <_dtoa_r+0x154>
   88f2c:	f1c6 0301 	rsb	r3, r6, #1
   88f30:	9309      	str	r3, [sp, #36]	; 0x24
   88f32:	2300      	movs	r3, #0
   88f34:	9306      	str	r3, [sp, #24]
   88f36:	e59b      	b.n	88a70 <_dtoa_r+0x158>
   88f38:	4658      	mov	r0, fp
   88f3a:	f002 ffdb 	bl	8bef4 <__aeabi_i2d>
   88f3e:	4642      	mov	r2, r8
   88f40:	464b      	mov	r3, r9
   88f42:	f003 faa9 	bl	8c498 <__aeabi_dcmpeq>
   88f46:	2800      	cmp	r0, #0
   88f48:	f47f ad78 	bne.w	88a3c <_dtoa_r+0x124>
   88f4c:	f10b 3bff 	add.w	fp, fp, #4294967295
   88f50:	e574      	b.n	88a3c <_dtoa_r+0x124>
   88f52:	4b86      	ldr	r3, [pc, #536]	; (8916c <_dtoa_r+0x854>)
   88f54:	9303      	str	r3, [sp, #12]
   88f56:	9803      	ldr	r0, [sp, #12]
   88f58:	b019      	add	sp, #100	; 0x64
   88f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f5e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   88f62:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88f64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88f66:	2f00      	cmp	r7, #0
   88f68:	dd0c      	ble.n	88f84 <_dtoa_r+0x66c>
   88f6a:	9906      	ldr	r1, [sp, #24]
   88f6c:	2900      	cmp	r1, #0
   88f6e:	460b      	mov	r3, r1
   88f70:	dd08      	ble.n	88f84 <_dtoa_r+0x66c>
   88f72:	42b9      	cmp	r1, r7
   88f74:	bfa8      	it	ge
   88f76:	463b      	movge	r3, r7
   88f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88f7a:	1aff      	subs	r7, r7, r3
   88f7c:	1ad2      	subs	r2, r2, r3
   88f7e:	1acb      	subs	r3, r1, r3
   88f80:	9209      	str	r2, [sp, #36]	; 0x24
   88f82:	9306      	str	r3, [sp, #24]
   88f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88f86:	b1e3      	cbz	r3, 88fc2 <_dtoa_r+0x6aa>
   88f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88f8a:	2b00      	cmp	r3, #0
   88f8c:	f000 8260 	beq.w	89450 <_dtoa_r+0xb38>
   88f90:	f1b8 0f00 	cmp.w	r8, #0
   88f94:	dd10      	ble.n	88fb8 <_dtoa_r+0x6a0>
   88f96:	4631      	mov	r1, r6
   88f98:	4642      	mov	r2, r8
   88f9a:	4620      	mov	r0, r4
   88f9c:	f001 fef6 	bl	8ad8c <__pow5mult>
   88fa0:	4606      	mov	r6, r0
   88fa2:	462a      	mov	r2, r5
   88fa4:	4631      	mov	r1, r6
   88fa6:	4620      	mov	r0, r4
   88fa8:	f001 fe42 	bl	8ac30 <__multiply>
   88fac:	4603      	mov	r3, r0
   88fae:	4629      	mov	r1, r5
   88fb0:	4620      	mov	r0, r4
   88fb2:	461d      	mov	r5, r3
   88fb4:	f001 fd66 	bl	8aa84 <_Bfree>
   88fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88fba:	ebb3 0208 	subs.w	r2, r3, r8
   88fbe:	f040 82db 	bne.w	89578 <_dtoa_r+0xc60>
   88fc2:	2101      	movs	r1, #1
   88fc4:	4620      	mov	r0, r4
   88fc6:	f001 fe05 	bl	8abd4 <__i2b>
   88fca:	f1bb 0f00 	cmp.w	fp, #0
   88fce:	4681      	mov	r9, r0
   88fd0:	f300 80b3 	bgt.w	8913a <_dtoa_r+0x822>
   88fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88fd6:	2b01      	cmp	r3, #1
   88fd8:	f340 8188 	ble.w	892ec <_dtoa_r+0x9d4>
   88fdc:	f04f 0a00 	mov.w	sl, #0
   88fe0:	2001      	movs	r0, #1
   88fe2:	f1bb 0f00 	cmp.w	fp, #0
   88fe6:	f040 80b4 	bne.w	89152 <_dtoa_r+0x83a>
   88fea:	9a06      	ldr	r2, [sp, #24]
   88fec:	4410      	add	r0, r2
   88fee:	f010 001f 	ands.w	r0, r0, #31
   88ff2:	f000 8092 	beq.w	8911a <_dtoa_r+0x802>
   88ff6:	f1c0 0320 	rsb	r3, r0, #32
   88ffa:	2b04      	cmp	r3, #4
   88ffc:	f340 83d3 	ble.w	897a6 <_dtoa_r+0xe8e>
   89000:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89002:	f1c0 001c 	rsb	r0, r0, #28
   89006:	4403      	add	r3, r0
   89008:	4402      	add	r2, r0
   8900a:	9309      	str	r3, [sp, #36]	; 0x24
   8900c:	4407      	add	r7, r0
   8900e:	9206      	str	r2, [sp, #24]
   89010:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89012:	2b00      	cmp	r3, #0
   89014:	dd05      	ble.n	89022 <_dtoa_r+0x70a>
   89016:	4629      	mov	r1, r5
   89018:	461a      	mov	r2, r3
   8901a:	4620      	mov	r0, r4
   8901c:	f001 ff12 	bl	8ae44 <__lshift>
   89020:	4605      	mov	r5, r0
   89022:	9b06      	ldr	r3, [sp, #24]
   89024:	2b00      	cmp	r3, #0
   89026:	dd05      	ble.n	89034 <_dtoa_r+0x71c>
   89028:	4649      	mov	r1, r9
   8902a:	461a      	mov	r2, r3
   8902c:	4620      	mov	r0, r4
   8902e:	f001 ff09 	bl	8ae44 <__lshift>
   89032:	4681      	mov	r9, r0
   89034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89036:	2b00      	cmp	r3, #0
   89038:	f040 8138 	bne.w	892ac <_dtoa_r+0x994>
   8903c:	9b08      	ldr	r3, [sp, #32]
   8903e:	2b00      	cmp	r3, #0
   89040:	f340 811e 	ble.w	89280 <_dtoa_r+0x968>
   89044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89046:	2b00      	cmp	r3, #0
   89048:	f040 809f 	bne.w	8918a <_dtoa_r+0x872>
   8904c:	9b07      	ldr	r3, [sp, #28]
   8904e:	3301      	adds	r3, #1
   89050:	9307      	str	r3, [sp, #28]
   89052:	2701      	movs	r7, #1
   89054:	f8dd 800c 	ldr.w	r8, [sp, #12]
   89058:	f8dd a020 	ldr.w	sl, [sp, #32]
   8905c:	e007      	b.n	8906e <_dtoa_r+0x756>
   8905e:	4629      	mov	r1, r5
   89060:	2300      	movs	r3, #0
   89062:	220a      	movs	r2, #10
   89064:	4620      	mov	r0, r4
   89066:	f001 fd17 	bl	8aa98 <__multadd>
   8906a:	4605      	mov	r5, r0
   8906c:	3701      	adds	r7, #1
   8906e:	4649      	mov	r1, r9
   89070:	4628      	mov	r0, r5
   89072:	f7ff fbbb 	bl	887ec <quorem>
   89076:	4557      	cmp	r7, sl
   89078:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8907c:	f808 3b01 	strb.w	r3, [r8], #1
   89080:	dbed      	blt.n	8905e <_dtoa_r+0x746>
   89082:	9a08      	ldr	r2, [sp, #32]
   89084:	2700      	movs	r7, #0
   89086:	2a00      	cmp	r2, #0
   89088:	bfcc      	ite	gt
   8908a:	4693      	movgt	fp, r2
   8908c:	f04f 0b01 	movle.w	fp, #1
   89090:	9a03      	ldr	r2, [sp, #12]
   89092:	4493      	add	fp, r2
   89094:	4629      	mov	r1, r5
   89096:	2201      	movs	r2, #1
   89098:	4620      	mov	r0, r4
   8909a:	9304      	str	r3, [sp, #16]
   8909c:	f001 fed2 	bl	8ae44 <__lshift>
   890a0:	4649      	mov	r1, r9
   890a2:	4605      	mov	r5, r0
   890a4:	f001 ff44 	bl	8af30 <__mcmp>
   890a8:	2800      	cmp	r0, #0
   890aa:	f340 81ab 	ble.w	89404 <_dtoa_r+0xaec>
   890ae:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   890b2:	9a03      	ldr	r2, [sp, #12]
   890b4:	f10b 3bff 	add.w	fp, fp, #4294967295
   890b8:	e004      	b.n	890c4 <_dtoa_r+0x7ac>
   890ba:	455a      	cmp	r2, fp
   890bc:	f000 81ad 	beq.w	8941a <_dtoa_r+0xb02>
   890c0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   890c4:	2b39      	cmp	r3, #57	; 0x39
   890c6:	f10b 0a01 	add.w	sl, fp, #1
   890ca:	d0f6      	beq.n	890ba <_dtoa_r+0x7a2>
   890cc:	3301      	adds	r3, #1
   890ce:	f88b 3000 	strb.w	r3, [fp]
   890d2:	4649      	mov	r1, r9
   890d4:	4620      	mov	r0, r4
   890d6:	f001 fcd5 	bl	8aa84 <_Bfree>
   890da:	b156      	cbz	r6, 890f2 <_dtoa_r+0x7da>
   890dc:	b12f      	cbz	r7, 890ea <_dtoa_r+0x7d2>
   890de:	42b7      	cmp	r7, r6
   890e0:	d003      	beq.n	890ea <_dtoa_r+0x7d2>
   890e2:	4639      	mov	r1, r7
   890e4:	4620      	mov	r0, r4
   890e6:	f001 fccd 	bl	8aa84 <_Bfree>
   890ea:	4631      	mov	r1, r6
   890ec:	4620      	mov	r0, r4
   890ee:	f001 fcc9 	bl	8aa84 <_Bfree>
   890f2:	4629      	mov	r1, r5
   890f4:	4620      	mov	r0, r4
   890f6:	f001 fcc5 	bl	8aa84 <_Bfree>
   890fa:	2300      	movs	r3, #0
   890fc:	9a07      	ldr	r2, [sp, #28]
   890fe:	f88a 3000 	strb.w	r3, [sl]
   89102:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89104:	601a      	str	r2, [r3, #0]
   89106:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89108:	2b00      	cmp	r3, #0
   8910a:	f43f ac40 	beq.w	8898e <_dtoa_r+0x76>
   8910e:	9803      	ldr	r0, [sp, #12]
   89110:	f8c3 a000 	str.w	sl, [r3]
   89114:	b019      	add	sp, #100	; 0x64
   89116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8911a:	201c      	movs	r0, #28
   8911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8911e:	4407      	add	r7, r0
   89120:	4403      	add	r3, r0
   89122:	9309      	str	r3, [sp, #36]	; 0x24
   89124:	9b06      	ldr	r3, [sp, #24]
   89126:	4403      	add	r3, r0
   89128:	9306      	str	r3, [sp, #24]
   8912a:	e771      	b.n	89010 <_dtoa_r+0x6f8>
   8912c:	2601      	movs	r6, #1
   8912e:	e4b6      	b.n	88a9e <_dtoa_r+0x186>
   89130:	f1c0 0020 	rsb	r0, r0, #32
   89134:	fa08 f000 	lsl.w	r0, r8, r0
   89138:	e44d      	b.n	889d6 <_dtoa_r+0xbe>
   8913a:	4601      	mov	r1, r0
   8913c:	465a      	mov	r2, fp
   8913e:	4620      	mov	r0, r4
   89140:	f001 fe24 	bl	8ad8c <__pow5mult>
   89144:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89146:	4681      	mov	r9, r0
   89148:	2b01      	cmp	r3, #1
   8914a:	f340 81b6 	ble.w	894ba <_dtoa_r+0xba2>
   8914e:	f04f 0a00 	mov.w	sl, #0
   89152:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89156:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   8915a:	6918      	ldr	r0, [r3, #16]
   8915c:	f001 fcee 	bl	8ab3c <__hi0bits>
   89160:	f1c0 0020 	rsb	r0, r0, #32
   89164:	e741      	b.n	88fea <_dtoa_r+0x6d2>
   89166:	bf00      	nop
   89168:	40240000 	.word	0x40240000
   8916c:	0008c9fc 	.word	0x0008c9fc
   89170:	4631      	mov	r1, r6
   89172:	2300      	movs	r3, #0
   89174:	220a      	movs	r2, #10
   89176:	4620      	mov	r0, r4
   89178:	f001 fc8e 	bl	8aa98 <__multadd>
   8917c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8917e:	4606      	mov	r6, r0
   89180:	2b00      	cmp	r3, #0
   89182:	f340 82e9 	ble.w	89758 <_dtoa_r+0xe40>
   89186:	e9cd 8307 	strd	r8, r3, [sp, #28]
   8918a:	2f00      	cmp	r7, #0
   8918c:	f300 811d 	bgt.w	893ca <_dtoa_r+0xab2>
   89190:	f1ba 0f00 	cmp.w	sl, #0
   89194:	f040 81d9 	bne.w	8954a <_dtoa_r+0xc32>
   89198:	46b0      	mov	r8, r6
   8919a:	9b04      	ldr	r3, [sp, #16]
   8919c:	9908      	ldr	r1, [sp, #32]
   8919e:	f003 0201 	and.w	r2, r3, #1
   891a2:	9b03      	ldr	r3, [sp, #12]
   891a4:	920a      	str	r2, [sp, #40]	; 0x28
   891a6:	461f      	mov	r7, r3
   891a8:	3b01      	subs	r3, #1
   891aa:	4419      	add	r1, r3
   891ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   891ae:	9108      	str	r1, [sp, #32]
   891b0:	4313      	orrs	r3, r2
   891b2:	9309      	str	r3, [sp, #36]	; 0x24
   891b4:	4649      	mov	r1, r9
   891b6:	4628      	mov	r0, r5
   891b8:	f7ff fb18 	bl	887ec <quorem>
   891bc:	4631      	mov	r1, r6
   891be:	4683      	mov	fp, r0
   891c0:	4628      	mov	r0, r5
   891c2:	f001 feb5 	bl	8af30 <__mcmp>
   891c6:	4642      	mov	r2, r8
   891c8:	4649      	mov	r1, r9
   891ca:	4682      	mov	sl, r0
   891cc:	4620      	mov	r0, r4
   891ce:	f001 fecf 	bl	8af70 <__mdiff>
   891d2:	68c2      	ldr	r2, [r0, #12]
   891d4:	4601      	mov	r1, r0
   891d6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   891da:	2a00      	cmp	r2, #0
   891dc:	d143      	bne.n	89266 <_dtoa_r+0x94e>
   891de:	9004      	str	r0, [sp, #16]
   891e0:	4628      	mov	r0, r5
   891e2:	9306      	str	r3, [sp, #24]
   891e4:	f001 fea4 	bl	8af30 <__mcmp>
   891e8:	4602      	mov	r2, r0
   891ea:	9904      	ldr	r1, [sp, #16]
   891ec:	4620      	mov	r0, r4
   891ee:	9204      	str	r2, [sp, #16]
   891f0:	f001 fc48 	bl	8aa84 <_Bfree>
   891f4:	9a04      	ldr	r2, [sp, #16]
   891f6:	9b06      	ldr	r3, [sp, #24]
   891f8:	b91a      	cbnz	r2, 89202 <_dtoa_r+0x8ea>
   891fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   891fc:	2900      	cmp	r1, #0
   891fe:	f000 829b 	beq.w	89738 <_dtoa_r+0xe20>
   89202:	f1ba 0f00 	cmp.w	sl, #0
   89206:	f2c0 8164 	blt.w	894d2 <_dtoa_r+0xbba>
   8920a:	9922      	ldr	r1, [sp, #136]	; 0x88
   8920c:	ea4a 0a01 	orr.w	sl, sl, r1
   89210:	990a      	ldr	r1, [sp, #40]	; 0x28
   89212:	ea51 010a 	orrs.w	r1, r1, sl
   89216:	f000 815c 	beq.w	894d2 <_dtoa_r+0xbba>
   8921a:	2a00      	cmp	r2, #0
   8921c:	f300 81b6 	bgt.w	8958c <_dtoa_r+0xc74>
   89220:	9a08      	ldr	r2, [sp, #32]
   89222:	f107 0a01 	add.w	sl, r7, #1
   89226:	4297      	cmp	r7, r2
   89228:	46d3      	mov	fp, sl
   8922a:	703b      	strb	r3, [r7, #0]
   8922c:	f000 81b4 	beq.w	89598 <_dtoa_r+0xc80>
   89230:	4629      	mov	r1, r5
   89232:	2300      	movs	r3, #0
   89234:	220a      	movs	r2, #10
   89236:	4620      	mov	r0, r4
   89238:	f001 fc2e 	bl	8aa98 <__multadd>
   8923c:	4546      	cmp	r6, r8
   8923e:	4605      	mov	r5, r0
   89240:	4631      	mov	r1, r6
   89242:	f04f 0300 	mov.w	r3, #0
   89246:	f04f 020a 	mov.w	r2, #10
   8924a:	4620      	mov	r0, r4
   8924c:	d012      	beq.n	89274 <_dtoa_r+0x95c>
   8924e:	f001 fc23 	bl	8aa98 <__multadd>
   89252:	4641      	mov	r1, r8
   89254:	4606      	mov	r6, r0
   89256:	2300      	movs	r3, #0
   89258:	220a      	movs	r2, #10
   8925a:	4620      	mov	r0, r4
   8925c:	f001 fc1c 	bl	8aa98 <__multadd>
   89260:	4657      	mov	r7, sl
   89262:	4680      	mov	r8, r0
   89264:	e7a6      	b.n	891b4 <_dtoa_r+0x89c>
   89266:	4620      	mov	r0, r4
   89268:	9304      	str	r3, [sp, #16]
   8926a:	f001 fc0b 	bl	8aa84 <_Bfree>
   8926e:	2201      	movs	r2, #1
   89270:	9b04      	ldr	r3, [sp, #16]
   89272:	e7c6      	b.n	89202 <_dtoa_r+0x8ea>
   89274:	f001 fc10 	bl	8aa98 <__multadd>
   89278:	4657      	mov	r7, sl
   8927a:	4606      	mov	r6, r0
   8927c:	4680      	mov	r8, r0
   8927e:	e799      	b.n	891b4 <_dtoa_r+0x89c>
   89280:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89282:	2b02      	cmp	r3, #2
   89284:	dc7a      	bgt.n	8937c <_dtoa_r+0xa64>
   89286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89288:	2b00      	cmp	r3, #0
   8928a:	f47f af7e 	bne.w	8918a <_dtoa_r+0x872>
   8928e:	9b07      	ldr	r3, [sp, #28]
   89290:	4649      	mov	r1, r9
   89292:	3301      	adds	r3, #1
   89294:	4628      	mov	r0, r5
   89296:	9307      	str	r3, [sp, #28]
   89298:	f7ff faa8 	bl	887ec <quorem>
   8929c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   892a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   892a4:	2700      	movs	r7, #0
   892a6:	f80b 3b01 	strb.w	r3, [fp], #1
   892aa:	e6f3      	b.n	89094 <_dtoa_r+0x77c>
   892ac:	4649      	mov	r1, r9
   892ae:	4628      	mov	r0, r5
   892b0:	f001 fe3e 	bl	8af30 <__mcmp>
   892b4:	2800      	cmp	r0, #0
   892b6:	f6bf aec1 	bge.w	8903c <_dtoa_r+0x724>
   892ba:	4629      	mov	r1, r5
   892bc:	2300      	movs	r3, #0
   892be:	220a      	movs	r2, #10
   892c0:	4620      	mov	r0, r4
   892c2:	f001 fbe9 	bl	8aa98 <__multadd>
   892c6:	9b07      	ldr	r3, [sp, #28]
   892c8:	4605      	mov	r5, r0
   892ca:	f103 38ff 	add.w	r8, r3, #4294967295
   892ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   892d0:	2b00      	cmp	r3, #0
   892d2:	f47f af4d 	bne.w	89170 <_dtoa_r+0x858>
   892d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   892d8:	2b00      	cmp	r3, #0
   892da:	f340 8234 	ble.w	89746 <_dtoa_r+0xe2e>
   892de:	9308      	str	r3, [sp, #32]
   892e0:	e6b7      	b.n	89052 <_dtoa_r+0x73a>
   892e2:	4bb0      	ldr	r3, [pc, #704]	; (895a4 <_dtoa_r+0xc8c>)
   892e4:	9303      	str	r3, [sp, #12]
   892e6:	3303      	adds	r3, #3
   892e8:	f7ff bbf4 	b.w	88ad4 <_dtoa_r+0x1bc>
   892ec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   892f0:	2900      	cmp	r1, #0
   892f2:	f47f ae73 	bne.w	88fdc <_dtoa_r+0x6c4>
   892f6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   892fa:	2b00      	cmp	r3, #0
   892fc:	f47f ae6e 	bne.w	88fdc <_dtoa_r+0x6c4>
   89300:	4ba9      	ldr	r3, [pc, #676]	; (895a8 <_dtoa_r+0xc90>)
   89302:	4013      	ands	r3, r2
   89304:	2b00      	cmp	r3, #0
   89306:	f000 8200 	beq.w	8970a <_dtoa_r+0xdf2>
   8930a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8930c:	f04f 0a01 	mov.w	sl, #1
   89310:	3301      	adds	r3, #1
   89312:	9309      	str	r3, [sp, #36]	; 0x24
   89314:	9b06      	ldr	r3, [sp, #24]
   89316:	3301      	adds	r3, #1
   89318:	9306      	str	r3, [sp, #24]
   8931a:	e661      	b.n	88fe0 <_dtoa_r+0x6c8>
   8931c:	2301      	movs	r3, #1
   8931e:	930c      	str	r3, [sp, #48]	; 0x30
   89320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   89322:	9a07      	ldr	r2, [sp, #28]
   89324:	4413      	add	r3, r2
   89326:	9312      	str	r3, [sp, #72]	; 0x48
   89328:	3301      	adds	r3, #1
   8932a:	2b01      	cmp	r3, #1
   8932c:	461f      	mov	r7, r3
   8932e:	bfb8      	it	lt
   89330:	2701      	movlt	r7, #1
   89332:	9308      	str	r3, [sp, #32]
   89334:	2100      	movs	r1, #0
   89336:	2f17      	cmp	r7, #23
   89338:	6461      	str	r1, [r4, #68]	; 0x44
   8933a:	f77f ac1e 	ble.w	88b7a <_dtoa_r+0x262>
   8933e:	2201      	movs	r2, #1
   89340:	2304      	movs	r3, #4
   89342:	005b      	lsls	r3, r3, #1
   89344:	f103 0014 	add.w	r0, r3, #20
   89348:	42b8      	cmp	r0, r7
   8934a:	4611      	mov	r1, r2
   8934c:	f102 0201 	add.w	r2, r2, #1
   89350:	d9f7      	bls.n	89342 <_dtoa_r+0xa2a>
   89352:	6461      	str	r1, [r4, #68]	; 0x44
   89354:	e411      	b.n	88b7a <_dtoa_r+0x262>
   89356:	2301      	movs	r3, #1
   89358:	930c      	str	r3, [sp, #48]	; 0x30
   8935a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8935c:	2b00      	cmp	r3, #0
   8935e:	dd4c      	ble.n	893fa <_dtoa_r+0xae2>
   89360:	461f      	mov	r7, r3
   89362:	9312      	str	r3, [sp, #72]	; 0x48
   89364:	9308      	str	r3, [sp, #32]
   89366:	e7e5      	b.n	89334 <_dtoa_r+0xa1c>
   89368:	2300      	movs	r3, #0
   8936a:	930c      	str	r3, [sp, #48]	; 0x30
   8936c:	e7d8      	b.n	89320 <_dtoa_r+0xa08>
   8936e:	2300      	movs	r3, #0
   89370:	930c      	str	r3, [sp, #48]	; 0x30
   89372:	e7f2      	b.n	8935a <_dtoa_r+0xa42>
   89374:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89376:	f8cd 801c 	str.w	r8, [sp, #28]
   8937a:	9308      	str	r3, [sp, #32]
   8937c:	9b08      	ldr	r3, [sp, #32]
   8937e:	2b00      	cmp	r3, #0
   89380:	f47f ad43 	bne.w	88e0a <_dtoa_r+0x4f2>
   89384:	4649      	mov	r1, r9
   89386:	2205      	movs	r2, #5
   89388:	4620      	mov	r0, r4
   8938a:	f001 fb85 	bl	8aa98 <__multadd>
   8938e:	4681      	mov	r9, r0
   89390:	4628      	mov	r0, r5
   89392:	4649      	mov	r1, r9
   89394:	f001 fdcc 	bl	8af30 <__mcmp>
   89398:	2800      	cmp	r0, #0
   8939a:	f77f ad36 	ble.w	88e0a <_dtoa_r+0x4f2>
   8939e:	2331      	movs	r3, #49	; 0x31
   893a0:	9803      	ldr	r0, [sp, #12]
   893a2:	9f07      	ldr	r7, [sp, #28]
   893a4:	4680      	mov	r8, r0
   893a6:	f800 3b01 	strb.w	r3, [r0], #1
   893aa:	3701      	adds	r7, #1
   893ac:	9003      	str	r0, [sp, #12]
   893ae:	4649      	mov	r1, r9
   893b0:	4620      	mov	r0, r4
   893b2:	f001 fb67 	bl	8aa84 <_Bfree>
   893b6:	1c7b      	adds	r3, r7, #1
   893b8:	f8dd a00c 	ldr.w	sl, [sp, #12]
   893bc:	9307      	str	r3, [sp, #28]
   893be:	f8cd 800c 	str.w	r8, [sp, #12]
   893c2:	2e00      	cmp	r6, #0
   893c4:	f47f ae91 	bne.w	890ea <_dtoa_r+0x7d2>
   893c8:	e693      	b.n	890f2 <_dtoa_r+0x7da>
   893ca:	4631      	mov	r1, r6
   893cc:	463a      	mov	r2, r7
   893ce:	4620      	mov	r0, r4
   893d0:	f001 fd38 	bl	8ae44 <__lshift>
   893d4:	4606      	mov	r6, r0
   893d6:	e6db      	b.n	89190 <_dtoa_r+0x878>
   893d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   893da:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   893de:	eba8 0303 	sub.w	r3, r8, r3
   893e2:	449b      	add	fp, r3
   893e4:	f04f 0800 	mov.w	r8, #0
   893e8:	e588      	b.n	88efc <_dtoa_r+0x5e4>
   893ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   893ee:	f04f 0a02 	mov.w	sl, #2
   893f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   893f6:	f7ff bbee 	b.w	88bd6 <_dtoa_r+0x2be>
   893fa:	2301      	movs	r3, #1
   893fc:	9323      	str	r3, [sp, #140]	; 0x8c
   893fe:	9308      	str	r3, [sp, #32]
   89400:	f7ff bbb7 	b.w	88b72 <_dtoa_r+0x25a>
   89404:	d103      	bne.n	8940e <_dtoa_r+0xaf6>
   89406:	9b04      	ldr	r3, [sp, #16]
   89408:	07d8      	lsls	r0, r3, #31
   8940a:	f53f ae50 	bmi.w	890ae <_dtoa_r+0x796>
   8940e:	46da      	mov	sl, fp
   89410:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89414:	2b30      	cmp	r3, #48	; 0x30
   89416:	d0fa      	beq.n	8940e <_dtoa_r+0xaf6>
   89418:	e65b      	b.n	890d2 <_dtoa_r+0x7ba>
   8941a:	9b07      	ldr	r3, [sp, #28]
   8941c:	9a03      	ldr	r2, [sp, #12]
   8941e:	3301      	adds	r3, #1
   89420:	9307      	str	r3, [sp, #28]
   89422:	2331      	movs	r3, #49	; 0x31
   89424:	7013      	strb	r3, [r2, #0]
   89426:	e654      	b.n	890d2 <_dtoa_r+0x7ba>
   89428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8942a:	2a00      	cmp	r2, #0
   8942c:	f000 8128 	beq.w	89680 <_dtoa_r+0xd68>
   89430:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89434:	9a06      	ldr	r2, [sp, #24]
   89436:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8943a:	441a      	add	r2, r3
   8943c:	9206      	str	r2, [sp, #24]
   8943e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89440:	4617      	mov	r7, r2
   89442:	441a      	add	r2, r3
   89444:	9209      	str	r2, [sp, #36]	; 0x24
   89446:	e564      	b.n	88f12 <_dtoa_r+0x5fa>
   89448:	f04f 0900 	mov.w	r9, #0
   8944c:	464e      	mov	r6, r9
   8944e:	e4dc      	b.n	88e0a <_dtoa_r+0x4f2>
   89450:	4629      	mov	r1, r5
   89452:	4620      	mov	r0, r4
   89454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89456:	f001 fc99 	bl	8ad8c <__pow5mult>
   8945a:	4605      	mov	r5, r0
   8945c:	e5b1      	b.n	88fc2 <_dtoa_r+0x6aa>
   8945e:	900e      	str	r0, [sp, #56]	; 0x38
   89460:	e564      	b.n	88f2c <_dtoa_r+0x614>
   89462:	f000 8111 	beq.w	89688 <_dtoa_r+0xd70>
   89466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8946a:	9a07      	ldr	r2, [sp, #28]
   8946c:	4b4f      	ldr	r3, [pc, #316]	; (895ac <_dtoa_r+0xc94>)
   8946e:	4256      	negs	r6, r2
   89470:	f006 020f 	and.w	r2, r6, #15
   89474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89478:	e9d3 2300 	ldrd	r2, r3, [r3]
   8947c:	f002 fda4 	bl	8bfc8 <__aeabi_dmul>
   89480:	1136      	asrs	r6, r6, #4
   89482:	4680      	mov	r8, r0
   89484:	4689      	mov	r9, r1
   89486:	f000 8170 	beq.w	8976a <_dtoa_r+0xe52>
   8948a:	2300      	movs	r3, #0
   8948c:	f04f 0a02 	mov.w	sl, #2
   89490:	4f47      	ldr	r7, [pc, #284]	; (895b0 <_dtoa_r+0xc98>)
   89492:	07f2      	lsls	r2, r6, #31
   89494:	d506      	bpl.n	894a4 <_dtoa_r+0xb8c>
   89496:	e9d7 2300 	ldrd	r2, r3, [r7]
   8949a:	f002 fd95 	bl	8bfc8 <__aeabi_dmul>
   8949e:	2301      	movs	r3, #1
   894a0:	f10a 0a01 	add.w	sl, sl, #1
   894a4:	1076      	asrs	r6, r6, #1
   894a6:	f107 0708 	add.w	r7, r7, #8
   894aa:	d1f2      	bne.n	89492 <_dtoa_r+0xb7a>
   894ac:	2b00      	cmp	r3, #0
   894ae:	f43f abb1 	beq.w	88c14 <_dtoa_r+0x2fc>
   894b2:	4680      	mov	r8, r0
   894b4:	4689      	mov	r9, r1
   894b6:	f7ff bbad 	b.w	88c14 <_dtoa_r+0x2fc>
   894ba:	9b04      	ldr	r3, [sp, #16]
   894bc:	2b00      	cmp	r3, #0
   894be:	f47f ae46 	bne.w	8914e <_dtoa_r+0x836>
   894c2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   894c6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   894ca:	2b00      	cmp	r3, #0
   894cc:	f43f af18 	beq.w	89300 <_dtoa_r+0x9e8>
   894d0:	e63d      	b.n	8914e <_dtoa_r+0x836>
   894d2:	2a00      	cmp	r2, #0
   894d4:	dd12      	ble.n	894fc <_dtoa_r+0xbe4>
   894d6:	4629      	mov	r1, r5
   894d8:	2201      	movs	r2, #1
   894da:	4620      	mov	r0, r4
   894dc:	9304      	str	r3, [sp, #16]
   894de:	f001 fcb1 	bl	8ae44 <__lshift>
   894e2:	4649      	mov	r1, r9
   894e4:	4605      	mov	r5, r0
   894e6:	f001 fd23 	bl	8af30 <__mcmp>
   894ea:	2800      	cmp	r0, #0
   894ec:	9b04      	ldr	r3, [sp, #16]
   894ee:	f340 8117 	ble.w	89720 <_dtoa_r+0xe08>
   894f2:	2b39      	cmp	r3, #57	; 0x39
   894f4:	f000 80fb 	beq.w	896ee <_dtoa_r+0xdd6>
   894f8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   894fc:	46ba      	mov	sl, r7
   894fe:	9a07      	ldr	r2, [sp, #28]
   89500:	4637      	mov	r7, r6
   89502:	3201      	adds	r2, #1
   89504:	4646      	mov	r6, r8
   89506:	9207      	str	r2, [sp, #28]
   89508:	f80a 3b01 	strb.w	r3, [sl], #1
   8950c:	e5e1      	b.n	890d2 <_dtoa_r+0x7ba>
   8950e:	9509      	str	r5, [sp, #36]	; 0x24
   89510:	9c06      	ldr	r4, [sp, #24]
   89512:	9d04      	ldr	r5, [sp, #16]
   89514:	4602      	mov	r2, r0
   89516:	460b      	mov	r3, r1
   89518:	f002 fba0 	bl	8bc5c <__adddf3>
   8951c:	4652      	mov	r2, sl
   8951e:	465b      	mov	r3, fp
   89520:	4680      	mov	r8, r0
   89522:	4689      	mov	r9, r1
   89524:	f002 ffe0 	bl	8c4e8 <__aeabi_dcmpgt>
   89528:	b960      	cbnz	r0, 89544 <_dtoa_r+0xc2c>
   8952a:	4652      	mov	r2, sl
   8952c:	465b      	mov	r3, fp
   8952e:	4640      	mov	r0, r8
   89530:	4649      	mov	r1, r9
   89532:	f002 ffb1 	bl	8c498 <__aeabi_dcmpeq>
   89536:	2800      	cmp	r0, #0
   89538:	f43f accb 	beq.w	88ed2 <_dtoa_r+0x5ba>
   8953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8953e:	07d9      	lsls	r1, r3, #31
   89540:	f57f acc7 	bpl.w	88ed2 <_dtoa_r+0x5ba>
   89544:	9a03      	ldr	r2, [sp, #12]
   89546:	f7ff bbff 	b.w	88d48 <_dtoa_r+0x430>
   8954a:	4620      	mov	r0, r4
   8954c:	6871      	ldr	r1, [r6, #4]
   8954e:	f001 fa73 	bl	8aa38 <_Balloc>
   89552:	4607      	mov	r7, r0
   89554:	2800      	cmp	r0, #0
   89556:	f000 810c 	beq.w	89772 <_dtoa_r+0xe5a>
   8955a:	6933      	ldr	r3, [r6, #16]
   8955c:	f106 010c 	add.w	r1, r6, #12
   89560:	3302      	adds	r3, #2
   89562:	009a      	lsls	r2, r3, #2
   89564:	300c      	adds	r0, #12
   89566:	f7fc f9ff 	bl	85968 <memcpy>
   8956a:	4639      	mov	r1, r7
   8956c:	2201      	movs	r2, #1
   8956e:	4620      	mov	r0, r4
   89570:	f001 fc68 	bl	8ae44 <__lshift>
   89574:	4680      	mov	r8, r0
   89576:	e610      	b.n	8919a <_dtoa_r+0x882>
   89578:	4629      	mov	r1, r5
   8957a:	4620      	mov	r0, r4
   8957c:	f001 fc06 	bl	8ad8c <__pow5mult>
   89580:	4605      	mov	r5, r0
   89582:	e51e      	b.n	88fc2 <_dtoa_r+0x6aa>
   89584:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89588:	1a9f      	subs	r7, r3, r2
   8958a:	e4c2      	b.n	88f12 <_dtoa_r+0x5fa>
   8958c:	2b39      	cmp	r3, #57	; 0x39
   8958e:	f000 80ae 	beq.w	896ee <_dtoa_r+0xdd6>
   89592:	46ba      	mov	sl, r7
   89594:	3301      	adds	r3, #1
   89596:	e7b2      	b.n	894fe <_dtoa_r+0xbe6>
   89598:	9a07      	ldr	r2, [sp, #28]
   8959a:	4637      	mov	r7, r6
   8959c:	3201      	adds	r2, #1
   8959e:	4646      	mov	r6, r8
   895a0:	9207      	str	r2, [sp, #28]
   895a2:	e577      	b.n	89094 <_dtoa_r+0x77c>
   895a4:	0008ca40 	.word	0x0008ca40
   895a8:	7ff00000 	.word	0x7ff00000
   895ac:	0008cba0 	.word	0x0008cba0
   895b0:	0008cb78 	.word	0x0008cb78
   895b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   895b8:	4983      	ldr	r1, [pc, #524]	; (897c8 <_dtoa_r+0xeb0>)
   895ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   895be:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   895c2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   895c6:	f002 fcff 	bl	8bfc8 <__aeabi_dmul>
   895ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   895ce:	4649      	mov	r1, r9
   895d0:	4640      	mov	r0, r8
   895d2:	f002 ffa9 	bl	8c528 <__aeabi_d2iz>
   895d6:	4606      	mov	r6, r0
   895d8:	f002 fc8c 	bl	8bef4 <__aeabi_i2d>
   895dc:	460b      	mov	r3, r1
   895de:	4602      	mov	r2, r0
   895e0:	4649      	mov	r1, r9
   895e2:	4640      	mov	r0, r8
   895e4:	f002 fb38 	bl	8bc58 <__aeabi_dsub>
   895e8:	4653      	mov	r3, sl
   895ea:	9f03      	ldr	r7, [sp, #12]
   895ec:	3630      	adds	r6, #48	; 0x30
   895ee:	2b01      	cmp	r3, #1
   895f0:	4680      	mov	r8, r0
   895f2:	4689      	mov	r9, r1
   895f4:	f807 6b01 	strb.w	r6, [r7], #1
   895f8:	f000 80ac 	beq.w	89754 <_dtoa_r+0xe3c>
   895fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   895fe:	9b03      	ldr	r3, [sp, #12]
   89600:	441e      	add	r6, r3
   89602:	2200      	movs	r2, #0
   89604:	4b71      	ldr	r3, [pc, #452]	; (897cc <_dtoa_r+0xeb4>)
   89606:	4640      	mov	r0, r8
   89608:	4649      	mov	r1, r9
   8960a:	f002 fcdd 	bl	8bfc8 <__aeabi_dmul>
   8960e:	4689      	mov	r9, r1
   89610:	4680      	mov	r8, r0
   89612:	f002 ff89 	bl	8c528 <__aeabi_d2iz>
   89616:	4682      	mov	sl, r0
   89618:	f002 fc6c 	bl	8bef4 <__aeabi_i2d>
   8961c:	4602      	mov	r2, r0
   8961e:	460b      	mov	r3, r1
   89620:	4640      	mov	r0, r8
   89622:	4649      	mov	r1, r9
   89624:	f002 fb18 	bl	8bc58 <__aeabi_dsub>
   89628:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   8962c:	f807 ab01 	strb.w	sl, [r7], #1
   89630:	42b7      	cmp	r7, r6
   89632:	4680      	mov	r8, r0
   89634:	4689      	mov	r9, r1
   89636:	d1e4      	bne.n	89602 <_dtoa_r+0xcea>
   89638:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8963c:	2200      	movs	r2, #0
   8963e:	4b64      	ldr	r3, [pc, #400]	; (897d0 <_dtoa_r+0xeb8>)
   89640:	f002 fb0c 	bl	8bc5c <__adddf3>
   89644:	4642      	mov	r2, r8
   89646:	464b      	mov	r3, r9
   89648:	f002 ff30 	bl	8c4ac <__aeabi_dcmplt>
   8964c:	2800      	cmp	r0, #0
   8964e:	d162      	bne.n	89716 <_dtoa_r+0xdfe>
   89650:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   89654:	2000      	movs	r0, #0
   89656:	495e      	ldr	r1, [pc, #376]	; (897d0 <_dtoa_r+0xeb8>)
   89658:	f002 fafe 	bl	8bc58 <__aeabi_dsub>
   8965c:	4642      	mov	r2, r8
   8965e:	464b      	mov	r3, r9
   89660:	f002 ff42 	bl	8c4e8 <__aeabi_dcmpgt>
   89664:	2800      	cmp	r0, #0
   89666:	f43f aba9 	beq.w	88dbc <_dtoa_r+0x4a4>
   8966a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   8966e:	46b2      	mov	sl, r6
   89670:	2b30      	cmp	r3, #48	; 0x30
   89672:	f106 36ff 	add.w	r6, r6, #4294967295
   89676:	d0f8      	beq.n	8966a <_dtoa_r+0xd52>
   89678:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8967a:	3301      	adds	r3, #1
   8967c:	9307      	str	r3, [sp, #28]
   8967e:	e538      	b.n	890f2 <_dtoa_r+0x7da>
   89680:	9b16      	ldr	r3, [sp, #88]	; 0x58
   89682:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89686:	e6d5      	b.n	89434 <_dtoa_r+0xb1c>
   89688:	f04f 0a02 	mov.w	sl, #2
   8968c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   89690:	f7ff bac0 	b.w	88c14 <_dtoa_r+0x2fc>
   89694:	9b08      	ldr	r3, [sp, #32]
   89696:	2b00      	cmp	r3, #0
   89698:	f43f ab62 	beq.w	88d60 <_dtoa_r+0x448>
   8969c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8969e:	2b00      	cmp	r3, #0
   896a0:	f77f ab8c 	ble.w	88dbc <_dtoa_r+0x4a4>
   896a4:	9313      	str	r3, [sp, #76]	; 0x4c
   896a6:	9b07      	ldr	r3, [sp, #28]
   896a8:	2200      	movs	r2, #0
   896aa:	3b01      	subs	r3, #1
   896ac:	4640      	mov	r0, r8
   896ae:	4649      	mov	r1, r9
   896b0:	9314      	str	r3, [sp, #80]	; 0x50
   896b2:	4b46      	ldr	r3, [pc, #280]	; (897cc <_dtoa_r+0xeb4>)
   896b4:	f002 fc88 	bl	8bfc8 <__aeabi_dmul>
   896b8:	4680      	mov	r8, r0
   896ba:	4689      	mov	r9, r1
   896bc:	f10a 0001 	add.w	r0, sl, #1
   896c0:	f002 fc18 	bl	8bef4 <__aeabi_i2d>
   896c4:	4642      	mov	r2, r8
   896c6:	464b      	mov	r3, r9
   896c8:	f002 fc7e 	bl	8bfc8 <__aeabi_dmul>
   896cc:	4b41      	ldr	r3, [pc, #260]	; (897d4 <_dtoa_r+0xebc>)
   896ce:	2200      	movs	r2, #0
   896d0:	f002 fac4 	bl	8bc5c <__adddf3>
   896d4:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   896d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   896dc:	9311      	str	r3, [sp, #68]	; 0x44
   896de:	f7ff babc 	b.w	88c5a <_dtoa_r+0x342>
   896e2:	9b07      	ldr	r3, [sp, #28]
   896e4:	3301      	adds	r3, #1
   896e6:	9307      	str	r3, [sp, #28]
   896e8:	2331      	movs	r3, #49	; 0x31
   896ea:	f7ff bb34 	b.w	88d56 <_dtoa_r+0x43e>
   896ee:	9b07      	ldr	r3, [sp, #28]
   896f0:	46bb      	mov	fp, r7
   896f2:	3301      	adds	r3, #1
   896f4:	9307      	str	r3, [sp, #28]
   896f6:	2339      	movs	r3, #57	; 0x39
   896f8:	4637      	mov	r7, r6
   896fa:	f80b 3b01 	strb.w	r3, [fp], #1
   896fe:	4646      	mov	r6, r8
   89700:	e4d7      	b.n	890b2 <_dtoa_r+0x79a>
   89702:	f04f 0900 	mov.w	r9, #0
   89706:	464e      	mov	r6, r9
   89708:	e649      	b.n	8939e <_dtoa_r+0xa86>
   8970a:	469a      	mov	sl, r3
   8970c:	e468      	b.n	88fe0 <_dtoa_r+0x6c8>
   8970e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   89710:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   89712:	46b2      	mov	sl, r6
   89714:	e7b0      	b.n	89678 <_dtoa_r+0xd60>
   89716:	9b14      	ldr	r3, [sp, #80]	; 0x50
   89718:	9a03      	ldr	r2, [sp, #12]
   8971a:	9307      	str	r3, [sp, #28]
   8971c:	f7ff bb14 	b.w	88d48 <_dtoa_r+0x430>
   89720:	f47f aeec 	bne.w	894fc <_dtoa_r+0xbe4>
   89724:	07da      	lsls	r2, r3, #31
   89726:	f57f aee9 	bpl.w	894fc <_dtoa_r+0xbe4>
   8972a:	e6e2      	b.n	894f2 <_dtoa_r+0xbda>
   8972c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   89730:	9d10      	ldr	r5, [sp, #64]	; 0x40
   89732:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   89734:	f7ff bb42 	b.w	88dbc <_dtoa_r+0x4a4>
   89738:	2b39      	cmp	r3, #57	; 0x39
   8973a:	d0d8      	beq.n	896ee <_dtoa_r+0xdd6>
   8973c:	f1ba 0f00 	cmp.w	sl, #0
   89740:	f73f aeda 	bgt.w	894f8 <_dtoa_r+0xbe0>
   89744:	e6da      	b.n	894fc <_dtoa_r+0xbe4>
   89746:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89748:	2b02      	cmp	r3, #2
   8974a:	f73f ae13 	bgt.w	89374 <_dtoa_r+0xa5c>
   8974e:	f8cd 801c 	str.w	r8, [sp, #28]
   89752:	e59c      	b.n	8928e <_dtoa_r+0x976>
   89754:	463e      	mov	r6, r7
   89756:	e76f      	b.n	89638 <_dtoa_r+0xd20>
   89758:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8975a:	2b02      	cmp	r3, #2
   8975c:	f73f ae0a 	bgt.w	89374 <_dtoa_r+0xa5c>
   89760:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89762:	f8cd 801c 	str.w	r8, [sp, #28]
   89766:	9308      	str	r3, [sp, #32]
   89768:	e50f      	b.n	8918a <_dtoa_r+0x872>
   8976a:	f04f 0a02 	mov.w	sl, #2
   8976e:	f7ff ba51 	b.w	88c14 <_dtoa_r+0x2fc>
   89772:	4602      	mov	r2, r0
   89774:	f240 21ea 	movw	r1, #746	; 0x2ea
   89778:	4b17      	ldr	r3, [pc, #92]	; (897d8 <_dtoa_r+0xec0>)
   8977a:	4818      	ldr	r0, [pc, #96]	; (897dc <_dtoa_r+0xec4>)
   8977c:	f002 f8dc 	bl	8b938 <__assert_func>
   89780:	2600      	movs	r6, #0
   89782:	4620      	mov	r0, r4
   89784:	4631      	mov	r1, r6
   89786:	6466      	str	r6, [r4, #68]	; 0x44
   89788:	f001 f956 	bl	8aa38 <_Balloc>
   8978c:	9003      	str	r0, [sp, #12]
   8978e:	b978      	cbnz	r0, 897b0 <_dtoa_r+0xe98>
   89790:	2200      	movs	r2, #0
   89792:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89796:	4b10      	ldr	r3, [pc, #64]	; (897d8 <_dtoa_r+0xec0>)
   89798:	4810      	ldr	r0, [pc, #64]	; (897dc <_dtoa_r+0xec4>)
   8979a:	f002 f8cd 	bl	8b938 <__assert_func>
   8979e:	4b10      	ldr	r3, [pc, #64]	; (897e0 <_dtoa_r+0xec8>)
   897a0:	9303      	str	r3, [sp, #12]
   897a2:	f7ff b8f4 	b.w	8898e <_dtoa_r+0x76>
   897a6:	f43f ac33 	beq.w	89010 <_dtoa_r+0x6f8>
   897aa:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   897ae:	e4b5      	b.n	8911c <_dtoa_r+0x804>
   897b0:	9b03      	ldr	r3, [sp, #12]
   897b2:	2201      	movs	r2, #1
   897b4:	6423      	str	r3, [r4, #64]	; 0x40
   897b6:	f04f 33ff 	mov.w	r3, #4294967295
   897ba:	9623      	str	r6, [sp, #140]	; 0x8c
   897bc:	9312      	str	r3, [sp, #72]	; 0x48
   897be:	920c      	str	r2, [sp, #48]	; 0x30
   897c0:	9308      	str	r3, [sp, #32]
   897c2:	f7ff bafb 	b.w	88dbc <_dtoa_r+0x4a4>
   897c6:	bf00      	nop
   897c8:	0008cba0 	.word	0x0008cba0
   897cc:	40240000 	.word	0x40240000
   897d0:	3fe00000 	.word	0x3fe00000
   897d4:	401c0000 	.word	0x401c0000
   897d8:	0008ca50 	.word	0x0008ca50
   897dc:	0008ca64 	.word	0x0008ca64
   897e0:	0008ca44 	.word	0x0008ca44

000897e4 <__sflush_r>:
   897e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   897e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   897ea:	460c      	mov	r4, r1
   897ec:	0711      	lsls	r1, r2, #28
   897ee:	4607      	mov	r7, r0
   897f0:	d443      	bmi.n	8987a <__sflush_r+0x96>
   897f2:	6863      	ldr	r3, [r4, #4]
   897f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   897f8:	2b00      	cmp	r3, #0
   897fa:	81a2      	strh	r2, [r4, #12]
   897fc:	dd5b      	ble.n	898b6 <__sflush_r+0xd2>
   897fe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   89800:	2d00      	cmp	r5, #0
   89802:	d056      	beq.n	898b2 <__sflush_r+0xce>
   89804:	2300      	movs	r3, #0
   89806:	683e      	ldr	r6, [r7, #0]
   89808:	603b      	str	r3, [r7, #0]
   8980a:	b293      	uxth	r3, r2
   8980c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   89810:	d155      	bne.n	898be <__sflush_r+0xda>
   89812:	2301      	movs	r3, #1
   89814:	4638      	mov	r0, r7
   89816:	69e1      	ldr	r1, [r4, #28]
   89818:	47a8      	blx	r5
   8981a:	1c42      	adds	r2, r0, #1
   8981c:	d065      	beq.n	898ea <__sflush_r+0x106>
   8981e:	89a3      	ldrh	r3, [r4, #12]
   89820:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   89822:	075b      	lsls	r3, r3, #29
   89824:	d505      	bpl.n	89832 <__sflush_r+0x4e>
   89826:	6863      	ldr	r3, [r4, #4]
   89828:	1ac0      	subs	r0, r0, r3
   8982a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8982c:	b10b      	cbz	r3, 89832 <__sflush_r+0x4e>
   8982e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   89830:	1ac0      	subs	r0, r0, r3
   89832:	4602      	mov	r2, r0
   89834:	69e1      	ldr	r1, [r4, #28]
   89836:	2300      	movs	r3, #0
   89838:	4638      	mov	r0, r7
   8983a:	47a8      	blx	r5
   8983c:	1c41      	adds	r1, r0, #1
   8983e:	d140      	bne.n	898c2 <__sflush_r+0xde>
   89840:	683b      	ldr	r3, [r7, #0]
   89842:	2b00      	cmp	r3, #0
   89844:	d03d      	beq.n	898c2 <__sflush_r+0xde>
   89846:	2b1d      	cmp	r3, #29
   89848:	d001      	beq.n	8984e <__sflush_r+0x6a>
   8984a:	2b16      	cmp	r3, #22
   8984c:	d154      	bne.n	898f8 <__sflush_r+0x114>
   8984e:	2200      	movs	r2, #0
   89850:	89a3      	ldrh	r3, [r4, #12]
   89852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89856:	81a3      	strh	r3, [r4, #12]
   89858:	6923      	ldr	r3, [r4, #16]
   8985a:	e9c4 3200 	strd	r3, r2, [r4]
   8985e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89860:	603e      	str	r6, [r7, #0]
   89862:	b331      	cbz	r1, 898b2 <__sflush_r+0xce>
   89864:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89868:	4299      	cmp	r1, r3
   8986a:	d002      	beq.n	89872 <__sflush_r+0x8e>
   8986c:	4638      	mov	r0, r7
   8986e:	f000 f9fb 	bl	89c68 <_free_r>
   89872:	2300      	movs	r3, #0
   89874:	4618      	mov	r0, r3
   89876:	6323      	str	r3, [r4, #48]	; 0x30
   89878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8987a:	6926      	ldr	r6, [r4, #16]
   8987c:	b1ce      	cbz	r6, 898b2 <__sflush_r+0xce>
   8987e:	b293      	uxth	r3, r2
   89880:	079a      	lsls	r2, r3, #30
   89882:	bf18      	it	ne
   89884:	2300      	movne	r3, #0
   89886:	6825      	ldr	r5, [r4, #0]
   89888:	bf08      	it	eq
   8988a:	6963      	ldreq	r3, [r4, #20]
   8988c:	6026      	str	r6, [r4, #0]
   8988e:	1bad      	subs	r5, r5, r6
   89890:	60a3      	str	r3, [r4, #8]
   89892:	e00c      	b.n	898ae <__sflush_r+0xca>
   89894:	462b      	mov	r3, r5
   89896:	4632      	mov	r2, r6
   89898:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8989c:	4638      	mov	r0, r7
   8989e:	69e1      	ldr	r1, [r4, #28]
   898a0:	47e0      	blx	ip
   898a2:	f1b0 0c00 	subs.w	ip, r0, #0
   898a6:	eba5 050c 	sub.w	r5, r5, ip
   898aa:	4466      	add	r6, ip
   898ac:	dd16      	ble.n	898dc <__sflush_r+0xf8>
   898ae:	2d00      	cmp	r5, #0
   898b0:	dcf0      	bgt.n	89894 <__sflush_r+0xb0>
   898b2:	2000      	movs	r0, #0
   898b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   898b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   898b8:	2b00      	cmp	r3, #0
   898ba:	dca0      	bgt.n	897fe <__sflush_r+0x1a>
   898bc:	e7f9      	b.n	898b2 <__sflush_r+0xce>
   898be:	6d20      	ldr	r0, [r4, #80]	; 0x50
   898c0:	e7af      	b.n	89822 <__sflush_r+0x3e>
   898c2:	2200      	movs	r2, #0
   898c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   898c8:	6062      	str	r2, [r4, #4]
   898ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   898ce:	6922      	ldr	r2, [r4, #16]
   898d0:	81a3      	strh	r3, [r4, #12]
   898d2:	04db      	lsls	r3, r3, #19
   898d4:	6022      	str	r2, [r4, #0]
   898d6:	d5c2      	bpl.n	8985e <__sflush_r+0x7a>
   898d8:	6520      	str	r0, [r4, #80]	; 0x50
   898da:	e7c0      	b.n	8985e <__sflush_r+0x7a>
   898dc:	89a3      	ldrh	r3, [r4, #12]
   898de:	f04f 30ff 	mov.w	r0, #4294967295
   898e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   898e6:	81a3      	strh	r3, [r4, #12]
   898e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   898ea:	683b      	ldr	r3, [r7, #0]
   898ec:	2b00      	cmp	r3, #0
   898ee:	d096      	beq.n	8981e <__sflush_r+0x3a>
   898f0:	2b1d      	cmp	r3, #29
   898f2:	d006      	beq.n	89902 <__sflush_r+0x11e>
   898f4:	2b16      	cmp	r3, #22
   898f6:	d004      	beq.n	89902 <__sflush_r+0x11e>
   898f8:	89a3      	ldrh	r3, [r4, #12]
   898fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   898fe:	81a3      	strh	r3, [r4, #12]
   89900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89902:	2000      	movs	r0, #0
   89904:	603e      	str	r6, [r7, #0]
   89906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00089908 <_fflush_r>:
   89908:	b538      	push	{r3, r4, r5, lr}
   8990a:	4605      	mov	r5, r0
   8990c:	460c      	mov	r4, r1
   8990e:	b108      	cbz	r0, 89914 <_fflush_r+0xc>
   89910:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89912:	b1a3      	cbz	r3, 8993e <_fflush_r+0x36>
   89914:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89918:	b1b8      	cbz	r0, 8994a <_fflush_r+0x42>
   8991a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8991c:	07db      	lsls	r3, r3, #31
   8991e:	d401      	bmi.n	89924 <_fflush_r+0x1c>
   89920:	0581      	lsls	r1, r0, #22
   89922:	d515      	bpl.n	89950 <_fflush_r+0x48>
   89924:	4628      	mov	r0, r5
   89926:	4621      	mov	r1, r4
   89928:	f7ff ff5c 	bl	897e4 <__sflush_r>
   8992c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8992e:	4605      	mov	r5, r0
   89930:	07da      	lsls	r2, r3, #31
   89932:	d402      	bmi.n	8993a <_fflush_r+0x32>
   89934:	89a3      	ldrh	r3, [r4, #12]
   89936:	059b      	lsls	r3, r3, #22
   89938:	d50e      	bpl.n	89958 <_fflush_r+0x50>
   8993a:	4628      	mov	r0, r5
   8993c:	bd38      	pop	{r3, r4, r5, pc}
   8993e:	f000 f817 	bl	89970 <__sinit>
   89942:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89946:	2800      	cmp	r0, #0
   89948:	d1e7      	bne.n	8991a <_fflush_r+0x12>
   8994a:	4605      	mov	r5, r0
   8994c:	4628      	mov	r0, r5
   8994e:	bd38      	pop	{r3, r4, r5, pc}
   89950:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89952:	f000 fc33 	bl	8a1bc <__retarget_lock_acquire_recursive>
   89956:	e7e5      	b.n	89924 <_fflush_r+0x1c>
   89958:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8995a:	f000 fc31 	bl	8a1c0 <__retarget_lock_release_recursive>
   8995e:	4628      	mov	r0, r5
   89960:	bd38      	pop	{r3, r4, r5, pc}
   89962:	bf00      	nop

00089964 <_cleanup_r>:
   89964:	4901      	ldr	r1, [pc, #4]	; (8996c <_cleanup_r+0x8>)
   89966:	f000 bbf7 	b.w	8a158 <_fwalk_reent>
   8996a:	bf00      	nop
   8996c:	0008ba21 	.word	0x0008ba21

00089970 <__sinit>:
   89970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89974:	4682      	mov	sl, r0
   89976:	4839      	ldr	r0, [pc, #228]	; (89a5c <__sinit+0xec>)
   89978:	f000 fc20 	bl	8a1bc <__retarget_lock_acquire_recursive>
   8997c:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   89980:	2c00      	cmp	r4, #0
   89982:	d166      	bne.n	89a52 <__sinit+0xe2>
   89984:	2304      	movs	r3, #4
   89986:	2203      	movs	r2, #3
   89988:	4935      	ldr	r1, [pc, #212]	; (89a60 <__sinit+0xf0>)
   8998a:	f8da 5004 	ldr.w	r5, [sl, #4]
   8998e:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   89992:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 89a64 <__sinit+0xf4>
   89996:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 89a68 <__sinit+0xf8>
   8999a:	4f34      	ldr	r7, [pc, #208]	; (89a6c <__sinit+0xfc>)
   8999c:	4e34      	ldr	r6, [pc, #208]	; (89a70 <__sinit+0x100>)
   8999e:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   899a2:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   899a6:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   899aa:	4621      	mov	r1, r4
   899ac:	60eb      	str	r3, [r5, #12]
   899ae:	2208      	movs	r2, #8
   899b0:	e9c5 4400 	strd	r4, r4, [r5]
   899b4:	e9c5 4404 	strd	r4, r4, [r5, #16]
   899b8:	666c      	str	r4, [r5, #100]	; 0x64
   899ba:	60ac      	str	r4, [r5, #8]
   899bc:	61ac      	str	r4, [r5, #24]
   899be:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   899c2:	f7fc f847 	bl	85a54 <memset>
   899c6:	e9c5 5907 	strd	r5, r9, [r5, #28]
   899ca:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   899ce:	62ee      	str	r6, [r5, #44]	; 0x2c
   899d0:	f105 0058 	add.w	r0, r5, #88	; 0x58
   899d4:	f000 fbee 	bl	8a1b4 <__retarget_lock_init_recursive>
   899d8:	f8da 5008 	ldr.w	r5, [sl, #8]
   899dc:	4b25      	ldr	r3, [pc, #148]	; (89a74 <__sinit+0x104>)
   899de:	4621      	mov	r1, r4
   899e0:	60eb      	str	r3, [r5, #12]
   899e2:	2208      	movs	r2, #8
   899e4:	e9c5 4400 	strd	r4, r4, [r5]
   899e8:	e9c5 4404 	strd	r4, r4, [r5, #16]
   899ec:	666c      	str	r4, [r5, #100]	; 0x64
   899ee:	60ac      	str	r4, [r5, #8]
   899f0:	61ac      	str	r4, [r5, #24]
   899f2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   899f6:	f7fc f82d 	bl	85a54 <memset>
   899fa:	e9c5 5907 	strd	r5, r9, [r5, #28]
   899fe:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   89a02:	62ee      	str	r6, [r5, #44]	; 0x2c
   89a04:	f105 0058 	add.w	r0, r5, #88	; 0x58
   89a08:	f000 fbd4 	bl	8a1b4 <__retarget_lock_init_recursive>
   89a0c:	f8da 500c 	ldr.w	r5, [sl, #12]
   89a10:	4b19      	ldr	r3, [pc, #100]	; (89a78 <__sinit+0x108>)
   89a12:	4621      	mov	r1, r4
   89a14:	60eb      	str	r3, [r5, #12]
   89a16:	2208      	movs	r2, #8
   89a18:	e9c5 4400 	strd	r4, r4, [r5]
   89a1c:	e9c5 4404 	strd	r4, r4, [r5, #16]
   89a20:	666c      	str	r4, [r5, #100]	; 0x64
   89a22:	60ac      	str	r4, [r5, #8]
   89a24:	61ac      	str	r4, [r5, #24]
   89a26:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   89a2a:	f7fc f813 	bl	85a54 <memset>
   89a2e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   89a32:	e9c5 5907 	strd	r5, r9, [r5, #28]
   89a36:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   89a3a:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   89a3e:	f000 fbb9 	bl	8a1b4 <__retarget_lock_init_recursive>
   89a42:	2301      	movs	r3, #1
   89a44:	4805      	ldr	r0, [pc, #20]	; (89a5c <__sinit+0xec>)
   89a46:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   89a4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89a4e:	f000 bbb7 	b.w	8a1c0 <__retarget_lock_release_recursive>
   89a52:	4802      	ldr	r0, [pc, #8]	; (89a5c <__sinit+0xec>)
   89a54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89a58:	f000 bbb2 	b.w	8a1c0 <__retarget_lock_release_recursive>
   89a5c:	200037c4 	.word	0x200037c4
   89a60:	00089965 	.word	0x00089965
   89a64:	0008b5f1 	.word	0x0008b5f1
   89a68:	0008b615 	.word	0x0008b615
   89a6c:	0008b655 	.word	0x0008b655
   89a70:	0008b675 	.word	0x0008b675
   89a74:	00010009 	.word	0x00010009
   89a78:	00020012 	.word	0x00020012

00089a7c <__sfp_lock_acquire>:
   89a7c:	4801      	ldr	r0, [pc, #4]	; (89a84 <__sfp_lock_acquire+0x8>)
   89a7e:	f000 bb9d 	b.w	8a1bc <__retarget_lock_acquire_recursive>
   89a82:	bf00      	nop
   89a84:	200037c0 	.word	0x200037c0

00089a88 <__sfp_lock_release>:
   89a88:	4801      	ldr	r0, [pc, #4]	; (89a90 <__sfp_lock_release+0x8>)
   89a8a:	f000 bb99 	b.w	8a1c0 <__retarget_lock_release_recursive>
   89a8e:	bf00      	nop
   89a90:	200037c0 	.word	0x200037c0

00089a94 <__libc_fini_array>:
   89a94:	b538      	push	{r3, r4, r5, lr}
   89a96:	4b08      	ldr	r3, [pc, #32]	; (89ab8 <__libc_fini_array+0x24>)
   89a98:	4d08      	ldr	r5, [pc, #32]	; (89abc <__libc_fini_array+0x28>)
   89a9a:	1b5b      	subs	r3, r3, r5
   89a9c:	109c      	asrs	r4, r3, #2
   89a9e:	d007      	beq.n	89ab0 <__libc_fini_array+0x1c>
   89aa0:	3b04      	subs	r3, #4
   89aa2:	441d      	add	r5, r3
   89aa4:	3c01      	subs	r4, #1
   89aa6:	f855 3904 	ldr.w	r3, [r5], #-4
   89aaa:	4798      	blx	r3
   89aac:	2c00      	cmp	r4, #0
   89aae:	d1f9      	bne.n	89aa4 <__libc_fini_array+0x10>
   89ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   89ab4:	f003 b98a 	b.w	8cdcc <_fini>
   89ab8:	0008cddc 	.word	0x0008cddc
   89abc:	0008cdd8 	.word	0x0008cdd8

00089ac0 <__fputwc>:
   89ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   89ac4:	b083      	sub	sp, #12
   89ac6:	4607      	mov	r7, r0
   89ac8:	4688      	mov	r8, r1
   89aca:	4614      	mov	r4, r2
   89acc:	f000 fb68 	bl	8a1a0 <__locale_mb_cur_max>
   89ad0:	2801      	cmp	r0, #1
   89ad2:	d103      	bne.n	89adc <__fputwc+0x1c>
   89ad4:	f108 33ff 	add.w	r3, r8, #4294967295
   89ad8:	2bfe      	cmp	r3, #254	; 0xfe
   89ada:	d933      	bls.n	89b44 <__fputwc+0x84>
   89adc:	4642      	mov	r2, r8
   89ade:	4638      	mov	r0, r7
   89ae0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   89ae4:	a901      	add	r1, sp, #4
   89ae6:	f001 fe9f 	bl	8b828 <_wcrtomb_r>
   89aea:	1c42      	adds	r2, r0, #1
   89aec:	4606      	mov	r6, r0
   89aee:	d02f      	beq.n	89b50 <__fputwc+0x90>
   89af0:	b318      	cbz	r0, 89b3a <__fputwc+0x7a>
   89af2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   89af6:	2500      	movs	r5, #0
   89af8:	f10d 0905 	add.w	r9, sp, #5
   89afc:	e008      	b.n	89b10 <__fputwc+0x50>
   89afe:	6823      	ldr	r3, [r4, #0]
   89b00:	1c5a      	adds	r2, r3, #1
   89b02:	6022      	str	r2, [r4, #0]
   89b04:	7019      	strb	r1, [r3, #0]
   89b06:	3501      	adds	r5, #1
   89b08:	42b5      	cmp	r5, r6
   89b0a:	d216      	bcs.n	89b3a <__fputwc+0x7a>
   89b0c:	f819 1b01 	ldrb.w	r1, [r9], #1
   89b10:	68a3      	ldr	r3, [r4, #8]
   89b12:	3b01      	subs	r3, #1
   89b14:	2b00      	cmp	r3, #0
   89b16:	60a3      	str	r3, [r4, #8]
   89b18:	daf1      	bge.n	89afe <__fputwc+0x3e>
   89b1a:	69a2      	ldr	r2, [r4, #24]
   89b1c:	4293      	cmp	r3, r2
   89b1e:	db01      	blt.n	89b24 <__fputwc+0x64>
   89b20:	290a      	cmp	r1, #10
   89b22:	d1ec      	bne.n	89afe <__fputwc+0x3e>
   89b24:	4622      	mov	r2, r4
   89b26:	4638      	mov	r0, r7
   89b28:	f001 fe26 	bl	8b778 <__swbuf_r>
   89b2c:	1c43      	adds	r3, r0, #1
   89b2e:	d1ea      	bne.n	89b06 <__fputwc+0x46>
   89b30:	4606      	mov	r6, r0
   89b32:	4630      	mov	r0, r6
   89b34:	b003      	add	sp, #12
   89b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89b3a:	4646      	mov	r6, r8
   89b3c:	4630      	mov	r0, r6
   89b3e:	b003      	add	sp, #12
   89b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89b44:	fa5f f188 	uxtb.w	r1, r8
   89b48:	4606      	mov	r6, r0
   89b4a:	f88d 1004 	strb.w	r1, [sp, #4]
   89b4e:	e7d2      	b.n	89af6 <__fputwc+0x36>
   89b50:	4630      	mov	r0, r6
   89b52:	89a3      	ldrh	r3, [r4, #12]
   89b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89b58:	81a3      	strh	r3, [r4, #12]
   89b5a:	b003      	add	sp, #12
   89b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00089b60 <_fputwc_r>:
   89b60:	b530      	push	{r4, r5, lr}
   89b62:	6e53      	ldr	r3, [r2, #100]	; 0x64
   89b64:	4614      	mov	r4, r2
   89b66:	f013 0f01 	tst.w	r3, #1
   89b6a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   89b6e:	4605      	mov	r5, r0
   89b70:	b083      	sub	sp, #12
   89b72:	b29a      	uxth	r2, r3
   89b74:	d101      	bne.n	89b7a <_fputwc_r+0x1a>
   89b76:	0598      	lsls	r0, r3, #22
   89b78:	d51c      	bpl.n	89bb4 <_fputwc_r+0x54>
   89b7a:	0490      	lsls	r0, r2, #18
   89b7c:	d406      	bmi.n	89b8c <_fputwc_r+0x2c>
   89b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   89b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89b88:	81a3      	strh	r3, [r4, #12]
   89b8a:	6662      	str	r2, [r4, #100]	; 0x64
   89b8c:	4622      	mov	r2, r4
   89b8e:	4628      	mov	r0, r5
   89b90:	f7ff ff96 	bl	89ac0 <__fputwc>
   89b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89b96:	4605      	mov	r5, r0
   89b98:	07da      	lsls	r2, r3, #31
   89b9a:	d402      	bmi.n	89ba2 <_fputwc_r+0x42>
   89b9c:	89a3      	ldrh	r3, [r4, #12]
   89b9e:	059b      	lsls	r3, r3, #22
   89ba0:	d502      	bpl.n	89ba8 <_fputwc_r+0x48>
   89ba2:	4628      	mov	r0, r5
   89ba4:	b003      	add	sp, #12
   89ba6:	bd30      	pop	{r4, r5, pc}
   89ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89baa:	f000 fb09 	bl	8a1c0 <__retarget_lock_release_recursive>
   89bae:	4628      	mov	r0, r5
   89bb0:	b003      	add	sp, #12
   89bb2:	bd30      	pop	{r4, r5, pc}
   89bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89bb6:	9101      	str	r1, [sp, #4]
   89bb8:	f000 fb00 	bl	8a1bc <__retarget_lock_acquire_recursive>
   89bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89bc0:	9901      	ldr	r1, [sp, #4]
   89bc2:	b29a      	uxth	r2, r3
   89bc4:	e7d9      	b.n	89b7a <_fputwc_r+0x1a>
   89bc6:	bf00      	nop

00089bc8 <_malloc_trim_r>:
   89bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89bca:	460c      	mov	r4, r1
   89bcc:	4f23      	ldr	r7, [pc, #140]	; (89c5c <_malloc_trim_r+0x94>)
   89bce:	4606      	mov	r6, r0
   89bd0:	f000 ff26 	bl	8aa20 <__malloc_lock>
   89bd4:	68bb      	ldr	r3, [r7, #8]
   89bd6:	685d      	ldr	r5, [r3, #4]
   89bd8:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   89bdc:	f025 0503 	bic.w	r5, r5, #3
   89be0:	330f      	adds	r3, #15
   89be2:	442b      	add	r3, r5
   89be4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   89be8:	f023 030f 	bic.w	r3, r3, #15
   89bec:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   89bf0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   89bf4:	db07      	blt.n	89c06 <_malloc_trim_r+0x3e>
   89bf6:	2100      	movs	r1, #0
   89bf8:	4630      	mov	r0, r6
   89bfa:	f001 fce7 	bl	8b5cc <_sbrk_r>
   89bfe:	68bb      	ldr	r3, [r7, #8]
   89c00:	442b      	add	r3, r5
   89c02:	4298      	cmp	r0, r3
   89c04:	d004      	beq.n	89c10 <_malloc_trim_r+0x48>
   89c06:	4630      	mov	r0, r6
   89c08:	f000 ff10 	bl	8aa2c <__malloc_unlock>
   89c0c:	2000      	movs	r0, #0
   89c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89c10:	4630      	mov	r0, r6
   89c12:	4261      	negs	r1, r4
   89c14:	f001 fcda 	bl	8b5cc <_sbrk_r>
   89c18:	3001      	adds	r0, #1
   89c1a:	d00d      	beq.n	89c38 <_malloc_trim_r+0x70>
   89c1c:	4a10      	ldr	r2, [pc, #64]	; (89c60 <_malloc_trim_r+0x98>)
   89c1e:	68bb      	ldr	r3, [r7, #8]
   89c20:	1b2d      	subs	r5, r5, r4
   89c22:	f045 0501 	orr.w	r5, r5, #1
   89c26:	605d      	str	r5, [r3, #4]
   89c28:	6813      	ldr	r3, [r2, #0]
   89c2a:	4630      	mov	r0, r6
   89c2c:	1b1b      	subs	r3, r3, r4
   89c2e:	6013      	str	r3, [r2, #0]
   89c30:	f000 fefc 	bl	8aa2c <__malloc_unlock>
   89c34:	2001      	movs	r0, #1
   89c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89c38:	2100      	movs	r1, #0
   89c3a:	4630      	mov	r0, r6
   89c3c:	f001 fcc6 	bl	8b5cc <_sbrk_r>
   89c40:	68ba      	ldr	r2, [r7, #8]
   89c42:	1a83      	subs	r3, r0, r2
   89c44:	2b0f      	cmp	r3, #15
   89c46:	ddde      	ble.n	89c06 <_malloc_trim_r+0x3e>
   89c48:	f043 0301 	orr.w	r3, r3, #1
   89c4c:	6053      	str	r3, [r2, #4]
   89c4e:	4b05      	ldr	r3, [pc, #20]	; (89c64 <_malloc_trim_r+0x9c>)
   89c50:	4903      	ldr	r1, [pc, #12]	; (89c60 <_malloc_trim_r+0x98>)
   89c52:	681b      	ldr	r3, [r3, #0]
   89c54:	1ac0      	subs	r0, r0, r3
   89c56:	6008      	str	r0, [r1, #0]
   89c58:	e7d5      	b.n	89c06 <_malloc_trim_r+0x3e>
   89c5a:	bf00      	nop
   89c5c:	20000a20 	.word	0x20000a20
   89c60:	200037c8 	.word	0x200037c8
   89c64:	20000e28 	.word	0x20000e28

00089c68 <_free_r>:
   89c68:	2900      	cmp	r1, #0
   89c6a:	d05e      	beq.n	89d2a <_free_r+0xc2>
   89c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89c6e:	460c      	mov	r4, r1
   89c70:	4606      	mov	r6, r0
   89c72:	f000 fed5 	bl	8aa20 <__malloc_lock>
   89c76:	f854 2c04 	ldr.w	r2, [r4, #-4]
   89c7a:	4f78      	ldr	r7, [pc, #480]	; (89e5c <_free_r+0x1f4>)
   89c7c:	f1a4 0508 	sub.w	r5, r4, #8
   89c80:	f022 0101 	bic.w	r1, r2, #1
   89c84:	1868      	adds	r0, r5, r1
   89c86:	f8d7 c008 	ldr.w	ip, [r7, #8]
   89c8a:	6843      	ldr	r3, [r0, #4]
   89c8c:	4584      	cmp	ip, r0
   89c8e:	f023 0303 	bic.w	r3, r3, #3
   89c92:	f000 8087 	beq.w	89da4 <_free_r+0x13c>
   89c96:	07d2      	lsls	r2, r2, #31
   89c98:	6043      	str	r3, [r0, #4]
   89c9a:	d434      	bmi.n	89d06 <_free_r+0x9e>
   89c9c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89ca0:	f107 0408 	add.w	r4, r7, #8
   89ca4:	1aad      	subs	r5, r5, r2
   89ca6:	4411      	add	r1, r2
   89ca8:	68aa      	ldr	r2, [r5, #8]
   89caa:	42a2      	cmp	r2, r4
   89cac:	d068      	beq.n	89d80 <_free_r+0x118>
   89cae:	eb00 0c03 	add.w	ip, r0, r3
   89cb2:	f8dc e004 	ldr.w	lr, [ip, #4]
   89cb6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   89cba:	f01e 0f01 	tst.w	lr, #1
   89cbe:	f8c2 c00c 	str.w	ip, [r2, #12]
   89cc2:	f8cc 2008 	str.w	r2, [ip, #8]
   89cc6:	f000 8091 	beq.w	89dec <_free_r+0x184>
   89cca:	f041 0301 	orr.w	r3, r1, #1
   89cce:	606b      	str	r3, [r5, #4]
   89cd0:	6001      	str	r1, [r0, #0]
   89cd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   89cd6:	d231      	bcs.n	89d3c <_free_r+0xd4>
   89cd8:	094a      	lsrs	r2, r1, #5
   89cda:	08cb      	lsrs	r3, r1, #3
   89cdc:	2101      	movs	r1, #1
   89cde:	4091      	lsls	r1, r2
   89ce0:	687a      	ldr	r2, [r7, #4]
   89ce2:	3301      	adds	r3, #1
   89ce4:	4311      	orrs	r1, r2
   89ce6:	6079      	str	r1, [r7, #4]
   89ce8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   89cec:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   89cf0:	3a08      	subs	r2, #8
   89cf2:	e9c5 1202 	strd	r1, r2, [r5, #8]
   89cf6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   89cfa:	60cd      	str	r5, [r1, #12]
   89cfc:	4630      	mov	r0, r6
   89cfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89d02:	f000 be93 	b.w	8aa2c <__malloc_unlock>
   89d06:	18c2      	adds	r2, r0, r3
   89d08:	6852      	ldr	r2, [r2, #4]
   89d0a:	07d2      	lsls	r2, r2, #31
   89d0c:	d40e      	bmi.n	89d2c <_free_r+0xc4>
   89d0e:	4419      	add	r1, r3
   89d10:	f107 0408 	add.w	r4, r7, #8
   89d14:	6883      	ldr	r3, [r0, #8]
   89d16:	42a3      	cmp	r3, r4
   89d18:	d070      	beq.n	89dfc <_free_r+0x194>
   89d1a:	68c2      	ldr	r2, [r0, #12]
   89d1c:	60da      	str	r2, [r3, #12]
   89d1e:	6093      	str	r3, [r2, #8]
   89d20:	f041 0301 	orr.w	r3, r1, #1
   89d24:	606b      	str	r3, [r5, #4]
   89d26:	5069      	str	r1, [r5, r1]
   89d28:	e7d3      	b.n	89cd2 <_free_r+0x6a>
   89d2a:	4770      	bx	lr
   89d2c:	f041 0301 	orr.w	r3, r1, #1
   89d30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   89d34:	f844 3c04 	str.w	r3, [r4, #-4]
   89d38:	6001      	str	r1, [r0, #0]
   89d3a:	d3cd      	bcc.n	89cd8 <_free_r+0x70>
   89d3c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   89d40:	ea4f 2351 	mov.w	r3, r1, lsr #9
   89d44:	d247      	bcs.n	89dd6 <_free_r+0x16e>
   89d46:	098b      	lsrs	r3, r1, #6
   89d48:	f103 0039 	add.w	r0, r3, #57	; 0x39
   89d4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
   89d50:	00c3      	lsls	r3, r0, #3
   89d52:	18f8      	adds	r0, r7, r3
   89d54:	58fb      	ldr	r3, [r7, r3]
   89d56:	3808      	subs	r0, #8
   89d58:	4298      	cmp	r0, r3
   89d5a:	d058      	beq.n	89e0e <_free_r+0x1a6>
   89d5c:	685a      	ldr	r2, [r3, #4]
   89d5e:	f022 0203 	bic.w	r2, r2, #3
   89d62:	428a      	cmp	r2, r1
   89d64:	d902      	bls.n	89d6c <_free_r+0x104>
   89d66:	689b      	ldr	r3, [r3, #8]
   89d68:	4298      	cmp	r0, r3
   89d6a:	d1f7      	bne.n	89d5c <_free_r+0xf4>
   89d6c:	68d8      	ldr	r0, [r3, #12]
   89d6e:	e9c5 3002 	strd	r3, r0, [r5, #8]
   89d72:	6085      	str	r5, [r0, #8]
   89d74:	4630      	mov	r0, r6
   89d76:	60dd      	str	r5, [r3, #12]
   89d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89d7c:	f000 be56 	b.w	8aa2c <__malloc_unlock>
   89d80:	18c2      	adds	r2, r0, r3
   89d82:	6852      	ldr	r2, [r2, #4]
   89d84:	07d2      	lsls	r2, r2, #31
   89d86:	d463      	bmi.n	89e50 <_free_r+0x1e8>
   89d88:	440b      	add	r3, r1
   89d8a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   89d8e:	60ca      	str	r2, [r1, #12]
   89d90:	6091      	str	r1, [r2, #8]
   89d92:	f043 0201 	orr.w	r2, r3, #1
   89d96:	606a      	str	r2, [r5, #4]
   89d98:	4630      	mov	r0, r6
   89d9a:	50eb      	str	r3, [r5, r3]
   89d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89da0:	f000 be44 	b.w	8aa2c <__malloc_unlock>
   89da4:	440b      	add	r3, r1
   89da6:	07d1      	lsls	r1, r2, #31
   89da8:	d407      	bmi.n	89dba <_free_r+0x152>
   89daa:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89dae:	1aad      	subs	r5, r5, r2
   89db0:	4413      	add	r3, r2
   89db2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   89db6:	60ca      	str	r2, [r1, #12]
   89db8:	6091      	str	r1, [r2, #8]
   89dba:	f043 0201 	orr.w	r2, r3, #1
   89dbe:	606a      	str	r2, [r5, #4]
   89dc0:	4a27      	ldr	r2, [pc, #156]	; (89e60 <_free_r+0x1f8>)
   89dc2:	60bd      	str	r5, [r7, #8]
   89dc4:	6812      	ldr	r2, [r2, #0]
   89dc6:	429a      	cmp	r2, r3
   89dc8:	d898      	bhi.n	89cfc <_free_r+0x94>
   89dca:	4b26      	ldr	r3, [pc, #152]	; (89e64 <_free_r+0x1fc>)
   89dcc:	4630      	mov	r0, r6
   89dce:	6819      	ldr	r1, [r3, #0]
   89dd0:	f7ff fefa 	bl	89bc8 <_malloc_trim_r>
   89dd4:	e792      	b.n	89cfc <_free_r+0x94>
   89dd6:	2b14      	cmp	r3, #20
   89dd8:	d90a      	bls.n	89df0 <_free_r+0x188>
   89dda:	2b54      	cmp	r3, #84	; 0x54
   89ddc:	d81f      	bhi.n	89e1e <_free_r+0x1b6>
   89dde:	0b0b      	lsrs	r3, r1, #12
   89de0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   89de4:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   89de8:	00c3      	lsls	r3, r0, #3
   89dea:	e7b2      	b.n	89d52 <_free_r+0xea>
   89dec:	4419      	add	r1, r3
   89dee:	e791      	b.n	89d14 <_free_r+0xac>
   89df0:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   89df4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   89df8:	00c3      	lsls	r3, r0, #3
   89dfa:	e7aa      	b.n	89d52 <_free_r+0xea>
   89dfc:	f041 0301 	orr.w	r3, r1, #1
   89e00:	e9c7 5504 	strd	r5, r5, [r7, #16]
   89e04:	e9c5 4402 	strd	r4, r4, [r5, #8]
   89e08:	606b      	str	r3, [r5, #4]
   89e0a:	5069      	str	r1, [r5, r1]
   89e0c:	e776      	b.n	89cfc <_free_r+0x94>
   89e0e:	2101      	movs	r1, #1
   89e10:	1092      	asrs	r2, r2, #2
   89e12:	fa01 f202 	lsl.w	r2, r1, r2
   89e16:	6879      	ldr	r1, [r7, #4]
   89e18:	430a      	orrs	r2, r1
   89e1a:	607a      	str	r2, [r7, #4]
   89e1c:	e7a7      	b.n	89d6e <_free_r+0x106>
   89e1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89e22:	d806      	bhi.n	89e32 <_free_r+0x1ca>
   89e24:	0bcb      	lsrs	r3, r1, #15
   89e26:	f103 0078 	add.w	r0, r3, #120	; 0x78
   89e2a:	f103 0277 	add.w	r2, r3, #119	; 0x77
   89e2e:	00c3      	lsls	r3, r0, #3
   89e30:	e78f      	b.n	89d52 <_free_r+0xea>
   89e32:	f240 5254 	movw	r2, #1364	; 0x554
   89e36:	4293      	cmp	r3, r2
   89e38:	d806      	bhi.n	89e48 <_free_r+0x1e0>
   89e3a:	0c8b      	lsrs	r3, r1, #18
   89e3c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   89e40:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   89e44:	00c3      	lsls	r3, r0, #3
   89e46:	e784      	b.n	89d52 <_free_r+0xea>
   89e48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   89e4c:	227e      	movs	r2, #126	; 0x7e
   89e4e:	e780      	b.n	89d52 <_free_r+0xea>
   89e50:	f041 0301 	orr.w	r3, r1, #1
   89e54:	606b      	str	r3, [r5, #4]
   89e56:	6001      	str	r1, [r0, #0]
   89e58:	e750      	b.n	89cfc <_free_r+0x94>
   89e5a:	bf00      	nop
   89e5c:	20000a20 	.word	0x20000a20
   89e60:	20000e2c 	.word	0x20000e2c
   89e64:	200037f8 	.word	0x200037f8

00089e68 <__sfvwrite_r>:
   89e68:	6893      	ldr	r3, [r2, #8]
   89e6a:	2b00      	cmp	r3, #0
   89e6c:	f000 80b7 	beq.w	89fde <__sfvwrite_r+0x176>
   89e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89e74:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   89e78:	460c      	mov	r4, r1
   89e7a:	0719      	lsls	r1, r3, #28
   89e7c:	4680      	mov	r8, r0
   89e7e:	4617      	mov	r7, r2
   89e80:	b083      	sub	sp, #12
   89e82:	b298      	uxth	r0, r3
   89e84:	d525      	bpl.n	89ed2 <__sfvwrite_r+0x6a>
   89e86:	6923      	ldr	r3, [r4, #16]
   89e88:	b31b      	cbz	r3, 89ed2 <__sfvwrite_r+0x6a>
   89e8a:	f010 0302 	ands.w	r3, r0, #2
   89e8e:	683d      	ldr	r5, [r7, #0]
   89e90:	d02d      	beq.n	89eee <__sfvwrite_r+0x86>
   89e92:	f04f 0b00 	mov.w	fp, #0
   89e96:	465e      	mov	r6, fp
   89e98:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8a154 <__sfvwrite_r+0x2ec>
   89e9c:	2e00      	cmp	r6, #0
   89e9e:	f000 808b 	beq.w	89fb8 <__sfvwrite_r+0x150>
   89ea2:	4556      	cmp	r6, sl
   89ea4:	4633      	mov	r3, r6
   89ea6:	465a      	mov	r2, fp
   89ea8:	bf28      	it	cs
   89eaa:	4653      	movcs	r3, sl
   89eac:	4640      	mov	r0, r8
   89eae:	69e1      	ldr	r1, [r4, #28]
   89eb0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   89eb4:	47e0      	blx	ip
   89eb6:	2800      	cmp	r0, #0
   89eb8:	f340 8087 	ble.w	89fca <__sfvwrite_r+0x162>
   89ebc:	68bb      	ldr	r3, [r7, #8]
   89ebe:	4483      	add	fp, r0
   89ec0:	1a1b      	subs	r3, r3, r0
   89ec2:	1a36      	subs	r6, r6, r0
   89ec4:	60bb      	str	r3, [r7, #8]
   89ec6:	2b00      	cmp	r3, #0
   89ec8:	d1e8      	bne.n	89e9c <__sfvwrite_r+0x34>
   89eca:	2000      	movs	r0, #0
   89ecc:	b003      	add	sp, #12
   89ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ed2:	4621      	mov	r1, r4
   89ed4:	4640      	mov	r0, r8
   89ed6:	f7fe fc0f 	bl	886f8 <__swsetup_r>
   89eda:	2800      	cmp	r0, #0
   89edc:	f040 8136 	bne.w	8a14c <__sfvwrite_r+0x2e4>
   89ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89ee4:	683d      	ldr	r5, [r7, #0]
   89ee6:	b298      	uxth	r0, r3
   89ee8:	f010 0302 	ands.w	r3, r0, #2
   89eec:	d1d1      	bne.n	89e92 <__sfvwrite_r+0x2a>
   89eee:	f010 0901 	ands.w	r9, r0, #1
   89ef2:	d176      	bne.n	89fe2 <__sfvwrite_r+0x17a>
   89ef4:	464e      	mov	r6, r9
   89ef6:	2e00      	cmp	r6, #0
   89ef8:	d05a      	beq.n	89fb0 <__sfvwrite_r+0x148>
   89efa:	0582      	lsls	r2, r0, #22
   89efc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   89f00:	f140 80b5 	bpl.w	8a06e <__sfvwrite_r+0x206>
   89f04:	45b3      	cmp	fp, r6
   89f06:	465a      	mov	r2, fp
   89f08:	f200 80cd 	bhi.w	8a0a6 <__sfvwrite_r+0x23e>
   89f0c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   89f10:	f000 80cb 	beq.w	8a0aa <__sfvwrite_r+0x242>
   89f14:	6823      	ldr	r3, [r4, #0]
   89f16:	6921      	ldr	r1, [r4, #16]
   89f18:	eba3 0b01 	sub.w	fp, r3, r1
   89f1c:	6963      	ldr	r3, [r4, #20]
   89f1e:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   89f22:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   89f26:	f10b 0301 	add.w	r3, fp, #1
   89f2a:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   89f2e:	4433      	add	r3, r6
   89f30:	4553      	cmp	r3, sl
   89f32:	4652      	mov	r2, sl
   89f34:	bf84      	itt	hi
   89f36:	469a      	movhi	sl, r3
   89f38:	4652      	movhi	r2, sl
   89f3a:	0543      	lsls	r3, r0, #21
   89f3c:	f140 80ea 	bpl.w	8a114 <__sfvwrite_r+0x2ac>
   89f40:	4611      	mov	r1, r2
   89f42:	4640      	mov	r0, r8
   89f44:	f000 f9e6 	bl	8a314 <_malloc_r>
   89f48:	2800      	cmp	r0, #0
   89f4a:	f000 80f9 	beq.w	8a140 <__sfvwrite_r+0x2d8>
   89f4e:	465a      	mov	r2, fp
   89f50:	6921      	ldr	r1, [r4, #16]
   89f52:	9001      	str	r0, [sp, #4]
   89f54:	f7fb fd08 	bl	85968 <memcpy>
   89f58:	89a2      	ldrh	r2, [r4, #12]
   89f5a:	9b01      	ldr	r3, [sp, #4]
   89f5c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89f64:	81a2      	strh	r2, [r4, #12]
   89f66:	eb03 000b 	add.w	r0, r3, fp
   89f6a:	6123      	str	r3, [r4, #16]
   89f6c:	4632      	mov	r2, r6
   89f6e:	ebaa 030b 	sub.w	r3, sl, fp
   89f72:	46b3      	mov	fp, r6
   89f74:	f8c4 a014 	str.w	sl, [r4, #20]
   89f78:	60a3      	str	r3, [r4, #8]
   89f7a:	6020      	str	r0, [r4, #0]
   89f7c:	46b2      	mov	sl, r6
   89f7e:	2600      	movs	r6, #0
   89f80:	4649      	mov	r1, r9
   89f82:	9201      	str	r2, [sp, #4]
   89f84:	f000 fcd0 	bl	8a928 <memmove>
   89f88:	68a3      	ldr	r3, [r4, #8]
   89f8a:	6821      	ldr	r1, [r4, #0]
   89f8c:	9a01      	ldr	r2, [sp, #4]
   89f8e:	eba3 030b 	sub.w	r3, r3, fp
   89f92:	440a      	add	r2, r1
   89f94:	60a3      	str	r3, [r4, #8]
   89f96:	6022      	str	r2, [r4, #0]
   89f98:	68b8      	ldr	r0, [r7, #8]
   89f9a:	44d1      	add	r9, sl
   89f9c:	eba0 000a 	sub.w	r0, r0, sl
   89fa0:	60b8      	str	r0, [r7, #8]
   89fa2:	2800      	cmp	r0, #0
   89fa4:	d091      	beq.n	89eca <__sfvwrite_r+0x62>
   89fa6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89faa:	b280      	uxth	r0, r0
   89fac:	2e00      	cmp	r6, #0
   89fae:	d1a4      	bne.n	89efa <__sfvwrite_r+0x92>
   89fb0:	e9d5 9600 	ldrd	r9, r6, [r5]
   89fb4:	3508      	adds	r5, #8
   89fb6:	e79e      	b.n	89ef6 <__sfvwrite_r+0x8e>
   89fb8:	e9d5 b600 	ldrd	fp, r6, [r5]
   89fbc:	3508      	adds	r5, #8
   89fbe:	e76d      	b.n	89e9c <__sfvwrite_r+0x34>
   89fc0:	4621      	mov	r1, r4
   89fc2:	4640      	mov	r0, r8
   89fc4:	f7ff fca0 	bl	89908 <_fflush_r>
   89fc8:	b380      	cbz	r0, 8a02c <__sfvwrite_r+0x1c4>
   89fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89fce:	f04f 30ff 	mov.w	r0, #4294967295
   89fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89fd6:	81a3      	strh	r3, [r4, #12]
   89fd8:	b003      	add	sp, #12
   89fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89fde:	2000      	movs	r0, #0
   89fe0:	4770      	bx	lr
   89fe2:	461e      	mov	r6, r3
   89fe4:	46aa      	mov	sl, r5
   89fe6:	4699      	mov	r9, r3
   89fe8:	4618      	mov	r0, r3
   89fea:	461d      	mov	r5, r3
   89fec:	b356      	cbz	r6, 8a044 <__sfvwrite_r+0x1dc>
   89fee:	2800      	cmp	r0, #0
   89ff0:	d032      	beq.n	8a058 <__sfvwrite_r+0x1f0>
   89ff2:	464a      	mov	r2, r9
   89ff4:	6820      	ldr	r0, [r4, #0]
   89ff6:	6921      	ldr	r1, [r4, #16]
   89ff8:	42b2      	cmp	r2, r6
   89ffa:	bf28      	it	cs
   89ffc:	4632      	movcs	r2, r6
   89ffe:	4288      	cmp	r0, r1
   8a000:	6963      	ldr	r3, [r4, #20]
   8a002:	d904      	bls.n	8a00e <__sfvwrite_r+0x1a6>
   8a004:	68a1      	ldr	r1, [r4, #8]
   8a006:	eb03 0b01 	add.w	fp, r3, r1
   8a00a:	455a      	cmp	r2, fp
   8a00c:	dc74      	bgt.n	8a0f8 <__sfvwrite_r+0x290>
   8a00e:	4293      	cmp	r3, r2
   8a010:	dc65      	bgt.n	8a0de <__sfvwrite_r+0x276>
   8a012:	462a      	mov	r2, r5
   8a014:	4640      	mov	r0, r8
   8a016:	69e1      	ldr	r1, [r4, #28]
   8a018:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8a01c:	47e0      	blx	ip
   8a01e:	f1b0 0b00 	subs.w	fp, r0, #0
   8a022:	ddd2      	ble.n	89fca <__sfvwrite_r+0x162>
   8a024:	ebb9 090b 	subs.w	r9, r9, fp
   8a028:	d0ca      	beq.n	89fc0 <__sfvwrite_r+0x158>
   8a02a:	2001      	movs	r0, #1
   8a02c:	68bb      	ldr	r3, [r7, #8]
   8a02e:	445d      	add	r5, fp
   8a030:	eba3 030b 	sub.w	r3, r3, fp
   8a034:	eba6 060b 	sub.w	r6, r6, fp
   8a038:	60bb      	str	r3, [r7, #8]
   8a03a:	2b00      	cmp	r3, #0
   8a03c:	f43f af45 	beq.w	89eca <__sfvwrite_r+0x62>
   8a040:	2e00      	cmp	r6, #0
   8a042:	d1d4      	bne.n	89fee <__sfvwrite_r+0x186>
   8a044:	f10a 0308 	add.w	r3, sl, #8
   8a048:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a04c:	469a      	mov	sl, r3
   8a04e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a052:	3308      	adds	r3, #8
   8a054:	2e00      	cmp	r6, #0
   8a056:	d0f7      	beq.n	8a048 <__sfvwrite_r+0x1e0>
   8a058:	4632      	mov	r2, r6
   8a05a:	210a      	movs	r1, #10
   8a05c:	4628      	mov	r0, r5
   8a05e:	f000 fc1b 	bl	8a898 <memchr>
   8a062:	2800      	cmp	r0, #0
   8a064:	d069      	beq.n	8a13a <__sfvwrite_r+0x2d2>
   8a066:	3001      	adds	r0, #1
   8a068:	eba0 0905 	sub.w	r9, r0, r5
   8a06c:	e7c1      	b.n	89ff2 <__sfvwrite_r+0x18a>
   8a06e:	6820      	ldr	r0, [r4, #0]
   8a070:	6923      	ldr	r3, [r4, #16]
   8a072:	4298      	cmp	r0, r3
   8a074:	d81b      	bhi.n	8a0ae <__sfvwrite_r+0x246>
   8a076:	6963      	ldr	r3, [r4, #20]
   8a078:	42b3      	cmp	r3, r6
   8a07a:	d818      	bhi.n	8a0ae <__sfvwrite_r+0x246>
   8a07c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8a080:	45b4      	cmp	ip, r6
   8a082:	bf28      	it	cs
   8a084:	46b4      	movcs	ip, r6
   8a086:	fb9c fcf3 	sdiv	ip, ip, r3
   8a08a:	464a      	mov	r2, r9
   8a08c:	fb03 f30c 	mul.w	r3, r3, ip
   8a090:	4640      	mov	r0, r8
   8a092:	69e1      	ldr	r1, [r4, #28]
   8a094:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8a098:	47e0      	blx	ip
   8a09a:	f1b0 0a00 	subs.w	sl, r0, #0
   8a09e:	dd94      	ble.n	89fca <__sfvwrite_r+0x162>
   8a0a0:	eba6 060a 	sub.w	r6, r6, sl
   8a0a4:	e778      	b.n	89f98 <__sfvwrite_r+0x130>
   8a0a6:	46b3      	mov	fp, r6
   8a0a8:	4632      	mov	r2, r6
   8a0aa:	6820      	ldr	r0, [r4, #0]
   8a0ac:	e766      	b.n	89f7c <__sfvwrite_r+0x114>
   8a0ae:	45b3      	cmp	fp, r6
   8a0b0:	46da      	mov	sl, fp
   8a0b2:	bf28      	it	cs
   8a0b4:	46b2      	movcs	sl, r6
   8a0b6:	4649      	mov	r1, r9
   8a0b8:	4652      	mov	r2, sl
   8a0ba:	f000 fc35 	bl	8a928 <memmove>
   8a0be:	68a3      	ldr	r3, [r4, #8]
   8a0c0:	6822      	ldr	r2, [r4, #0]
   8a0c2:	eba3 030a 	sub.w	r3, r3, sl
   8a0c6:	4452      	add	r2, sl
   8a0c8:	60a3      	str	r3, [r4, #8]
   8a0ca:	6022      	str	r2, [r4, #0]
   8a0cc:	2b00      	cmp	r3, #0
   8a0ce:	d1e7      	bne.n	8a0a0 <__sfvwrite_r+0x238>
   8a0d0:	4621      	mov	r1, r4
   8a0d2:	4640      	mov	r0, r8
   8a0d4:	f7ff fc18 	bl	89908 <_fflush_r>
   8a0d8:	2800      	cmp	r0, #0
   8a0da:	d0e1      	beq.n	8a0a0 <__sfvwrite_r+0x238>
   8a0dc:	e775      	b.n	89fca <__sfvwrite_r+0x162>
   8a0de:	4629      	mov	r1, r5
   8a0e0:	4693      	mov	fp, r2
   8a0e2:	9201      	str	r2, [sp, #4]
   8a0e4:	f000 fc20 	bl	8a928 <memmove>
   8a0e8:	68a3      	ldr	r3, [r4, #8]
   8a0ea:	9a01      	ldr	r2, [sp, #4]
   8a0ec:	1a9b      	subs	r3, r3, r2
   8a0ee:	60a3      	str	r3, [r4, #8]
   8a0f0:	6823      	ldr	r3, [r4, #0]
   8a0f2:	441a      	add	r2, r3
   8a0f4:	6022      	str	r2, [r4, #0]
   8a0f6:	e795      	b.n	8a024 <__sfvwrite_r+0x1bc>
   8a0f8:	4629      	mov	r1, r5
   8a0fa:	465a      	mov	r2, fp
   8a0fc:	f000 fc14 	bl	8a928 <memmove>
   8a100:	6823      	ldr	r3, [r4, #0]
   8a102:	4621      	mov	r1, r4
   8a104:	445b      	add	r3, fp
   8a106:	4640      	mov	r0, r8
   8a108:	6023      	str	r3, [r4, #0]
   8a10a:	f7ff fbfd 	bl	89908 <_fflush_r>
   8a10e:	2800      	cmp	r0, #0
   8a110:	d088      	beq.n	8a024 <__sfvwrite_r+0x1bc>
   8a112:	e75a      	b.n	89fca <__sfvwrite_r+0x162>
   8a114:	4640      	mov	r0, r8
   8a116:	f001 f833 	bl	8b180 <_realloc_r>
   8a11a:	4603      	mov	r3, r0
   8a11c:	2800      	cmp	r0, #0
   8a11e:	f47f af22 	bne.w	89f66 <__sfvwrite_r+0xfe>
   8a122:	4640      	mov	r0, r8
   8a124:	6921      	ldr	r1, [r4, #16]
   8a126:	f7ff fd9f 	bl	89c68 <_free_r>
   8a12a:	220c      	movs	r2, #12
   8a12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a130:	f8c8 2000 	str.w	r2, [r8]
   8a134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a138:	e749      	b.n	89fce <__sfvwrite_r+0x166>
   8a13a:	1c72      	adds	r2, r6, #1
   8a13c:	4691      	mov	r9, r2
   8a13e:	e759      	b.n	89ff4 <__sfvwrite_r+0x18c>
   8a140:	220c      	movs	r2, #12
   8a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a146:	f8c8 2000 	str.w	r2, [r8]
   8a14a:	e740      	b.n	89fce <__sfvwrite_r+0x166>
   8a14c:	f04f 30ff 	mov.w	r0, #4294967295
   8a150:	e6bc      	b.n	89ecc <__sfvwrite_r+0x64>
   8a152:	bf00      	nop
   8a154:	7ffffc00 	.word	0x7ffffc00

0008a158 <_fwalk_reent>:
   8a158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a15c:	f04f 0900 	mov.w	r9, #0
   8a160:	4607      	mov	r7, r0
   8a162:	4688      	mov	r8, r1
   8a164:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8a168:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8a16c:	3d01      	subs	r5, #1
   8a16e:	d410      	bmi.n	8a192 <_fwalk_reent+0x3a>
   8a170:	89a3      	ldrh	r3, [r4, #12]
   8a172:	3d01      	subs	r5, #1
   8a174:	2b01      	cmp	r3, #1
   8a176:	d908      	bls.n	8a18a <_fwalk_reent+0x32>
   8a178:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a17c:	3301      	adds	r3, #1
   8a17e:	d004      	beq.n	8a18a <_fwalk_reent+0x32>
   8a180:	4621      	mov	r1, r4
   8a182:	4638      	mov	r0, r7
   8a184:	47c0      	blx	r8
   8a186:	ea49 0900 	orr.w	r9, r9, r0
   8a18a:	1c6b      	adds	r3, r5, #1
   8a18c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a190:	d1ee      	bne.n	8a170 <_fwalk_reent+0x18>
   8a192:	6836      	ldr	r6, [r6, #0]
   8a194:	2e00      	cmp	r6, #0
   8a196:	d1e7      	bne.n	8a168 <_fwalk_reent+0x10>
   8a198:	4648      	mov	r0, r9
   8a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a19e:	bf00      	nop

0008a1a0 <__locale_mb_cur_max>:
   8a1a0:	4b01      	ldr	r3, [pc, #4]	; (8a1a8 <__locale_mb_cur_max+0x8>)
   8a1a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a1a6:	4770      	bx	lr
   8a1a8:	200008b4 	.word	0x200008b4

0008a1ac <_localeconv_r>:
   8a1ac:	4800      	ldr	r0, [pc, #0]	; (8a1b0 <_localeconv_r+0x4>)
   8a1ae:	4770      	bx	lr
   8a1b0:	200009a4 	.word	0x200009a4

0008a1b4 <__retarget_lock_init_recursive>:
   8a1b4:	4770      	bx	lr
   8a1b6:	bf00      	nop

0008a1b8 <__retarget_lock_close_recursive>:
   8a1b8:	4770      	bx	lr
   8a1ba:	bf00      	nop

0008a1bc <__retarget_lock_acquire_recursive>:
   8a1bc:	4770      	bx	lr
   8a1be:	bf00      	nop

0008a1c0 <__retarget_lock_release_recursive>:
   8a1c0:	4770      	bx	lr
   8a1c2:	bf00      	nop

0008a1c4 <__smakebuf_r>:
   8a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a1c8:	898b      	ldrh	r3, [r1, #12]
   8a1ca:	460c      	mov	r4, r1
   8a1cc:	0799      	lsls	r1, r3, #30
   8a1ce:	b096      	sub	sp, #88	; 0x58
   8a1d0:	d508      	bpl.n	8a1e4 <__smakebuf_r+0x20>
   8a1d2:	2201      	movs	r2, #1
   8a1d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8a1d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8a1dc:	6023      	str	r3, [r4, #0]
   8a1de:	b016      	add	sp, #88	; 0x58
   8a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a1e8:	4606      	mov	r6, r0
   8a1ea:	2900      	cmp	r1, #0
   8a1ec:	db27      	blt.n	8a23e <__smakebuf_r+0x7a>
   8a1ee:	466a      	mov	r2, sp
   8a1f0:	f001 fc90 	bl	8bb14 <_fstat_r>
   8a1f4:	2800      	cmp	r0, #0
   8a1f6:	db21      	blt.n	8a23c <__smakebuf_r+0x78>
   8a1f8:	9d01      	ldr	r5, [sp, #4]
   8a1fa:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8a1fe:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8a202:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8a206:	fab5 f585 	clz	r5, r5
   8a20a:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8a20e:	096d      	lsrs	r5, r5, #5
   8a210:	4641      	mov	r1, r8
   8a212:	4630      	mov	r0, r6
   8a214:	f000 f87e 	bl	8a314 <_malloc_r>
   8a218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a21c:	b1f0      	cbz	r0, 8a25c <__smakebuf_r+0x98>
   8a21e:	4a20      	ldr	r2, [pc, #128]	; (8a2a0 <__smakebuf_r+0xdc>)
   8a220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a224:	63f2      	str	r2, [r6, #60]	; 0x3c
   8a226:	f8c4 8014 	str.w	r8, [r4, #20]
   8a22a:	81a3      	strh	r3, [r4, #12]
   8a22c:	6020      	str	r0, [r4, #0]
   8a22e:	6120      	str	r0, [r4, #16]
   8a230:	bb35      	cbnz	r5, 8a280 <__smakebuf_r+0xbc>
   8a232:	433b      	orrs	r3, r7
   8a234:	81a3      	strh	r3, [r4, #12]
   8a236:	b016      	add	sp, #88	; 0x58
   8a238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a23c:	89a3      	ldrh	r3, [r4, #12]
   8a23e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8a242:	d019      	beq.n	8a278 <__smakebuf_r+0xb4>
   8a244:	f04f 0840 	mov.w	r8, #64	; 0x40
   8a248:	4630      	mov	r0, r6
   8a24a:	4641      	mov	r1, r8
   8a24c:	2500      	movs	r5, #0
   8a24e:	f000 f861 	bl	8a314 <_malloc_r>
   8a252:	462f      	mov	r7, r5
   8a254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a258:	2800      	cmp	r0, #0
   8a25a:	d1e0      	bne.n	8a21e <__smakebuf_r+0x5a>
   8a25c:	059a      	lsls	r2, r3, #22
   8a25e:	d4be      	bmi.n	8a1de <__smakebuf_r+0x1a>
   8a260:	2101      	movs	r1, #1
   8a262:	f023 0303 	bic.w	r3, r3, #3
   8a266:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a26a:	f043 0302 	orr.w	r3, r3, #2
   8a26e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8a272:	81a3      	strh	r3, [r4, #12]
   8a274:	6022      	str	r2, [r4, #0]
   8a276:	e7b2      	b.n	8a1de <__smakebuf_r+0x1a>
   8a278:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8a27c:	462f      	mov	r7, r5
   8a27e:	e7c7      	b.n	8a210 <__smakebuf_r+0x4c>
   8a280:	4630      	mov	r0, r6
   8a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a286:	f001 fc59 	bl	8bb3c <_isatty_r>
   8a28a:	b910      	cbnz	r0, 8a292 <__smakebuf_r+0xce>
   8a28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a290:	e7cf      	b.n	8a232 <__smakebuf_r+0x6e>
   8a292:	89a3      	ldrh	r3, [r4, #12]
   8a294:	f023 0303 	bic.w	r3, r3, #3
   8a298:	f043 0301 	orr.w	r3, r3, #1
   8a29c:	b21b      	sxth	r3, r3
   8a29e:	e7c8      	b.n	8a232 <__smakebuf_r+0x6e>
   8a2a0:	00089965 	.word	0x00089965

0008a2a4 <__swhatbuf_r>:
   8a2a4:	b570      	push	{r4, r5, r6, lr}
   8a2a6:	460c      	mov	r4, r1
   8a2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a2ac:	4615      	mov	r5, r2
   8a2ae:	2900      	cmp	r1, #0
   8a2b0:	461e      	mov	r6, r3
   8a2b2:	b096      	sub	sp, #88	; 0x58
   8a2b4:	db14      	blt.n	8a2e0 <__swhatbuf_r+0x3c>
   8a2b6:	466a      	mov	r2, sp
   8a2b8:	f001 fc2c 	bl	8bb14 <_fstat_r>
   8a2bc:	2800      	cmp	r0, #0
   8a2be:	db0f      	blt.n	8a2e0 <__swhatbuf_r+0x3c>
   8a2c0:	9a01      	ldr	r2, [sp, #4]
   8a2c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a2c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a2ca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a2ce:	fab2 f282 	clz	r2, r2
   8a2d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a2d6:	0952      	lsrs	r2, r2, #5
   8a2d8:	6032      	str	r2, [r6, #0]
   8a2da:	602b      	str	r3, [r5, #0]
   8a2dc:	b016      	add	sp, #88	; 0x58
   8a2de:	bd70      	pop	{r4, r5, r6, pc}
   8a2e0:	2300      	movs	r3, #0
   8a2e2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8a2e6:	6033      	str	r3, [r6, #0]
   8a2e8:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8a2ec:	d004      	beq.n	8a2f8 <__swhatbuf_r+0x54>
   8a2ee:	2240      	movs	r2, #64	; 0x40
   8a2f0:	4618      	mov	r0, r3
   8a2f2:	602a      	str	r2, [r5, #0]
   8a2f4:	b016      	add	sp, #88	; 0x58
   8a2f6:	bd70      	pop	{r4, r5, r6, pc}
   8a2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a2fc:	602b      	str	r3, [r5, #0]
   8a2fe:	b016      	add	sp, #88	; 0x58
   8a300:	bd70      	pop	{r4, r5, r6, pc}
   8a302:	bf00      	nop

0008a304 <malloc>:
   8a304:	4b02      	ldr	r3, [pc, #8]	; (8a310 <malloc+0xc>)
   8a306:	4601      	mov	r1, r0
   8a308:	6818      	ldr	r0, [r3, #0]
   8a30a:	f000 b803 	b.w	8a314 <_malloc_r>
   8a30e:	bf00      	nop
   8a310:	20000480 	.word	0x20000480

0008a314 <_malloc_r>:
   8a314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a318:	f101 050b 	add.w	r5, r1, #11
   8a31c:	2d16      	cmp	r5, #22
   8a31e:	4606      	mov	r6, r0
   8a320:	b083      	sub	sp, #12
   8a322:	d825      	bhi.n	8a370 <_malloc_r+0x5c>
   8a324:	2910      	cmp	r1, #16
   8a326:	f200 80b8 	bhi.w	8a49a <_malloc_r+0x186>
   8a32a:	f000 fb79 	bl	8aa20 <__malloc_lock>
   8a32e:	2510      	movs	r5, #16
   8a330:	2218      	movs	r2, #24
   8a332:	f04f 0c02 	mov.w	ip, #2
   8a336:	4fb5      	ldr	r7, [pc, #724]	; (8a60c <_malloc_r+0x2f8>)
   8a338:	443a      	add	r2, r7
   8a33a:	6853      	ldr	r3, [r2, #4]
   8a33c:	f1a2 0108 	sub.w	r1, r2, #8
   8a340:	428b      	cmp	r3, r1
   8a342:	f000 80b7 	beq.w	8a4b4 <_malloc_r+0x1a0>
   8a346:	685a      	ldr	r2, [r3, #4]
   8a348:	68d9      	ldr	r1, [r3, #12]
   8a34a:	f022 0203 	bic.w	r2, r2, #3
   8a34e:	441a      	add	r2, r3
   8a350:	689c      	ldr	r4, [r3, #8]
   8a352:	4630      	mov	r0, r6
   8a354:	60e1      	str	r1, [r4, #12]
   8a356:	608c      	str	r4, [r1, #8]
   8a358:	6851      	ldr	r1, [r2, #4]
   8a35a:	f103 0408 	add.w	r4, r3, #8
   8a35e:	f041 0101 	orr.w	r1, r1, #1
   8a362:	6051      	str	r1, [r2, #4]
   8a364:	f000 fb62 	bl	8aa2c <__malloc_unlock>
   8a368:	4620      	mov	r0, r4
   8a36a:	b003      	add	sp, #12
   8a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a370:	f035 0507 	bics.w	r5, r5, #7
   8a374:	f100 8091 	bmi.w	8a49a <_malloc_r+0x186>
   8a378:	42a9      	cmp	r1, r5
   8a37a:	f200 808e 	bhi.w	8a49a <_malloc_r+0x186>
   8a37e:	f000 fb4f 	bl	8aa20 <__malloc_lock>
   8a382:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8a386:	f0c0 8194 	bcc.w	8a6b2 <_malloc_r+0x39e>
   8a38a:	0a6b      	lsrs	r3, r5, #9
   8a38c:	f000 808c 	beq.w	8a4a8 <_malloc_r+0x194>
   8a390:	2b04      	cmp	r3, #4
   8a392:	f200 816a 	bhi.w	8a66a <_malloc_r+0x356>
   8a396:	09ab      	lsrs	r3, r5, #6
   8a398:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   8a39c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   8a3a0:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a3a4:	4f99      	ldr	r7, [pc, #612]	; (8a60c <_malloc_r+0x2f8>)
   8a3a6:	4438      	add	r0, r7
   8a3a8:	6843      	ldr	r3, [r0, #4]
   8a3aa:	3808      	subs	r0, #8
   8a3ac:	4298      	cmp	r0, r3
   8a3ae:	d106      	bne.n	8a3be <_malloc_r+0xaa>
   8a3b0:	e00c      	b.n	8a3cc <_malloc_r+0xb8>
   8a3b2:	2900      	cmp	r1, #0
   8a3b4:	f280 8126 	bge.w	8a604 <_malloc_r+0x2f0>
   8a3b8:	68db      	ldr	r3, [r3, #12]
   8a3ba:	4298      	cmp	r0, r3
   8a3bc:	d006      	beq.n	8a3cc <_malloc_r+0xb8>
   8a3be:	685a      	ldr	r2, [r3, #4]
   8a3c0:	f022 0203 	bic.w	r2, r2, #3
   8a3c4:	1b51      	subs	r1, r2, r5
   8a3c6:	290f      	cmp	r1, #15
   8a3c8:	ddf3      	ble.n	8a3b2 <_malloc_r+0x9e>
   8a3ca:	46a4      	mov	ip, r4
   8a3cc:	693c      	ldr	r4, [r7, #16]
   8a3ce:	f8df e240 	ldr.w	lr, [pc, #576]	; 8a610 <_malloc_r+0x2fc>
   8a3d2:	4574      	cmp	r4, lr
   8a3d4:	d07a      	beq.n	8a4cc <_malloc_r+0x1b8>
   8a3d6:	6862      	ldr	r2, [r4, #4]
   8a3d8:	f022 0203 	bic.w	r2, r2, #3
   8a3dc:	1b53      	subs	r3, r2, r5
   8a3de:	2b0f      	cmp	r3, #15
   8a3e0:	f300 8176 	bgt.w	8a6d0 <_malloc_r+0x3bc>
   8a3e4:	2b00      	cmp	r3, #0
   8a3e6:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   8a3ea:	f280 8167 	bge.w	8a6bc <_malloc_r+0x3a8>
   8a3ee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8a3f2:	f080 8119 	bcs.w	8a628 <_malloc_r+0x314>
   8a3f6:	2101      	movs	r1, #1
   8a3f8:	08d3      	lsrs	r3, r2, #3
   8a3fa:	0952      	lsrs	r2, r2, #5
   8a3fc:	440b      	add	r3, r1
   8a3fe:	4091      	lsls	r1, r2
   8a400:	687a      	ldr	r2, [r7, #4]
   8a402:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   8a406:	430a      	orrs	r2, r1
   8a408:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   8a40c:	3908      	subs	r1, #8
   8a40e:	60a0      	str	r0, [r4, #8]
   8a410:	60e1      	str	r1, [r4, #12]
   8a412:	607a      	str	r2, [r7, #4]
   8a414:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8a418:	60c4      	str	r4, [r0, #12]
   8a41a:	2101      	movs	r1, #1
   8a41c:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8a420:	4099      	lsls	r1, r3
   8a422:	4291      	cmp	r1, r2
   8a424:	d859      	bhi.n	8a4da <_malloc_r+0x1c6>
   8a426:	4211      	tst	r1, r2
   8a428:	d106      	bne.n	8a438 <_malloc_r+0x124>
   8a42a:	f02c 0c03 	bic.w	ip, ip, #3
   8a42e:	0049      	lsls	r1, r1, #1
   8a430:	4211      	tst	r1, r2
   8a432:	f10c 0c04 	add.w	ip, ip, #4
   8a436:	d0fa      	beq.n	8a42e <_malloc_r+0x11a>
   8a438:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   8a43c:	4648      	mov	r0, r9
   8a43e:	4664      	mov	r4, ip
   8a440:	f8d0 800c 	ldr.w	r8, [r0, #12]
   8a444:	4540      	cmp	r0, r8
   8a446:	d108      	bne.n	8a45a <_malloc_r+0x146>
   8a448:	e11c      	b.n	8a684 <_malloc_r+0x370>
   8a44a:	2b00      	cmp	r3, #0
   8a44c:	f280 8121 	bge.w	8a692 <_malloc_r+0x37e>
   8a450:	f8d8 800c 	ldr.w	r8, [r8, #12]
   8a454:	4540      	cmp	r0, r8
   8a456:	f000 8115 	beq.w	8a684 <_malloc_r+0x370>
   8a45a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8a45e:	f022 0203 	bic.w	r2, r2, #3
   8a462:	1b53      	subs	r3, r2, r5
   8a464:	2b0f      	cmp	r3, #15
   8a466:	ddf0      	ble.n	8a44a <_malloc_r+0x136>
   8a468:	eb08 0105 	add.w	r1, r8, r5
   8a46c:	f045 0501 	orr.w	r5, r5, #1
   8a470:	f8c8 5004 	str.w	r5, [r8, #4]
   8a474:	4630      	mov	r0, r6
   8a476:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   8a47a:	60f4      	str	r4, [r6, #12]
   8a47c:	60a6      	str	r6, [r4, #8]
   8a47e:	f043 0401 	orr.w	r4, r3, #1
   8a482:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8a486:	604c      	str	r4, [r1, #4]
   8a488:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8a48c:	f848 3002 	str.w	r3, [r8, r2]
   8a490:	f000 facc 	bl	8aa2c <__malloc_unlock>
   8a494:	f108 0408 	add.w	r4, r8, #8
   8a498:	e002      	b.n	8a4a0 <_malloc_r+0x18c>
   8a49a:	230c      	movs	r3, #12
   8a49c:	2400      	movs	r4, #0
   8a49e:	6033      	str	r3, [r6, #0]
   8a4a0:	4620      	mov	r0, r4
   8a4a2:	b003      	add	sp, #12
   8a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a4a8:	f44f 7000 	mov.w	r0, #512	; 0x200
   8a4ac:	f04f 0c40 	mov.w	ip, #64	; 0x40
   8a4b0:	243f      	movs	r4, #63	; 0x3f
   8a4b2:	e777      	b.n	8a3a4 <_malloc_r+0x90>
   8a4b4:	68d3      	ldr	r3, [r2, #12]
   8a4b6:	429a      	cmp	r2, r3
   8a4b8:	bf08      	it	eq
   8a4ba:	f10c 0c02 	addeq.w	ip, ip, #2
   8a4be:	f47f af42 	bne.w	8a346 <_malloc_r+0x32>
   8a4c2:	693c      	ldr	r4, [r7, #16]
   8a4c4:	f8df e148 	ldr.w	lr, [pc, #328]	; 8a610 <_malloc_r+0x2fc>
   8a4c8:	4574      	cmp	r4, lr
   8a4ca:	d184      	bne.n	8a3d6 <_malloc_r+0xc2>
   8a4cc:	2101      	movs	r1, #1
   8a4ce:	687a      	ldr	r2, [r7, #4]
   8a4d0:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8a4d4:	4099      	lsls	r1, r3
   8a4d6:	4291      	cmp	r1, r2
   8a4d8:	d9a5      	bls.n	8a426 <_malloc_r+0x112>
   8a4da:	68bc      	ldr	r4, [r7, #8]
   8a4dc:	6863      	ldr	r3, [r4, #4]
   8a4de:	f023 0903 	bic.w	r9, r3, #3
   8a4e2:	454d      	cmp	r5, r9
   8a4e4:	d803      	bhi.n	8a4ee <_malloc_r+0x1da>
   8a4e6:	eba9 0305 	sub.w	r3, r9, r5
   8a4ea:	2b0f      	cmp	r3, #15
   8a4ec:	dc7a      	bgt.n	8a5e4 <_malloc_r+0x2d0>
   8a4ee:	f8df b124 	ldr.w	fp, [pc, #292]	; 8a614 <_malloc_r+0x300>
   8a4f2:	4b49      	ldr	r3, [pc, #292]	; (8a618 <_malloc_r+0x304>)
   8a4f4:	f8db 2000 	ldr.w	r2, [fp]
   8a4f8:	681b      	ldr	r3, [r3, #0]
   8a4fa:	3201      	adds	r2, #1
   8a4fc:	442b      	add	r3, r5
   8a4fe:	eb04 0a09 	add.w	sl, r4, r9
   8a502:	f000 812f 	beq.w	8a764 <_malloc_r+0x450>
   8a506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8a50a:	330f      	adds	r3, #15
   8a50c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   8a510:	f028 080f 	bic.w	r8, r8, #15
   8a514:	4641      	mov	r1, r8
   8a516:	4630      	mov	r0, r6
   8a518:	f001 f858 	bl	8b5cc <_sbrk_r>
   8a51c:	1c41      	adds	r1, r0, #1
   8a51e:	4602      	mov	r2, r0
   8a520:	f000 80ef 	beq.w	8a702 <_malloc_r+0x3ee>
   8a524:	4582      	cmp	sl, r0
   8a526:	f200 80ea 	bhi.w	8a6fe <_malloc_r+0x3ea>
   8a52a:	4b3c      	ldr	r3, [pc, #240]	; (8a61c <_malloc_r+0x308>)
   8a52c:	6819      	ldr	r1, [r3, #0]
   8a52e:	4441      	add	r1, r8
   8a530:	4608      	mov	r0, r1
   8a532:	6019      	str	r1, [r3, #0]
   8a534:	f000 8149 	beq.w	8a7ca <_malloc_r+0x4b6>
   8a538:	f8db 1000 	ldr.w	r1, [fp]
   8a53c:	9301      	str	r3, [sp, #4]
   8a53e:	3101      	adds	r1, #1
   8a540:	bf1b      	ittet	ne
   8a542:	eba2 0a0a 	subne.w	sl, r2, sl
   8a546:	4450      	addne	r0, sl
   8a548:	f8cb 2000 	streq.w	r2, [fp]
   8a54c:	6018      	strne	r0, [r3, #0]
   8a54e:	f012 0b07 	ands.w	fp, r2, #7
   8a552:	f000 8111 	beq.w	8a778 <_malloc_r+0x464>
   8a556:	f1cb 0108 	rsb	r1, fp, #8
   8a55a:	440a      	add	r2, r1
   8a55c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   8a560:	4490      	add	r8, r2
   8a562:	3108      	adds	r1, #8
   8a564:	eba1 0108 	sub.w	r1, r1, r8
   8a568:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8a56c:	4651      	mov	r1, sl
   8a56e:	4630      	mov	r0, r6
   8a570:	9200      	str	r2, [sp, #0]
   8a572:	f001 f82b 	bl	8b5cc <_sbrk_r>
   8a576:	1c42      	adds	r2, r0, #1
   8a578:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a57c:	f000 814b 	beq.w	8a816 <_malloc_r+0x502>
   8a580:	1a80      	subs	r0, r0, r2
   8a582:	eb00 080a 	add.w	r8, r0, sl
   8a586:	6819      	ldr	r1, [r3, #0]
   8a588:	f048 0001 	orr.w	r0, r8, #1
   8a58c:	4451      	add	r1, sl
   8a58e:	42bc      	cmp	r4, r7
   8a590:	60ba      	str	r2, [r7, #8]
   8a592:	6019      	str	r1, [r3, #0]
   8a594:	6050      	str	r0, [r2, #4]
   8a596:	f000 8124 	beq.w	8a7e2 <_malloc_r+0x4ce>
   8a59a:	f1b9 0f0f 	cmp.w	r9, #15
   8a59e:	f240 8122 	bls.w	8a7e6 <_malloc_r+0x4d2>
   8a5a2:	f04f 0e05 	mov.w	lr, #5
   8a5a6:	6860      	ldr	r0, [r4, #4]
   8a5a8:	f1a9 0c0c 	sub.w	ip, r9, #12
   8a5ac:	f02c 0c07 	bic.w	ip, ip, #7
   8a5b0:	f000 0001 	and.w	r0, r0, #1
   8a5b4:	ea40 000c 	orr.w	r0, r0, ip
   8a5b8:	6060      	str	r0, [r4, #4]
   8a5ba:	f1bc 0f0f 	cmp.w	ip, #15
   8a5be:	eb04 000c 	add.w	r0, r4, ip
   8a5c2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   8a5c6:	f200 812e 	bhi.w	8a826 <_malloc_r+0x512>
   8a5ca:	4614      	mov	r4, r2
   8a5cc:	6850      	ldr	r0, [r2, #4]
   8a5ce:	4b14      	ldr	r3, [pc, #80]	; (8a620 <_malloc_r+0x30c>)
   8a5d0:	681a      	ldr	r2, [r3, #0]
   8a5d2:	428a      	cmp	r2, r1
   8a5d4:	bf38      	it	cc
   8a5d6:	6019      	strcc	r1, [r3, #0]
   8a5d8:	4b12      	ldr	r3, [pc, #72]	; (8a624 <_malloc_r+0x310>)
   8a5da:	681a      	ldr	r2, [r3, #0]
   8a5dc:	428a      	cmp	r2, r1
   8a5de:	bf38      	it	cc
   8a5e0:	6019      	strcc	r1, [r3, #0]
   8a5e2:	e090      	b.n	8a706 <_malloc_r+0x3f2>
   8a5e4:	1962      	adds	r2, r4, r5
   8a5e6:	f043 0301 	orr.w	r3, r3, #1
   8a5ea:	f045 0501 	orr.w	r5, r5, #1
   8a5ee:	6065      	str	r5, [r4, #4]
   8a5f0:	4630      	mov	r0, r6
   8a5f2:	60ba      	str	r2, [r7, #8]
   8a5f4:	3408      	adds	r4, #8
   8a5f6:	6053      	str	r3, [r2, #4]
   8a5f8:	f000 fa18 	bl	8aa2c <__malloc_unlock>
   8a5fc:	4620      	mov	r0, r4
   8a5fe:	b003      	add	sp, #12
   8a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a604:	68d9      	ldr	r1, [r3, #12]
   8a606:	441a      	add	r2, r3
   8a608:	e6a2      	b.n	8a350 <_malloc_r+0x3c>
   8a60a:	bf00      	nop
   8a60c:	20000a20 	.word	0x20000a20
   8a610:	20000a28 	.word	0x20000a28
   8a614:	20000e28 	.word	0x20000e28
   8a618:	200037f8 	.word	0x200037f8
   8a61c:	200037c8 	.word	0x200037c8
   8a620:	200037f0 	.word	0x200037f0
   8a624:	200037f4 	.word	0x200037f4
   8a628:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8a62c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8a630:	d35f      	bcc.n	8a6f2 <_malloc_r+0x3de>
   8a632:	2b14      	cmp	r3, #20
   8a634:	f200 80b1 	bhi.w	8a79a <_malloc_r+0x486>
   8a638:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8a63c:	00c9      	lsls	r1, r1, #3
   8a63e:	335b      	adds	r3, #91	; 0x5b
   8a640:	1878      	adds	r0, r7, r1
   8a642:	5879      	ldr	r1, [r7, r1]
   8a644:	3808      	subs	r0, #8
   8a646:	4288      	cmp	r0, r1
   8a648:	f000 808f 	beq.w	8a76a <_malloc_r+0x456>
   8a64c:	684b      	ldr	r3, [r1, #4]
   8a64e:	f023 0303 	bic.w	r3, r3, #3
   8a652:	4293      	cmp	r3, r2
   8a654:	d902      	bls.n	8a65c <_malloc_r+0x348>
   8a656:	6889      	ldr	r1, [r1, #8]
   8a658:	4288      	cmp	r0, r1
   8a65a:	d1f7      	bne.n	8a64c <_malloc_r+0x338>
   8a65c:	68c8      	ldr	r0, [r1, #12]
   8a65e:	687a      	ldr	r2, [r7, #4]
   8a660:	e9c4 1002 	strd	r1, r0, [r4, #8]
   8a664:	6084      	str	r4, [r0, #8]
   8a666:	60cc      	str	r4, [r1, #12]
   8a668:	e6d7      	b.n	8a41a <_malloc_r+0x106>
   8a66a:	2b14      	cmp	r3, #20
   8a66c:	d959      	bls.n	8a722 <_malloc_r+0x40e>
   8a66e:	2b54      	cmp	r3, #84	; 0x54
   8a670:	f200 809b 	bhi.w	8a7aa <_malloc_r+0x496>
   8a674:	0b2b      	lsrs	r3, r5, #12
   8a676:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   8a67a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8a67e:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a682:	e68f      	b.n	8a3a4 <_malloc_r+0x90>
   8a684:	3401      	adds	r4, #1
   8a686:	07a3      	lsls	r3, r4, #30
   8a688:	f100 0008 	add.w	r0, r0, #8
   8a68c:	f47f aed8 	bne.w	8a440 <_malloc_r+0x12c>
   8a690:	e053      	b.n	8a73a <_malloc_r+0x426>
   8a692:	4644      	mov	r4, r8
   8a694:	4442      	add	r2, r8
   8a696:	6853      	ldr	r3, [r2, #4]
   8a698:	f8d8 100c 	ldr.w	r1, [r8, #12]
   8a69c:	f043 0301 	orr.w	r3, r3, #1
   8a6a0:	6053      	str	r3, [r2, #4]
   8a6a2:	f854 3f08 	ldr.w	r3, [r4, #8]!
   8a6a6:	4630      	mov	r0, r6
   8a6a8:	60d9      	str	r1, [r3, #12]
   8a6aa:	608b      	str	r3, [r1, #8]
   8a6ac:	f000 f9be 	bl	8aa2c <__malloc_unlock>
   8a6b0:	e6f6      	b.n	8a4a0 <_malloc_r+0x18c>
   8a6b2:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8a6b6:	f105 0208 	add.w	r2, r5, #8
   8a6ba:	e63c      	b.n	8a336 <_malloc_r+0x22>
   8a6bc:	4422      	add	r2, r4
   8a6be:	6853      	ldr	r3, [r2, #4]
   8a6c0:	4630      	mov	r0, r6
   8a6c2:	f043 0301 	orr.w	r3, r3, #1
   8a6c6:	6053      	str	r3, [r2, #4]
   8a6c8:	f000 f9b0 	bl	8aa2c <__malloc_unlock>
   8a6cc:	3408      	adds	r4, #8
   8a6ce:	e6e7      	b.n	8a4a0 <_malloc_r+0x18c>
   8a6d0:	1961      	adds	r1, r4, r5
   8a6d2:	f045 0501 	orr.w	r5, r5, #1
   8a6d6:	6065      	str	r5, [r4, #4]
   8a6d8:	f043 0501 	orr.w	r5, r3, #1
   8a6dc:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8a6e0:	4630      	mov	r0, r6
   8a6e2:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8a6e6:	604d      	str	r5, [r1, #4]
   8a6e8:	50a3      	str	r3, [r4, r2]
   8a6ea:	f000 f99f 	bl	8aa2c <__malloc_unlock>
   8a6ee:	3408      	adds	r4, #8
   8a6f0:	e6d6      	b.n	8a4a0 <_malloc_r+0x18c>
   8a6f2:	0993      	lsrs	r3, r2, #6
   8a6f4:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8a6f8:	00c9      	lsls	r1, r1, #3
   8a6fa:	3338      	adds	r3, #56	; 0x38
   8a6fc:	e7a0      	b.n	8a640 <_malloc_r+0x32c>
   8a6fe:	42bc      	cmp	r4, r7
   8a700:	d05e      	beq.n	8a7c0 <_malloc_r+0x4ac>
   8a702:	68bc      	ldr	r4, [r7, #8]
   8a704:	6860      	ldr	r0, [r4, #4]
   8a706:	f020 0803 	bic.w	r8, r0, #3
   8a70a:	4545      	cmp	r5, r8
   8a70c:	eba8 0305 	sub.w	r3, r8, r5
   8a710:	d802      	bhi.n	8a718 <_malloc_r+0x404>
   8a712:	2b0f      	cmp	r3, #15
   8a714:	f73f af66 	bgt.w	8a5e4 <_malloc_r+0x2d0>
   8a718:	4630      	mov	r0, r6
   8a71a:	f000 f987 	bl	8aa2c <__malloc_unlock>
   8a71e:	2400      	movs	r4, #0
   8a720:	e6be      	b.n	8a4a0 <_malloc_r+0x18c>
   8a722:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   8a726:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8a72a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a72e:	e639      	b.n	8a3a4 <_malloc_r+0x90>
   8a730:	f859 3908 	ldr.w	r3, [r9], #-8
   8a734:	454b      	cmp	r3, r9
   8a736:	f040 8095 	bne.w	8a864 <_malloc_r+0x550>
   8a73a:	f01c 0f03 	tst.w	ip, #3
   8a73e:	f10c 3cff 	add.w	ip, ip, #4294967295
   8a742:	d1f5      	bne.n	8a730 <_malloc_r+0x41c>
   8a744:	687b      	ldr	r3, [r7, #4]
   8a746:	ea23 0301 	bic.w	r3, r3, r1
   8a74a:	607b      	str	r3, [r7, #4]
   8a74c:	0049      	lsls	r1, r1, #1
   8a74e:	4299      	cmp	r1, r3
   8a750:	f63f aec3 	bhi.w	8a4da <_malloc_r+0x1c6>
   8a754:	b911      	cbnz	r1, 8a75c <_malloc_r+0x448>
   8a756:	e6c0      	b.n	8a4da <_malloc_r+0x1c6>
   8a758:	0049      	lsls	r1, r1, #1
   8a75a:	3404      	adds	r4, #4
   8a75c:	4219      	tst	r1, r3
   8a75e:	d0fb      	beq.n	8a758 <_malloc_r+0x444>
   8a760:	46a4      	mov	ip, r4
   8a762:	e669      	b.n	8a438 <_malloc_r+0x124>
   8a764:	f103 0810 	add.w	r8, r3, #16
   8a768:	e6d4      	b.n	8a514 <_malloc_r+0x200>
   8a76a:	2201      	movs	r2, #1
   8a76c:	109b      	asrs	r3, r3, #2
   8a76e:	409a      	lsls	r2, r3
   8a770:	687b      	ldr	r3, [r7, #4]
   8a772:	431a      	orrs	r2, r3
   8a774:	607a      	str	r2, [r7, #4]
   8a776:	e773      	b.n	8a660 <_malloc_r+0x34c>
   8a778:	eb02 0108 	add.w	r1, r2, r8
   8a77c:	4249      	negs	r1, r1
   8a77e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8a782:	4651      	mov	r1, sl
   8a784:	4630      	mov	r0, r6
   8a786:	9200      	str	r2, [sp, #0]
   8a788:	f000 ff20 	bl	8b5cc <_sbrk_r>
   8a78c:	1c43      	adds	r3, r0, #1
   8a78e:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a792:	f47f aef5 	bne.w	8a580 <_malloc_r+0x26c>
   8a796:	46da      	mov	sl, fp
   8a798:	e6f5      	b.n	8a586 <_malloc_r+0x272>
   8a79a:	2b54      	cmp	r3, #84	; 0x54
   8a79c:	d826      	bhi.n	8a7ec <_malloc_r+0x4d8>
   8a79e:	0b13      	lsrs	r3, r2, #12
   8a7a0:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8a7a4:	00c9      	lsls	r1, r1, #3
   8a7a6:	336e      	adds	r3, #110	; 0x6e
   8a7a8:	e74a      	b.n	8a640 <_malloc_r+0x32c>
   8a7aa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a7ae:	d826      	bhi.n	8a7fe <_malloc_r+0x4ea>
   8a7b0:	0beb      	lsrs	r3, r5, #15
   8a7b2:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   8a7b6:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8a7ba:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a7be:	e5f1      	b.n	8a3a4 <_malloc_r+0x90>
   8a7c0:	4b29      	ldr	r3, [pc, #164]	; (8a868 <_malloc_r+0x554>)
   8a7c2:	6818      	ldr	r0, [r3, #0]
   8a7c4:	4440      	add	r0, r8
   8a7c6:	6018      	str	r0, [r3, #0]
   8a7c8:	e6b6      	b.n	8a538 <_malloc_r+0x224>
   8a7ca:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8a7ce:	f1bc 0f00 	cmp.w	ip, #0
   8a7d2:	f47f aeb1 	bne.w	8a538 <_malloc_r+0x224>
   8a7d6:	68bc      	ldr	r4, [r7, #8]
   8a7d8:	44c8      	add	r8, r9
   8a7da:	f048 0001 	orr.w	r0, r8, #1
   8a7de:	6060      	str	r0, [r4, #4]
   8a7e0:	e6f5      	b.n	8a5ce <_malloc_r+0x2ba>
   8a7e2:	4614      	mov	r4, r2
   8a7e4:	e6f3      	b.n	8a5ce <_malloc_r+0x2ba>
   8a7e6:	2301      	movs	r3, #1
   8a7e8:	6053      	str	r3, [r2, #4]
   8a7ea:	e795      	b.n	8a718 <_malloc_r+0x404>
   8a7ec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a7f0:	d824      	bhi.n	8a83c <_malloc_r+0x528>
   8a7f2:	0bd3      	lsrs	r3, r2, #15
   8a7f4:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8a7f8:	00c9      	lsls	r1, r1, #3
   8a7fa:	3377      	adds	r3, #119	; 0x77
   8a7fc:	e720      	b.n	8a640 <_malloc_r+0x32c>
   8a7fe:	f240 5254 	movw	r2, #1364	; 0x554
   8a802:	4293      	cmp	r3, r2
   8a804:	d824      	bhi.n	8a850 <_malloc_r+0x53c>
   8a806:	0cab      	lsrs	r3, r5, #18
   8a808:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   8a80c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8a810:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a814:	e5c6      	b.n	8a3a4 <_malloc_r+0x90>
   8a816:	f1ab 0b08 	sub.w	fp, fp, #8
   8a81a:	44d8      	add	r8, fp
   8a81c:	f04f 0a00 	mov.w	sl, #0
   8a820:	eba8 0802 	sub.w	r8, r8, r2
   8a824:	e6af      	b.n	8a586 <_malloc_r+0x272>
   8a826:	f104 0108 	add.w	r1, r4, #8
   8a82a:	4630      	mov	r0, r6
   8a82c:	9300      	str	r3, [sp, #0]
   8a82e:	f7ff fa1b 	bl	89c68 <_free_r>
   8a832:	68bc      	ldr	r4, [r7, #8]
   8a834:	9b00      	ldr	r3, [sp, #0]
   8a836:	6860      	ldr	r0, [r4, #4]
   8a838:	6819      	ldr	r1, [r3, #0]
   8a83a:	e6c8      	b.n	8a5ce <_malloc_r+0x2ba>
   8a83c:	f240 5154 	movw	r1, #1364	; 0x554
   8a840:	428b      	cmp	r3, r1
   8a842:	d80b      	bhi.n	8a85c <_malloc_r+0x548>
   8a844:	0c93      	lsrs	r3, r2, #18
   8a846:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8a84a:	00c9      	lsls	r1, r1, #3
   8a84c:	337c      	adds	r3, #124	; 0x7c
   8a84e:	e6f7      	b.n	8a640 <_malloc_r+0x32c>
   8a850:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   8a854:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   8a858:	247e      	movs	r4, #126	; 0x7e
   8a85a:	e5a3      	b.n	8a3a4 <_malloc_r+0x90>
   8a85c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8a860:	237e      	movs	r3, #126	; 0x7e
   8a862:	e6ed      	b.n	8a640 <_malloc_r+0x32c>
   8a864:	687b      	ldr	r3, [r7, #4]
   8a866:	e771      	b.n	8a74c <_malloc_r+0x438>
   8a868:	200037c8 	.word	0x200037c8

0008a86c <__ascii_mbtowc>:
   8a86c:	b082      	sub	sp, #8
   8a86e:	b149      	cbz	r1, 8a884 <__ascii_mbtowc+0x18>
   8a870:	b15a      	cbz	r2, 8a88a <__ascii_mbtowc+0x1e>
   8a872:	b16b      	cbz	r3, 8a890 <__ascii_mbtowc+0x24>
   8a874:	7813      	ldrb	r3, [r2, #0]
   8a876:	600b      	str	r3, [r1, #0]
   8a878:	7812      	ldrb	r2, [r2, #0]
   8a87a:	1e10      	subs	r0, r2, #0
   8a87c:	bf18      	it	ne
   8a87e:	2001      	movne	r0, #1
   8a880:	b002      	add	sp, #8
   8a882:	4770      	bx	lr
   8a884:	a901      	add	r1, sp, #4
   8a886:	2a00      	cmp	r2, #0
   8a888:	d1f3      	bne.n	8a872 <__ascii_mbtowc+0x6>
   8a88a:	4610      	mov	r0, r2
   8a88c:	b002      	add	sp, #8
   8a88e:	4770      	bx	lr
   8a890:	f06f 0001 	mvn.w	r0, #1
   8a894:	e7f4      	b.n	8a880 <__ascii_mbtowc+0x14>
   8a896:	bf00      	nop

0008a898 <memchr>:
   8a898:	fa5f fc81 	uxtb.w	ip, r1
   8a89c:	0781      	lsls	r1, r0, #30
   8a89e:	d010      	beq.n	8a8c2 <memchr+0x2a>
   8a8a0:	4603      	mov	r3, r0
   8a8a2:	1e51      	subs	r1, r2, #1
   8a8a4:	b92a      	cbnz	r2, 8a8b2 <memchr+0x1a>
   8a8a6:	e00a      	b.n	8a8be <memchr+0x26>
   8a8a8:	079a      	lsls	r2, r3, #30
   8a8aa:	4618      	mov	r0, r3
   8a8ac:	d00a      	beq.n	8a8c4 <memchr+0x2c>
   8a8ae:	3901      	subs	r1, #1
   8a8b0:	d305      	bcc.n	8a8be <memchr+0x26>
   8a8b2:	4618      	mov	r0, r3
   8a8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a8b8:	4562      	cmp	r2, ip
   8a8ba:	d1f5      	bne.n	8a8a8 <memchr+0x10>
   8a8bc:	4770      	bx	lr
   8a8be:	2000      	movs	r0, #0
   8a8c0:	4770      	bx	lr
   8a8c2:	4611      	mov	r1, r2
   8a8c4:	2903      	cmp	r1, #3
   8a8c6:	d80c      	bhi.n	8a8e2 <memchr+0x4a>
   8a8c8:	2900      	cmp	r1, #0
   8a8ca:	d0f8      	beq.n	8a8be <memchr+0x26>
   8a8cc:	4603      	mov	r3, r0
   8a8ce:	4401      	add	r1, r0
   8a8d0:	e001      	b.n	8a8d6 <memchr+0x3e>
   8a8d2:	428b      	cmp	r3, r1
   8a8d4:	d0f3      	beq.n	8a8be <memchr+0x26>
   8a8d6:	4618      	mov	r0, r3
   8a8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a8dc:	4562      	cmp	r2, ip
   8a8de:	d1f8      	bne.n	8a8d2 <memchr+0x3a>
   8a8e0:	e7ec      	b.n	8a8bc <memchr+0x24>
   8a8e2:	4602      	mov	r2, r0
   8a8e4:	b510      	push	{r4, lr}
   8a8e6:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8a8ea:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8a8ee:	4610      	mov	r0, r2
   8a8f0:	6803      	ldr	r3, [r0, #0]
   8a8f2:	3204      	adds	r2, #4
   8a8f4:	4063      	eors	r3, r4
   8a8f6:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8a8fa:	ea2e 0303 	bic.w	r3, lr, r3
   8a8fe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8a902:	d104      	bne.n	8a90e <memchr+0x76>
   8a904:	3904      	subs	r1, #4
   8a906:	2903      	cmp	r1, #3
   8a908:	4610      	mov	r0, r2
   8a90a:	d8f0      	bhi.n	8a8ee <memchr+0x56>
   8a90c:	b151      	cbz	r1, 8a924 <memchr+0x8c>
   8a90e:	4603      	mov	r3, r0
   8a910:	4401      	add	r1, r0
   8a912:	e001      	b.n	8a918 <memchr+0x80>
   8a914:	428b      	cmp	r3, r1
   8a916:	d005      	beq.n	8a924 <memchr+0x8c>
   8a918:	4618      	mov	r0, r3
   8a91a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a91e:	4562      	cmp	r2, ip
   8a920:	d1f8      	bne.n	8a914 <memchr+0x7c>
   8a922:	bd10      	pop	{r4, pc}
   8a924:	2000      	movs	r0, #0
   8a926:	bd10      	pop	{r4, pc}

0008a928 <memmove>:
   8a928:	4288      	cmp	r0, r1
   8a92a:	d90d      	bls.n	8a948 <memmove+0x20>
   8a92c:	188b      	adds	r3, r1, r2
   8a92e:	4283      	cmp	r3, r0
   8a930:	d90a      	bls.n	8a948 <memmove+0x20>
   8a932:	eb00 0c02 	add.w	ip, r0, r2
   8a936:	b1ba      	cbz	r2, 8a968 <memmove+0x40>
   8a938:	4662      	mov	r2, ip
   8a93a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   8a93e:	4299      	cmp	r1, r3
   8a940:	f802 cd01 	strb.w	ip, [r2, #-1]!
   8a944:	d1f9      	bne.n	8a93a <memmove+0x12>
   8a946:	4770      	bx	lr
   8a948:	2a0f      	cmp	r2, #15
   8a94a:	d80e      	bhi.n	8a96a <memmove+0x42>
   8a94c:	4603      	mov	r3, r0
   8a94e:	f102 3cff 	add.w	ip, r2, #4294967295
   8a952:	b14a      	cbz	r2, 8a968 <memmove+0x40>
   8a954:	f10c 0c01 	add.w	ip, ip, #1
   8a958:	3b01      	subs	r3, #1
   8a95a:	448c      	add	ip, r1
   8a95c:	f811 2b01 	ldrb.w	r2, [r1], #1
   8a960:	4561      	cmp	r1, ip
   8a962:	f803 2f01 	strb.w	r2, [r3, #1]!
   8a966:	d1f9      	bne.n	8a95c <memmove+0x34>
   8a968:	4770      	bx	lr
   8a96a:	ea40 0301 	orr.w	r3, r0, r1
   8a96e:	079b      	lsls	r3, r3, #30
   8a970:	d14f      	bne.n	8aa12 <memmove+0xea>
   8a972:	f1a2 0310 	sub.w	r3, r2, #16
   8a976:	b570      	push	{r4, r5, r6, lr}
   8a978:	f101 0c20 	add.w	ip, r1, #32
   8a97c:	f023 050f 	bic.w	r5, r3, #15
   8a980:	f101 0e10 	add.w	lr, r1, #16
   8a984:	f100 0410 	add.w	r4, r0, #16
   8a988:	44ac      	add	ip, r5
   8a98a:	091b      	lsrs	r3, r3, #4
   8a98c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   8a990:	f10e 0e10 	add.w	lr, lr, #16
   8a994:	f844 5c10 	str.w	r5, [r4, #-16]
   8a998:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   8a99c:	3410      	adds	r4, #16
   8a99e:	f844 5c1c 	str.w	r5, [r4, #-28]
   8a9a2:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   8a9a6:	f844 5c18 	str.w	r5, [r4, #-24]
   8a9aa:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   8a9ae:	45e6      	cmp	lr, ip
   8a9b0:	f844 5c14 	str.w	r5, [r4, #-20]
   8a9b4:	d1ea      	bne.n	8a98c <memmove+0x64>
   8a9b6:	3301      	adds	r3, #1
   8a9b8:	f012 0f0c 	tst.w	r2, #12
   8a9bc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8a9c0:	f002 040f 	and.w	r4, r2, #15
   8a9c4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8a9c8:	d027      	beq.n	8aa1a <memmove+0xf2>
   8a9ca:	468e      	mov	lr, r1
   8a9cc:	3c04      	subs	r4, #4
   8a9ce:	f024 0603 	bic.w	r6, r4, #3
   8a9d2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   8a9d6:	441e      	add	r6, r3
   8a9d8:	1f1c      	subs	r4, r3, #4
   8a9da:	f85e 5b04 	ldr.w	r5, [lr], #4
   8a9de:	f844 5f04 	str.w	r5, [r4, #4]!
   8a9e2:	42b4      	cmp	r4, r6
   8a9e4:	d1f9      	bne.n	8a9da <memmove+0xb2>
   8a9e6:	f10c 0401 	add.w	r4, ip, #1
   8a9ea:	f002 0203 	and.w	r2, r2, #3
   8a9ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8a9f2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8a9f6:	f102 3cff 	add.w	ip, r2, #4294967295
   8a9fa:	b14a      	cbz	r2, 8aa10 <memmove+0xe8>
   8a9fc:	f10c 0c01 	add.w	ip, ip, #1
   8aa00:	3b01      	subs	r3, #1
   8aa02:	448c      	add	ip, r1
   8aa04:	f811 2b01 	ldrb.w	r2, [r1], #1
   8aa08:	4561      	cmp	r1, ip
   8aa0a:	f803 2f01 	strb.w	r2, [r3, #1]!
   8aa0e:	d1f9      	bne.n	8aa04 <memmove+0xdc>
   8aa10:	bd70      	pop	{r4, r5, r6, pc}
   8aa12:	4603      	mov	r3, r0
   8aa14:	f102 3cff 	add.w	ip, r2, #4294967295
   8aa18:	e79c      	b.n	8a954 <memmove+0x2c>
   8aa1a:	4622      	mov	r2, r4
   8aa1c:	e7eb      	b.n	8a9f6 <memmove+0xce>
   8aa1e:	bf00      	nop

0008aa20 <__malloc_lock>:
   8aa20:	4801      	ldr	r0, [pc, #4]	; (8aa28 <__malloc_lock+0x8>)
   8aa22:	f7ff bbcb 	b.w	8a1bc <__retarget_lock_acquire_recursive>
   8aa26:	bf00      	nop
   8aa28:	200037bc 	.word	0x200037bc

0008aa2c <__malloc_unlock>:
   8aa2c:	4801      	ldr	r0, [pc, #4]	; (8aa34 <__malloc_unlock+0x8>)
   8aa2e:	f7ff bbc7 	b.w	8a1c0 <__retarget_lock_release_recursive>
   8aa32:	bf00      	nop
   8aa34:	200037bc 	.word	0x200037bc

0008aa38 <_Balloc>:
   8aa38:	b538      	push	{r3, r4, r5, lr}
   8aa3a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8aa3c:	4605      	mov	r5, r0
   8aa3e:	460c      	mov	r4, r1
   8aa40:	b14b      	cbz	r3, 8aa56 <_Balloc+0x1e>
   8aa42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8aa46:	b180      	cbz	r0, 8aa6a <_Balloc+0x32>
   8aa48:	6802      	ldr	r2, [r0, #0]
   8aa4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8aa4e:	2300      	movs	r3, #0
   8aa50:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8aa54:	bd38      	pop	{r3, r4, r5, pc}
   8aa56:	2221      	movs	r2, #33	; 0x21
   8aa58:	2104      	movs	r1, #4
   8aa5a:	f000 ff8d 	bl	8b978 <_calloc_r>
   8aa5e:	4603      	mov	r3, r0
   8aa60:	64e8      	str	r0, [r5, #76]	; 0x4c
   8aa62:	2800      	cmp	r0, #0
   8aa64:	d1ed      	bne.n	8aa42 <_Balloc+0xa>
   8aa66:	2000      	movs	r0, #0
   8aa68:	bd38      	pop	{r3, r4, r5, pc}
   8aa6a:	2101      	movs	r1, #1
   8aa6c:	4628      	mov	r0, r5
   8aa6e:	fa01 f504 	lsl.w	r5, r1, r4
   8aa72:	1d6a      	adds	r2, r5, #5
   8aa74:	0092      	lsls	r2, r2, #2
   8aa76:	f000 ff7f 	bl	8b978 <_calloc_r>
   8aa7a:	2800      	cmp	r0, #0
   8aa7c:	d0f3      	beq.n	8aa66 <_Balloc+0x2e>
   8aa7e:	e9c0 4501 	strd	r4, r5, [r0, #4]
   8aa82:	e7e4      	b.n	8aa4e <_Balloc+0x16>

0008aa84 <_Bfree>:
   8aa84:	b131      	cbz	r1, 8aa94 <_Bfree+0x10>
   8aa86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8aa88:	684a      	ldr	r2, [r1, #4]
   8aa8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8aa8e:	6008      	str	r0, [r1, #0]
   8aa90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8aa94:	4770      	bx	lr
   8aa96:	bf00      	nop

0008aa98 <__multadd>:
   8aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8aa9c:	f04f 0e00 	mov.w	lr, #0
   8aaa0:	460e      	mov	r6, r1
   8aaa2:	461c      	mov	r4, r3
   8aaa4:	690d      	ldr	r5, [r1, #16]
   8aaa6:	4607      	mov	r7, r0
   8aaa8:	f101 0014 	add.w	r0, r1, #20
   8aaac:	6801      	ldr	r1, [r0, #0]
   8aaae:	f10e 0e01 	add.w	lr, lr, #1
   8aab2:	b28b      	uxth	r3, r1
   8aab4:	fb02 4303 	mla	r3, r2, r3, r4
   8aab8:	0c09      	lsrs	r1, r1, #16
   8aaba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8aabe:	fb02 cc01 	mla	ip, r2, r1, ip
   8aac2:	b29b      	uxth	r3, r3
   8aac4:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   8aac8:	4575      	cmp	r5, lr
   8aaca:	f840 3b04 	str.w	r3, [r0], #4
   8aace:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8aad2:	dceb      	bgt.n	8aaac <__multadd+0x14>
   8aad4:	b13c      	cbz	r4, 8aae6 <__multadd+0x4e>
   8aad6:	68b3      	ldr	r3, [r6, #8]
   8aad8:	42ab      	cmp	r3, r5
   8aada:	dd07      	ble.n	8aaec <__multadd+0x54>
   8aadc:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8aae0:	3501      	adds	r5, #1
   8aae2:	615c      	str	r4, [r3, #20]
   8aae4:	6135      	str	r5, [r6, #16]
   8aae6:	4630      	mov	r0, r6
   8aae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8aaec:	6871      	ldr	r1, [r6, #4]
   8aaee:	4638      	mov	r0, r7
   8aaf0:	3101      	adds	r1, #1
   8aaf2:	f7ff ffa1 	bl	8aa38 <_Balloc>
   8aaf6:	4680      	mov	r8, r0
   8aaf8:	b1a8      	cbz	r0, 8ab26 <__multadd+0x8e>
   8aafa:	6932      	ldr	r2, [r6, #16]
   8aafc:	f106 010c 	add.w	r1, r6, #12
   8ab00:	3202      	adds	r2, #2
   8ab02:	0092      	lsls	r2, r2, #2
   8ab04:	300c      	adds	r0, #12
   8ab06:	f7fa ff2f 	bl	85968 <memcpy>
   8ab0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8ab0c:	6872      	ldr	r2, [r6, #4]
   8ab0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8ab12:	6031      	str	r1, [r6, #0]
   8ab14:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8ab18:	4646      	mov	r6, r8
   8ab1a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8ab1e:	3501      	adds	r5, #1
   8ab20:	615c      	str	r4, [r3, #20]
   8ab22:	6135      	str	r5, [r6, #16]
   8ab24:	e7df      	b.n	8aae6 <__multadd+0x4e>
   8ab26:	4602      	mov	r2, r0
   8ab28:	21b5      	movs	r1, #181	; 0xb5
   8ab2a:	4b02      	ldr	r3, [pc, #8]	; (8ab34 <__multadd+0x9c>)
   8ab2c:	4802      	ldr	r0, [pc, #8]	; (8ab38 <__multadd+0xa0>)
   8ab2e:	f000 ff03 	bl	8b938 <__assert_func>
   8ab32:	bf00      	nop
   8ab34:	0008ca50 	.word	0x0008ca50
   8ab38:	0008caf4 	.word	0x0008caf4

0008ab3c <__hi0bits>:
   8ab3c:	0c02      	lsrs	r2, r0, #16
   8ab3e:	0412      	lsls	r2, r2, #16
   8ab40:	4603      	mov	r3, r0
   8ab42:	b9ca      	cbnz	r2, 8ab78 <__hi0bits+0x3c>
   8ab44:	2010      	movs	r0, #16
   8ab46:	4083      	lsls	r3, r0
   8ab48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8ab4c:	bf04      	itt	eq
   8ab4e:	021b      	lsleq	r3, r3, #8
   8ab50:	3008      	addeq	r0, #8
   8ab52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8ab56:	bf04      	itt	eq
   8ab58:	011b      	lsleq	r3, r3, #4
   8ab5a:	3004      	addeq	r0, #4
   8ab5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8ab60:	bf04      	itt	eq
   8ab62:	009b      	lsleq	r3, r3, #2
   8ab64:	3002      	addeq	r0, #2
   8ab66:	2b00      	cmp	r3, #0
   8ab68:	db05      	blt.n	8ab76 <__hi0bits+0x3a>
   8ab6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8ab6e:	f100 0001 	add.w	r0, r0, #1
   8ab72:	bf08      	it	eq
   8ab74:	2020      	moveq	r0, #32
   8ab76:	4770      	bx	lr
   8ab78:	2000      	movs	r0, #0
   8ab7a:	e7e5      	b.n	8ab48 <__hi0bits+0xc>

0008ab7c <__lo0bits>:
   8ab7c:	6803      	ldr	r3, [r0, #0]
   8ab7e:	4602      	mov	r2, r0
   8ab80:	f013 0007 	ands.w	r0, r3, #7
   8ab84:	d009      	beq.n	8ab9a <__lo0bits+0x1e>
   8ab86:	07d9      	lsls	r1, r3, #31
   8ab88:	d41f      	bmi.n	8abca <__lo0bits+0x4e>
   8ab8a:	0798      	lsls	r0, r3, #30
   8ab8c:	bf4b      	itete	mi
   8ab8e:	085b      	lsrmi	r3, r3, #1
   8ab90:	089b      	lsrpl	r3, r3, #2
   8ab92:	2001      	movmi	r0, #1
   8ab94:	2002      	movpl	r0, #2
   8ab96:	6013      	str	r3, [r2, #0]
   8ab98:	4770      	bx	lr
   8ab9a:	b299      	uxth	r1, r3
   8ab9c:	b909      	cbnz	r1, 8aba2 <__lo0bits+0x26>
   8ab9e:	2010      	movs	r0, #16
   8aba0:	40c3      	lsrs	r3, r0
   8aba2:	b2d9      	uxtb	r1, r3
   8aba4:	b909      	cbnz	r1, 8abaa <__lo0bits+0x2e>
   8aba6:	3008      	adds	r0, #8
   8aba8:	0a1b      	lsrs	r3, r3, #8
   8abaa:	0719      	lsls	r1, r3, #28
   8abac:	bf04      	itt	eq
   8abae:	091b      	lsreq	r3, r3, #4
   8abb0:	3004      	addeq	r0, #4
   8abb2:	0799      	lsls	r1, r3, #30
   8abb4:	bf04      	itt	eq
   8abb6:	089b      	lsreq	r3, r3, #2
   8abb8:	3002      	addeq	r0, #2
   8abba:	07d9      	lsls	r1, r3, #31
   8abbc:	d403      	bmi.n	8abc6 <__lo0bits+0x4a>
   8abbe:	085b      	lsrs	r3, r3, #1
   8abc0:	f100 0001 	add.w	r0, r0, #1
   8abc4:	d003      	beq.n	8abce <__lo0bits+0x52>
   8abc6:	6013      	str	r3, [r2, #0]
   8abc8:	4770      	bx	lr
   8abca:	2000      	movs	r0, #0
   8abcc:	4770      	bx	lr
   8abce:	2020      	movs	r0, #32
   8abd0:	4770      	bx	lr
   8abd2:	bf00      	nop

0008abd4 <__i2b>:
   8abd4:	b538      	push	{r3, r4, r5, lr}
   8abd6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8abd8:	4604      	mov	r4, r0
   8abda:	460d      	mov	r5, r1
   8abdc:	b14b      	cbz	r3, 8abf2 <__i2b+0x1e>
   8abde:	6858      	ldr	r0, [r3, #4]
   8abe0:	b1b0      	cbz	r0, 8ac10 <__i2b+0x3c>
   8abe2:	6802      	ldr	r2, [r0, #0]
   8abe4:	605a      	str	r2, [r3, #4]
   8abe6:	2200      	movs	r2, #0
   8abe8:	2301      	movs	r3, #1
   8abea:	6145      	str	r5, [r0, #20]
   8abec:	e9c0 2303 	strd	r2, r3, [r0, #12]
   8abf0:	bd38      	pop	{r3, r4, r5, pc}
   8abf2:	2221      	movs	r2, #33	; 0x21
   8abf4:	2104      	movs	r1, #4
   8abf6:	f000 febf 	bl	8b978 <_calloc_r>
   8abfa:	4603      	mov	r3, r0
   8abfc:	64e0      	str	r0, [r4, #76]	; 0x4c
   8abfe:	2800      	cmp	r0, #0
   8ac00:	d1ed      	bne.n	8abde <__i2b+0xa>
   8ac02:	2200      	movs	r2, #0
   8ac04:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8ac08:	4b07      	ldr	r3, [pc, #28]	; (8ac28 <__i2b+0x54>)
   8ac0a:	4808      	ldr	r0, [pc, #32]	; (8ac2c <__i2b+0x58>)
   8ac0c:	f000 fe94 	bl	8b938 <__assert_func>
   8ac10:	221c      	movs	r2, #28
   8ac12:	2101      	movs	r1, #1
   8ac14:	4620      	mov	r0, r4
   8ac16:	f000 feaf 	bl	8b978 <_calloc_r>
   8ac1a:	2800      	cmp	r0, #0
   8ac1c:	d0f1      	beq.n	8ac02 <__i2b+0x2e>
   8ac1e:	2201      	movs	r2, #1
   8ac20:	2302      	movs	r3, #2
   8ac22:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8ac26:	e7de      	b.n	8abe6 <__i2b+0x12>
   8ac28:	0008ca50 	.word	0x0008ca50
   8ac2c:	0008caf4 	.word	0x0008caf4

0008ac30 <__multiply>:
   8ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ac34:	690e      	ldr	r6, [r1, #16]
   8ac36:	6915      	ldr	r5, [r2, #16]
   8ac38:	4688      	mov	r8, r1
   8ac3a:	42ae      	cmp	r6, r5
   8ac3c:	4614      	mov	r4, r2
   8ac3e:	b085      	sub	sp, #20
   8ac40:	db05      	blt.n	8ac4e <__multiply+0x1e>
   8ac42:	462a      	mov	r2, r5
   8ac44:	4623      	mov	r3, r4
   8ac46:	4635      	mov	r5, r6
   8ac48:	460c      	mov	r4, r1
   8ac4a:	4616      	mov	r6, r2
   8ac4c:	4698      	mov	r8, r3
   8ac4e:	68a3      	ldr	r3, [r4, #8]
   8ac50:	6861      	ldr	r1, [r4, #4]
   8ac52:	19af      	adds	r7, r5, r6
   8ac54:	42bb      	cmp	r3, r7
   8ac56:	bfb8      	it	lt
   8ac58:	3101      	addlt	r1, #1
   8ac5a:	f7ff feed 	bl	8aa38 <_Balloc>
   8ac5e:	9001      	str	r0, [sp, #4]
   8ac60:	2800      	cmp	r0, #0
   8ac62:	f000 8087 	beq.w	8ad74 <__multiply+0x144>
   8ac66:	9b01      	ldr	r3, [sp, #4]
   8ac68:	f103 0914 	add.w	r9, r3, #20
   8ac6c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   8ac70:	45d1      	cmp	r9, sl
   8ac72:	d205      	bcs.n	8ac80 <__multiply+0x50>
   8ac74:	464b      	mov	r3, r9
   8ac76:	2200      	movs	r2, #0
   8ac78:	f843 2b04 	str.w	r2, [r3], #4
   8ac7c:	459a      	cmp	sl, r3
   8ac7e:	d8fb      	bhi.n	8ac78 <__multiply+0x48>
   8ac80:	f108 0814 	add.w	r8, r8, #20
   8ac84:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   8ac88:	f104 0314 	add.w	r3, r4, #20
   8ac8c:	45d8      	cmp	r8, fp
   8ac8e:	461a      	mov	r2, r3
   8ac90:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   8ac94:	d25f      	bcs.n	8ad56 <__multiply+0x126>
   8ac96:	1b2b      	subs	r3, r5, r4
   8ac98:	3b15      	subs	r3, #21
   8ac9a:	f023 0303 	bic.w	r3, r3, #3
   8ac9e:	3304      	adds	r3, #4
   8aca0:	3415      	adds	r4, #21
   8aca2:	42a5      	cmp	r5, r4
   8aca4:	bf38      	it	cc
   8aca6:	2304      	movcc	r3, #4
   8aca8:	e9cd a702 	strd	sl, r7, [sp, #8]
   8acac:	46ac      	mov	ip, r5
   8acae:	461f      	mov	r7, r3
   8acb0:	4692      	mov	sl, r2
   8acb2:	e005      	b.n	8acc0 <__multiply+0x90>
   8acb4:	0c00      	lsrs	r0, r0, #16
   8acb6:	d129      	bne.n	8ad0c <__multiply+0xdc>
   8acb8:	45c3      	cmp	fp, r8
   8acba:	f109 0904 	add.w	r9, r9, #4
   8acbe:	d948      	bls.n	8ad52 <__multiply+0x122>
   8acc0:	f858 0b04 	ldr.w	r0, [r8], #4
   8acc4:	b285      	uxth	r5, r0
   8acc6:	2d00      	cmp	r5, #0
   8acc8:	d0f4      	beq.n	8acb4 <__multiply+0x84>
   8acca:	4656      	mov	r6, sl
   8accc:	464c      	mov	r4, r9
   8acce:	2300      	movs	r3, #0
   8acd0:	f856 0b04 	ldr.w	r0, [r6], #4
   8acd4:	6821      	ldr	r1, [r4, #0]
   8acd6:	b282      	uxth	r2, r0
   8acd8:	fa1f fe81 	uxth.w	lr, r1
   8acdc:	fb05 ee02 	mla	lr, r5, r2, lr
   8ace0:	0c00      	lsrs	r0, r0, #16
   8ace2:	0c0a      	lsrs	r2, r1, #16
   8ace4:	fb05 2200 	mla	r2, r5, r0, r2
   8ace8:	4473      	add	r3, lr
   8acea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8acee:	b29b      	uxth	r3, r3
   8acf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8acf4:	45b4      	cmp	ip, r6
   8acf6:	f844 3b04 	str.w	r3, [r4], #4
   8acfa:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8acfe:	d8e7      	bhi.n	8acd0 <__multiply+0xa0>
   8ad00:	f849 3007 	str.w	r3, [r9, r7]
   8ad04:	f858 0c04 	ldr.w	r0, [r8, #-4]
   8ad08:	0c00      	lsrs	r0, r0, #16
   8ad0a:	d0d5      	beq.n	8acb8 <__multiply+0x88>
   8ad0c:	f8d9 3000 	ldr.w	r3, [r9]
   8ad10:	4654      	mov	r4, sl
   8ad12:	4619      	mov	r1, r3
   8ad14:	464d      	mov	r5, r9
   8ad16:	2200      	movs	r2, #0
   8ad18:	8826      	ldrh	r6, [r4, #0]
   8ad1a:	0c09      	lsrs	r1, r1, #16
   8ad1c:	fb00 1106 	mla	r1, r0, r6, r1
   8ad20:	b29b      	uxth	r3, r3
   8ad22:	440a      	add	r2, r1
   8ad24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8ad28:	f845 3b04 	str.w	r3, [r5], #4
   8ad2c:	f854 6b04 	ldr.w	r6, [r4], #4
   8ad30:	6829      	ldr	r1, [r5, #0]
   8ad32:	0c36      	lsrs	r6, r6, #16
   8ad34:	b28b      	uxth	r3, r1
   8ad36:	fb00 3306 	mla	r3, r0, r6, r3
   8ad3a:	45a4      	cmp	ip, r4
   8ad3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8ad40:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8ad44:	d8e8      	bhi.n	8ad18 <__multiply+0xe8>
   8ad46:	45c3      	cmp	fp, r8
   8ad48:	f849 3007 	str.w	r3, [r9, r7]
   8ad4c:	f109 0904 	add.w	r9, r9, #4
   8ad50:	d8b6      	bhi.n	8acc0 <__multiply+0x90>
   8ad52:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8ad56:	2f00      	cmp	r7, #0
   8ad58:	dc02      	bgt.n	8ad60 <__multiply+0x130>
   8ad5a:	e005      	b.n	8ad68 <__multiply+0x138>
   8ad5c:	3f01      	subs	r7, #1
   8ad5e:	d003      	beq.n	8ad68 <__multiply+0x138>
   8ad60:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8ad64:	2b00      	cmp	r3, #0
   8ad66:	d0f9      	beq.n	8ad5c <__multiply+0x12c>
   8ad68:	9b01      	ldr	r3, [sp, #4]
   8ad6a:	4618      	mov	r0, r3
   8ad6c:	611f      	str	r7, [r3, #16]
   8ad6e:	b005      	add	sp, #20
   8ad70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad74:	4602      	mov	r2, r0
   8ad76:	f240 115d 	movw	r1, #349	; 0x15d
   8ad7a:	4b02      	ldr	r3, [pc, #8]	; (8ad84 <__multiply+0x154>)
   8ad7c:	4802      	ldr	r0, [pc, #8]	; (8ad88 <__multiply+0x158>)
   8ad7e:	f000 fddb 	bl	8b938 <__assert_func>
   8ad82:	bf00      	nop
   8ad84:	0008ca50 	.word	0x0008ca50
   8ad88:	0008caf4 	.word	0x0008caf4

0008ad8c <__pow5mult>:
   8ad8c:	f012 0303 	ands.w	r3, r2, #3
   8ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ad94:	4614      	mov	r4, r2
   8ad96:	4607      	mov	r7, r0
   8ad98:	d12e      	bne.n	8adf8 <__pow5mult+0x6c>
   8ad9a:	460e      	mov	r6, r1
   8ad9c:	10a4      	asrs	r4, r4, #2
   8ad9e:	d01c      	beq.n	8adda <__pow5mult+0x4e>
   8ada0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8ada2:	b395      	cbz	r5, 8ae0a <__pow5mult+0x7e>
   8ada4:	07e3      	lsls	r3, r4, #31
   8ada6:	f04f 0800 	mov.w	r8, #0
   8adaa:	d406      	bmi.n	8adba <__pow5mult+0x2e>
   8adac:	1064      	asrs	r4, r4, #1
   8adae:	d014      	beq.n	8adda <__pow5mult+0x4e>
   8adb0:	6828      	ldr	r0, [r5, #0]
   8adb2:	b1a8      	cbz	r0, 8ade0 <__pow5mult+0x54>
   8adb4:	4605      	mov	r5, r0
   8adb6:	07e3      	lsls	r3, r4, #31
   8adb8:	d5f8      	bpl.n	8adac <__pow5mult+0x20>
   8adba:	462a      	mov	r2, r5
   8adbc:	4631      	mov	r1, r6
   8adbe:	4638      	mov	r0, r7
   8adc0:	f7ff ff36 	bl	8ac30 <__multiply>
   8adc4:	b1b6      	cbz	r6, 8adf4 <__pow5mult+0x68>
   8adc6:	6871      	ldr	r1, [r6, #4]
   8adc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8adca:	1064      	asrs	r4, r4, #1
   8adcc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8add0:	6032      	str	r2, [r6, #0]
   8add2:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8add6:	4606      	mov	r6, r0
   8add8:	d1ea      	bne.n	8adb0 <__pow5mult+0x24>
   8adda:	4630      	mov	r0, r6
   8addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ade0:	462a      	mov	r2, r5
   8ade2:	4629      	mov	r1, r5
   8ade4:	4638      	mov	r0, r7
   8ade6:	f7ff ff23 	bl	8ac30 <__multiply>
   8adea:	6028      	str	r0, [r5, #0]
   8adec:	4605      	mov	r5, r0
   8adee:	f8c0 8000 	str.w	r8, [r0]
   8adf2:	e7e0      	b.n	8adb6 <__pow5mult+0x2a>
   8adf4:	4606      	mov	r6, r0
   8adf6:	e7d9      	b.n	8adac <__pow5mult+0x20>
   8adf8:	4a0f      	ldr	r2, [pc, #60]	; (8ae38 <__pow5mult+0xac>)
   8adfa:	3b01      	subs	r3, #1
   8adfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8ae00:	2300      	movs	r3, #0
   8ae02:	f7ff fe49 	bl	8aa98 <__multadd>
   8ae06:	4606      	mov	r6, r0
   8ae08:	e7c8      	b.n	8ad9c <__pow5mult+0x10>
   8ae0a:	2101      	movs	r1, #1
   8ae0c:	4638      	mov	r0, r7
   8ae0e:	f7ff fe13 	bl	8aa38 <_Balloc>
   8ae12:	4605      	mov	r5, r0
   8ae14:	b140      	cbz	r0, 8ae28 <__pow5mult+0x9c>
   8ae16:	f240 2371 	movw	r3, #625	; 0x271
   8ae1a:	2201      	movs	r2, #1
   8ae1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8ae20:	2300      	movs	r3, #0
   8ae22:	64b8      	str	r0, [r7, #72]	; 0x48
   8ae24:	6003      	str	r3, [r0, #0]
   8ae26:	e7bd      	b.n	8ada4 <__pow5mult+0x18>
   8ae28:	4602      	mov	r2, r0
   8ae2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8ae2e:	4b03      	ldr	r3, [pc, #12]	; (8ae3c <__pow5mult+0xb0>)
   8ae30:	4803      	ldr	r0, [pc, #12]	; (8ae40 <__pow5mult+0xb4>)
   8ae32:	f000 fd81 	bl	8b938 <__assert_func>
   8ae36:	bf00      	nop
   8ae38:	0008cc68 	.word	0x0008cc68
   8ae3c:	0008ca50 	.word	0x0008ca50
   8ae40:	0008caf4 	.word	0x0008caf4

0008ae44 <__lshift>:
   8ae44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ae48:	460c      	mov	r4, r1
   8ae4a:	6926      	ldr	r6, [r4, #16]
   8ae4c:	68a3      	ldr	r3, [r4, #8]
   8ae4e:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8ae52:	1c75      	adds	r5, r6, #1
   8ae54:	429d      	cmp	r5, r3
   8ae56:	4690      	mov	r8, r2
   8ae58:	4607      	mov	r7, r0
   8ae5a:	6849      	ldr	r1, [r1, #4]
   8ae5c:	ea4f 1962 	mov.w	r9, r2, asr #5
   8ae60:	dd04      	ble.n	8ae6c <__lshift+0x28>
   8ae62:	005b      	lsls	r3, r3, #1
   8ae64:	429d      	cmp	r5, r3
   8ae66:	f101 0101 	add.w	r1, r1, #1
   8ae6a:	dcfa      	bgt.n	8ae62 <__lshift+0x1e>
   8ae6c:	4638      	mov	r0, r7
   8ae6e:	f7ff fde3 	bl	8aa38 <_Balloc>
   8ae72:	2800      	cmp	r0, #0
   8ae74:	d051      	beq.n	8af1a <__lshift+0xd6>
   8ae76:	f1b9 0f00 	cmp.w	r9, #0
   8ae7a:	f100 0114 	add.w	r1, r0, #20
   8ae7e:	dd0f      	ble.n	8aea0 <__lshift+0x5c>
   8ae80:	460b      	mov	r3, r1
   8ae82:	f04f 0c00 	mov.w	ip, #0
   8ae86:	f109 0205 	add.w	r2, r9, #5
   8ae8a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8ae8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   8ae92:	f843 cb04 	str.w	ip, [r3], #4
   8ae96:	4293      	cmp	r3, r2
   8ae98:	d1fb      	bne.n	8ae92 <__lshift+0x4e>
   8ae9a:	f1ae 0314 	sub.w	r3, lr, #20
   8ae9e:	4419      	add	r1, r3
   8aea0:	6922      	ldr	r2, [r4, #16]
   8aea2:	f104 0314 	add.w	r3, r4, #20
   8aea6:	f018 081f 	ands.w	r8, r8, #31
   8aeaa:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   8aeae:	d02c      	beq.n	8af0a <__lshift+0xc6>
   8aeb0:	468e      	mov	lr, r1
   8aeb2:	f04f 0a00 	mov.w	sl, #0
   8aeb6:	f1c8 0920 	rsb	r9, r8, #32
   8aeba:	681a      	ldr	r2, [r3, #0]
   8aebc:	fa02 f208 	lsl.w	r2, r2, r8
   8aec0:	ea42 020a 	orr.w	r2, r2, sl
   8aec4:	f84e 2b04 	str.w	r2, [lr], #4
   8aec8:	f853 2b04 	ldr.w	r2, [r3], #4
   8aecc:	459c      	cmp	ip, r3
   8aece:	fa22 fa09 	lsr.w	sl, r2, r9
   8aed2:	d8f2      	bhi.n	8aeba <__lshift+0x76>
   8aed4:	ebac 0304 	sub.w	r3, ip, r4
   8aed8:	3b15      	subs	r3, #21
   8aeda:	f023 0303 	bic.w	r3, r3, #3
   8aede:	3304      	adds	r3, #4
   8aee0:	f104 0215 	add.w	r2, r4, #21
   8aee4:	4594      	cmp	ip, r2
   8aee6:	bf38      	it	cc
   8aee8:	2304      	movcc	r3, #4
   8aeea:	f1ba 0f00 	cmp.w	sl, #0
   8aeee:	bf18      	it	ne
   8aef0:	462e      	movne	r6, r5
   8aef2:	f841 a003 	str.w	sl, [r1, r3]
   8aef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8aef8:	6862      	ldr	r2, [r4, #4]
   8aefa:	6106      	str	r6, [r0, #16]
   8aefc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8af00:	6021      	str	r1, [r4, #0]
   8af02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8af0a:	3904      	subs	r1, #4
   8af0c:	f853 2b04 	ldr.w	r2, [r3], #4
   8af10:	459c      	cmp	ip, r3
   8af12:	f841 2f04 	str.w	r2, [r1, #4]!
   8af16:	d8f9      	bhi.n	8af0c <__lshift+0xc8>
   8af18:	e7ed      	b.n	8aef6 <__lshift+0xb2>
   8af1a:	4602      	mov	r2, r0
   8af1c:	f240 11d9 	movw	r1, #473	; 0x1d9
   8af20:	4b01      	ldr	r3, [pc, #4]	; (8af28 <__lshift+0xe4>)
   8af22:	4802      	ldr	r0, [pc, #8]	; (8af2c <__lshift+0xe8>)
   8af24:	f000 fd08 	bl	8b938 <__assert_func>
   8af28:	0008ca50 	.word	0x0008ca50
   8af2c:	0008caf4 	.word	0x0008caf4

0008af30 <__mcmp>:
   8af30:	4684      	mov	ip, r0
   8af32:	690b      	ldr	r3, [r1, #16]
   8af34:	6900      	ldr	r0, [r0, #16]
   8af36:	1ac0      	subs	r0, r0, r3
   8af38:	d115      	bne.n	8af66 <__mcmp+0x36>
   8af3a:	f10c 0c14 	add.w	ip, ip, #20
   8af3e:	3114      	adds	r1, #20
   8af40:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8af44:	b410      	push	{r4}
   8af46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8af4a:	e001      	b.n	8af50 <__mcmp+0x20>
   8af4c:	4594      	cmp	ip, r2
   8af4e:	d208      	bcs.n	8af62 <__mcmp+0x32>
   8af50:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8af54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8af58:	428c      	cmp	r4, r1
   8af5a:	d0f7      	beq.n	8af4c <__mcmp+0x1c>
   8af5c:	d204      	bcs.n	8af68 <__mcmp+0x38>
   8af5e:	f04f 30ff 	mov.w	r0, #4294967295
   8af62:	bc10      	pop	{r4}
   8af64:	4770      	bx	lr
   8af66:	4770      	bx	lr
   8af68:	2001      	movs	r0, #1
   8af6a:	bc10      	pop	{r4}
   8af6c:	4770      	bx	lr
   8af6e:	bf00      	nop

0008af70 <__mdiff>:
   8af70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8af74:	690c      	ldr	r4, [r1, #16]
   8af76:	6913      	ldr	r3, [r2, #16]
   8af78:	4689      	mov	r9, r1
   8af7a:	1ae4      	subs	r4, r4, r3
   8af7c:	2c00      	cmp	r4, #0
   8af7e:	4617      	mov	r7, r2
   8af80:	d17d      	bne.n	8b07e <__mdiff+0x10e>
   8af82:	f101 0614 	add.w	r6, r1, #20
   8af86:	3214      	adds	r2, #20
   8af88:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8af8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   8af90:	e001      	b.n	8af96 <__mdiff+0x26>
   8af92:	429e      	cmp	r6, r3
   8af94:	d276      	bcs.n	8b084 <__mdiff+0x114>
   8af96:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8af9a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8af9e:	428d      	cmp	r5, r1
   8afa0:	d0f7      	beq.n	8af92 <__mdiff+0x22>
   8afa2:	d367      	bcc.n	8b074 <__mdiff+0x104>
   8afa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8afa8:	f7ff fd46 	bl	8aa38 <_Balloc>
   8afac:	2800      	cmp	r0, #0
   8afae:	d073      	beq.n	8b098 <__mdiff+0x128>
   8afb0:	f8d9 5010 	ldr.w	r5, [r9, #16]
   8afb4:	60c4      	str	r4, [r0, #12]
   8afb6:	f100 0414 	add.w	r4, r0, #20
   8afba:	4626      	mov	r6, r4
   8afbc:	f04f 0a00 	mov.w	sl, #0
   8afc0:	693b      	ldr	r3, [r7, #16]
   8afc2:	f109 0814 	add.w	r8, r9, #20
   8afc6:	f107 0e14 	add.w	lr, r7, #20
   8afca:	f109 0c10 	add.w	ip, r9, #16
   8afce:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8afd2:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8afd6:	f85c bf04 	ldr.w	fp, [ip, #4]!
   8afda:	f85e 1b04 	ldr.w	r1, [lr], #4
   8afde:	fa1f f38b 	uxth.w	r3, fp
   8afe2:	4453      	add	r3, sl
   8afe4:	fa1f fa81 	uxth.w	sl, r1
   8afe8:	0c09      	lsrs	r1, r1, #16
   8afea:	eba3 030a 	sub.w	r3, r3, sl
   8afee:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8aff2:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8aff6:	b29b      	uxth	r3, r3
   8aff8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8affc:	45f1      	cmp	r9, lr
   8affe:	f846 3b04 	str.w	r3, [r6], #4
   8b002:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8b006:	d8e6      	bhi.n	8afd6 <__mdiff+0x66>
   8b008:	eba9 0107 	sub.w	r1, r9, r7
   8b00c:	3915      	subs	r1, #21
   8b00e:	3715      	adds	r7, #21
   8b010:	45b9      	cmp	r9, r7
   8b012:	f021 0603 	bic.w	r6, r1, #3
   8b016:	f106 0604 	add.w	r6, r6, #4
   8b01a:	bf38      	it	cc
   8b01c:	2604      	movcc	r6, #4
   8b01e:	f021 0103 	bic.w	r1, r1, #3
   8b022:	bf38      	it	cc
   8b024:	2100      	movcc	r1, #0
   8b026:	44b0      	add	r8, r6
   8b028:	4542      	cmp	r2, r8
   8b02a:	4426      	add	r6, r4
   8b02c:	440c      	add	r4, r1
   8b02e:	d918      	bls.n	8b062 <__mdiff+0xf2>
   8b030:	4637      	mov	r7, r6
   8b032:	4644      	mov	r4, r8
   8b034:	f854 1b04 	ldr.w	r1, [r4], #4
   8b038:	b28b      	uxth	r3, r1
   8b03a:	4453      	add	r3, sl
   8b03c:	ea4f 4a23 	mov.w	sl, r3, asr #16
   8b040:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8b044:	b29b      	uxth	r3, r3
   8b046:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8b04a:	42a2      	cmp	r2, r4
   8b04c:	f847 3b04 	str.w	r3, [r7], #4
   8b050:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8b054:	d8ee      	bhi.n	8b034 <__mdiff+0xc4>
   8b056:	1e54      	subs	r4, r2, #1
   8b058:	eba4 0408 	sub.w	r4, r4, r8
   8b05c:	f024 0403 	bic.w	r4, r4, #3
   8b060:	4434      	add	r4, r6
   8b062:	b923      	cbnz	r3, 8b06e <__mdiff+0xfe>
   8b064:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8b068:	3d01      	subs	r5, #1
   8b06a:	2b00      	cmp	r3, #0
   8b06c:	d0fa      	beq.n	8b064 <__mdiff+0xf4>
   8b06e:	6105      	str	r5, [r0, #16]
   8b070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b074:	464b      	mov	r3, r9
   8b076:	2401      	movs	r4, #1
   8b078:	46b9      	mov	r9, r7
   8b07a:	461f      	mov	r7, r3
   8b07c:	e792      	b.n	8afa4 <__mdiff+0x34>
   8b07e:	dbf9      	blt.n	8b074 <__mdiff+0x104>
   8b080:	2400      	movs	r4, #0
   8b082:	e78f      	b.n	8afa4 <__mdiff+0x34>
   8b084:	2100      	movs	r1, #0
   8b086:	f7ff fcd7 	bl	8aa38 <_Balloc>
   8b08a:	b160      	cbz	r0, 8b0a6 <__mdiff+0x136>
   8b08c:	2201      	movs	r2, #1
   8b08e:	2300      	movs	r3, #0
   8b090:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b098:	4602      	mov	r2, r0
   8b09a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8b09e:	4b05      	ldr	r3, [pc, #20]	; (8b0b4 <__mdiff+0x144>)
   8b0a0:	4805      	ldr	r0, [pc, #20]	; (8b0b8 <__mdiff+0x148>)
   8b0a2:	f000 fc49 	bl	8b938 <__assert_func>
   8b0a6:	4602      	mov	r2, r0
   8b0a8:	f240 2132 	movw	r1, #562	; 0x232
   8b0ac:	4b01      	ldr	r3, [pc, #4]	; (8b0b4 <__mdiff+0x144>)
   8b0ae:	4802      	ldr	r0, [pc, #8]	; (8b0b8 <__mdiff+0x148>)
   8b0b0:	f000 fc42 	bl	8b938 <__assert_func>
   8b0b4:	0008ca50 	.word	0x0008ca50
   8b0b8:	0008caf4 	.word	0x0008caf4

0008b0bc <__d2b>:
   8b0bc:	b570      	push	{r4, r5, r6, lr}
   8b0be:	2101      	movs	r1, #1
   8b0c0:	b082      	sub	sp, #8
   8b0c2:	4616      	mov	r6, r2
   8b0c4:	461d      	mov	r5, r3
   8b0c6:	f7ff fcb7 	bl	8aa38 <_Balloc>
   8b0ca:	4604      	mov	r4, r0
   8b0cc:	2800      	cmp	r0, #0
   8b0ce:	d04c      	beq.n	8b16a <__d2b+0xae>
   8b0d0:	462b      	mov	r3, r5
   8b0d2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8b0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8b0da:	b10d      	cbz	r5, 8b0e0 <__d2b+0x24>
   8b0dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b0e0:	2e00      	cmp	r6, #0
   8b0e2:	9301      	str	r3, [sp, #4]
   8b0e4:	d022      	beq.n	8b12c <__d2b+0x70>
   8b0e6:	4668      	mov	r0, sp
   8b0e8:	9600      	str	r6, [sp, #0]
   8b0ea:	f7ff fd47 	bl	8ab7c <__lo0bits>
   8b0ee:	2800      	cmp	r0, #0
   8b0f0:	d037      	beq.n	8b162 <__d2b+0xa6>
   8b0f2:	9b01      	ldr	r3, [sp, #4]
   8b0f4:	9900      	ldr	r1, [sp, #0]
   8b0f6:	f1c0 0220 	rsb	r2, r0, #32
   8b0fa:	fa03 f202 	lsl.w	r2, r3, r2
   8b0fe:	430a      	orrs	r2, r1
   8b100:	40c3      	lsrs	r3, r0
   8b102:	9301      	str	r3, [sp, #4]
   8b104:	6162      	str	r2, [r4, #20]
   8b106:	2b00      	cmp	r3, #0
   8b108:	bf14      	ite	ne
   8b10a:	2102      	movne	r1, #2
   8b10c:	2101      	moveq	r1, #1
   8b10e:	61a3      	str	r3, [r4, #24]
   8b110:	6121      	str	r1, [r4, #16]
   8b112:	b1b5      	cbz	r5, 8b142 <__d2b+0x86>
   8b114:	9b06      	ldr	r3, [sp, #24]
   8b116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   8b11a:	4405      	add	r5, r0
   8b11c:	601d      	str	r5, [r3, #0]
   8b11e:	9b07      	ldr	r3, [sp, #28]
   8b120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b124:	6018      	str	r0, [r3, #0]
   8b126:	4620      	mov	r0, r4
   8b128:	b002      	add	sp, #8
   8b12a:	bd70      	pop	{r4, r5, r6, pc}
   8b12c:	a801      	add	r0, sp, #4
   8b12e:	f7ff fd25 	bl	8ab7c <__lo0bits>
   8b132:	2301      	movs	r3, #1
   8b134:	9a01      	ldr	r2, [sp, #4]
   8b136:	4619      	mov	r1, r3
   8b138:	6162      	str	r2, [r4, #20]
   8b13a:	3020      	adds	r0, #32
   8b13c:	6123      	str	r3, [r4, #16]
   8b13e:	2d00      	cmp	r5, #0
   8b140:	d1e8      	bne.n	8b114 <__d2b+0x58>
   8b142:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8b146:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   8b14a:	6910      	ldr	r0, [r2, #16]
   8b14c:	9a06      	ldr	r2, [sp, #24]
   8b14e:	6013      	str	r3, [r2, #0]
   8b150:	f7ff fcf4 	bl	8ab3c <__hi0bits>
   8b154:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8b158:	4620      	mov	r0, r4
   8b15a:	9b07      	ldr	r3, [sp, #28]
   8b15c:	6019      	str	r1, [r3, #0]
   8b15e:	b002      	add	sp, #8
   8b160:	bd70      	pop	{r4, r5, r6, pc}
   8b162:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b166:	6162      	str	r2, [r4, #20]
   8b168:	e7cd      	b.n	8b106 <__d2b+0x4a>
   8b16a:	4602      	mov	r2, r0
   8b16c:	f240 310a 	movw	r1, #778	; 0x30a
   8b170:	4b01      	ldr	r3, [pc, #4]	; (8b178 <__d2b+0xbc>)
   8b172:	4802      	ldr	r0, [pc, #8]	; (8b17c <__d2b+0xc0>)
   8b174:	f000 fbe0 	bl	8b938 <__assert_func>
   8b178:	0008ca50 	.word	0x0008ca50
   8b17c:	0008caf4 	.word	0x0008caf4

0008b180 <_realloc_r>:
   8b180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b184:	4616      	mov	r6, r2
   8b186:	2900      	cmp	r1, #0
   8b188:	f000 8098 	beq.w	8b2bc <_realloc_r+0x13c>
   8b18c:	f106 050b 	add.w	r5, r6, #11
   8b190:	4680      	mov	r8, r0
   8b192:	460c      	mov	r4, r1
   8b194:	f7ff fc44 	bl	8aa20 <__malloc_lock>
   8b198:	2d16      	cmp	r5, #22
   8b19a:	d85d      	bhi.n	8b258 <_realloc_r+0xd8>
   8b19c:	2510      	movs	r5, #16
   8b19e:	462a      	mov	r2, r5
   8b1a0:	42ae      	cmp	r6, r5
   8b1a2:	d85e      	bhi.n	8b262 <_realloc_r+0xe2>
   8b1a4:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b1a8:	f1a4 0908 	sub.w	r9, r4, #8
   8b1ac:	f021 0703 	bic.w	r7, r1, #3
   8b1b0:	4297      	cmp	r7, r2
   8b1b2:	da62      	bge.n	8b27a <_realloc_r+0xfa>
   8b1b4:	4bbc      	ldr	r3, [pc, #752]	; (8b4a8 <_realloc_r+0x328>)
   8b1b6:	eb09 0007 	add.w	r0, r9, r7
   8b1ba:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8b1be:	4584      	cmp	ip, r0
   8b1c0:	f000 8097 	beq.w	8b2f2 <_realloc_r+0x172>
   8b1c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8b1c8:	f02c 0301 	bic.w	r3, ip, #1
   8b1cc:	4403      	add	r3, r0
   8b1ce:	685b      	ldr	r3, [r3, #4]
   8b1d0:	07db      	lsls	r3, r3, #31
   8b1d2:	d468      	bmi.n	8b2a6 <_realloc_r+0x126>
   8b1d4:	f02c 0c03 	bic.w	ip, ip, #3
   8b1d8:	eb07 030c 	add.w	r3, r7, ip
   8b1dc:	4293      	cmp	r3, r2
   8b1de:	da47      	bge.n	8b270 <_realloc_r+0xf0>
   8b1e0:	07cb      	lsls	r3, r1, #31
   8b1e2:	d410      	bmi.n	8b206 <_realloc_r+0x86>
   8b1e4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b1e8:	eba9 0a03 	sub.w	sl, r9, r3
   8b1ec:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b1f0:	f023 0103 	bic.w	r1, r3, #3
   8b1f4:	448c      	add	ip, r1
   8b1f6:	44bc      	add	ip, r7
   8b1f8:	4594      	cmp	ip, r2
   8b1fa:	f280 8111 	bge.w	8b420 <_realloc_r+0x2a0>
   8b1fe:	187b      	adds	r3, r7, r1
   8b200:	4293      	cmp	r3, r2
   8b202:	f280 80e8 	bge.w	8b3d6 <_realloc_r+0x256>
   8b206:	4631      	mov	r1, r6
   8b208:	4640      	mov	r0, r8
   8b20a:	f7ff f883 	bl	8a314 <_malloc_r>
   8b20e:	4606      	mov	r6, r0
   8b210:	b1e0      	cbz	r0, 8b24c <_realloc_r+0xcc>
   8b212:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b216:	f1a0 0208 	sub.w	r2, r0, #8
   8b21a:	f023 0301 	bic.w	r3, r3, #1
   8b21e:	444b      	add	r3, r9
   8b220:	4293      	cmp	r3, r2
   8b222:	f000 80d2 	beq.w	8b3ca <_realloc_r+0x24a>
   8b226:	1f3a      	subs	r2, r7, #4
   8b228:	2a24      	cmp	r2, #36	; 0x24
   8b22a:	f200 80f5 	bhi.w	8b418 <_realloc_r+0x298>
   8b22e:	2a13      	cmp	r2, #19
   8b230:	f200 80ac 	bhi.w	8b38c <_realloc_r+0x20c>
   8b234:	4603      	mov	r3, r0
   8b236:	4622      	mov	r2, r4
   8b238:	6811      	ldr	r1, [r2, #0]
   8b23a:	6019      	str	r1, [r3, #0]
   8b23c:	6851      	ldr	r1, [r2, #4]
   8b23e:	6059      	str	r1, [r3, #4]
   8b240:	6892      	ldr	r2, [r2, #8]
   8b242:	609a      	str	r2, [r3, #8]
   8b244:	4621      	mov	r1, r4
   8b246:	4640      	mov	r0, r8
   8b248:	f7fe fd0e 	bl	89c68 <_free_r>
   8b24c:	4640      	mov	r0, r8
   8b24e:	f7ff fbed 	bl	8aa2c <__malloc_unlock>
   8b252:	4630      	mov	r0, r6
   8b254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b258:	f025 0507 	bic.w	r5, r5, #7
   8b25c:	2d00      	cmp	r5, #0
   8b25e:	462a      	mov	r2, r5
   8b260:	da9e      	bge.n	8b1a0 <_realloc_r+0x20>
   8b262:	230c      	movs	r3, #12
   8b264:	2600      	movs	r6, #0
   8b266:	f8c8 3000 	str.w	r3, [r8]
   8b26a:	4630      	mov	r0, r6
   8b26c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b270:	461f      	mov	r7, r3
   8b272:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8b276:	60d3      	str	r3, [r2, #12]
   8b278:	609a      	str	r2, [r3, #8]
   8b27a:	1b7b      	subs	r3, r7, r5
   8b27c:	2b0f      	cmp	r3, #15
   8b27e:	d822      	bhi.n	8b2c6 <_realloc_r+0x146>
   8b280:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8b284:	f003 0301 	and.w	r3, r3, #1
   8b288:	433b      	orrs	r3, r7
   8b28a:	f8c9 3004 	str.w	r3, [r9, #4]
   8b28e:	444f      	add	r7, r9
   8b290:	687b      	ldr	r3, [r7, #4]
   8b292:	f043 0301 	orr.w	r3, r3, #1
   8b296:	607b      	str	r3, [r7, #4]
   8b298:	4626      	mov	r6, r4
   8b29a:	4640      	mov	r0, r8
   8b29c:	f7ff fbc6 	bl	8aa2c <__malloc_unlock>
   8b2a0:	4630      	mov	r0, r6
   8b2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b2a6:	07c9      	lsls	r1, r1, #31
   8b2a8:	d4ad      	bmi.n	8b206 <_realloc_r+0x86>
   8b2aa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b2ae:	eba9 0a03 	sub.w	sl, r9, r3
   8b2b2:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b2b6:	f021 0103 	bic.w	r1, r1, #3
   8b2ba:	e7a0      	b.n	8b1fe <_realloc_r+0x7e>
   8b2bc:	4611      	mov	r1, r2
   8b2be:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2c2:	f7ff b827 	b.w	8a314 <_malloc_r>
   8b2c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8b2ca:	f043 0301 	orr.w	r3, r3, #1
   8b2ce:	f001 0101 	and.w	r1, r1, #1
   8b2d2:	4329      	orrs	r1, r5
   8b2d4:	f8c9 1004 	str.w	r1, [r9, #4]
   8b2d8:	eb09 0105 	add.w	r1, r9, r5
   8b2dc:	604b      	str	r3, [r1, #4]
   8b2de:	444f      	add	r7, r9
   8b2e0:	687b      	ldr	r3, [r7, #4]
   8b2e2:	4640      	mov	r0, r8
   8b2e4:	f043 0301 	orr.w	r3, r3, #1
   8b2e8:	3108      	adds	r1, #8
   8b2ea:	607b      	str	r3, [r7, #4]
   8b2ec:	f7fe fcbc 	bl	89c68 <_free_r>
   8b2f0:	e7d2      	b.n	8b298 <_realloc_r+0x118>
   8b2f2:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8b2f6:	f020 0b03 	bic.w	fp, r0, #3
   8b2fa:	eb07 0c0b 	add.w	ip, r7, fp
   8b2fe:	f105 0010 	add.w	r0, r5, #16
   8b302:	4584      	cmp	ip, r0
   8b304:	da4d      	bge.n	8b3a2 <_realloc_r+0x222>
   8b306:	07c9      	lsls	r1, r1, #31
   8b308:	f53f af7d 	bmi.w	8b206 <_realloc_r+0x86>
   8b30c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b310:	eba9 0a01 	sub.w	sl, r9, r1
   8b314:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b318:	f021 0103 	bic.w	r1, r1, #3
   8b31c:	448b      	add	fp, r1
   8b31e:	44bb      	add	fp, r7
   8b320:	4558      	cmp	r0, fp
   8b322:	f73f af6c 	bgt.w	8b1fe <_realloc_r+0x7e>
   8b326:	4656      	mov	r6, sl
   8b328:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b32c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b330:	1f3a      	subs	r2, r7, #4
   8b332:	2a24      	cmp	r2, #36	; 0x24
   8b334:	60c1      	str	r1, [r0, #12]
   8b336:	6088      	str	r0, [r1, #8]
   8b338:	f200 80db 	bhi.w	8b4f2 <_realloc_r+0x372>
   8b33c:	2a13      	cmp	r2, #19
   8b33e:	f240 80d6 	bls.w	8b4ee <_realloc_r+0x36e>
   8b342:	6821      	ldr	r1, [r4, #0]
   8b344:	2a1b      	cmp	r2, #27
   8b346:	f8ca 1008 	str.w	r1, [sl, #8]
   8b34a:	6861      	ldr	r1, [r4, #4]
   8b34c:	f8ca 100c 	str.w	r1, [sl, #12]
   8b350:	f200 80e0 	bhi.w	8b514 <_realloc_r+0x394>
   8b354:	3408      	adds	r4, #8
   8b356:	f10a 0210 	add.w	r2, sl, #16
   8b35a:	6821      	ldr	r1, [r4, #0]
   8b35c:	6011      	str	r1, [r2, #0]
   8b35e:	6861      	ldr	r1, [r4, #4]
   8b360:	6051      	str	r1, [r2, #4]
   8b362:	68a1      	ldr	r1, [r4, #8]
   8b364:	6091      	str	r1, [r2, #8]
   8b366:	ebab 0205 	sub.w	r2, fp, r5
   8b36a:	eb0a 0105 	add.w	r1, sl, r5
   8b36e:	f042 0201 	orr.w	r2, r2, #1
   8b372:	6099      	str	r1, [r3, #8]
   8b374:	604a      	str	r2, [r1, #4]
   8b376:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b37a:	4640      	mov	r0, r8
   8b37c:	f003 0301 	and.w	r3, r3, #1
   8b380:	431d      	orrs	r5, r3
   8b382:	f8ca 5004 	str.w	r5, [sl, #4]
   8b386:	f7ff fb51 	bl	8aa2c <__malloc_unlock>
   8b38a:	e76e      	b.n	8b26a <_realloc_r+0xea>
   8b38c:	6823      	ldr	r3, [r4, #0]
   8b38e:	2a1b      	cmp	r2, #27
   8b390:	6003      	str	r3, [r0, #0]
   8b392:	6863      	ldr	r3, [r4, #4]
   8b394:	6043      	str	r3, [r0, #4]
   8b396:	d868      	bhi.n	8b46a <_realloc_r+0x2ea>
   8b398:	f104 0208 	add.w	r2, r4, #8
   8b39c:	f100 0308 	add.w	r3, r0, #8
   8b3a0:	e74a      	b.n	8b238 <_realloc_r+0xb8>
   8b3a2:	eb09 0205 	add.w	r2, r9, r5
   8b3a6:	ebac 0c05 	sub.w	ip, ip, r5
   8b3aa:	609a      	str	r2, [r3, #8]
   8b3ac:	f04c 0301 	orr.w	r3, ip, #1
   8b3b0:	6053      	str	r3, [r2, #4]
   8b3b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b3b6:	4640      	mov	r0, r8
   8b3b8:	f003 0301 	and.w	r3, r3, #1
   8b3bc:	431d      	orrs	r5, r3
   8b3be:	f844 5c04 	str.w	r5, [r4, #-4]
   8b3c2:	f7ff fb33 	bl	8aa2c <__malloc_unlock>
   8b3c6:	4626      	mov	r6, r4
   8b3c8:	e74f      	b.n	8b26a <_realloc_r+0xea>
   8b3ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b3ce:	f023 0303 	bic.w	r3, r3, #3
   8b3d2:	441f      	add	r7, r3
   8b3d4:	e751      	b.n	8b27a <_realloc_r+0xfa>
   8b3d6:	4656      	mov	r6, sl
   8b3d8:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b3dc:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b3e0:	1f3a      	subs	r2, r7, #4
   8b3e2:	2a24      	cmp	r2, #36	; 0x24
   8b3e4:	60c1      	str	r1, [r0, #12]
   8b3e6:	6088      	str	r0, [r1, #8]
   8b3e8:	d84c      	bhi.n	8b484 <_realloc_r+0x304>
   8b3ea:	2a13      	cmp	r2, #19
   8b3ec:	d948      	bls.n	8b480 <_realloc_r+0x300>
   8b3ee:	6821      	ldr	r1, [r4, #0]
   8b3f0:	2a1b      	cmp	r2, #27
   8b3f2:	f8ca 1008 	str.w	r1, [sl, #8]
   8b3f6:	6861      	ldr	r1, [r4, #4]
   8b3f8:	f8ca 100c 	str.w	r1, [sl, #12]
   8b3fc:	d856      	bhi.n	8b4ac <_realloc_r+0x32c>
   8b3fe:	3408      	adds	r4, #8
   8b400:	f10a 0210 	add.w	r2, sl, #16
   8b404:	461f      	mov	r7, r3
   8b406:	6823      	ldr	r3, [r4, #0]
   8b408:	46d1      	mov	r9, sl
   8b40a:	6013      	str	r3, [r2, #0]
   8b40c:	6863      	ldr	r3, [r4, #4]
   8b40e:	6053      	str	r3, [r2, #4]
   8b410:	68a3      	ldr	r3, [r4, #8]
   8b412:	4634      	mov	r4, r6
   8b414:	6093      	str	r3, [r2, #8]
   8b416:	e730      	b.n	8b27a <_realloc_r+0xfa>
   8b418:	4621      	mov	r1, r4
   8b41a:	f7ff fa85 	bl	8a928 <memmove>
   8b41e:	e711      	b.n	8b244 <_realloc_r+0xc4>
   8b420:	4656      	mov	r6, sl
   8b422:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b426:	60cb      	str	r3, [r1, #12]
   8b428:	6099      	str	r1, [r3, #8]
   8b42a:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b42e:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b432:	1f3a      	subs	r2, r7, #4
   8b434:	2a24      	cmp	r2, #36	; 0x24
   8b436:	60cb      	str	r3, [r1, #12]
   8b438:	6099      	str	r1, [r3, #8]
   8b43a:	d82d      	bhi.n	8b498 <_realloc_r+0x318>
   8b43c:	2a13      	cmp	r2, #19
   8b43e:	d929      	bls.n	8b494 <_realloc_r+0x314>
   8b440:	6823      	ldr	r3, [r4, #0]
   8b442:	2a1b      	cmp	r2, #27
   8b444:	f8ca 3008 	str.w	r3, [sl, #8]
   8b448:	6863      	ldr	r3, [r4, #4]
   8b44a:	f8ca 300c 	str.w	r3, [sl, #12]
   8b44e:	d842      	bhi.n	8b4d6 <_realloc_r+0x356>
   8b450:	3408      	adds	r4, #8
   8b452:	f10a 0310 	add.w	r3, sl, #16
   8b456:	6822      	ldr	r2, [r4, #0]
   8b458:	4667      	mov	r7, ip
   8b45a:	601a      	str	r2, [r3, #0]
   8b45c:	6862      	ldr	r2, [r4, #4]
   8b45e:	46d1      	mov	r9, sl
   8b460:	605a      	str	r2, [r3, #4]
   8b462:	68a2      	ldr	r2, [r4, #8]
   8b464:	4634      	mov	r4, r6
   8b466:	609a      	str	r2, [r3, #8]
   8b468:	e707      	b.n	8b27a <_realloc_r+0xfa>
   8b46a:	68a3      	ldr	r3, [r4, #8]
   8b46c:	2a24      	cmp	r2, #36	; 0x24
   8b46e:	6083      	str	r3, [r0, #8]
   8b470:	68e3      	ldr	r3, [r4, #12]
   8b472:	60c3      	str	r3, [r0, #12]
   8b474:	d026      	beq.n	8b4c4 <_realloc_r+0x344>
   8b476:	f104 0210 	add.w	r2, r4, #16
   8b47a:	f100 0310 	add.w	r3, r0, #16
   8b47e:	e6db      	b.n	8b238 <_realloc_r+0xb8>
   8b480:	4632      	mov	r2, r6
   8b482:	e7bf      	b.n	8b404 <_realloc_r+0x284>
   8b484:	4621      	mov	r1, r4
   8b486:	4630      	mov	r0, r6
   8b488:	461f      	mov	r7, r3
   8b48a:	46d1      	mov	r9, sl
   8b48c:	f7ff fa4c 	bl	8a928 <memmove>
   8b490:	4634      	mov	r4, r6
   8b492:	e6f2      	b.n	8b27a <_realloc_r+0xfa>
   8b494:	4633      	mov	r3, r6
   8b496:	e7de      	b.n	8b456 <_realloc_r+0x2d6>
   8b498:	4621      	mov	r1, r4
   8b49a:	4630      	mov	r0, r6
   8b49c:	4667      	mov	r7, ip
   8b49e:	46d1      	mov	r9, sl
   8b4a0:	f7ff fa42 	bl	8a928 <memmove>
   8b4a4:	4634      	mov	r4, r6
   8b4a6:	e6e8      	b.n	8b27a <_realloc_r+0xfa>
   8b4a8:	20000a20 	.word	0x20000a20
   8b4ac:	68a1      	ldr	r1, [r4, #8]
   8b4ae:	2a24      	cmp	r2, #36	; 0x24
   8b4b0:	f8ca 1010 	str.w	r1, [sl, #16]
   8b4b4:	68e1      	ldr	r1, [r4, #12]
   8b4b6:	f8ca 1014 	str.w	r1, [sl, #20]
   8b4ba:	d020      	beq.n	8b4fe <_realloc_r+0x37e>
   8b4bc:	3410      	adds	r4, #16
   8b4be:	f10a 0218 	add.w	r2, sl, #24
   8b4c2:	e79f      	b.n	8b404 <_realloc_r+0x284>
   8b4c4:	6923      	ldr	r3, [r4, #16]
   8b4c6:	f104 0218 	add.w	r2, r4, #24
   8b4ca:	6103      	str	r3, [r0, #16]
   8b4cc:	6963      	ldr	r3, [r4, #20]
   8b4ce:	6143      	str	r3, [r0, #20]
   8b4d0:	f100 0318 	add.w	r3, r0, #24
   8b4d4:	e6b0      	b.n	8b238 <_realloc_r+0xb8>
   8b4d6:	68a3      	ldr	r3, [r4, #8]
   8b4d8:	2a24      	cmp	r2, #36	; 0x24
   8b4da:	f8ca 3010 	str.w	r3, [sl, #16]
   8b4de:	68e3      	ldr	r3, [r4, #12]
   8b4e0:	f8ca 3014 	str.w	r3, [sl, #20]
   8b4e4:	d022      	beq.n	8b52c <_realloc_r+0x3ac>
   8b4e6:	3410      	adds	r4, #16
   8b4e8:	f10a 0318 	add.w	r3, sl, #24
   8b4ec:	e7b3      	b.n	8b456 <_realloc_r+0x2d6>
   8b4ee:	4632      	mov	r2, r6
   8b4f0:	e733      	b.n	8b35a <_realloc_r+0x1da>
   8b4f2:	4621      	mov	r1, r4
   8b4f4:	4630      	mov	r0, r6
   8b4f6:	f7ff fa17 	bl	8a928 <memmove>
   8b4fa:	4b17      	ldr	r3, [pc, #92]	; (8b558 <_realloc_r+0x3d8>)
   8b4fc:	e733      	b.n	8b366 <_realloc_r+0x1e6>
   8b4fe:	6922      	ldr	r2, [r4, #16]
   8b500:	3418      	adds	r4, #24
   8b502:	f8ca 2018 	str.w	r2, [sl, #24]
   8b506:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8b50a:	f8ca 201c 	str.w	r2, [sl, #28]
   8b50e:	f10a 0220 	add.w	r2, sl, #32
   8b512:	e777      	b.n	8b404 <_realloc_r+0x284>
   8b514:	68a1      	ldr	r1, [r4, #8]
   8b516:	2a24      	cmp	r2, #36	; 0x24
   8b518:	f8ca 1010 	str.w	r1, [sl, #16]
   8b51c:	68e1      	ldr	r1, [r4, #12]
   8b51e:	f8ca 1014 	str.w	r1, [sl, #20]
   8b522:	d00e      	beq.n	8b542 <_realloc_r+0x3c2>
   8b524:	3410      	adds	r4, #16
   8b526:	f10a 0218 	add.w	r2, sl, #24
   8b52a:	e716      	b.n	8b35a <_realloc_r+0x1da>
   8b52c:	6923      	ldr	r3, [r4, #16]
   8b52e:	3418      	adds	r4, #24
   8b530:	f8ca 3018 	str.w	r3, [sl, #24]
   8b534:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b538:	f8ca 301c 	str.w	r3, [sl, #28]
   8b53c:	f10a 0320 	add.w	r3, sl, #32
   8b540:	e789      	b.n	8b456 <_realloc_r+0x2d6>
   8b542:	6922      	ldr	r2, [r4, #16]
   8b544:	3418      	adds	r4, #24
   8b546:	f8ca 2018 	str.w	r2, [sl, #24]
   8b54a:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8b54e:	f8ca 201c 	str.w	r2, [sl, #28]
   8b552:	f10a 0220 	add.w	r2, sl, #32
   8b556:	e700      	b.n	8b35a <_realloc_r+0x1da>
   8b558:	20000a20 	.word	0x20000a20

0008b55c <frexp>:
   8b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b55e:	2700      	movs	r7, #0
   8b560:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8b5c0 <frexp+0x64>
   8b564:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8b568:	4563      	cmp	r3, ip
   8b56a:	4604      	mov	r4, r0
   8b56c:	460d      	mov	r5, r1
   8b56e:	6017      	str	r7, [r2, #0]
   8b570:	dc23      	bgt.n	8b5ba <frexp+0x5e>
   8b572:	4684      	mov	ip, r0
   8b574:	ea53 0c0c 	orrs.w	ip, r3, ip
   8b578:	d01f      	beq.n	8b5ba <frexp+0x5e>
   8b57a:	f8df c048 	ldr.w	ip, [pc, #72]	; 8b5c4 <frexp+0x68>
   8b57e:	4616      	mov	r6, r2
   8b580:	ea01 0c0c 	and.w	ip, r1, ip
   8b584:	460a      	mov	r2, r1
   8b586:	f1bc 0f00 	cmp.w	ip, #0
   8b58a:	d109      	bne.n	8b5a0 <frexp+0x44>
   8b58c:	2200      	movs	r2, #0
   8b58e:	4b0e      	ldr	r3, [pc, #56]	; (8b5c8 <frexp+0x6c>)
   8b590:	f000 fd1a 	bl	8bfc8 <__aeabi_dmul>
   8b594:	f06f 0735 	mvn.w	r7, #53	; 0x35
   8b598:	4604      	mov	r4, r0
   8b59a:	460a      	mov	r2, r1
   8b59c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8b5a0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   8b5a4:	151b      	asrs	r3, r3, #20
   8b5a6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   8b5aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8b5ae:	443b      	add	r3, r7
   8b5b0:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   8b5b4:	6033      	str	r3, [r6, #0]
   8b5b6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8b5ba:	4620      	mov	r0, r4
   8b5bc:	4629      	mov	r1, r5
   8b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b5c0:	7fefffff 	.word	0x7fefffff
   8b5c4:	7ff00000 	.word	0x7ff00000
   8b5c8:	43500000 	.word	0x43500000

0008b5cc <_sbrk_r>:
   8b5cc:	2200      	movs	r2, #0
   8b5ce:	b538      	push	{r3, r4, r5, lr}
   8b5d0:	4d06      	ldr	r5, [pc, #24]	; (8b5ec <_sbrk_r+0x20>)
   8b5d2:	4604      	mov	r4, r0
   8b5d4:	4608      	mov	r0, r1
   8b5d6:	602a      	str	r2, [r5, #0]
   8b5d8:	f7f9 feb0 	bl	8533c <_sbrk>
   8b5dc:	1c43      	adds	r3, r0, #1
   8b5de:	d000      	beq.n	8b5e2 <_sbrk_r+0x16>
   8b5e0:	bd38      	pop	{r3, r4, r5, pc}
   8b5e2:	682b      	ldr	r3, [r5, #0]
   8b5e4:	2b00      	cmp	r3, #0
   8b5e6:	d0fb      	beq.n	8b5e0 <_sbrk_r+0x14>
   8b5e8:	6023      	str	r3, [r4, #0]
   8b5ea:	bd38      	pop	{r3, r4, r5, pc}
   8b5ec:	200037fc 	.word	0x200037fc

0008b5f0 <__sread>:
   8b5f0:	b510      	push	{r4, lr}
   8b5f2:	460c      	mov	r4, r1
   8b5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b5f8:	f000 fac8 	bl	8bb8c <_read_r>
   8b5fc:	2800      	cmp	r0, #0
   8b5fe:	db03      	blt.n	8b608 <__sread+0x18>
   8b600:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8b602:	4403      	add	r3, r0
   8b604:	6523      	str	r3, [r4, #80]	; 0x50
   8b606:	bd10      	pop	{r4, pc}
   8b608:	89a3      	ldrh	r3, [r4, #12]
   8b60a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8b60e:	81a3      	strh	r3, [r4, #12]
   8b610:	bd10      	pop	{r4, pc}
   8b612:	bf00      	nop

0008b614 <__swrite>:
   8b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b618:	460c      	mov	r4, r1
   8b61a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8b61e:	461f      	mov	r7, r3
   8b620:	05cb      	lsls	r3, r1, #23
   8b622:	4605      	mov	r5, r0
   8b624:	4616      	mov	r6, r2
   8b626:	d40b      	bmi.n	8b640 <__swrite+0x2c>
   8b628:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8b62c:	81a1      	strh	r1, [r4, #12]
   8b62e:	463b      	mov	r3, r7
   8b630:	4632      	mov	r2, r6
   8b632:	4628      	mov	r0, r5
   8b634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b63c:	f000 b920 	b.w	8b880 <_write_r>
   8b640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b644:	2302      	movs	r3, #2
   8b646:	2200      	movs	r2, #0
   8b648:	f000 fa8a 	bl	8bb60 <_lseek_r>
   8b64c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8b650:	e7ea      	b.n	8b628 <__swrite+0x14>
   8b652:	bf00      	nop

0008b654 <__sseek>:
   8b654:	b510      	push	{r4, lr}
   8b656:	460c      	mov	r4, r1
   8b658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b65c:	f000 fa80 	bl	8bb60 <_lseek_r>
   8b660:	89a3      	ldrh	r3, [r4, #12]
   8b662:	1c42      	adds	r2, r0, #1
   8b664:	bf0e      	itee	eq
   8b666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8b66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8b66e:	6520      	strne	r0, [r4, #80]	; 0x50
   8b670:	81a3      	strh	r3, [r4, #12]
   8b672:	bd10      	pop	{r4, pc}

0008b674 <__sclose>:
   8b674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b678:	f000 b9ba 	b.w	8b9f0 <_close_r>

0008b67c <__ssprint_r>:
   8b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b680:	6893      	ldr	r3, [r2, #8]
   8b682:	4691      	mov	r9, r2
   8b684:	b083      	sub	sp, #12
   8b686:	2b00      	cmp	r3, #0
   8b688:	d06e      	beq.n	8b768 <__ssprint_r+0xec>
   8b68a:	6817      	ldr	r7, [r2, #0]
   8b68c:	4680      	mov	r8, r0
   8b68e:	460c      	mov	r4, r1
   8b690:	6808      	ldr	r0, [r1, #0]
   8b692:	688d      	ldr	r5, [r1, #8]
   8b694:	3708      	adds	r7, #8
   8b696:	e044      	b.n	8b722 <__ssprint_r+0xa6>
   8b698:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   8b69c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   8b6a0:	d02e      	beq.n	8b700 <__ssprint_r+0x84>
   8b6a2:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   8b6a6:	1a45      	subs	r5, r0, r1
   8b6a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8b6ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   8b6b0:	19aa      	adds	r2, r5, r6
   8b6b2:	ea4f 0a63 	mov.w	sl, r3, asr #1
   8b6b6:	1c53      	adds	r3, r2, #1
   8b6b8:	4553      	cmp	r3, sl
   8b6ba:	4652      	mov	r2, sl
   8b6bc:	bf84      	itt	hi
   8b6be:	469a      	movhi	sl, r3
   8b6c0:	4652      	movhi	r2, sl
   8b6c2:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   8b6c6:	d036      	beq.n	8b736 <__ssprint_r+0xba>
   8b6c8:	4611      	mov	r1, r2
   8b6ca:	4640      	mov	r0, r8
   8b6cc:	f7fe fe22 	bl	8a314 <_malloc_r>
   8b6d0:	2800      	cmp	r0, #0
   8b6d2:	d03a      	beq.n	8b74a <__ssprint_r+0xce>
   8b6d4:	462a      	mov	r2, r5
   8b6d6:	6921      	ldr	r1, [r4, #16]
   8b6d8:	9001      	str	r0, [sp, #4]
   8b6da:	f7fa f945 	bl	85968 <memcpy>
   8b6de:	89a2      	ldrh	r2, [r4, #12]
   8b6e0:	9b01      	ldr	r3, [sp, #4]
   8b6e2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b6e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b6ea:	81a2      	strh	r2, [r4, #12]
   8b6ec:	1958      	adds	r0, r3, r5
   8b6ee:	ebaa 0505 	sub.w	r5, sl, r5
   8b6f2:	60a5      	str	r5, [r4, #8]
   8b6f4:	f8c4 a014 	str.w	sl, [r4, #20]
   8b6f8:	4635      	mov	r5, r6
   8b6fa:	46b2      	mov	sl, r6
   8b6fc:	6123      	str	r3, [r4, #16]
   8b6fe:	6020      	str	r0, [r4, #0]
   8b700:	4659      	mov	r1, fp
   8b702:	4652      	mov	r2, sl
   8b704:	f7ff f910 	bl	8a928 <memmove>
   8b708:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8b70c:	68a1      	ldr	r1, [r4, #8]
   8b70e:	6820      	ldr	r0, [r4, #0]
   8b710:	1b4d      	subs	r5, r1, r5
   8b712:	4450      	add	r0, sl
   8b714:	1b9e      	subs	r6, r3, r6
   8b716:	60a5      	str	r5, [r4, #8]
   8b718:	6020      	str	r0, [r4, #0]
   8b71a:	f8c9 6008 	str.w	r6, [r9, #8]
   8b71e:	b31e      	cbz	r6, 8b768 <__ssprint_r+0xec>
   8b720:	3708      	adds	r7, #8
   8b722:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8b726:	2e00      	cmp	r6, #0
   8b728:	d0fa      	beq.n	8b720 <__ssprint_r+0xa4>
   8b72a:	42b5      	cmp	r5, r6
   8b72c:	46aa      	mov	sl, r5
   8b72e:	d9b3      	bls.n	8b698 <__ssprint_r+0x1c>
   8b730:	4635      	mov	r5, r6
   8b732:	46b2      	mov	sl, r6
   8b734:	e7e4      	b.n	8b700 <__ssprint_r+0x84>
   8b736:	4640      	mov	r0, r8
   8b738:	f7ff fd22 	bl	8b180 <_realloc_r>
   8b73c:	4603      	mov	r3, r0
   8b73e:	2800      	cmp	r0, #0
   8b740:	d1d4      	bne.n	8b6ec <__ssprint_r+0x70>
   8b742:	4640      	mov	r0, r8
   8b744:	6921      	ldr	r1, [r4, #16]
   8b746:	f7fe fa8f 	bl	89c68 <_free_r>
   8b74a:	230c      	movs	r3, #12
   8b74c:	2200      	movs	r2, #0
   8b74e:	f04f 30ff 	mov.w	r0, #4294967295
   8b752:	f8c8 3000 	str.w	r3, [r8]
   8b756:	89a3      	ldrh	r3, [r4, #12]
   8b758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b75c:	81a3      	strh	r3, [r4, #12]
   8b75e:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8b762:	b003      	add	sp, #12
   8b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b768:	2300      	movs	r3, #0
   8b76a:	4618      	mov	r0, r3
   8b76c:	f8c9 3004 	str.w	r3, [r9, #4]
   8b770:	b003      	add	sp, #12
   8b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b776:	bf00      	nop

0008b778 <__swbuf_r>:
   8b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b77a:	4606      	mov	r6, r0
   8b77c:	460d      	mov	r5, r1
   8b77e:	4614      	mov	r4, r2
   8b780:	b110      	cbz	r0, 8b788 <__swbuf_r+0x10>
   8b782:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b784:	2b00      	cmp	r3, #0
   8b786:	d043      	beq.n	8b810 <__swbuf_r+0x98>
   8b788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b78c:	69a3      	ldr	r3, [r4, #24]
   8b78e:	0710      	lsls	r0, r2, #28
   8b790:	60a3      	str	r3, [r4, #8]
   8b792:	b291      	uxth	r1, r2
   8b794:	d51b      	bpl.n	8b7ce <__swbuf_r+0x56>
   8b796:	6923      	ldr	r3, [r4, #16]
   8b798:	b1cb      	cbz	r3, 8b7ce <__swbuf_r+0x56>
   8b79a:	b2ed      	uxtb	r5, r5
   8b79c:	0489      	lsls	r1, r1, #18
   8b79e:	462f      	mov	r7, r5
   8b7a0:	d522      	bpl.n	8b7e8 <__swbuf_r+0x70>
   8b7a2:	6822      	ldr	r2, [r4, #0]
   8b7a4:	6961      	ldr	r1, [r4, #20]
   8b7a6:	1ad3      	subs	r3, r2, r3
   8b7a8:	4299      	cmp	r1, r3
   8b7aa:	dd29      	ble.n	8b800 <__swbuf_r+0x88>
   8b7ac:	3301      	adds	r3, #1
   8b7ae:	68a1      	ldr	r1, [r4, #8]
   8b7b0:	3901      	subs	r1, #1
   8b7b2:	60a1      	str	r1, [r4, #8]
   8b7b4:	1c51      	adds	r1, r2, #1
   8b7b6:	6021      	str	r1, [r4, #0]
   8b7b8:	7015      	strb	r5, [r2, #0]
   8b7ba:	6962      	ldr	r2, [r4, #20]
   8b7bc:	429a      	cmp	r2, r3
   8b7be:	d02a      	beq.n	8b816 <__swbuf_r+0x9e>
   8b7c0:	89a3      	ldrh	r3, [r4, #12]
   8b7c2:	07db      	lsls	r3, r3, #31
   8b7c4:	d501      	bpl.n	8b7ca <__swbuf_r+0x52>
   8b7c6:	2d0a      	cmp	r5, #10
   8b7c8:	d025      	beq.n	8b816 <__swbuf_r+0x9e>
   8b7ca:	4638      	mov	r0, r7
   8b7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b7ce:	4621      	mov	r1, r4
   8b7d0:	4630      	mov	r0, r6
   8b7d2:	f7fc ff91 	bl	886f8 <__swsetup_r>
   8b7d6:	bb20      	cbnz	r0, 8b822 <__swbuf_r+0xaa>
   8b7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b7dc:	b2ed      	uxtb	r5, r5
   8b7de:	b291      	uxth	r1, r2
   8b7e0:	0489      	lsls	r1, r1, #18
   8b7e2:	462f      	mov	r7, r5
   8b7e4:	6923      	ldr	r3, [r4, #16]
   8b7e6:	d4dc      	bmi.n	8b7a2 <__swbuf_r+0x2a>
   8b7e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b7ec:	81a2      	strh	r2, [r4, #12]
   8b7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b7f0:	6961      	ldr	r1, [r4, #20]
   8b7f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8b7f6:	6662      	str	r2, [r4, #100]	; 0x64
   8b7f8:	6822      	ldr	r2, [r4, #0]
   8b7fa:	1ad3      	subs	r3, r2, r3
   8b7fc:	4299      	cmp	r1, r3
   8b7fe:	dcd5      	bgt.n	8b7ac <__swbuf_r+0x34>
   8b800:	4621      	mov	r1, r4
   8b802:	4630      	mov	r0, r6
   8b804:	f7fe f880 	bl	89908 <_fflush_r>
   8b808:	b958      	cbnz	r0, 8b822 <__swbuf_r+0xaa>
   8b80a:	2301      	movs	r3, #1
   8b80c:	6822      	ldr	r2, [r4, #0]
   8b80e:	e7ce      	b.n	8b7ae <__swbuf_r+0x36>
   8b810:	f7fe f8ae 	bl	89970 <__sinit>
   8b814:	e7b8      	b.n	8b788 <__swbuf_r+0x10>
   8b816:	4621      	mov	r1, r4
   8b818:	4630      	mov	r0, r6
   8b81a:	f7fe f875 	bl	89908 <_fflush_r>
   8b81e:	2800      	cmp	r0, #0
   8b820:	d0d3      	beq.n	8b7ca <__swbuf_r+0x52>
   8b822:	f04f 37ff 	mov.w	r7, #4294967295
   8b826:	e7d0      	b.n	8b7ca <__swbuf_r+0x52>

0008b828 <_wcrtomb_r>:
   8b828:	b570      	push	{r4, r5, r6, lr}
   8b82a:	4605      	mov	r5, r0
   8b82c:	461c      	mov	r4, r3
   8b82e:	b084      	sub	sp, #16
   8b830:	b139      	cbz	r1, 8b842 <_wcrtomb_r+0x1a>
   8b832:	4e0b      	ldr	r6, [pc, #44]	; (8b860 <_wcrtomb_r+0x38>)
   8b834:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8b838:	47b0      	blx	r6
   8b83a:	1c43      	adds	r3, r0, #1
   8b83c:	d009      	beq.n	8b852 <_wcrtomb_r+0x2a>
   8b83e:	b004      	add	sp, #16
   8b840:	bd70      	pop	{r4, r5, r6, pc}
   8b842:	460a      	mov	r2, r1
   8b844:	4906      	ldr	r1, [pc, #24]	; (8b860 <_wcrtomb_r+0x38>)
   8b846:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8b84a:	a901      	add	r1, sp, #4
   8b84c:	47b0      	blx	r6
   8b84e:	1c43      	adds	r3, r0, #1
   8b850:	d1f5      	bne.n	8b83e <_wcrtomb_r+0x16>
   8b852:	2200      	movs	r2, #0
   8b854:	238a      	movs	r3, #138	; 0x8a
   8b856:	6022      	str	r2, [r4, #0]
   8b858:	602b      	str	r3, [r5, #0]
   8b85a:	b004      	add	sp, #16
   8b85c:	bd70      	pop	{r4, r5, r6, pc}
   8b85e:	bf00      	nop
   8b860:	200008b4 	.word	0x200008b4

0008b864 <__ascii_wctomb>:
   8b864:	4603      	mov	r3, r0
   8b866:	b149      	cbz	r1, 8b87c <__ascii_wctomb+0x18>
   8b868:	2aff      	cmp	r2, #255	; 0xff
   8b86a:	d802      	bhi.n	8b872 <__ascii_wctomb+0xe>
   8b86c:	2001      	movs	r0, #1
   8b86e:	700a      	strb	r2, [r1, #0]
   8b870:	4770      	bx	lr
   8b872:	228a      	movs	r2, #138	; 0x8a
   8b874:	f04f 30ff 	mov.w	r0, #4294967295
   8b878:	601a      	str	r2, [r3, #0]
   8b87a:	4770      	bx	lr
   8b87c:	4608      	mov	r0, r1
   8b87e:	4770      	bx	lr

0008b880 <_write_r>:
   8b880:	b538      	push	{r3, r4, r5, lr}
   8b882:	460c      	mov	r4, r1
   8b884:	4611      	mov	r1, r2
   8b886:	2200      	movs	r2, #0
   8b888:	4684      	mov	ip, r0
   8b88a:	4d07      	ldr	r5, [pc, #28]	; (8b8a8 <_write_r+0x28>)
   8b88c:	4620      	mov	r0, r4
   8b88e:	602a      	str	r2, [r5, #0]
   8b890:	461a      	mov	r2, r3
   8b892:	4664      	mov	r4, ip
   8b894:	f7f8 fd30 	bl	842f8 <_write>
   8b898:	1c43      	adds	r3, r0, #1
   8b89a:	d000      	beq.n	8b89e <_write_r+0x1e>
   8b89c:	bd38      	pop	{r3, r4, r5, pc}
   8b89e:	682b      	ldr	r3, [r5, #0]
   8b8a0:	2b00      	cmp	r3, #0
   8b8a2:	d0fb      	beq.n	8b89c <_write_r+0x1c>
   8b8a4:	6023      	str	r3, [r4, #0]
   8b8a6:	bd38      	pop	{r3, r4, r5, pc}
   8b8a8:	200037fc 	.word	0x200037fc

0008b8ac <__register_exitproc>:
   8b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b8b0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8b930 <__register_exitproc+0x84>
   8b8b4:	4606      	mov	r6, r0
   8b8b6:	f8da 0000 	ldr.w	r0, [sl]
   8b8ba:	4698      	mov	r8, r3
   8b8bc:	460f      	mov	r7, r1
   8b8be:	4691      	mov	r9, r2
   8b8c0:	f7fe fc7c 	bl	8a1bc <__retarget_lock_acquire_recursive>
   8b8c4:	4b1b      	ldr	r3, [pc, #108]	; (8b934 <__register_exitproc+0x88>)
   8b8c6:	681b      	ldr	r3, [r3, #0]
   8b8c8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8b8cc:	b324      	cbz	r4, 8b918 <__register_exitproc+0x6c>
   8b8ce:	6865      	ldr	r5, [r4, #4]
   8b8d0:	2d1f      	cmp	r5, #31
   8b8d2:	dc26      	bgt.n	8b922 <__register_exitproc+0x76>
   8b8d4:	b95e      	cbnz	r6, 8b8ee <__register_exitproc+0x42>
   8b8d6:	1c6b      	adds	r3, r5, #1
   8b8d8:	3502      	adds	r5, #2
   8b8da:	f8da 0000 	ldr.w	r0, [sl]
   8b8de:	6063      	str	r3, [r4, #4]
   8b8e0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8b8e4:	f7fe fc6c 	bl	8a1c0 <__retarget_lock_release_recursive>
   8b8e8:	2000      	movs	r0, #0
   8b8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b8ee:	2301      	movs	r3, #1
   8b8f0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8b8f4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8b8f8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8b8fc:	40ab      	lsls	r3, r5
   8b8fe:	431a      	orrs	r2, r3
   8b900:	2e02      	cmp	r6, #2
   8b902:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8b906:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8b90a:	d1e4      	bne.n	8b8d6 <__register_exitproc+0x2a>
   8b90c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8b910:	4313      	orrs	r3, r2
   8b912:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8b916:	e7de      	b.n	8b8d6 <__register_exitproc+0x2a>
   8b918:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8b91c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8b920:	e7d5      	b.n	8b8ce <__register_exitproc+0x22>
   8b922:	f8da 0000 	ldr.w	r0, [sl]
   8b926:	f7fe fc4b 	bl	8a1c0 <__retarget_lock_release_recursive>
   8b92a:	f04f 30ff 	mov.w	r0, #4294967295
   8b92e:	e7dc      	b.n	8b8ea <__register_exitproc+0x3e>
   8b930:	200008b0 	.word	0x200008b0
   8b934:	0008c9b8 	.word	0x0008c9b8

0008b938 <__assert_func>:
   8b938:	4614      	mov	r4, r2
   8b93a:	b500      	push	{lr}
   8b93c:	461a      	mov	r2, r3
   8b93e:	4b0a      	ldr	r3, [pc, #40]	; (8b968 <__assert_func+0x30>)
   8b940:	460d      	mov	r5, r1
   8b942:	681b      	ldr	r3, [r3, #0]
   8b944:	b085      	sub	sp, #20
   8b946:	68de      	ldr	r6, [r3, #12]
   8b948:	4603      	mov	r3, r0
   8b94a:	b14c      	cbz	r4, 8b960 <__assert_func+0x28>
   8b94c:	4907      	ldr	r1, [pc, #28]	; (8b96c <__assert_func+0x34>)
   8b94e:	9101      	str	r1, [sp, #4]
   8b950:	4630      	mov	r0, r6
   8b952:	4907      	ldr	r1, [pc, #28]	; (8b970 <__assert_func+0x38>)
   8b954:	9402      	str	r4, [sp, #8]
   8b956:	9500      	str	r5, [sp, #0]
   8b958:	f000 f8c8 	bl	8baec <fiprintf>
   8b95c:	f000 f92c 	bl	8bbb8 <abort>
   8b960:	4904      	ldr	r1, [pc, #16]	; (8b974 <__assert_func+0x3c>)
   8b962:	460c      	mov	r4, r1
   8b964:	e7f3      	b.n	8b94e <__assert_func+0x16>
   8b966:	bf00      	nop
   8b968:	20000480 	.word	0x20000480
   8b96c:	0008cc74 	.word	0x0008cc74
   8b970:	0008cc84 	.word	0x0008cc84
   8b974:	0008cc80 	.word	0x0008cc80

0008b978 <_calloc_r>:
   8b978:	b538      	push	{r3, r4, r5, lr}
   8b97a:	fba1 1402 	umull	r1, r4, r1, r2
   8b97e:	bb84      	cbnz	r4, 8b9e2 <_calloc_r+0x6a>
   8b980:	f7fe fcc8 	bl	8a314 <_malloc_r>
   8b984:	4605      	mov	r5, r0
   8b986:	b1d8      	cbz	r0, 8b9c0 <_calloc_r+0x48>
   8b988:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8b98c:	f022 0203 	bic.w	r2, r2, #3
   8b990:	3a04      	subs	r2, #4
   8b992:	2a24      	cmp	r2, #36	; 0x24
   8b994:	d816      	bhi.n	8b9c4 <_calloc_r+0x4c>
   8b996:	2a13      	cmp	r2, #19
   8b998:	d919      	bls.n	8b9ce <_calloc_r+0x56>
   8b99a:	2a1b      	cmp	r2, #27
   8b99c:	e9c0 4400 	strd	r4, r4, [r0]
   8b9a0:	d91c      	bls.n	8b9dc <_calloc_r+0x64>
   8b9a2:	2300      	movs	r3, #0
   8b9a4:	2a24      	cmp	r2, #36	; 0x24
   8b9a6:	bf14      	ite	ne
   8b9a8:	f100 0210 	addne.w	r2, r0, #16
   8b9ac:	f100 0218 	addeq.w	r2, r0, #24
   8b9b0:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8b9b4:	bf04      	itt	eq
   8b9b6:	6104      	streq	r4, [r0, #16]
   8b9b8:	6144      	streq	r4, [r0, #20]
   8b9ba:	e9c2 3300 	strd	r3, r3, [r2]
   8b9be:	6093      	str	r3, [r2, #8]
   8b9c0:	4628      	mov	r0, r5
   8b9c2:	bd38      	pop	{r3, r4, r5, pc}
   8b9c4:	4621      	mov	r1, r4
   8b9c6:	f7fa f845 	bl	85a54 <memset>
   8b9ca:	4628      	mov	r0, r5
   8b9cc:	bd38      	pop	{r3, r4, r5, pc}
   8b9ce:	4602      	mov	r2, r0
   8b9d0:	2300      	movs	r3, #0
   8b9d2:	4628      	mov	r0, r5
   8b9d4:	e9c2 3300 	strd	r3, r3, [r2]
   8b9d8:	6093      	str	r3, [r2, #8]
   8b9da:	bd38      	pop	{r3, r4, r5, pc}
   8b9dc:	f100 0208 	add.w	r2, r0, #8
   8b9e0:	e7f6      	b.n	8b9d0 <_calloc_r+0x58>
   8b9e2:	f000 f817 	bl	8ba14 <__errno>
   8b9e6:	230c      	movs	r3, #12
   8b9e8:	2500      	movs	r5, #0
   8b9ea:	6003      	str	r3, [r0, #0]
   8b9ec:	e7e8      	b.n	8b9c0 <_calloc_r+0x48>
   8b9ee:	bf00      	nop

0008b9f0 <_close_r>:
   8b9f0:	2200      	movs	r2, #0
   8b9f2:	b538      	push	{r3, r4, r5, lr}
   8b9f4:	4d06      	ldr	r5, [pc, #24]	; (8ba10 <_close_r+0x20>)
   8b9f6:	4604      	mov	r4, r0
   8b9f8:	4608      	mov	r0, r1
   8b9fa:	602a      	str	r2, [r5, #0]
   8b9fc:	f7f9 fcca 	bl	85394 <_close>
   8ba00:	1c43      	adds	r3, r0, #1
   8ba02:	d000      	beq.n	8ba06 <_close_r+0x16>
   8ba04:	bd38      	pop	{r3, r4, r5, pc}
   8ba06:	682b      	ldr	r3, [r5, #0]
   8ba08:	2b00      	cmp	r3, #0
   8ba0a:	d0fb      	beq.n	8ba04 <_close_r+0x14>
   8ba0c:	6023      	str	r3, [r4, #0]
   8ba0e:	bd38      	pop	{r3, r4, r5, pc}
   8ba10:	200037fc 	.word	0x200037fc

0008ba14 <__errno>:
   8ba14:	4b01      	ldr	r3, [pc, #4]	; (8ba1c <__errno+0x8>)
   8ba16:	6818      	ldr	r0, [r3, #0]
   8ba18:	4770      	bx	lr
   8ba1a:	bf00      	nop
   8ba1c:	20000480 	.word	0x20000480

0008ba20 <_fclose_r>:
   8ba20:	b570      	push	{r4, r5, r6, lr}
   8ba22:	2900      	cmp	r1, #0
   8ba24:	d04b      	beq.n	8babe <_fclose_r+0x9e>
   8ba26:	4606      	mov	r6, r0
   8ba28:	460c      	mov	r4, r1
   8ba2a:	b110      	cbz	r0, 8ba32 <_fclose_r+0x12>
   8ba2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ba2e:	2b00      	cmp	r3, #0
   8ba30:	d048      	beq.n	8bac4 <_fclose_r+0xa4>
   8ba32:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ba34:	07d8      	lsls	r0, r3, #31
   8ba36:	d534      	bpl.n	8baa2 <_fclose_r+0x82>
   8ba38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ba3c:	2b00      	cmp	r3, #0
   8ba3e:	d03e      	beq.n	8babe <_fclose_r+0x9e>
   8ba40:	4621      	mov	r1, r4
   8ba42:	4630      	mov	r0, r6
   8ba44:	f7fd fece 	bl	897e4 <__sflush_r>
   8ba48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8ba4a:	4605      	mov	r5, r0
   8ba4c:	b133      	cbz	r3, 8ba5c <_fclose_r+0x3c>
   8ba4e:	4630      	mov	r0, r6
   8ba50:	69e1      	ldr	r1, [r4, #28]
   8ba52:	4798      	blx	r3
   8ba54:	2800      	cmp	r0, #0
   8ba56:	bfb8      	it	lt
   8ba58:	f04f 35ff 	movlt.w	r5, #4294967295
   8ba5c:	89a3      	ldrh	r3, [r4, #12]
   8ba5e:	061a      	lsls	r2, r3, #24
   8ba60:	d43b      	bmi.n	8bada <_fclose_r+0xba>
   8ba62:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8ba64:	b141      	cbz	r1, 8ba78 <_fclose_r+0x58>
   8ba66:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8ba6a:	4299      	cmp	r1, r3
   8ba6c:	d002      	beq.n	8ba74 <_fclose_r+0x54>
   8ba6e:	4630      	mov	r0, r6
   8ba70:	f7fe f8fa 	bl	89c68 <_free_r>
   8ba74:	2300      	movs	r3, #0
   8ba76:	6323      	str	r3, [r4, #48]	; 0x30
   8ba78:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8ba7a:	b121      	cbz	r1, 8ba86 <_fclose_r+0x66>
   8ba7c:	4630      	mov	r0, r6
   8ba7e:	f7fe f8f3 	bl	89c68 <_free_r>
   8ba82:	2300      	movs	r3, #0
   8ba84:	6463      	str	r3, [r4, #68]	; 0x44
   8ba86:	f7fd fff9 	bl	89a7c <__sfp_lock_acquire>
   8ba8a:	2200      	movs	r2, #0
   8ba8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ba8e:	81a2      	strh	r2, [r4, #12]
   8ba90:	07db      	lsls	r3, r3, #31
   8ba92:	d527      	bpl.n	8bae4 <_fclose_r+0xc4>
   8ba94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ba96:	f7fe fb8f 	bl	8a1b8 <__retarget_lock_close_recursive>
   8ba9a:	f7fd fff5 	bl	89a88 <__sfp_lock_release>
   8ba9e:	4628      	mov	r0, r5
   8baa0:	bd70      	pop	{r4, r5, r6, pc}
   8baa2:	89a3      	ldrh	r3, [r4, #12]
   8baa4:	0599      	lsls	r1, r3, #22
   8baa6:	d4cb      	bmi.n	8ba40 <_fclose_r+0x20>
   8baa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8baaa:	f7fe fb87 	bl	8a1bc <__retarget_lock_acquire_recursive>
   8baae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bab2:	2b00      	cmp	r3, #0
   8bab4:	d1c4      	bne.n	8ba40 <_fclose_r+0x20>
   8bab6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8bab8:	f015 0501 	ands.w	r5, r5, #1
   8babc:	d008      	beq.n	8bad0 <_fclose_r+0xb0>
   8babe:	2500      	movs	r5, #0
   8bac0:	4628      	mov	r0, r5
   8bac2:	bd70      	pop	{r4, r5, r6, pc}
   8bac4:	f7fd ff54 	bl	89970 <__sinit>
   8bac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8baca:	07d8      	lsls	r0, r3, #31
   8bacc:	d4b4      	bmi.n	8ba38 <_fclose_r+0x18>
   8bace:	e7e8      	b.n	8baa2 <_fclose_r+0x82>
   8bad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bad2:	f7fe fb75 	bl	8a1c0 <__retarget_lock_release_recursive>
   8bad6:	4628      	mov	r0, r5
   8bad8:	bd70      	pop	{r4, r5, r6, pc}
   8bada:	4630      	mov	r0, r6
   8badc:	6921      	ldr	r1, [r4, #16]
   8bade:	f7fe f8c3 	bl	89c68 <_free_r>
   8bae2:	e7be      	b.n	8ba62 <_fclose_r+0x42>
   8bae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bae6:	f7fe fb6b 	bl	8a1c0 <__retarget_lock_release_recursive>
   8baea:	e7d3      	b.n	8ba94 <_fclose_r+0x74>

0008baec <fiprintf>:
   8baec:	b40e      	push	{r1, r2, r3}
   8baee:	b500      	push	{lr}
   8baf0:	4a07      	ldr	r2, [pc, #28]	; (8bb10 <fiprintf+0x24>)
   8baf2:	b082      	sub	sp, #8
   8baf4:	ab03      	add	r3, sp, #12
   8baf6:	4601      	mov	r1, r0
   8baf8:	6810      	ldr	r0, [r2, #0]
   8bafa:	f853 2b04 	ldr.w	r2, [r3], #4
   8bafe:	9301      	str	r3, [sp, #4]
   8bb00:	f7fb feec 	bl	878dc <_vfiprintf_r>
   8bb04:	b002      	add	sp, #8
   8bb06:	f85d eb04 	ldr.w	lr, [sp], #4
   8bb0a:	b003      	add	sp, #12
   8bb0c:	4770      	bx	lr
   8bb0e:	bf00      	nop
   8bb10:	20000480 	.word	0x20000480

0008bb14 <_fstat_r>:
   8bb14:	b570      	push	{r4, r5, r6, lr}
   8bb16:	2600      	movs	r6, #0
   8bb18:	4d07      	ldr	r5, [pc, #28]	; (8bb38 <_fstat_r+0x24>)
   8bb1a:	4604      	mov	r4, r0
   8bb1c:	4608      	mov	r0, r1
   8bb1e:	4611      	mov	r1, r2
   8bb20:	602e      	str	r6, [r5, #0]
   8bb22:	f7f9 fc42 	bl	853aa <_fstat>
   8bb26:	1c43      	adds	r3, r0, #1
   8bb28:	d000      	beq.n	8bb2c <_fstat_r+0x18>
   8bb2a:	bd70      	pop	{r4, r5, r6, pc}
   8bb2c:	682b      	ldr	r3, [r5, #0]
   8bb2e:	2b00      	cmp	r3, #0
   8bb30:	d0fb      	beq.n	8bb2a <_fstat_r+0x16>
   8bb32:	6023      	str	r3, [r4, #0]
   8bb34:	bd70      	pop	{r4, r5, r6, pc}
   8bb36:	bf00      	nop
   8bb38:	200037fc 	.word	0x200037fc

0008bb3c <_isatty_r>:
   8bb3c:	2200      	movs	r2, #0
   8bb3e:	b538      	push	{r3, r4, r5, lr}
   8bb40:	4d06      	ldr	r5, [pc, #24]	; (8bb5c <_isatty_r+0x20>)
   8bb42:	4604      	mov	r4, r0
   8bb44:	4608      	mov	r0, r1
   8bb46:	602a      	str	r2, [r5, #0]
   8bb48:	f7f9 fc3e 	bl	853c8 <_isatty>
   8bb4c:	1c43      	adds	r3, r0, #1
   8bb4e:	d000      	beq.n	8bb52 <_isatty_r+0x16>
   8bb50:	bd38      	pop	{r3, r4, r5, pc}
   8bb52:	682b      	ldr	r3, [r5, #0]
   8bb54:	2b00      	cmp	r3, #0
   8bb56:	d0fb      	beq.n	8bb50 <_isatty_r+0x14>
   8bb58:	6023      	str	r3, [r4, #0]
   8bb5a:	bd38      	pop	{r3, r4, r5, pc}
   8bb5c:	200037fc 	.word	0x200037fc

0008bb60 <_lseek_r>:
   8bb60:	b538      	push	{r3, r4, r5, lr}
   8bb62:	460c      	mov	r4, r1
   8bb64:	4611      	mov	r1, r2
   8bb66:	2200      	movs	r2, #0
   8bb68:	4684      	mov	ip, r0
   8bb6a:	4d07      	ldr	r5, [pc, #28]	; (8bb88 <_lseek_r+0x28>)
   8bb6c:	4620      	mov	r0, r4
   8bb6e:	602a      	str	r2, [r5, #0]
   8bb70:	461a      	mov	r2, r3
   8bb72:	4664      	mov	r4, ip
   8bb74:	f7f9 fc32 	bl	853dc <_lseek>
   8bb78:	1c43      	adds	r3, r0, #1
   8bb7a:	d000      	beq.n	8bb7e <_lseek_r+0x1e>
   8bb7c:	bd38      	pop	{r3, r4, r5, pc}
   8bb7e:	682b      	ldr	r3, [r5, #0]
   8bb80:	2b00      	cmp	r3, #0
   8bb82:	d0fb      	beq.n	8bb7c <_lseek_r+0x1c>
   8bb84:	6023      	str	r3, [r4, #0]
   8bb86:	bd38      	pop	{r3, r4, r5, pc}
   8bb88:	200037fc 	.word	0x200037fc

0008bb8c <_read_r>:
   8bb8c:	b538      	push	{r3, r4, r5, lr}
   8bb8e:	460c      	mov	r4, r1
   8bb90:	4611      	mov	r1, r2
   8bb92:	2200      	movs	r2, #0
   8bb94:	4684      	mov	ip, r0
   8bb96:	4d07      	ldr	r5, [pc, #28]	; (8bbb4 <_read_r+0x28>)
   8bb98:	4620      	mov	r0, r4
   8bb9a:	602a      	str	r2, [r5, #0]
   8bb9c:	461a      	mov	r2, r3
   8bb9e:	4664      	mov	r4, ip
   8bba0:	f7f9 fd50 	bl	85644 <_read>
   8bba4:	1c43      	adds	r3, r0, #1
   8bba6:	d000      	beq.n	8bbaa <_read_r+0x1e>
   8bba8:	bd38      	pop	{r3, r4, r5, pc}
   8bbaa:	682b      	ldr	r3, [r5, #0]
   8bbac:	2b00      	cmp	r3, #0
   8bbae:	d0fb      	beq.n	8bba8 <_read_r+0x1c>
   8bbb0:	6023      	str	r3, [r4, #0]
   8bbb2:	bd38      	pop	{r3, r4, r5, pc}
   8bbb4:	200037fc 	.word	0x200037fc

0008bbb8 <abort>:
   8bbb8:	2006      	movs	r0, #6
   8bbba:	b508      	push	{r3, lr}
   8bbbc:	f000 f804 	bl	8bbc8 <raise>
   8bbc0:	2001      	movs	r0, #1
   8bbc2:	f7f9 fc17 	bl	853f4 <_exit>
   8bbc6:	bf00      	nop

0008bbc8 <raise>:
   8bbc8:	b538      	push	{r3, r4, r5, lr}
   8bbca:	4b15      	ldr	r3, [pc, #84]	; (8bc20 <raise+0x58>)
   8bbcc:	281f      	cmp	r0, #31
   8bbce:	681d      	ldr	r5, [r3, #0]
   8bbd0:	d820      	bhi.n	8bc14 <raise+0x4c>
   8bbd2:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8bbd6:	4604      	mov	r4, r0
   8bbd8:	b162      	cbz	r2, 8bbf4 <raise+0x2c>
   8bbda:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8bbde:	b14b      	cbz	r3, 8bbf4 <raise+0x2c>
   8bbe0:	2b01      	cmp	r3, #1
   8bbe2:	d015      	beq.n	8bc10 <raise+0x48>
   8bbe4:	1c59      	adds	r1, r3, #1
   8bbe6:	d00f      	beq.n	8bc08 <raise+0x40>
   8bbe8:	2500      	movs	r5, #0
   8bbea:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8bbee:	4798      	blx	r3
   8bbf0:	4628      	mov	r0, r5
   8bbf2:	bd38      	pop	{r3, r4, r5, pc}
   8bbf4:	4628      	mov	r0, r5
   8bbf6:	f000 f829 	bl	8bc4c <_getpid_r>
   8bbfa:	4622      	mov	r2, r4
   8bbfc:	4601      	mov	r1, r0
   8bbfe:	4628      	mov	r0, r5
   8bc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8bc04:	f000 b80e 	b.w	8bc24 <_kill_r>
   8bc08:	2316      	movs	r3, #22
   8bc0a:	2001      	movs	r0, #1
   8bc0c:	602b      	str	r3, [r5, #0]
   8bc0e:	bd38      	pop	{r3, r4, r5, pc}
   8bc10:	2000      	movs	r0, #0
   8bc12:	bd38      	pop	{r3, r4, r5, pc}
   8bc14:	2316      	movs	r3, #22
   8bc16:	f04f 30ff 	mov.w	r0, #4294967295
   8bc1a:	602b      	str	r3, [r5, #0]
   8bc1c:	bd38      	pop	{r3, r4, r5, pc}
   8bc1e:	bf00      	nop
   8bc20:	20000480 	.word	0x20000480

0008bc24 <_kill_r>:
   8bc24:	b570      	push	{r4, r5, r6, lr}
   8bc26:	2600      	movs	r6, #0
   8bc28:	4d07      	ldr	r5, [pc, #28]	; (8bc48 <_kill_r+0x24>)
   8bc2a:	4604      	mov	r4, r0
   8bc2c:	4608      	mov	r0, r1
   8bc2e:	4611      	mov	r1, r2
   8bc30:	602e      	str	r6, [r5, #0]
   8bc32:	f7f9 fbed 	bl	85410 <_kill>
   8bc36:	1c43      	adds	r3, r0, #1
   8bc38:	d000      	beq.n	8bc3c <_kill_r+0x18>
   8bc3a:	bd70      	pop	{r4, r5, r6, pc}
   8bc3c:	682b      	ldr	r3, [r5, #0]
   8bc3e:	2b00      	cmp	r3, #0
   8bc40:	d0fb      	beq.n	8bc3a <_kill_r+0x16>
   8bc42:	6023      	str	r3, [r4, #0]
   8bc44:	bd70      	pop	{r4, r5, r6, pc}
   8bc46:	bf00      	nop
   8bc48:	200037fc 	.word	0x200037fc

0008bc4c <_getpid_r>:
   8bc4c:	f7f9 bbea 	b.w	85424 <_getpid>

0008bc50 <__aeabi_drsub>:
   8bc50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8bc54:	e002      	b.n	8bc5c <__adddf3>
   8bc56:	bf00      	nop

0008bc58 <__aeabi_dsub>:
   8bc58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008bc5c <__adddf3>:
   8bc5c:	b530      	push	{r4, r5, lr}
   8bc5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8bc62:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8bc66:	ea94 0f05 	teq	r4, r5
   8bc6a:	bf08      	it	eq
   8bc6c:	ea90 0f02 	teqeq	r0, r2
   8bc70:	bf1f      	itttt	ne
   8bc72:	ea54 0c00 	orrsne.w	ip, r4, r0
   8bc76:	ea55 0c02 	orrsne.w	ip, r5, r2
   8bc7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8bc7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8bc82:	f000 80e2 	beq.w	8be4a <__adddf3+0x1ee>
   8bc86:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8bc8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8bc8e:	bfb8      	it	lt
   8bc90:	426d      	neglt	r5, r5
   8bc92:	dd0c      	ble.n	8bcae <__adddf3+0x52>
   8bc94:	442c      	add	r4, r5
   8bc96:	ea80 0202 	eor.w	r2, r0, r2
   8bc9a:	ea81 0303 	eor.w	r3, r1, r3
   8bc9e:	ea82 0000 	eor.w	r0, r2, r0
   8bca2:	ea83 0101 	eor.w	r1, r3, r1
   8bca6:	ea80 0202 	eor.w	r2, r0, r2
   8bcaa:	ea81 0303 	eor.w	r3, r1, r3
   8bcae:	2d36      	cmp	r5, #54	; 0x36
   8bcb0:	bf88      	it	hi
   8bcb2:	bd30      	pophi	{r4, r5, pc}
   8bcb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8bcb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8bcbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8bcc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8bcc4:	d002      	beq.n	8bccc <__adddf3+0x70>
   8bcc6:	4240      	negs	r0, r0
   8bcc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bccc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8bcd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8bcd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8bcd8:	d002      	beq.n	8bce0 <__adddf3+0x84>
   8bcda:	4252      	negs	r2, r2
   8bcdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8bce0:	ea94 0f05 	teq	r4, r5
   8bce4:	f000 80a7 	beq.w	8be36 <__adddf3+0x1da>
   8bce8:	f1a4 0401 	sub.w	r4, r4, #1
   8bcec:	f1d5 0e20 	rsbs	lr, r5, #32
   8bcf0:	db0d      	blt.n	8bd0e <__adddf3+0xb2>
   8bcf2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8bcf6:	fa22 f205 	lsr.w	r2, r2, r5
   8bcfa:	1880      	adds	r0, r0, r2
   8bcfc:	f141 0100 	adc.w	r1, r1, #0
   8bd00:	fa03 f20e 	lsl.w	r2, r3, lr
   8bd04:	1880      	adds	r0, r0, r2
   8bd06:	fa43 f305 	asr.w	r3, r3, r5
   8bd0a:	4159      	adcs	r1, r3
   8bd0c:	e00e      	b.n	8bd2c <__adddf3+0xd0>
   8bd0e:	f1a5 0520 	sub.w	r5, r5, #32
   8bd12:	f10e 0e20 	add.w	lr, lr, #32
   8bd16:	2a01      	cmp	r2, #1
   8bd18:	fa03 fc0e 	lsl.w	ip, r3, lr
   8bd1c:	bf28      	it	cs
   8bd1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   8bd22:	fa43 f305 	asr.w	r3, r3, r5
   8bd26:	18c0      	adds	r0, r0, r3
   8bd28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8bd2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bd30:	d507      	bpl.n	8bd42 <__adddf3+0xe6>
   8bd32:	f04f 0e00 	mov.w	lr, #0
   8bd36:	f1dc 0c00 	rsbs	ip, ip, #0
   8bd3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8bd3e:	eb6e 0101 	sbc.w	r1, lr, r1
   8bd42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8bd46:	d31b      	bcc.n	8bd80 <__adddf3+0x124>
   8bd48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8bd4c:	d30c      	bcc.n	8bd68 <__adddf3+0x10c>
   8bd4e:	0849      	lsrs	r1, r1, #1
   8bd50:	ea5f 0030 	movs.w	r0, r0, rrx
   8bd54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8bd58:	f104 0401 	add.w	r4, r4, #1
   8bd5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8bd60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8bd64:	f080 809a 	bcs.w	8be9c <__adddf3+0x240>
   8bd68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8bd6c:	bf08      	it	eq
   8bd6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8bd72:	f150 0000 	adcs.w	r0, r0, #0
   8bd76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8bd7a:	ea41 0105 	orr.w	r1, r1, r5
   8bd7e:	bd30      	pop	{r4, r5, pc}
   8bd80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8bd84:	4140      	adcs	r0, r0
   8bd86:	eb41 0101 	adc.w	r1, r1, r1
   8bd8a:	3c01      	subs	r4, #1
   8bd8c:	bf28      	it	cs
   8bd8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8bd92:	d2e9      	bcs.n	8bd68 <__adddf3+0x10c>
   8bd94:	f091 0f00 	teq	r1, #0
   8bd98:	bf04      	itt	eq
   8bd9a:	4601      	moveq	r1, r0
   8bd9c:	2000      	moveq	r0, #0
   8bd9e:	fab1 f381 	clz	r3, r1
   8bda2:	bf08      	it	eq
   8bda4:	3320      	addeq	r3, #32
   8bda6:	f1a3 030b 	sub.w	r3, r3, #11
   8bdaa:	f1b3 0220 	subs.w	r2, r3, #32
   8bdae:	da0c      	bge.n	8bdca <__adddf3+0x16e>
   8bdb0:	320c      	adds	r2, #12
   8bdb2:	dd08      	ble.n	8bdc6 <__adddf3+0x16a>
   8bdb4:	f102 0c14 	add.w	ip, r2, #20
   8bdb8:	f1c2 020c 	rsb	r2, r2, #12
   8bdbc:	fa01 f00c 	lsl.w	r0, r1, ip
   8bdc0:	fa21 f102 	lsr.w	r1, r1, r2
   8bdc4:	e00c      	b.n	8bde0 <__adddf3+0x184>
   8bdc6:	f102 0214 	add.w	r2, r2, #20
   8bdca:	bfd8      	it	le
   8bdcc:	f1c2 0c20 	rsble	ip, r2, #32
   8bdd0:	fa01 f102 	lsl.w	r1, r1, r2
   8bdd4:	fa20 fc0c 	lsr.w	ip, r0, ip
   8bdd8:	bfdc      	itt	le
   8bdda:	ea41 010c 	orrle.w	r1, r1, ip
   8bdde:	4090      	lslle	r0, r2
   8bde0:	1ae4      	subs	r4, r4, r3
   8bde2:	bfa2      	ittt	ge
   8bde4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8bde8:	4329      	orrge	r1, r5
   8bdea:	bd30      	popge	{r4, r5, pc}
   8bdec:	ea6f 0404 	mvn.w	r4, r4
   8bdf0:	3c1f      	subs	r4, #31
   8bdf2:	da1c      	bge.n	8be2e <__adddf3+0x1d2>
   8bdf4:	340c      	adds	r4, #12
   8bdf6:	dc0e      	bgt.n	8be16 <__adddf3+0x1ba>
   8bdf8:	f104 0414 	add.w	r4, r4, #20
   8bdfc:	f1c4 0220 	rsb	r2, r4, #32
   8be00:	fa20 f004 	lsr.w	r0, r0, r4
   8be04:	fa01 f302 	lsl.w	r3, r1, r2
   8be08:	ea40 0003 	orr.w	r0, r0, r3
   8be0c:	fa21 f304 	lsr.w	r3, r1, r4
   8be10:	ea45 0103 	orr.w	r1, r5, r3
   8be14:	bd30      	pop	{r4, r5, pc}
   8be16:	f1c4 040c 	rsb	r4, r4, #12
   8be1a:	f1c4 0220 	rsb	r2, r4, #32
   8be1e:	fa20 f002 	lsr.w	r0, r0, r2
   8be22:	fa01 f304 	lsl.w	r3, r1, r4
   8be26:	ea40 0003 	orr.w	r0, r0, r3
   8be2a:	4629      	mov	r1, r5
   8be2c:	bd30      	pop	{r4, r5, pc}
   8be2e:	fa21 f004 	lsr.w	r0, r1, r4
   8be32:	4629      	mov	r1, r5
   8be34:	bd30      	pop	{r4, r5, pc}
   8be36:	f094 0f00 	teq	r4, #0
   8be3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8be3e:	bf06      	itte	eq
   8be40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8be44:	3401      	addeq	r4, #1
   8be46:	3d01      	subne	r5, #1
   8be48:	e74e      	b.n	8bce8 <__adddf3+0x8c>
   8be4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8be4e:	bf18      	it	ne
   8be50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8be54:	d029      	beq.n	8beaa <__adddf3+0x24e>
   8be56:	ea94 0f05 	teq	r4, r5
   8be5a:	bf08      	it	eq
   8be5c:	ea90 0f02 	teqeq	r0, r2
   8be60:	d005      	beq.n	8be6e <__adddf3+0x212>
   8be62:	ea54 0c00 	orrs.w	ip, r4, r0
   8be66:	bf04      	itt	eq
   8be68:	4619      	moveq	r1, r3
   8be6a:	4610      	moveq	r0, r2
   8be6c:	bd30      	pop	{r4, r5, pc}
   8be6e:	ea91 0f03 	teq	r1, r3
   8be72:	bf1e      	ittt	ne
   8be74:	2100      	movne	r1, #0
   8be76:	2000      	movne	r0, #0
   8be78:	bd30      	popne	{r4, r5, pc}
   8be7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8be7e:	d105      	bne.n	8be8c <__adddf3+0x230>
   8be80:	0040      	lsls	r0, r0, #1
   8be82:	4149      	adcs	r1, r1
   8be84:	bf28      	it	cs
   8be86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8be8a:	bd30      	pop	{r4, r5, pc}
   8be8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8be90:	bf3c      	itt	cc
   8be92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8be96:	bd30      	popcc	{r4, r5, pc}
   8be98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8be9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8bea0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8bea4:	f04f 0000 	mov.w	r0, #0
   8bea8:	bd30      	pop	{r4, r5, pc}
   8beaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8beae:	bf1a      	itte	ne
   8beb0:	4619      	movne	r1, r3
   8beb2:	4610      	movne	r0, r2
   8beb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8beb8:	bf1c      	itt	ne
   8beba:	460b      	movne	r3, r1
   8bebc:	4602      	movne	r2, r0
   8bebe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8bec2:	bf06      	itte	eq
   8bec4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8bec8:	ea91 0f03 	teqeq	r1, r3
   8becc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8bed0:	bd30      	pop	{r4, r5, pc}
   8bed2:	bf00      	nop

0008bed4 <__aeabi_ui2d>:
   8bed4:	f090 0f00 	teq	r0, #0
   8bed8:	bf04      	itt	eq
   8beda:	2100      	moveq	r1, #0
   8bedc:	4770      	bxeq	lr
   8bede:	b530      	push	{r4, r5, lr}
   8bee0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bee4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bee8:	f04f 0500 	mov.w	r5, #0
   8beec:	f04f 0100 	mov.w	r1, #0
   8bef0:	e750      	b.n	8bd94 <__adddf3+0x138>
   8bef2:	bf00      	nop

0008bef4 <__aeabi_i2d>:
   8bef4:	f090 0f00 	teq	r0, #0
   8bef8:	bf04      	itt	eq
   8befa:	2100      	moveq	r1, #0
   8befc:	4770      	bxeq	lr
   8befe:	b530      	push	{r4, r5, lr}
   8bf00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bf04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bf08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8bf0c:	bf48      	it	mi
   8bf0e:	4240      	negmi	r0, r0
   8bf10:	f04f 0100 	mov.w	r1, #0
   8bf14:	e73e      	b.n	8bd94 <__adddf3+0x138>
   8bf16:	bf00      	nop

0008bf18 <__aeabi_f2d>:
   8bf18:	0042      	lsls	r2, r0, #1
   8bf1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8bf1e:	ea4f 0131 	mov.w	r1, r1, rrx
   8bf22:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8bf26:	bf1f      	itttt	ne
   8bf28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8bf2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8bf30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8bf34:	4770      	bxne	lr
   8bf36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8bf3a:	bf08      	it	eq
   8bf3c:	4770      	bxeq	lr
   8bf3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8bf42:	bf04      	itt	eq
   8bf44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8bf48:	4770      	bxeq	lr
   8bf4a:	b530      	push	{r4, r5, lr}
   8bf4c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8bf50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bf54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8bf58:	e71c      	b.n	8bd94 <__adddf3+0x138>
   8bf5a:	bf00      	nop

0008bf5c <__aeabi_ul2d>:
   8bf5c:	ea50 0201 	orrs.w	r2, r0, r1
   8bf60:	bf08      	it	eq
   8bf62:	4770      	bxeq	lr
   8bf64:	b530      	push	{r4, r5, lr}
   8bf66:	f04f 0500 	mov.w	r5, #0
   8bf6a:	e00a      	b.n	8bf82 <__aeabi_l2d+0x16>

0008bf6c <__aeabi_l2d>:
   8bf6c:	ea50 0201 	orrs.w	r2, r0, r1
   8bf70:	bf08      	it	eq
   8bf72:	4770      	bxeq	lr
   8bf74:	b530      	push	{r4, r5, lr}
   8bf76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8bf7a:	d502      	bpl.n	8bf82 <__aeabi_l2d+0x16>
   8bf7c:	4240      	negs	r0, r0
   8bf7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bf82:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bf86:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bf8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8bf8e:	f43f aed8 	beq.w	8bd42 <__adddf3+0xe6>
   8bf92:	f04f 0203 	mov.w	r2, #3
   8bf96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8bf9a:	bf18      	it	ne
   8bf9c:	3203      	addne	r2, #3
   8bf9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8bfa2:	bf18      	it	ne
   8bfa4:	3203      	addne	r2, #3
   8bfa6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8bfaa:	f1c2 0320 	rsb	r3, r2, #32
   8bfae:	fa00 fc03 	lsl.w	ip, r0, r3
   8bfb2:	fa20 f002 	lsr.w	r0, r0, r2
   8bfb6:	fa01 fe03 	lsl.w	lr, r1, r3
   8bfba:	ea40 000e 	orr.w	r0, r0, lr
   8bfbe:	fa21 f102 	lsr.w	r1, r1, r2
   8bfc2:	4414      	add	r4, r2
   8bfc4:	e6bd      	b.n	8bd42 <__adddf3+0xe6>
   8bfc6:	bf00      	nop

0008bfc8 <__aeabi_dmul>:
   8bfc8:	b570      	push	{r4, r5, r6, lr}
   8bfca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8bfce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8bfd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8bfd6:	bf1d      	ittte	ne
   8bfd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8bfdc:	ea94 0f0c 	teqne	r4, ip
   8bfe0:	ea95 0f0c 	teqne	r5, ip
   8bfe4:	f000 f8de 	bleq	8c1a4 <__aeabi_dmul+0x1dc>
   8bfe8:	442c      	add	r4, r5
   8bfea:	ea81 0603 	eor.w	r6, r1, r3
   8bfee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8bff2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8bff6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8bffa:	bf18      	it	ne
   8bffc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c000:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c008:	d038      	beq.n	8c07c <__aeabi_dmul+0xb4>
   8c00a:	fba0 ce02 	umull	ip, lr, r0, r2
   8c00e:	f04f 0500 	mov.w	r5, #0
   8c012:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c016:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c01a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c01e:	f04f 0600 	mov.w	r6, #0
   8c022:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c026:	f09c 0f00 	teq	ip, #0
   8c02a:	bf18      	it	ne
   8c02c:	f04e 0e01 	orrne.w	lr, lr, #1
   8c030:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c034:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c038:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c03c:	d204      	bcs.n	8c048 <__aeabi_dmul+0x80>
   8c03e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c042:	416d      	adcs	r5, r5
   8c044:	eb46 0606 	adc.w	r6, r6, r6
   8c048:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c04c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c050:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c054:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c058:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c05c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c060:	bf88      	it	hi
   8c062:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c066:	d81e      	bhi.n	8c0a6 <__aeabi_dmul+0xde>
   8c068:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c06c:	bf08      	it	eq
   8c06e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c072:	f150 0000 	adcs.w	r0, r0, #0
   8c076:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c07a:	bd70      	pop	{r4, r5, r6, pc}
   8c07c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c080:	ea46 0101 	orr.w	r1, r6, r1
   8c084:	ea40 0002 	orr.w	r0, r0, r2
   8c088:	ea81 0103 	eor.w	r1, r1, r3
   8c08c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c090:	bfc2      	ittt	gt
   8c092:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c096:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c09a:	bd70      	popgt	{r4, r5, r6, pc}
   8c09c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c0a0:	f04f 0e00 	mov.w	lr, #0
   8c0a4:	3c01      	subs	r4, #1
   8c0a6:	f300 80ab 	bgt.w	8c200 <__aeabi_dmul+0x238>
   8c0aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c0ae:	bfde      	ittt	le
   8c0b0:	2000      	movle	r0, #0
   8c0b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c0b6:	bd70      	pople	{r4, r5, r6, pc}
   8c0b8:	f1c4 0400 	rsb	r4, r4, #0
   8c0bc:	3c20      	subs	r4, #32
   8c0be:	da35      	bge.n	8c12c <__aeabi_dmul+0x164>
   8c0c0:	340c      	adds	r4, #12
   8c0c2:	dc1b      	bgt.n	8c0fc <__aeabi_dmul+0x134>
   8c0c4:	f104 0414 	add.w	r4, r4, #20
   8c0c8:	f1c4 0520 	rsb	r5, r4, #32
   8c0cc:	fa00 f305 	lsl.w	r3, r0, r5
   8c0d0:	fa20 f004 	lsr.w	r0, r0, r4
   8c0d4:	fa01 f205 	lsl.w	r2, r1, r5
   8c0d8:	ea40 0002 	orr.w	r0, r0, r2
   8c0dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c0e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c0e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c0e8:	fa21 f604 	lsr.w	r6, r1, r4
   8c0ec:	eb42 0106 	adc.w	r1, r2, r6
   8c0f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c0f4:	bf08      	it	eq
   8c0f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c0fa:	bd70      	pop	{r4, r5, r6, pc}
   8c0fc:	f1c4 040c 	rsb	r4, r4, #12
   8c100:	f1c4 0520 	rsb	r5, r4, #32
   8c104:	fa00 f304 	lsl.w	r3, r0, r4
   8c108:	fa20 f005 	lsr.w	r0, r0, r5
   8c10c:	fa01 f204 	lsl.w	r2, r1, r4
   8c110:	ea40 0002 	orr.w	r0, r0, r2
   8c114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c118:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c11c:	f141 0100 	adc.w	r1, r1, #0
   8c120:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c124:	bf08      	it	eq
   8c126:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c12a:	bd70      	pop	{r4, r5, r6, pc}
   8c12c:	f1c4 0520 	rsb	r5, r4, #32
   8c130:	fa00 f205 	lsl.w	r2, r0, r5
   8c134:	ea4e 0e02 	orr.w	lr, lr, r2
   8c138:	fa20 f304 	lsr.w	r3, r0, r4
   8c13c:	fa01 f205 	lsl.w	r2, r1, r5
   8c140:	ea43 0302 	orr.w	r3, r3, r2
   8c144:	fa21 f004 	lsr.w	r0, r1, r4
   8c148:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c14c:	fa21 f204 	lsr.w	r2, r1, r4
   8c150:	ea20 0002 	bic.w	r0, r0, r2
   8c154:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c158:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c15c:	bf08      	it	eq
   8c15e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c162:	bd70      	pop	{r4, r5, r6, pc}
   8c164:	f094 0f00 	teq	r4, #0
   8c168:	d10f      	bne.n	8c18a <__aeabi_dmul+0x1c2>
   8c16a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c16e:	0040      	lsls	r0, r0, #1
   8c170:	eb41 0101 	adc.w	r1, r1, r1
   8c174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c178:	bf08      	it	eq
   8c17a:	3c01      	subeq	r4, #1
   8c17c:	d0f7      	beq.n	8c16e <__aeabi_dmul+0x1a6>
   8c17e:	ea41 0106 	orr.w	r1, r1, r6
   8c182:	f095 0f00 	teq	r5, #0
   8c186:	bf18      	it	ne
   8c188:	4770      	bxne	lr
   8c18a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c18e:	0052      	lsls	r2, r2, #1
   8c190:	eb43 0303 	adc.w	r3, r3, r3
   8c194:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c198:	bf08      	it	eq
   8c19a:	3d01      	subeq	r5, #1
   8c19c:	d0f7      	beq.n	8c18e <__aeabi_dmul+0x1c6>
   8c19e:	ea43 0306 	orr.w	r3, r3, r6
   8c1a2:	4770      	bx	lr
   8c1a4:	ea94 0f0c 	teq	r4, ip
   8c1a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c1ac:	bf18      	it	ne
   8c1ae:	ea95 0f0c 	teqne	r5, ip
   8c1b2:	d00c      	beq.n	8c1ce <__aeabi_dmul+0x206>
   8c1b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c1b8:	bf18      	it	ne
   8c1ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c1be:	d1d1      	bne.n	8c164 <__aeabi_dmul+0x19c>
   8c1c0:	ea81 0103 	eor.w	r1, r1, r3
   8c1c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c1c8:	f04f 0000 	mov.w	r0, #0
   8c1cc:	bd70      	pop	{r4, r5, r6, pc}
   8c1ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c1d2:	bf06      	itte	eq
   8c1d4:	4610      	moveq	r0, r2
   8c1d6:	4619      	moveq	r1, r3
   8c1d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c1dc:	d019      	beq.n	8c212 <__aeabi_dmul+0x24a>
   8c1de:	ea94 0f0c 	teq	r4, ip
   8c1e2:	d102      	bne.n	8c1ea <__aeabi_dmul+0x222>
   8c1e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c1e8:	d113      	bne.n	8c212 <__aeabi_dmul+0x24a>
   8c1ea:	ea95 0f0c 	teq	r5, ip
   8c1ee:	d105      	bne.n	8c1fc <__aeabi_dmul+0x234>
   8c1f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c1f4:	bf1c      	itt	ne
   8c1f6:	4610      	movne	r0, r2
   8c1f8:	4619      	movne	r1, r3
   8c1fa:	d10a      	bne.n	8c212 <__aeabi_dmul+0x24a>
   8c1fc:	ea81 0103 	eor.w	r1, r1, r3
   8c200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c204:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c208:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c20c:	f04f 0000 	mov.w	r0, #0
   8c210:	bd70      	pop	{r4, r5, r6, pc}
   8c212:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c216:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c21a:	bd70      	pop	{r4, r5, r6, pc}

0008c21c <__aeabi_ddiv>:
   8c21c:	b570      	push	{r4, r5, r6, lr}
   8c21e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c222:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c226:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c22a:	bf1d      	ittte	ne
   8c22c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c230:	ea94 0f0c 	teqne	r4, ip
   8c234:	ea95 0f0c 	teqne	r5, ip
   8c238:	f000 f8a7 	bleq	8c38a <__aeabi_ddiv+0x16e>
   8c23c:	eba4 0405 	sub.w	r4, r4, r5
   8c240:	ea81 0e03 	eor.w	lr, r1, r3
   8c244:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c248:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c24c:	f000 8088 	beq.w	8c360 <__aeabi_ddiv+0x144>
   8c250:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c254:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c258:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c25c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c260:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c264:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c268:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c26c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c270:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c274:	429d      	cmp	r5, r3
   8c276:	bf08      	it	eq
   8c278:	4296      	cmpeq	r6, r2
   8c27a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c27e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c282:	d202      	bcs.n	8c28a <__aeabi_ddiv+0x6e>
   8c284:	085b      	lsrs	r3, r3, #1
   8c286:	ea4f 0232 	mov.w	r2, r2, rrx
   8c28a:	1ab6      	subs	r6, r6, r2
   8c28c:	eb65 0503 	sbc.w	r5, r5, r3
   8c290:	085b      	lsrs	r3, r3, #1
   8c292:	ea4f 0232 	mov.w	r2, r2, rrx
   8c296:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c29a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c29e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c2a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c2a6:	bf22      	ittt	cs
   8c2a8:	1ab6      	subcs	r6, r6, r2
   8c2aa:	4675      	movcs	r5, lr
   8c2ac:	ea40 000c 	orrcs.w	r0, r0, ip
   8c2b0:	085b      	lsrs	r3, r3, #1
   8c2b2:	ea4f 0232 	mov.w	r2, r2, rrx
   8c2b6:	ebb6 0e02 	subs.w	lr, r6, r2
   8c2ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c2be:	bf22      	ittt	cs
   8c2c0:	1ab6      	subcs	r6, r6, r2
   8c2c2:	4675      	movcs	r5, lr
   8c2c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c2c8:	085b      	lsrs	r3, r3, #1
   8c2ca:	ea4f 0232 	mov.w	r2, r2, rrx
   8c2ce:	ebb6 0e02 	subs.w	lr, r6, r2
   8c2d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c2d6:	bf22      	ittt	cs
   8c2d8:	1ab6      	subcs	r6, r6, r2
   8c2da:	4675      	movcs	r5, lr
   8c2dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c2e0:	085b      	lsrs	r3, r3, #1
   8c2e2:	ea4f 0232 	mov.w	r2, r2, rrx
   8c2e6:	ebb6 0e02 	subs.w	lr, r6, r2
   8c2ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c2ee:	bf22      	ittt	cs
   8c2f0:	1ab6      	subcs	r6, r6, r2
   8c2f2:	4675      	movcs	r5, lr
   8c2f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c2f8:	ea55 0e06 	orrs.w	lr, r5, r6
   8c2fc:	d018      	beq.n	8c330 <__aeabi_ddiv+0x114>
   8c2fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c302:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c306:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c30a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c30e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c312:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c316:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c31a:	d1c0      	bne.n	8c29e <__aeabi_ddiv+0x82>
   8c31c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c320:	d10b      	bne.n	8c33a <__aeabi_ddiv+0x11e>
   8c322:	ea41 0100 	orr.w	r1, r1, r0
   8c326:	f04f 0000 	mov.w	r0, #0
   8c32a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c32e:	e7b6      	b.n	8c29e <__aeabi_ddiv+0x82>
   8c330:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c334:	bf04      	itt	eq
   8c336:	4301      	orreq	r1, r0
   8c338:	2000      	moveq	r0, #0
   8c33a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c33e:	bf88      	it	hi
   8c340:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c344:	f63f aeaf 	bhi.w	8c0a6 <__aeabi_dmul+0xde>
   8c348:	ebb5 0c03 	subs.w	ip, r5, r3
   8c34c:	bf04      	itt	eq
   8c34e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c356:	f150 0000 	adcs.w	r0, r0, #0
   8c35a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c35e:	bd70      	pop	{r4, r5, r6, pc}
   8c360:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c364:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c368:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c36c:	bfc2      	ittt	gt
   8c36e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c372:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c376:	bd70      	popgt	{r4, r5, r6, pc}
   8c378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c37c:	f04f 0e00 	mov.w	lr, #0
   8c380:	3c01      	subs	r4, #1
   8c382:	e690      	b.n	8c0a6 <__aeabi_dmul+0xde>
   8c384:	ea45 0e06 	orr.w	lr, r5, r6
   8c388:	e68d      	b.n	8c0a6 <__aeabi_dmul+0xde>
   8c38a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c38e:	ea94 0f0c 	teq	r4, ip
   8c392:	bf08      	it	eq
   8c394:	ea95 0f0c 	teqeq	r5, ip
   8c398:	f43f af3b 	beq.w	8c212 <__aeabi_dmul+0x24a>
   8c39c:	ea94 0f0c 	teq	r4, ip
   8c3a0:	d10a      	bne.n	8c3b8 <__aeabi_ddiv+0x19c>
   8c3a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c3a6:	f47f af34 	bne.w	8c212 <__aeabi_dmul+0x24a>
   8c3aa:	ea95 0f0c 	teq	r5, ip
   8c3ae:	f47f af25 	bne.w	8c1fc <__aeabi_dmul+0x234>
   8c3b2:	4610      	mov	r0, r2
   8c3b4:	4619      	mov	r1, r3
   8c3b6:	e72c      	b.n	8c212 <__aeabi_dmul+0x24a>
   8c3b8:	ea95 0f0c 	teq	r5, ip
   8c3bc:	d106      	bne.n	8c3cc <__aeabi_ddiv+0x1b0>
   8c3be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c3c2:	f43f aefd 	beq.w	8c1c0 <__aeabi_dmul+0x1f8>
   8c3c6:	4610      	mov	r0, r2
   8c3c8:	4619      	mov	r1, r3
   8c3ca:	e722      	b.n	8c212 <__aeabi_dmul+0x24a>
   8c3cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c3d0:	bf18      	it	ne
   8c3d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c3d6:	f47f aec5 	bne.w	8c164 <__aeabi_dmul+0x19c>
   8c3da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c3de:	f47f af0d 	bne.w	8c1fc <__aeabi_dmul+0x234>
   8c3e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c3e6:	f47f aeeb 	bne.w	8c1c0 <__aeabi_dmul+0x1f8>
   8c3ea:	e712      	b.n	8c212 <__aeabi_dmul+0x24a>

0008c3ec <__gedf2>:
   8c3ec:	f04f 3cff 	mov.w	ip, #4294967295
   8c3f0:	e006      	b.n	8c400 <__cmpdf2+0x4>
   8c3f2:	bf00      	nop

0008c3f4 <__ledf2>:
   8c3f4:	f04f 0c01 	mov.w	ip, #1
   8c3f8:	e002      	b.n	8c400 <__cmpdf2+0x4>
   8c3fa:	bf00      	nop

0008c3fc <__cmpdf2>:
   8c3fc:	f04f 0c01 	mov.w	ip, #1
   8c400:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c40c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c410:	bf18      	it	ne
   8c412:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c416:	d01b      	beq.n	8c450 <__cmpdf2+0x54>
   8c418:	b001      	add	sp, #4
   8c41a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c41e:	bf0c      	ite	eq
   8c420:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c424:	ea91 0f03 	teqne	r1, r3
   8c428:	bf02      	ittt	eq
   8c42a:	ea90 0f02 	teqeq	r0, r2
   8c42e:	2000      	moveq	r0, #0
   8c430:	4770      	bxeq	lr
   8c432:	f110 0f00 	cmn.w	r0, #0
   8c436:	ea91 0f03 	teq	r1, r3
   8c43a:	bf58      	it	pl
   8c43c:	4299      	cmppl	r1, r3
   8c43e:	bf08      	it	eq
   8c440:	4290      	cmpeq	r0, r2
   8c442:	bf2c      	ite	cs
   8c444:	17d8      	asrcs	r0, r3, #31
   8c446:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c44a:	f040 0001 	orr.w	r0, r0, #1
   8c44e:	4770      	bx	lr
   8c450:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c458:	d102      	bne.n	8c460 <__cmpdf2+0x64>
   8c45a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c45e:	d107      	bne.n	8c470 <__cmpdf2+0x74>
   8c460:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c468:	d1d6      	bne.n	8c418 <__cmpdf2+0x1c>
   8c46a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c46e:	d0d3      	beq.n	8c418 <__cmpdf2+0x1c>
   8c470:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c474:	4770      	bx	lr
   8c476:	bf00      	nop

0008c478 <__aeabi_cdrcmple>:
   8c478:	4684      	mov	ip, r0
   8c47a:	4610      	mov	r0, r2
   8c47c:	4662      	mov	r2, ip
   8c47e:	468c      	mov	ip, r1
   8c480:	4619      	mov	r1, r3
   8c482:	4663      	mov	r3, ip
   8c484:	e000      	b.n	8c488 <__aeabi_cdcmpeq>
   8c486:	bf00      	nop

0008c488 <__aeabi_cdcmpeq>:
   8c488:	b501      	push	{r0, lr}
   8c48a:	f7ff ffb7 	bl	8c3fc <__cmpdf2>
   8c48e:	2800      	cmp	r0, #0
   8c490:	bf48      	it	mi
   8c492:	f110 0f00 	cmnmi.w	r0, #0
   8c496:	bd01      	pop	{r0, pc}

0008c498 <__aeabi_dcmpeq>:
   8c498:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c49c:	f7ff fff4 	bl	8c488 <__aeabi_cdcmpeq>
   8c4a0:	bf0c      	ite	eq
   8c4a2:	2001      	moveq	r0, #1
   8c4a4:	2000      	movne	r0, #0
   8c4a6:	f85d fb08 	ldr.w	pc, [sp], #8
   8c4aa:	bf00      	nop

0008c4ac <__aeabi_dcmplt>:
   8c4ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c4b0:	f7ff ffea 	bl	8c488 <__aeabi_cdcmpeq>
   8c4b4:	bf34      	ite	cc
   8c4b6:	2001      	movcc	r0, #1
   8c4b8:	2000      	movcs	r0, #0
   8c4ba:	f85d fb08 	ldr.w	pc, [sp], #8
   8c4be:	bf00      	nop

0008c4c0 <__aeabi_dcmple>:
   8c4c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c4c4:	f7ff ffe0 	bl	8c488 <__aeabi_cdcmpeq>
   8c4c8:	bf94      	ite	ls
   8c4ca:	2001      	movls	r0, #1
   8c4cc:	2000      	movhi	r0, #0
   8c4ce:	f85d fb08 	ldr.w	pc, [sp], #8
   8c4d2:	bf00      	nop

0008c4d4 <__aeabi_dcmpge>:
   8c4d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c4d8:	f7ff ffce 	bl	8c478 <__aeabi_cdrcmple>
   8c4dc:	bf94      	ite	ls
   8c4de:	2001      	movls	r0, #1
   8c4e0:	2000      	movhi	r0, #0
   8c4e2:	f85d fb08 	ldr.w	pc, [sp], #8
   8c4e6:	bf00      	nop

0008c4e8 <__aeabi_dcmpgt>:
   8c4e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c4ec:	f7ff ffc4 	bl	8c478 <__aeabi_cdrcmple>
   8c4f0:	bf34      	ite	cc
   8c4f2:	2001      	movcc	r0, #1
   8c4f4:	2000      	movcs	r0, #0
   8c4f6:	f85d fb08 	ldr.w	pc, [sp], #8
   8c4fa:	bf00      	nop

0008c4fc <__aeabi_dcmpun>:
   8c4fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c504:	d102      	bne.n	8c50c <__aeabi_dcmpun+0x10>
   8c506:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c50a:	d10a      	bne.n	8c522 <__aeabi_dcmpun+0x26>
   8c50c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c510:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c514:	d102      	bne.n	8c51c <__aeabi_dcmpun+0x20>
   8c516:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c51a:	d102      	bne.n	8c522 <__aeabi_dcmpun+0x26>
   8c51c:	f04f 0000 	mov.w	r0, #0
   8c520:	4770      	bx	lr
   8c522:	f04f 0001 	mov.w	r0, #1
   8c526:	4770      	bx	lr

0008c528 <__aeabi_d2iz>:
   8c528:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c52c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c530:	d215      	bcs.n	8c55e <__aeabi_d2iz+0x36>
   8c532:	d511      	bpl.n	8c558 <__aeabi_d2iz+0x30>
   8c534:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c538:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c53c:	d912      	bls.n	8c564 <__aeabi_d2iz+0x3c>
   8c53e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c546:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c54a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c54e:	fa23 f002 	lsr.w	r0, r3, r2
   8c552:	bf18      	it	ne
   8c554:	4240      	negne	r0, r0
   8c556:	4770      	bx	lr
   8c558:	f04f 0000 	mov.w	r0, #0
   8c55c:	4770      	bx	lr
   8c55e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c562:	d105      	bne.n	8c570 <__aeabi_d2iz+0x48>
   8c564:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c568:	bf08      	it	eq
   8c56a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c56e:	4770      	bx	lr
   8c570:	f04f 0000 	mov.w	r0, #0
   8c574:	4770      	bx	lr
   8c576:	bf00      	nop

0008c578 <__aeabi_uldivmod>:
   8c578:	b953      	cbnz	r3, 8c590 <__aeabi_uldivmod+0x18>
   8c57a:	b94a      	cbnz	r2, 8c590 <__aeabi_uldivmod+0x18>
   8c57c:	2900      	cmp	r1, #0
   8c57e:	bf08      	it	eq
   8c580:	2800      	cmpeq	r0, #0
   8c582:	bf1c      	itt	ne
   8c584:	f04f 31ff 	movne.w	r1, #4294967295
   8c588:	f04f 30ff 	movne.w	r0, #4294967295
   8c58c:	f000 b976 	b.w	8c87c <__aeabi_idiv0>
   8c590:	f1ad 0c08 	sub.w	ip, sp, #8
   8c594:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8c598:	f000 f806 	bl	8c5a8 <__udivmoddi4>
   8c59c:	f8dd e004 	ldr.w	lr, [sp, #4]
   8c5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8c5a4:	b004      	add	sp, #16
   8c5a6:	4770      	bx	lr

0008c5a8 <__udivmoddi4>:
   8c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c5ac:	9e08      	ldr	r6, [sp, #32]
   8c5ae:	460d      	mov	r5, r1
   8c5b0:	4604      	mov	r4, r0
   8c5b2:	4688      	mov	r8, r1
   8c5b4:	2b00      	cmp	r3, #0
   8c5b6:	d14d      	bne.n	8c654 <__udivmoddi4+0xac>
   8c5b8:	428a      	cmp	r2, r1
   8c5ba:	4694      	mov	ip, r2
   8c5bc:	d968      	bls.n	8c690 <__udivmoddi4+0xe8>
   8c5be:	fab2 f282 	clz	r2, r2
   8c5c2:	b152      	cbz	r2, 8c5da <__udivmoddi4+0x32>
   8c5c4:	fa01 f302 	lsl.w	r3, r1, r2
   8c5c8:	f1c2 0120 	rsb	r1, r2, #32
   8c5cc:	fa20 f101 	lsr.w	r1, r0, r1
   8c5d0:	fa0c fc02 	lsl.w	ip, ip, r2
   8c5d4:	ea41 0803 	orr.w	r8, r1, r3
   8c5d8:	4094      	lsls	r4, r2
   8c5da:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8c5de:	fbb8 f7f1 	udiv	r7, r8, r1
   8c5e2:	fa1f fe8c 	uxth.w	lr, ip
   8c5e6:	fb01 8817 	mls	r8, r1, r7, r8
   8c5ea:	fb07 f00e 	mul.w	r0, r7, lr
   8c5ee:	0c23      	lsrs	r3, r4, #16
   8c5f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8c5f4:	4298      	cmp	r0, r3
   8c5f6:	d90a      	bls.n	8c60e <__udivmoddi4+0x66>
   8c5f8:	eb1c 0303 	adds.w	r3, ip, r3
   8c5fc:	f107 35ff 	add.w	r5, r7, #4294967295
   8c600:	f080 811e 	bcs.w	8c840 <__udivmoddi4+0x298>
   8c604:	4298      	cmp	r0, r3
   8c606:	f240 811b 	bls.w	8c840 <__udivmoddi4+0x298>
   8c60a:	3f02      	subs	r7, #2
   8c60c:	4463      	add	r3, ip
   8c60e:	1a1b      	subs	r3, r3, r0
   8c610:	fbb3 f0f1 	udiv	r0, r3, r1
   8c614:	fb01 3310 	mls	r3, r1, r0, r3
   8c618:	fb00 fe0e 	mul.w	lr, r0, lr
   8c61c:	b2a4      	uxth	r4, r4
   8c61e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8c622:	45a6      	cmp	lr, r4
   8c624:	d90a      	bls.n	8c63c <__udivmoddi4+0x94>
   8c626:	eb1c 0404 	adds.w	r4, ip, r4
   8c62a:	f100 33ff 	add.w	r3, r0, #4294967295
   8c62e:	f080 8109 	bcs.w	8c844 <__udivmoddi4+0x29c>
   8c632:	45a6      	cmp	lr, r4
   8c634:	f240 8106 	bls.w	8c844 <__udivmoddi4+0x29c>
   8c638:	4464      	add	r4, ip
   8c63a:	3802      	subs	r0, #2
   8c63c:	2100      	movs	r1, #0
   8c63e:	eba4 040e 	sub.w	r4, r4, lr
   8c642:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8c646:	b11e      	cbz	r6, 8c650 <__udivmoddi4+0xa8>
   8c648:	2300      	movs	r3, #0
   8c64a:	40d4      	lsrs	r4, r2
   8c64c:	e9c6 4300 	strd	r4, r3, [r6]
   8c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c654:	428b      	cmp	r3, r1
   8c656:	d908      	bls.n	8c66a <__udivmoddi4+0xc2>
   8c658:	2e00      	cmp	r6, #0
   8c65a:	f000 80ee 	beq.w	8c83a <__udivmoddi4+0x292>
   8c65e:	2100      	movs	r1, #0
   8c660:	e9c6 0500 	strd	r0, r5, [r6]
   8c664:	4608      	mov	r0, r1
   8c666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c66a:	fab3 f183 	clz	r1, r3
   8c66e:	2900      	cmp	r1, #0
   8c670:	d14a      	bne.n	8c708 <__udivmoddi4+0x160>
   8c672:	42ab      	cmp	r3, r5
   8c674:	d302      	bcc.n	8c67c <__udivmoddi4+0xd4>
   8c676:	4282      	cmp	r2, r0
   8c678:	f200 80fc 	bhi.w	8c874 <__udivmoddi4+0x2cc>
   8c67c:	1a84      	subs	r4, r0, r2
   8c67e:	eb65 0303 	sbc.w	r3, r5, r3
   8c682:	2001      	movs	r0, #1
   8c684:	4698      	mov	r8, r3
   8c686:	2e00      	cmp	r6, #0
   8c688:	d0e2      	beq.n	8c650 <__udivmoddi4+0xa8>
   8c68a:	e9c6 4800 	strd	r4, r8, [r6]
   8c68e:	e7df      	b.n	8c650 <__udivmoddi4+0xa8>
   8c690:	b902      	cbnz	r2, 8c694 <__udivmoddi4+0xec>
   8c692:	deff      	udf	#255	; 0xff
   8c694:	fab2 f282 	clz	r2, r2
   8c698:	2a00      	cmp	r2, #0
   8c69a:	f040 8091 	bne.w	8c7c0 <__udivmoddi4+0x218>
   8c69e:	eba1 000c 	sub.w	r0, r1, ip
   8c6a2:	2101      	movs	r1, #1
   8c6a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c6a8:	fa1f fe8c 	uxth.w	lr, ip
   8c6ac:	fbb0 f3f7 	udiv	r3, r0, r7
   8c6b0:	fb07 0013 	mls	r0, r7, r3, r0
   8c6b4:	0c25      	lsrs	r5, r4, #16
   8c6b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c6ba:	fb0e f003 	mul.w	r0, lr, r3
   8c6be:	42a8      	cmp	r0, r5
   8c6c0:	d908      	bls.n	8c6d4 <__udivmoddi4+0x12c>
   8c6c2:	eb1c 0505 	adds.w	r5, ip, r5
   8c6c6:	f103 38ff 	add.w	r8, r3, #4294967295
   8c6ca:	d202      	bcs.n	8c6d2 <__udivmoddi4+0x12a>
   8c6cc:	42a8      	cmp	r0, r5
   8c6ce:	f200 80ce 	bhi.w	8c86e <__udivmoddi4+0x2c6>
   8c6d2:	4643      	mov	r3, r8
   8c6d4:	1a2d      	subs	r5, r5, r0
   8c6d6:	fbb5 f0f7 	udiv	r0, r5, r7
   8c6da:	fb07 5510 	mls	r5, r7, r0, r5
   8c6de:	fb0e fe00 	mul.w	lr, lr, r0
   8c6e2:	b2a4      	uxth	r4, r4
   8c6e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8c6e8:	45a6      	cmp	lr, r4
   8c6ea:	d908      	bls.n	8c6fe <__udivmoddi4+0x156>
   8c6ec:	eb1c 0404 	adds.w	r4, ip, r4
   8c6f0:	f100 35ff 	add.w	r5, r0, #4294967295
   8c6f4:	d202      	bcs.n	8c6fc <__udivmoddi4+0x154>
   8c6f6:	45a6      	cmp	lr, r4
   8c6f8:	f200 80b6 	bhi.w	8c868 <__udivmoddi4+0x2c0>
   8c6fc:	4628      	mov	r0, r5
   8c6fe:	eba4 040e 	sub.w	r4, r4, lr
   8c702:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c706:	e79e      	b.n	8c646 <__udivmoddi4+0x9e>
   8c708:	f1c1 0720 	rsb	r7, r1, #32
   8c70c:	408b      	lsls	r3, r1
   8c70e:	fa22 fc07 	lsr.w	ip, r2, r7
   8c712:	ea4c 0c03 	orr.w	ip, ip, r3
   8c716:	fa25 fa07 	lsr.w	sl, r5, r7
   8c71a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8c71e:	fbba f8f9 	udiv	r8, sl, r9
   8c722:	fa20 f307 	lsr.w	r3, r0, r7
   8c726:	fb09 aa18 	mls	sl, r9, r8, sl
   8c72a:	408d      	lsls	r5, r1
   8c72c:	fa1f fe8c 	uxth.w	lr, ip
   8c730:	431d      	orrs	r5, r3
   8c732:	fa00 f301 	lsl.w	r3, r0, r1
   8c736:	fb08 f00e 	mul.w	r0, r8, lr
   8c73a:	0c2c      	lsrs	r4, r5, #16
   8c73c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8c740:	42a0      	cmp	r0, r4
   8c742:	fa02 f201 	lsl.w	r2, r2, r1
   8c746:	d90b      	bls.n	8c760 <__udivmoddi4+0x1b8>
   8c748:	eb1c 0404 	adds.w	r4, ip, r4
   8c74c:	f108 3aff 	add.w	sl, r8, #4294967295
   8c750:	f080 8088 	bcs.w	8c864 <__udivmoddi4+0x2bc>
   8c754:	42a0      	cmp	r0, r4
   8c756:	f240 8085 	bls.w	8c864 <__udivmoddi4+0x2bc>
   8c75a:	f1a8 0802 	sub.w	r8, r8, #2
   8c75e:	4464      	add	r4, ip
   8c760:	1a24      	subs	r4, r4, r0
   8c762:	fbb4 f0f9 	udiv	r0, r4, r9
   8c766:	fb09 4410 	mls	r4, r9, r0, r4
   8c76a:	fb00 fe0e 	mul.w	lr, r0, lr
   8c76e:	b2ad      	uxth	r5, r5
   8c770:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8c774:	45a6      	cmp	lr, r4
   8c776:	d908      	bls.n	8c78a <__udivmoddi4+0x1e2>
   8c778:	eb1c 0404 	adds.w	r4, ip, r4
   8c77c:	f100 35ff 	add.w	r5, r0, #4294967295
   8c780:	d26c      	bcs.n	8c85c <__udivmoddi4+0x2b4>
   8c782:	45a6      	cmp	lr, r4
   8c784:	d96a      	bls.n	8c85c <__udivmoddi4+0x2b4>
   8c786:	3802      	subs	r0, #2
   8c788:	4464      	add	r4, ip
   8c78a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8c78e:	fba0 9502 	umull	r9, r5, r0, r2
   8c792:	eba4 040e 	sub.w	r4, r4, lr
   8c796:	42ac      	cmp	r4, r5
   8c798:	46c8      	mov	r8, r9
   8c79a:	46ae      	mov	lr, r5
   8c79c:	d356      	bcc.n	8c84c <__udivmoddi4+0x2a4>
   8c79e:	d053      	beq.n	8c848 <__udivmoddi4+0x2a0>
   8c7a0:	2e00      	cmp	r6, #0
   8c7a2:	d069      	beq.n	8c878 <__udivmoddi4+0x2d0>
   8c7a4:	ebb3 0208 	subs.w	r2, r3, r8
   8c7a8:	eb64 040e 	sbc.w	r4, r4, lr
   8c7ac:	fa22 f301 	lsr.w	r3, r2, r1
   8c7b0:	fa04 f707 	lsl.w	r7, r4, r7
   8c7b4:	431f      	orrs	r7, r3
   8c7b6:	40cc      	lsrs	r4, r1
   8c7b8:	e9c6 7400 	strd	r7, r4, [r6]
   8c7bc:	2100      	movs	r1, #0
   8c7be:	e747      	b.n	8c650 <__udivmoddi4+0xa8>
   8c7c0:	fa0c fc02 	lsl.w	ip, ip, r2
   8c7c4:	f1c2 0120 	rsb	r1, r2, #32
   8c7c8:	fa25 f301 	lsr.w	r3, r5, r1
   8c7cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c7d0:	fa20 f101 	lsr.w	r1, r0, r1
   8c7d4:	4095      	lsls	r5, r2
   8c7d6:	430d      	orrs	r5, r1
   8c7d8:	fbb3 f1f7 	udiv	r1, r3, r7
   8c7dc:	fb07 3311 	mls	r3, r7, r1, r3
   8c7e0:	fa1f fe8c 	uxth.w	lr, ip
   8c7e4:	0c28      	lsrs	r0, r5, #16
   8c7e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c7ea:	fb01 f30e 	mul.w	r3, r1, lr
   8c7ee:	4283      	cmp	r3, r0
   8c7f0:	fa04 f402 	lsl.w	r4, r4, r2
   8c7f4:	d908      	bls.n	8c808 <__udivmoddi4+0x260>
   8c7f6:	eb1c 0000 	adds.w	r0, ip, r0
   8c7fa:	f101 38ff 	add.w	r8, r1, #4294967295
   8c7fe:	d22f      	bcs.n	8c860 <__udivmoddi4+0x2b8>
   8c800:	4283      	cmp	r3, r0
   8c802:	d92d      	bls.n	8c860 <__udivmoddi4+0x2b8>
   8c804:	3902      	subs	r1, #2
   8c806:	4460      	add	r0, ip
   8c808:	1ac0      	subs	r0, r0, r3
   8c80a:	fbb0 f3f7 	udiv	r3, r0, r7
   8c80e:	fb07 0013 	mls	r0, r7, r3, r0
   8c812:	b2ad      	uxth	r5, r5
   8c814:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c818:	fb03 f00e 	mul.w	r0, r3, lr
   8c81c:	42a8      	cmp	r0, r5
   8c81e:	d908      	bls.n	8c832 <__udivmoddi4+0x28a>
   8c820:	eb1c 0505 	adds.w	r5, ip, r5
   8c824:	f103 38ff 	add.w	r8, r3, #4294967295
   8c828:	d216      	bcs.n	8c858 <__udivmoddi4+0x2b0>
   8c82a:	42a8      	cmp	r0, r5
   8c82c:	d914      	bls.n	8c858 <__udivmoddi4+0x2b0>
   8c82e:	3b02      	subs	r3, #2
   8c830:	4465      	add	r5, ip
   8c832:	1a28      	subs	r0, r5, r0
   8c834:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8c838:	e738      	b.n	8c6ac <__udivmoddi4+0x104>
   8c83a:	4631      	mov	r1, r6
   8c83c:	4630      	mov	r0, r6
   8c83e:	e707      	b.n	8c650 <__udivmoddi4+0xa8>
   8c840:	462f      	mov	r7, r5
   8c842:	e6e4      	b.n	8c60e <__udivmoddi4+0x66>
   8c844:	4618      	mov	r0, r3
   8c846:	e6f9      	b.n	8c63c <__udivmoddi4+0x94>
   8c848:	454b      	cmp	r3, r9
   8c84a:	d2a9      	bcs.n	8c7a0 <__udivmoddi4+0x1f8>
   8c84c:	ebb9 0802 	subs.w	r8, r9, r2
   8c850:	eb65 0e0c 	sbc.w	lr, r5, ip
   8c854:	3801      	subs	r0, #1
   8c856:	e7a3      	b.n	8c7a0 <__udivmoddi4+0x1f8>
   8c858:	4643      	mov	r3, r8
   8c85a:	e7ea      	b.n	8c832 <__udivmoddi4+0x28a>
   8c85c:	4628      	mov	r0, r5
   8c85e:	e794      	b.n	8c78a <__udivmoddi4+0x1e2>
   8c860:	4641      	mov	r1, r8
   8c862:	e7d1      	b.n	8c808 <__udivmoddi4+0x260>
   8c864:	46d0      	mov	r8, sl
   8c866:	e77b      	b.n	8c760 <__udivmoddi4+0x1b8>
   8c868:	4464      	add	r4, ip
   8c86a:	3802      	subs	r0, #2
   8c86c:	e747      	b.n	8c6fe <__udivmoddi4+0x156>
   8c86e:	3b02      	subs	r3, #2
   8c870:	4465      	add	r5, ip
   8c872:	e72f      	b.n	8c6d4 <__udivmoddi4+0x12c>
   8c874:	4608      	mov	r0, r1
   8c876:	e706      	b.n	8c686 <__udivmoddi4+0xde>
   8c878:	4631      	mov	r1, r6
   8c87a:	e6e9      	b.n	8c650 <__udivmoddi4+0xa8>

0008c87c <__aeabi_idiv0>:
   8c87c:	4770      	bx	lr
   8c87e:	bf00      	nop
   8c880:	78383025 	.word	0x78383025
   8c884:	00000000 	.word	0x00000000
   8c888:	2072614d 	.word	0x2072614d
   8c88c:	32203820 	.word	0x32203820
   8c890:	00323230 	.word	0x00323230
   8c894:	353a3531 	.word	0x353a3531
   8c898:	32333a38 	.word	0x32333a38
   8c89c:	00000000 	.word	0x00000000
   8c8a0:	70696843 	.word	0x70696843
   8c8a4:	554f4853 	.word	0x554f4853
   8c8a8:	20524554 	.word	0x20524554
   8c8ac:	31323543 	.word	0x31323543
   8c8b0:	6c614220 	.word	0x6c614220
   8c8b4:	7473696c 	.word	0x7473696c
   8c8b8:	47206369 	.word	0x47206369
   8c8bc:	4f206c65 	.word	0x4f206c65
   8c8c0:	6e696c6e 	.word	0x6e696c6e
   8c8c4:	46202e65 	.word	0x46202e65
   8c8c8:	776d7269 	.word	0x776d7269
   8c8cc:	20657261 	.word	0x20657261
   8c8d0:	6c697562 	.word	0x6c697562
   8c8d4:	25203a64 	.word	0x25203a64
   8c8d8:	73252f73 	.word	0x73252f73
   8c8dc:	0000000a 	.word	0x0000000a
   8c8e0:	69726553 	.word	0x69726553
   8c8e4:	6e206c61 	.word	0x6e206c61
   8c8e8:	65626d75 	.word	0x65626d75
   8c8ec:	25203a72 	.word	0x25203a72
   8c8f0:	00000a73 	.word	0x00000a73
   8c8f4:	74746553 	.word	0x74746553
   8c8f8:	20676e69 	.word	0x20676e69
   8c8fc:	53207075 	.word	0x53207075
   8c900:	204d4152 	.word	0x204d4152
   8c904:	6d6d6f43 	.word	0x6d6d6f43
   8c908:	63696e75 	.word	0x63696e75
   8c90c:	6f697461 	.word	0x6f697461
   8c910:	00000a6e 	.word	0x00000a6e
   8c914:	6e657645 	.word	0x6e657645
   8c918:	6f4c2074 	.word	0x6f4c2074
   8c91c:	4520706f 	.word	0x4520706f
   8c920:	7265746e 	.word	0x7265746e
   8c924:	202c6465 	.word	0x202c6465
   8c928:	74696177 	.word	0x74696177
   8c92c:	2e676e69 	.word	0x2e676e69
   8c930:	000a2e2e 	.word	0x000a2e2e

0008c934 <BUILD_DATE>:
   8c934:	2072614d 32203820 00323230              Mar  8 2022.

0008c940 <BUILD_TIME>:
   8c940:	353a3531 32333a38 00000000 00000000     15:58:32........
   8c950:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8c960:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8c970:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8c980:	0000007e                                ~...

0008c984 <LED_DESCRIPTOR>:
   8c984:	00000011 00000001 00000010 00000001     ................
   8c994:	0000004c 00000001 74697845 20676e69     L.......Exiting 
   8c9a4:	68746977 61747320 20737574 0a2e6425     with status %d..
   8c9b4:	00000000                                ....

0008c9b8 <_global_impure_ptr>:
   8c9b8:	20000488 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8c9c8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8c9d8:	66656463 00000000 33323130 37363534     cdef....01234567
   8c9e8:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8c9f8:	0000296c 00000030                       l)..0...

0008ca00 <blanks.1>:
   8ca00:	20202020 20202020 20202020 20202020                     

0008ca10 <zeroes.0>:
   8ca10:	30303030 30303030 30303030 30303030     0000000000000000

0008ca20 <blanks.1>:
   8ca20:	20202020 20202020 20202020 20202020                     

0008ca30 <zeroes.0>:
   8ca30:	30303030 30303030 30303030 30303030     0000000000000000
   8ca40:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8ca50:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8ca60:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ca70:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8ca80:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8ca90:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8caa0:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8cab0:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8cac0:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8cad0:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8cae0:	00000063 00000043 49534f50 00000058     c...C...POSIX...
   8caf0:	0000002e 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8cb00:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cb10:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8cb20:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8cb30:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8cb40:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8cb50:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8cb60:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8cb70:	0000632e 00000000                       .c......

0008cb78 <__mprec_bigtens>:
   8cb78:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8cb88:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cb98:	7f73bf3c 75154fdd                       <.s..O.u

0008cba0 <__mprec_tens>:
   8cba0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cbb0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cbc0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8cbd0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8cbe0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8cbf0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8cc00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8cc10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8cc20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8cc30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8cc40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8cc50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8cc60:	79d99db4 44ea7843                       ...yCx.D

0008cc68 <p05.0>:
   8cc68:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8cc78:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8cc88:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8cc98:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8cca8:	2520656e 25732564 00000a73              ne %d%s%s...

0008ccb4 <_ctype_>:
   8ccb4:	20202000 20202020 28282020 20282828     .         ((((( 
   8ccc4:	20202020 20202020 20202020 20202020                     
   8ccd4:	10108820 10101010 10101010 10101010      ...............
   8cce4:	04040410 04040404 10040404 10101010     ................
   8ccf4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8cd04:	01010101 01010101 01010101 10101010     ................
   8cd14:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8cd24:	02020202 02020202 02020202 10101010     ................
   8cd34:	00000020 00000000 00000000 00000000      ...............
   8cd44:	00000000 00000000 00000000 00000000     ................
   8cd54:	00000000 00000000 00000000 00000000     ................
   8cd64:	00000000 00000000 00000000 00000000     ................
   8cd74:	00000000 00000000 00000000 00000000     ................
   8cd84:	00000000 00000000 00000000 00000000     ................
   8cd94:	00000000 00000000 00000000 00000000     ................
   8cda4:	00000000 00000000 00000000 00000000     ................
   8cdb4:	00000000                                ....

0008cdb8 <_init>:
   8cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cdba:	bf00      	nop
   8cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cdbe:	bc08      	pop	{r3}
   8cdc0:	469e      	mov	lr, r3
   8cdc2:	4770      	bx	lr

0008cdc4 <__init_array_start>:
   8cdc4:	000887cd 	.word	0x000887cd

0008cdc8 <__frame_dummy_init_array_entry>:
   8cdc8:	000800e1                                ....

0008cdcc <_fini>:
   8cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cdce:	bf00      	nop
   8cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cdd2:	bc08      	pop	{r3}
   8cdd4:	469e      	mov	lr, r3
   8cdd6:	4770      	bx	lr

0008cdd8 <__do_global_dtors_aux_fini_array_entry>:
   8cdd8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2000000e:	68fb      	ldr	r3, [r7, #12]
20000010:	4a27      	ldr	r2, [pc, #156]	; (200000b0 <efc_perform_read_sequence+0xb0>)
20000012:	4293      	cmp	r3, r2
20000014:	d102      	bne.n	2000001c <efc_perform_read_sequence+0x1c>
20000016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2000001a:	e001      	b.n	20000020 <efc_perform_read_sequence+0x20>
2000001c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	uint32_t *p_ul_data =
20000020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	2b00      	cmp	r3, #0
20000026:	d101      	bne.n	2000002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20000028:	2302      	movs	r3, #2
2000002a:	e03c      	b.n	200000a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000002c:	68fb      	ldr	r3, [r7, #12]
2000002e:	681b      	ldr	r3, [r3, #0]
20000030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000034:	68fb      	ldr	r3, [r7, #12]
20000036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000038:	68bb      	ldr	r3, [r7, #8]
2000003a:	b2db      	uxtb	r3, r3
2000003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	68fb      	ldr	r3, [r7, #12]
20000046:	689b      	ldr	r3, [r3, #8]
20000048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000004a:	697b      	ldr	r3, [r7, #20]
2000004c:	f003 0301 	and.w	r3, r3, #1
20000050:	2b01      	cmp	r3, #1
20000052:	d0f7      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000054:	2300      	movs	r3, #0
20000056:	61fb      	str	r3, [r7, #28]
20000058:	e00c      	b.n	20000074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000005a:	69fb      	ldr	r3, [r7, #28]
2000005c:	009b      	lsls	r3, r3, #2
2000005e:	69ba      	ldr	r2, [r7, #24]
20000060:	441a      	add	r2, r3
20000062:	69fb      	ldr	r3, [r7, #28]
20000064:	009b      	lsls	r3, r3, #2
20000066:	6839      	ldr	r1, [r7, #0]
20000068:	440b      	add	r3, r1
2000006a:	6812      	ldr	r2, [r2, #0]
2000006c:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000006e:	69fb      	ldr	r3, [r7, #28]
20000070:	3301      	adds	r3, #1
20000072:	61fb      	str	r3, [r7, #28]
20000074:	69fa      	ldr	r2, [r7, #28]
20000076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000078:	429a      	cmp	r2, r3
2000007a:	d3ee      	bcc.n	2000005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000088:	68fb      	ldr	r3, [r7, #12]
2000008a:	689b      	ldr	r3, [r3, #8]
2000008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000008e:	697b      	ldr	r3, [r7, #20]
20000090:	f003 0301 	and.w	r3, r3, #1
20000094:	2b01      	cmp	r3, #1
20000096:	d1f7      	bne.n	20000088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000098:	68fb      	ldr	r3, [r7, #12]
2000009a:	681b      	ldr	r3, [r3, #0]
2000009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200000a0:	68fb      	ldr	r3, [r7, #12]
200000a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000a4:	2300      	movs	r3, #0
}
200000a6:	4618      	mov	r0, r3
200000a8:	3724      	adds	r7, #36	; 0x24
200000aa:	46bd      	mov	sp, r7
200000ac:	bc80      	pop	{r7}
200000ae:	4770      	bx	lr
200000b0:	400e0800 	.word	0x400e0800

200000b4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000b4:	b480      	push	{r7}
200000b6:	b083      	sub	sp, #12
200000b8:	af00      	add	r7, sp, #0
200000ba:	6078      	str	r0, [r7, #4]
200000bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	683a      	ldr	r2, [r7, #0]
200000c2:	601a      	str	r2, [r3, #0]
}
200000c4:	bf00      	nop
200000c6:	370c      	adds	r7, #12
200000c8:	46bd      	mov	sp, r7
200000ca:	bc80      	pop	{r7}
200000cc:	4770      	bx	lr

200000ce <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000ce:	b480      	push	{r7}
200000d0:	b085      	sub	sp, #20
200000d2:	af00      	add	r7, sp, #0
200000d4:	6078      	str	r0, [r7, #4]
200000d6:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000d8:	687b      	ldr	r3, [r7, #4]
200000da:	683a      	ldr	r2, [r7, #0]
200000dc:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	689b      	ldr	r3, [r3, #8]
200000e2:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000e4:	68fb      	ldr	r3, [r7, #12]
200000e6:	f003 0301 	and.w	r3, r3, #1
200000ea:	2b01      	cmp	r3, #1
200000ec:	d1f7      	bne.n	200000de <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000ee:	68fb      	ldr	r3, [r7, #12]
200000f0:	f003 0306 	and.w	r3, r3, #6
}
200000f4:	4618      	mov	r0, r3
200000f6:	3714      	adds	r7, #20
200000f8:	46bd      	mov	sp, r7
200000fa:	bc80      	pop	{r7}
200000fc:	4770      	bx	lr
200000fe:	bf00      	nop

20000100 <SystemInit>:
{
20000100:	b480      	push	{r7}
20000102:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000104:	4b2a      	ldr	r3, [pc, #168]	; (200001b0 <SystemInit+0xb0>)
20000106:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000010a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000010c:	4b29      	ldr	r3, [pc, #164]	; (200001b4 <SystemInit+0xb4>)
2000010e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000112:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000114:	4b28      	ldr	r3, [pc, #160]	; (200001b8 <SystemInit+0xb8>)
20000116:	6a1b      	ldr	r3, [r3, #32]
20000118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000011c:	2b00      	cmp	r3, #0
2000011e:	d109      	bne.n	20000134 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b25      	ldr	r3, [pc, #148]	; (200001b8 <SystemInit+0xb8>)
20000122:	4a26      	ldr	r2, [pc, #152]	; (200001bc <SystemInit+0xbc>)
20000124:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000126:	bf00      	nop
20000128:	4b23      	ldr	r3, [pc, #140]	; (200001b8 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f003 0301 	and.w	r3, r3, #1
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000134:	4b20      	ldr	r3, [pc, #128]	; (200001b8 <SystemInit+0xb8>)
20000136:	4a22      	ldr	r2, [pc, #136]	; (200001c0 <SystemInit+0xc0>)
20000138:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000013a:	bf00      	nop
2000013c:	4b1e      	ldr	r3, [pc, #120]	; (200001b8 <SystemInit+0xb8>)
2000013e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000144:	2b00      	cmp	r3, #0
20000146:	d0f9      	beq.n	2000013c <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000148:	4b1b      	ldr	r3, [pc, #108]	; (200001b8 <SystemInit+0xb8>)
2000014a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000014c:	f023 0303 	bic.w	r3, r3, #3
20000150:	4a19      	ldr	r2, [pc, #100]	; (200001b8 <SystemInit+0xb8>)
20000152:	f043 0301 	orr.w	r3, r3, #1
20000156:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000158:	bf00      	nop
2000015a:	4b17      	ldr	r3, [pc, #92]	; (200001b8 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0308 	and.w	r3, r3, #8
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000166:	4b14      	ldr	r3, [pc, #80]	; (200001b8 <SystemInit+0xb8>)
20000168:	4a16      	ldr	r2, [pc, #88]	; (200001c4 <SystemInit+0xc4>)
2000016a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2000016c:	bf00      	nop
2000016e:	4b12      	ldr	r3, [pc, #72]	; (200001b8 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0302 	and.w	r3, r3, #2
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000017a:	4b0f      	ldr	r3, [pc, #60]	; (200001b8 <SystemInit+0xb8>)
2000017c:	2211      	movs	r2, #17
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b0d      	ldr	r3, [pc, #52]	; (200001b8 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000018e:	4b0a      	ldr	r3, [pc, #40]	; (200001b8 <SystemInit+0xb8>)
20000190:	2212      	movs	r2, #18
20000192:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000194:	bf00      	nop
20000196:	4b08      	ldr	r3, [pc, #32]	; (200001b8 <SystemInit+0xb8>)
20000198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000019a:	f003 0308 	and.w	r3, r3, #8
2000019e:	2b00      	cmp	r3, #0
200001a0:	d0f9      	beq.n	20000196 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200001a2:	4b09      	ldr	r3, [pc, #36]	; (200001c8 <SystemInit+0xc8>)
200001a4:	4a09      	ldr	r2, [pc, #36]	; (200001cc <SystemInit+0xcc>)
200001a6:	601a      	str	r2, [r3, #0]
}
200001a8:	bf00      	nop
200001aa:	46bd      	mov	sp, r7
200001ac:	bc80      	pop	{r7}
200001ae:	4770      	bx	lr
200001b0:	400e0800 	.word	0x400e0800
200001b4:	400e0a00 	.word	0x400e0a00
200001b8:	400e0400 	.word	0x400e0400
200001bc:	00370809 	.word	0x00370809
200001c0:	01370809 	.word	0x01370809
200001c4:	200f3f01 	.word	0x200f3f01
200001c8:	2000047c 	.word	0x2000047c
200001cc:	05b8d800 	.word	0x05b8d800

200001d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001d0:	b480      	push	{r7}
200001d2:	b083      	sub	sp, #12
200001d4:	af00      	add	r7, sp, #0
200001d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001d8:	687b      	ldr	r3, [r7, #4]
200001da:	4a1f      	ldr	r2, [pc, #124]	; (20000258 <system_init_flash+0x88>)
200001dc:	4293      	cmp	r3, r2
200001de:	d206      	bcs.n	200001ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001e0:	4b1e      	ldr	r3, [pc, #120]	; (2000025c <system_init_flash+0x8c>)
200001e2:	2200      	movs	r2, #0
200001e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001e6:	4b1e      	ldr	r3, [pc, #120]	; (20000260 <system_init_flash+0x90>)
200001e8:	2200      	movs	r2, #0
200001ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001ec:	e02e      	b.n	2000024c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001ee:	687b      	ldr	r3, [r7, #4]
200001f0:	4a1c      	ldr	r2, [pc, #112]	; (20000264 <system_init_flash+0x94>)
200001f2:	4293      	cmp	r3, r2
200001f4:	d208      	bcs.n	20000208 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001f6:	4b19      	ldr	r3, [pc, #100]	; (2000025c <system_init_flash+0x8c>)
200001f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200001fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001fe:	4b18      	ldr	r3, [pc, #96]	; (20000260 <system_init_flash+0x90>)
20000200:	f44f 7280 	mov.w	r2, #256	; 0x100
20000204:	601a      	str	r2, [r3, #0]
}
20000206:	e021      	b.n	2000024c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000208:	687b      	ldr	r3, [r7, #4]
2000020a:	4a17      	ldr	r2, [pc, #92]	; (20000268 <system_init_flash+0x98>)
2000020c:	4293      	cmp	r3, r2
2000020e:	d808      	bhi.n	20000222 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000210:	4b12      	ldr	r3, [pc, #72]	; (2000025c <system_init_flash+0x8c>)
20000212:	f44f 7200 	mov.w	r2, #512	; 0x200
20000216:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000218:	4b11      	ldr	r3, [pc, #68]	; (20000260 <system_init_flash+0x90>)
2000021a:	f44f 7200 	mov.w	r2, #512	; 0x200
2000021e:	601a      	str	r2, [r3, #0]
}
20000220:	e014      	b.n	2000024c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000222:	687b      	ldr	r3, [r7, #4]
20000224:	4a11      	ldr	r2, [pc, #68]	; (2000026c <system_init_flash+0x9c>)
20000226:	4293      	cmp	r3, r2
20000228:	d808      	bhi.n	2000023c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000022a:	4b0c      	ldr	r3, [pc, #48]	; (2000025c <system_init_flash+0x8c>)
2000022c:	f44f 7240 	mov.w	r2, #768	; 0x300
20000230:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20000232:	4b0b      	ldr	r3, [pc, #44]	; (20000260 <system_init_flash+0x90>)
20000234:	f44f 7240 	mov.w	r2, #768	; 0x300
20000238:	601a      	str	r2, [r3, #0]
}
2000023a:	e007      	b.n	2000024c <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000023c:	4b07      	ldr	r3, [pc, #28]	; (2000025c <system_init_flash+0x8c>)
2000023e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000242:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000244:	4b06      	ldr	r3, [pc, #24]	; (20000260 <system_init_flash+0x90>)
20000246:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000024a:	601a      	str	r2, [r3, #0]
}
2000024c:	bf00      	nop
2000024e:	370c      	adds	r7, #12
20000250:	46bd      	mov	sp, r7
20000252:	bc80      	pop	{r7}
20000254:	4770      	bx	lr
20000256:	bf00      	nop
20000258:	016e3600 	.word	0x016e3600
2000025c:	400e0800 	.word	0x400e0800
20000260:	400e0a00 	.word	0x400e0a00
20000264:	02625a00 	.word	0x02625a00
20000268:	044aa1ff 	.word	0x044aa1ff
2000026c:	0501bcff 	.word	0x0501bcff

20000270 <usb_serial_number>:
20000270:	30303030 30303030 30303030 44414544     000000000000DEAD
20000280:	46454542 00000000 00000000 00000000     BEEF............
20000290:	00000000                                ....

20000294 <sram_size>:
20000294:	00400000                                ..@.

20000298 <main_b_vendor_enable>:
20000298:	00000001                                ....

2000029c <MS_OS_DESC>:
2000029c:	0000000a 06030000 0014009e 49570003     ..............WI
200002ac:	4253554e 00000000 00000000 00800000     NUSB............
200002bc:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
200002cc:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
200002dc:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
200002ec:	0030007b 00430041 00320045 00330042     {.0.A.C.E.2.B.3.
200002fc:	002d0045 00420032 00450033 0032002d     E.-.2.B.3.E.-.2.
2000030c:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
2000031c:	0034002d 00320035 00300031 00430041     -.4.5.2.1.0.A.C.
2000032c:	00320045 00330042 007d0045 00000000     E.2.B.3.E.}.....

2000033c <MS_BOS_PACKET>:
2000033c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
2000034c:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
2000035c:	00000000                                ....

20000360 <udc_string_desc_languageid>:
20000360:	04090304                                ....

20000364 <udc_string_manufacturer_name>:
20000364:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000374:	636e4920 0000002e                        Inc....

2000037c <udc_string_product_name>:
2000037c:	6c6c6142 69747369 65472063 5743206c     Ballistic Gel CW
2000038c:	00313235                                521.

20000390 <udc_string_desc>:
20000390:	00000300 00000000 00000000 00000000     ................
200003a0:	00000000 00000000 00000000 00000000     ................
200003b0:	00000000 00000000 00000000 00000000     ................
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000                                ....

200003d4 <xram>:
200003d4:	60000000                                ...`

200003d8 <udi_api_vendor>:
200003d8:	00084c79 00084cb9 00084cd5 00084d29     yL...L...L..)M..
200003e8:	00000000                                ....

200003ec <g_interrupt_enabled>:
200003ec:	00000001                                ....

200003f0 <udc_device_desc>:
200003f0:	02000112 40000000 c5212b3e 02010101     .......@>+!.....
20000400:	00000103                                ....

20000404 <udc_device_qual>:
20000404:	0200060a 40000000 00000001              .......@....

20000410 <udc_desc_fs>:
20000410:	00200209 80000101 000409fa ffff0200     .. .............
20000420:	050700ff 00400281 02050700 00004002     ......@......@..

20000430 <udc_desc_hs>:
20000430:	00200209 80000101 000409fa ffff0200     .. .............
20000440:	050700ff 02000281 02050700 00020002     ................

20000450 <udi_apis>:
20000450:	200003d8                                ... 

20000454 <udc_config_lsfs>:
20000454:	20000410 20000450                       ... P.. 

2000045c <udc_config_hs>:
2000045c:	20000430 20000450                       0.. P.. 

20000464 <udc_config>:
20000464:	200003f0 20000454 200003f0 20000404     ... T.. ... ... 
20000474:	2000045c 00000000                       \.. ....

2000047c <SystemCoreClock>:
2000047c:	003d0900                                ..=.

20000480 <_impure_ptr>:
20000480:	20000488 00000000                       ... ....

20000488 <impure_data>:
20000488:	00000000 20000774 200007dc 20000844     ....t.. ... D.. 
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000000 00000000     ................
200004f8:	00000000 00000000 00000000 00000000     ................
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000001 00000000     ................
20000538:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000 00000000 00000000     ................
20000878:	00000000 00000000 00000000 00000000     ................
20000888:	00000000 00000000 00000000 00000000     ................
20000898:	00000000 00000000 00000000 00000000     ................
200008a8:	00000000 00000000                       ........

200008b0 <__atexit_recursive_mutex>:
200008b0:	200037b8                                .7. 

200008b4 <__global_locale>:
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	00000043 00000000 00000000 00000000     C...............
200008e4:	00000000 00000000 00000000 00000000     ................
200008f4:	00000043 00000000 00000000 00000000     C...............
20000904:	00000000 00000000 00000000 00000000     ................
20000914:	00000043 00000000 00000000 00000000     C...............
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	00000043 00000000 00000000 00000000     C...............
20000964:	00000000 00000000 00000000 00000000     ................
20000974:	00000043 00000000 00000000 00000000     C...............
20000984:	00000000 00000000 00000000 00000000     ................
20000994:	0008b865 0008a86d 00000000 0008ccb4     e...m...........
200009a4:	0008caf0 0008cc80 0008cc80 0008cc80     ................
200009b4:	0008cc80 0008cc80 0008cc80 0008cc80     ................
200009c4:	0008cc80 0008cc80 ffffffff ffffffff     ................
200009d4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009e4:	00000000 00000000 00000000 00000000     ................
200009f4:	00000000 00000000 53410000 00494943     ..........ASCII.
20000a04:	00000000 00000000 00000000 00000000     ................
20000a14:	00000000 00000000 00000000              ............

20000a20 <__malloc_av_>:
20000a20:	00000000 00000000 20000a20 20000a20     ........ ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08 20000e10 20000e10     ... ... ... ... 
20000e20:	20000e18 20000e18                       ... ... 

20000e28 <__malloc_sbrk_base>:
20000e28:	ffffffff                                ....

20000e2c <__malloc_trim_threshold>:
20000e2c:	00020000                                ....
