
cw521-CW521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000affc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008affc  0008affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000da8  20000000  0008b004  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000029c0  20000da8  0008bdb0  00020da8  2**3
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020da8  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00020dd1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017a9e  00000000  00000000  00020e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000478a  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000d545  00000000  00000000  0003d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000e60  00000000  00000000  0004a587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00003178  00000000  00000000  0004b3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001ade6  00000000  00000000  0004e55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0001de99  00000000  00000000  00069345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005aeae  00000000  00000000  000871de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000038dc  00000000  00000000  000e208c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 fd 2e 08 00 2d 35 08 00 2d 35 08 00     .@. ....-5..-5..
   80010:	2d 35 08 00 2d 35 08 00 2d 35 08 00 00 00 00 00     -5..-5..-5......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 2d 35 08 00     ............-5..
   80030:	2d 35 08 00 00 00 00 00 2d 35 08 00 2d 35 08 00     -5......-5..-5..
   80040:	2d 35 08 00 2d 35 08 00 2d 35 08 00 2d 35 08 00     -5..-5..-5..-5..
   80050:	2d 35 08 00 2d 35 08 00 2d 35 08 00 2d 35 08 00     -5..-5..-5..-5..
   80060:	2d 35 08 00 2d 35 08 00 45 16 08 00 11 17 08 00     -5..-5..E.......
   80070:	dd 17 08 00 2d 35 08 00 2d 35 08 00 2d 35 08 00     ....-5..-5..-5..
   80080:	2d 35 08 00 2d 35 08 00 2d 35 08 00 2d 35 08 00     -5..-5..-5..-5..
   80090:	2d 35 08 00 2d 35 08 00 2d 35 08 00 2d 35 08 00     -5..-5..-5..-5..
   800a0:	2d 35 08 00 2d 35 08 00 2d 35 08 00 2d 35 08 00     -5..-5..-5..-5..
   800b0:	2d 35 08 00 15 1c 08 00 2d 35 08 00                 -5......-5..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000da8 	.word	0x20000da8
   800d8:	00000000 	.word	0x00000000
   800dc:	0008b004 	.word	0x0008b004

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000dac 	.word	0x20000dac
   800f8:	0008b004 	.word	0x0008b004

000800fc <usart_serial_getchar>:
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   800fc:	2200      	movs	r2, #0
{
   800fe:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80100:	4b1e      	ldr	r3, [pc, #120]	; (8017c <usart_serial_getchar+0x80>)
{
   80102:	b083      	sub	sp, #12
	if (UART == (Uart*)p_usart) {
   80104:	4298      	cmp	r0, r3
{
   80106:	4604      	mov	r4, r0
   80108:	460f      	mov	r7, r1
	uint32_t val = 0;
   8010a:	9201      	str	r2, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8010c:	d023      	beq.n	80156 <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8010e:	4b1c      	ldr	r3, [pc, #112]	; (80180 <usart_serial_getchar+0x84>)
   80110:	4298      	cmp	r0, r3
   80112:	d00d      	beq.n	80130 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80114:	4b1b      	ldr	r3, [pc, #108]	; (80184 <usart_serial_getchar+0x88>)
   80116:	4298      	cmp	r0, r3
   80118:	d112      	bne.n	80140 <usart_serial_getchar+0x44>
   8011a:	4e1b      	ldr	r6, [pc, #108]	; (80188 <usart_serial_getchar+0x8c>)
   8011c:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   8011e:	4629      	mov	r1, r5
   80120:	4620      	mov	r0, r4
   80122:	47b0      	blx	r6
   80124:	2800      	cmp	r0, #0
   80126:	d1fa      	bne.n	8011e <usart_serial_getchar+0x22>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
   80128:	9b01      	ldr	r3, [sp, #4]
   8012a:	703b      	strb	r3, [r7, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8012c:	b003      	add	sp, #12
   8012e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80130:	4e15      	ldr	r6, [pc, #84]	; (80188 <usart_serial_getchar+0x8c>)
   80132:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   80134:	4629      	mov	r1, r5
   80136:	4620      	mov	r0, r4
   80138:	47b0      	blx	r6
   8013a:	2800      	cmp	r0, #0
   8013c:	d1fa      	bne.n	80134 <usart_serial_getchar+0x38>
   8013e:	e7f3      	b.n	80128 <usart_serial_getchar+0x2c>
	if (USART2 == p_usart) {
   80140:	4b12      	ldr	r3, [pc, #72]	; (8018c <usart_serial_getchar+0x90>)
   80142:	4298      	cmp	r0, r3
   80144:	d10f      	bne.n	80166 <usart_serial_getchar+0x6a>
   80146:	4e10      	ldr	r6, [pc, #64]	; (80188 <usart_serial_getchar+0x8c>)
   80148:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   8014a:	4629      	mov	r1, r5
   8014c:	4620      	mov	r0, r4
   8014e:	47b0      	blx	r6
   80150:	2800      	cmp	r0, #0
   80152:	d1fa      	bne.n	8014a <usart_serial_getchar+0x4e>
   80154:	e7e8      	b.n	80128 <usart_serial_getchar+0x2c>
   80156:	4d0e      	ldr	r5, [pc, #56]	; (80190 <usart_serial_getchar+0x94>)
		while (uart_read((Uart*)p_usart, data));
   80158:	4639      	mov	r1, r7
   8015a:	4620      	mov	r0, r4
   8015c:	47a8      	blx	r5
   8015e:	2800      	cmp	r0, #0
   80160:	d1fa      	bne.n	80158 <usart_serial_getchar+0x5c>
}
   80162:	b003      	add	sp, #12
   80164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USART3 == p_usart) {
   80166:	4b0b      	ldr	r3, [pc, #44]	; (80194 <usart_serial_getchar+0x98>)
   80168:	4298      	cmp	r0, r3
   8016a:	d1df      	bne.n	8012c <usart_serial_getchar+0x30>
   8016c:	4e06      	ldr	r6, [pc, #24]	; (80188 <usart_serial_getchar+0x8c>)
   8016e:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   80170:	4629      	mov	r1, r5
   80172:	4620      	mov	r0, r4
   80174:	47b0      	blx	r6
   80176:	2800      	cmp	r0, #0
   80178:	d1fa      	bne.n	80170 <usart_serial_getchar+0x74>
   8017a:	e7d5      	b.n	80128 <usart_serial_getchar+0x2c>
   8017c:	400e0600 	.word	0x400e0600
   80180:	40090000 	.word	0x40090000
   80184:	40094000 	.word	0x40094000
   80188:	000815f9 	.word	0x000815f9
   8018c:	40098000 	.word	0x40098000
   80190:	00083869 	.word	0x00083869
   80194:	4009c000 	.word	0x4009c000

00080198 <usart_serial_putchar>:
	if (UART == (Uart*)p_usart) {
   80198:	4b1d      	ldr	r3, [pc, #116]	; (80210 <usart_serial_putchar+0x78>)
{
   8019a:	b570      	push	{r4, r5, r6, lr}
	if (UART == (Uart*)p_usart) {
   8019c:	4298      	cmp	r0, r3
{
   8019e:	4604      	mov	r4, r0
   801a0:	460e      	mov	r6, r1
	if (UART == (Uart*)p_usart) {
   801a2:	d015      	beq.n	801d0 <usart_serial_putchar+0x38>
	if (USART0 == p_usart) {
   801a4:	4b1b      	ldr	r3, [pc, #108]	; (80214 <usart_serial_putchar+0x7c>)
   801a6:	4298      	cmp	r0, r3
   801a8:	d01a      	beq.n	801e0 <usart_serial_putchar+0x48>
	if (USART1 == p_usart) {
   801aa:	4b1b      	ldr	r3, [pc, #108]	; (80218 <usart_serial_putchar+0x80>)
   801ac:	4298      	cmp	r0, r3
   801ae:	d01f      	beq.n	801f0 <usart_serial_putchar+0x58>
	if (USART2 == p_usart) {
   801b0:	4b1a      	ldr	r3, [pc, #104]	; (8021c <usart_serial_putchar+0x84>)
   801b2:	4298      	cmp	r0, r3
   801b4:	d004      	beq.n	801c0 <usart_serial_putchar+0x28>
	if (USART3 == p_usart) {
   801b6:	4b1a      	ldr	r3, [pc, #104]	; (80220 <usart_serial_putchar+0x88>)
   801b8:	4298      	cmp	r0, r3
   801ba:	d021      	beq.n	80200 <usart_serial_putchar+0x68>
	return 0;
   801bc:	2000      	movs	r0, #0
}
   801be:	bd70      	pop	{r4, r5, r6, pc}
   801c0:	4d18      	ldr	r5, [pc, #96]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   801c2:	4631      	mov	r1, r6
   801c4:	4620      	mov	r0, r4
   801c6:	47a8      	blx	r5
   801c8:	2800      	cmp	r0, #0
   801ca:	d1fa      	bne.n	801c2 <usart_serial_putchar+0x2a>
		return 1;
   801cc:	2001      	movs	r0, #1
}
   801ce:	bd70      	pop	{r4, r5, r6, pc}
   801d0:	4d15      	ldr	r5, [pc, #84]	; (80228 <usart_serial_putchar+0x90>)
		while (uart_write((Uart*)p_usart, c)!=0);
   801d2:	4631      	mov	r1, r6
   801d4:	4620      	mov	r0, r4
   801d6:	47a8      	blx	r5
   801d8:	2800      	cmp	r0, #0
   801da:	d1fa      	bne.n	801d2 <usart_serial_putchar+0x3a>
		return 1;
   801dc:	2001      	movs	r0, #1
   801de:	e7f6      	b.n	801ce <usart_serial_putchar+0x36>
   801e0:	4d10      	ldr	r5, [pc, #64]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   801e2:	4631      	mov	r1, r6
   801e4:	4620      	mov	r0, r4
   801e6:	47a8      	blx	r5
   801e8:	2800      	cmp	r0, #0
   801ea:	d1fa      	bne.n	801e2 <usart_serial_putchar+0x4a>
		return 1;
   801ec:	2001      	movs	r0, #1
   801ee:	e7ee      	b.n	801ce <usart_serial_putchar+0x36>
   801f0:	4d0c      	ldr	r5, [pc, #48]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   801f2:	4631      	mov	r1, r6
   801f4:	4620      	mov	r0, r4
   801f6:	47a8      	blx	r5
   801f8:	2800      	cmp	r0, #0
   801fa:	d1fa      	bne.n	801f2 <usart_serial_putchar+0x5a>
		return 1;
   801fc:	2001      	movs	r0, #1
   801fe:	e7e6      	b.n	801ce <usart_serial_putchar+0x36>
   80200:	4d08      	ldr	r5, [pc, #32]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   80202:	4631      	mov	r1, r6
   80204:	4620      	mov	r0, r4
   80206:	47a8      	blx	r5
   80208:	2800      	cmp	r0, #0
   8020a:	d1fa      	bne.n	80202 <usart_serial_putchar+0x6a>
   8020c:	e7de      	b.n	801cc <usart_serial_putchar+0x34>
   8020e:	bf00      	nop
   80210:	400e0600 	.word	0x400e0600
   80214:	40090000 	.word	0x40090000
   80218:	40094000 	.word	0x40094000
   8021c:	40098000 	.word	0x40098000
   80220:	4009c000 	.word	0x4009c000
   80224:	000815e5 	.word	0x000815e5
   80228:	00083859 	.word	0x00083859

0008022c <main>:
int main(void)
{
  uint32_t serial_number[4];

  // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
  flash_read_unique_id(serial_number, sizeof(serial_number));
   8022c:	2110      	movs	r1, #16
{
   8022e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80232:	b089      	sub	sp, #36	; 0x24
  flash_read_unique_id(serial_number, sizeof(serial_number));
   80234:	eb0d 0001 	add.w	r0, sp, r1
   80238:	4b8b      	ldr	r3, [pc, #556]	; (80468 <main+0x23c>)
   8023a:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8023c:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8046c <main+0x240>
   80240:	2008      	movs	r0, #8
   80242:	47d0      	blx	sl
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80244:	4a8a      	ldr	r2, [pc, #552]	; (80470 <main+0x244>)
   80246:	498b      	ldr	r1, [pc, #556]	; (80474 <main+0x248>)
	stdio_base = (void *)usart;
   80248:	4c8b      	ldr	r4, [pc, #556]	; (80478 <main+0x24c>)
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8024a:	6011      	str	r1, [r2, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8024c:	4a8b      	ldr	r2, [pc, #556]	; (8047c <main+0x250>)
   8024e:	498c      	ldr	r1, [pc, #560]	; (80480 <main+0x254>)
	stdio_base = (void *)usart;
   80250:	4b8c      	ldr	r3, [pc, #560]	; (80484 <main+0x258>)
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80252:	6011      	str	r1, [r2, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80254:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	stdio_base = (void *)usart;
   80258:	601c      	str	r4, [r3, #0]
	uart_settings.ul_mode = opt->paritytype;
   8025a:	f44f 6300 	mov.w	r3, #2048	; 0x800
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8025e:	488a      	ldr	r0, [pc, #552]	; (80488 <main+0x25c>)
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80260:	4d8a      	ldr	r5, [pc, #552]	; (8048c <main+0x260>)
   80262:	e9cd 0100 	strd	r0, r1, [sp]
   80266:	2008      	movs	r0, #8
	uart_settings.ul_mode = opt->paritytype;
   80268:	9302      	str	r3, [sp, #8]
   8026a:	47d0      	blx	sl
		uart_init((Uart*)p_usart, &uart_settings);
   8026c:	4669      	mov	r1, sp
   8026e:	4620      	mov	r0, r4
   80270:	4b87      	ldr	r3, [pc, #540]	; (80490 <main+0x264>)
   80272:	4798      	blx	r3
   80274:	682b      	ldr	r3, [r5, #0]
   80276:	4c87      	ldr	r4, [pc, #540]	; (80494 <main+0x268>)
   80278:	6898      	ldr	r0, [r3, #8]
   8027a:	2100      	movs	r1, #0
   8027c:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8027e:	682b      	ldr	r3, [r5, #0]
   80280:	2100      	movs	r1, #0
   80282:	6858      	ldr	r0, [r3, #4]
   80284:	47a0      	blx	r4

  configure_console();

  irq_initialize_vectors();
  cpu_irq_enable();
   80286:	2301      	movs	r3, #1
   80288:	4c83      	ldr	r4, [pc, #524]	; (80498 <main+0x26c>)
   8028a:	7023      	strb	r3, [r4, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8028c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80290:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   80292:	2200      	movs	r2, #0
   80294:	4d81      	ldr	r5, [pc, #516]	; (8049c <main+0x270>)

  // Initialize the sleep manager
  sleepmgr_init();
#if !SAMD21 && !SAMR21
  sysclk_init();
   80296:	4982      	ldr	r1, [pc, #520]	; (804a0 <main+0x274>)
   80298:	602a      	str	r2, [r5, #0]
   8029a:	712a      	strb	r2, [r5, #4]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8029c:	716b      	strb	r3, [r5, #5]
   8029e:	4788      	blx	r1
  board_init();
   802a0:	4a80      	ldr	r2, [pc, #512]	; (804a4 <main+0x278>)
   802a2:	f8df b204 	ldr.w	fp, [pc, #516]	; 804a8 <main+0x27c>
   802a6:	f8df 8204 	ldr.w	r8, [pc, #516]	; 804ac <main+0x280>
  system_init();
#endif

  //Convert serial number to ASCII for USB Serial number
  for(unsigned int i = 0; i < 4; i++){
    sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   802aa:	4f81      	ldr	r7, [pc, #516]	; (804b0 <main+0x284>)
   802ac:	ae04      	add	r6, sp, #16
   802ae:	f10d 0920 	add.w	r9, sp, #32
  board_init();
   802b2:	4790      	blx	r2
    sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   802b4:	f856 2b04 	ldr.w	r2, [r6], #4
   802b8:	4658      	mov	r0, fp
   802ba:	4639      	mov	r1, r7
   802bc:	47c0      	blx	r8
  for(unsigned int i = 0; i < 4; i++){
   802be:	45b1      	cmp	r9, r6
   802c0:	f10b 0b08 	add.w	fp, fp, #8
   802c4:	d1f6      	bne.n	802b4 <main+0x88>
  }
  usb_serial_number[32] = 0;
   802c6:	f04f 0b00 	mov.w	fp, #0
   802ca:	4b77      	ldr	r3, [pc, #476]	; (804a8 <main+0x27c>)

  printf("ChipSHOUTER C521 Ballistic Gel Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   802cc:	4a79      	ldr	r2, [pc, #484]	; (804b4 <main+0x288>)
  usb_serial_number[32] = 0;
   802ce:	f883 b020 	strb.w	fp, [r3, #32]
  printf("ChipSHOUTER C521 Ballistic Gel Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   802d2:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 804b8 <main+0x28c>
   802d6:	4979      	ldr	r1, [pc, #484]	; (804bc <main+0x290>)
   802d8:	4879      	ldr	r0, [pc, #484]	; (804c0 <main+0x294>)
   802da:	47c8      	blx	r9
  printf("Serial number: %s\n", usb_serial_number);
   802dc:	4972      	ldr	r1, [pc, #456]	; (804a8 <main+0x27c>)
   802de:	4879      	ldr	r0, [pc, #484]	; (804c4 <main+0x298>)
   802e0:	47c8      	blx	r9


  /* Enable SMC */
  pmc_enable_periph_clk(ID_SMC);
   802e2:	2009      	movs	r0, #9
  gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802e4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 804c8 <main+0x29c>
  pmc_enable_periph_clk(ID_SMC);
   802e8:	47d0      	blx	sl
  gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802ea:	4978      	ldr	r1, [pc, #480]	; (804cc <main+0x2a0>)
   802ec:	2029      	movs	r0, #41	; 0x29
   802ee:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   802f0:	4976      	ldr	r1, [pc, #472]	; (804cc <main+0x2a0>)
   802f2:	202a      	movs	r0, #42	; 0x2a
   802f4:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   802f6:	4975      	ldr	r1, [pc, #468]	; (804cc <main+0x2a0>)
   802f8:	202b      	movs	r0, #43	; 0x2b
   802fa:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   802fc:	4973      	ldr	r1, [pc, #460]	; (804cc <main+0x2a0>)
   802fe:	202c      	movs	r0, #44	; 0x2c
   80300:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80302:	4972      	ldr	r1, [pc, #456]	; (804cc <main+0x2a0>)
   80304:	202d      	movs	r0, #45	; 0x2d
   80306:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80308:	4970      	ldr	r1, [pc, #448]	; (804cc <main+0x2a0>)
   8030a:	202e      	movs	r0, #46	; 0x2e
   8030c:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8030e:	496f      	ldr	r1, [pc, #444]	; (804cc <main+0x2a0>)
   80310:	202f      	movs	r0, #47	; 0x2f
   80312:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80314:	496d      	ldr	r1, [pc, #436]	; (804cc <main+0x2a0>)
   80316:	2030      	movs	r0, #48	; 0x30
   80318:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D8, PIN_EBI_DATA_BUS_FLAG1);
   8031a:	496c      	ldr	r1, [pc, #432]	; (804cc <main+0x2a0>)
   8031c:	2039      	movs	r0, #57	; 0x39
   8031e:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D9, PIN_EBI_DATA_BUS_FLAG1);
   80320:	496a      	ldr	r1, [pc, #424]	; (804cc <main+0x2a0>)
   80322:	203a      	movs	r0, #58	; 0x3a
   80324:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D10, PIN_EBI_DATA_BUS_FLAG1);
   80326:	4969      	ldr	r1, [pc, #420]	; (804cc <main+0x2a0>)
   80328:	203b      	movs	r0, #59	; 0x3b
   8032a:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D11, PIN_EBI_DATA_BUS_FLAG1);
   8032c:	4967      	ldr	r1, [pc, #412]	; (804cc <main+0x2a0>)
   8032e:	203c      	movs	r0, #60	; 0x3c
   80330:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D12, PIN_EBI_DATA_BUS_FLAG1);
   80332:	4966      	ldr	r1, [pc, #408]	; (804cc <main+0x2a0>)
   80334:	203d      	movs	r0, #61	; 0x3d
   80336:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D13, PIN_EBI_DATA_BUS_FLAG1);
   80338:	4964      	ldr	r1, [pc, #400]	; (804cc <main+0x2a0>)
   8033a:	203e      	movs	r0, #62	; 0x3e
   8033c:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D14, PIN_EBI_DATA_BUS_FLAG1);
   8033e:	4963      	ldr	r1, [pc, #396]	; (804cc <main+0x2a0>)
   80340:	203f      	movs	r0, #63	; 0x3f
   80342:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_DATA_BUS_D15, PIN_EBI_DATA_BUS_FLAG2);
   80344:	4962      	ldr	r1, [pc, #392]	; (804d0 <main+0x2a4>)
   80346:	2026      	movs	r0, #38	; 0x26
   80348:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8034a:	4960      	ldr	r1, [pc, #384]	; (804cc <main+0x2a0>)
   8034c:	2033      	movs	r0, #51	; 0x33
   8034e:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80350:	495e      	ldr	r1, [pc, #376]	; (804cc <main+0x2a0>)
   80352:	2037      	movs	r0, #55	; 0x37
   80354:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80356:	495d      	ldr	r1, [pc, #372]	; (804cc <main+0x2a0>)
   80358:	2034      	movs	r0, #52	; 0x34
   8035a:	47c0      	blx	r8

  gpio_configure_pin(PIN_EBI_ADDR_BUS_NBS0, PIN_EBI_ADDR_BUS_FLAG1);
   8035c:	495c      	ldr	r1, [pc, #368]	; (804d0 <main+0x2a4>)
   8035e:	2027      	movs	r0, #39	; 0x27
   80360:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_NBS1, PIN_EBI_ADDR_BUS_FLAG2);
   80362:	495a      	ldr	r1, [pc, #360]	; (804cc <main+0x2a0>)
   80364:	204f      	movs	r0, #79	; 0x4f
   80366:	47c0      	blx	r8

  gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   80368:	4959      	ldr	r1, [pc, #356]	; (804d0 <main+0x2a4>)
   8036a:	2028      	movs	r0, #40	; 0x28
   8036c:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG2);
   8036e:	4957      	ldr	r1, [pc, #348]	; (804cc <main+0x2a0>)
   80370:	2040      	movs	r0, #64	; 0x40
   80372:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG2);
   80374:	4955      	ldr	r1, [pc, #340]	; (804cc <main+0x2a0>)
   80376:	2041      	movs	r0, #65	; 0x41
   80378:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG2);
   8037a:	4954      	ldr	r1, [pc, #336]	; (804cc <main+0x2a0>)
   8037c:	2042      	movs	r0, #66	; 0x42
   8037e:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG2);
   80380:	4952      	ldr	r1, [pc, #328]	; (804cc <main+0x2a0>)
   80382:	2043      	movs	r0, #67	; 0x43
   80384:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG2);
   80386:	4951      	ldr	r1, [pc, #324]	; (804cc <main+0x2a0>)
   80388:	2044      	movs	r0, #68	; 0x44
   8038a:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG2);
   8038c:	494f      	ldr	r1, [pc, #316]	; (804cc <main+0x2a0>)
   8038e:	2045      	movs	r0, #69	; 0x45
   80390:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG2);
   80392:	494e      	ldr	r1, [pc, #312]	; (804cc <main+0x2a0>)
   80394:	2046      	movs	r0, #70	; 0x46
   80396:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG2);
   80398:	494c      	ldr	r1, [pc, #304]	; (804cc <main+0x2a0>)
   8039a:	2047      	movs	r0, #71	; 0x47
   8039c:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG2);
   8039e:	494b      	ldr	r1, [pc, #300]	; (804cc <main+0x2a0>)
   803a0:	2048      	movs	r0, #72	; 0x48
   803a2:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG2);
   803a4:	4949      	ldr	r1, [pc, #292]	; (804cc <main+0x2a0>)
   803a6:	2049      	movs	r0, #73	; 0x49
   803a8:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG2);
   803aa:	4948      	ldr	r1, [pc, #288]	; (804cc <main+0x2a0>)
   803ac:	204a      	movs	r0, #74	; 0x4a
   803ae:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG2);
   803b0:	4946      	ldr	r1, [pc, #280]	; (804cc <main+0x2a0>)
   803b2:	204b      	movs	r0, #75	; 0x4b
   803b4:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
   803b6:	4945      	ldr	r1, [pc, #276]	; (804cc <main+0x2a0>)
   803b8:	2054      	movs	r0, #84	; 0x54
   803ba:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
   803bc:	4943      	ldr	r1, [pc, #268]	; (804cc <main+0x2a0>)
   803be:	2055      	movs	r0, #85	; 0x55
   803c0:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
   803c2:	4942      	ldr	r1, [pc, #264]	; (804cc <main+0x2a0>)
   803c4:	2056      	movs	r0, #86	; 0x56
   803c6:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
   803c8:	4940      	ldr	r1, [pc, #256]	; (804cc <main+0x2a0>)
   803ca:	2057      	movs	r0, #87	; 0x57
   803cc:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
   803ce:	493f      	ldr	r1, [pc, #252]	; (804cc <main+0x2a0>)
   803d0:	2058      	movs	r0, #88	; 0x58
   803d2:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
   803d4:	493d      	ldr	r1, [pc, #244]	; (804cc <main+0x2a0>)
   803d6:	2059      	movs	r0, #89	; 0x59
   803d8:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
   803da:	493c      	ldr	r1, [pc, #240]	; (804cc <main+0x2a0>)
   803dc:	205a      	movs	r0, #90	; 0x5a
   803de:	47c0      	blx	r8
  gpio_configure_pin(PIN_EBI_ADDR_BUS_A21, PIN_EBI_ADDR_BUS_FLAG2);
   803e0:	493a      	ldr	r1, [pc, #232]	; (804cc <main+0x2a0>)
   803e2:	2035      	movs	r0, #53	; 0x35
   803e4:	47c0      	blx	r8

  /* Configure EBI I/O for PSRAM connection */
  printf("Setting up SRAM Communication\n");
   803e6:	483b      	ldr	r0, [pc, #236]	; (804d4 <main+0x2a8>)
   803e8:	47c8      	blx	r9
  | SMC_CYCLE_NRD_CYCLE(8));
  smc_set_mode(SMC, 0, SMC_MODE_READ_MODE_NRD_CTRL | SMC_MODE_WRITE_MODE_NWE_CTRL
  | SMC_MODE_DBW_BIT_16);
  */

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   803ea:	4659      	mov	r1, fp
   803ec:	4a3a      	ldr	r2, [pc, #232]	; (804d8 <main+0x2ac>)
   803ee:	483b      	ldr	r0, [pc, #236]	; (804dc <main+0x2b0>)
   803f0:	4b3b      	ldr	r3, [pc, #236]	; (804e0 <main+0x2b4>)
   803f2:	4798      	blx	r3
    | SMC_SETUP_NCS_WR_SETUP(4)
    | SMC_SETUP_NRD_SETUP(4)
    | SMC_SETUP_NCS_RD_SETUP(4));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(12)
   803f4:	f04f 320c 	mov.w	r2, #202116108	; 0xc0c0c0c
   803f8:	4659      	mov	r1, fp
   803fa:	4838      	ldr	r0, [pc, #224]	; (804dc <main+0x2b0>)
   803fc:	4b39      	ldr	r3, [pc, #228]	; (804e4 <main+0x2b8>)
   803fe:	4798      	blx	r3
    | SMC_PULSE_NCS_WR_PULSE(12)
    | SMC_PULSE_NRD_PULSE(12)
    | SMC_PULSE_NCS_RD_PULSE(12));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(16)
   80400:	4b39      	ldr	r3, [pc, #228]	; (804e8 <main+0x2bc>)
   80402:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   80406:	4659      	mov	r1, fp
   80408:	4834      	ldr	r0, [pc, #208]	; (804dc <main+0x2b0>)
   8040a:	4798      	blx	r3
    | SMC_CYCLE_NRD_CYCLE(16));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE_NRD_CTRL | SMC_MODE_WRITE_MODE_NWE_CTRL
   8040c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 804ec <main+0x2c0>
   80410:	4659      	mov	r1, fp
   80412:	4832      	ldr	r0, [pc, #200]	; (804dc <main+0x2b0>)
   80414:	f241 0203 	movw	r2, #4099	; 0x1003
   80418:	47c0      	blx	r8
  /*
  osc_enable(OSC_MAINCK_XTAL);
      osc_wait_ready(OSC_MAINCK_XTAL);
      pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
  */
  ui_init();
   8041a:	4a35      	ldr	r2, [pc, #212]	; (804f0 <main+0x2c4>)
   8041c:	4790      	blx	r2

  // Start USB stack to authorize VBus monitoring
  udc_start();
   8041e:	4a35      	ldr	r2, [pc, #212]	; (804f4 <main+0x2c8>)
   80420:	4790      	blx	r2

  printf("Event Loop Entered, waiting...\n");
   80422:	4835      	ldr	r0, [pc, #212]	; (804f8 <main+0x2cc>)
   80424:	47c8      	blx	r9

  // The main loop manages only the power mode
  // because the USB management is done by interrupt
	naeusb_register_handlers();
   80426:	4a35      	ldr	r2, [pc, #212]	; (804fc <main+0x2d0>)
   80428:	4790      	blx	r2
  ballistic_register_handlers();
   8042a:	4a35      	ldr	r2, [pc, #212]	; (80500 <main+0x2d4>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
   8042c:	2601      	movs	r6, #1
   8042e:	4f35      	ldr	r7, [pc, #212]	; (80504 <main+0x2d8>)
   80430:	4790      	blx	r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80432:	b672      	cpsid	i
   80434:	f3bf 8f5f 	dmb	sy
	while (!(*lock_ptr)) {
   80438:	7828      	ldrb	r0, [r5, #0]
	cpu_irq_disable();
   8043a:	f884 b000 	strb.w	fp, [r4]
	while (!(*lock_ptr)) {
   8043e:	b970      	cbnz	r0, 8045e <main+0x232>
   80440:	4a16      	ldr	r2, [pc, #88]	; (8049c <main+0x270>)
   80442:	f812 1f01 	ldrb.w	r1, [r2, #1]!
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   80446:	3001      	adds	r0, #1
   80448:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
   8044a:	2900      	cmp	r1, #0
   8044c:	d0f9      	beq.n	80442 <main+0x216>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   8044e:	b130      	cbz	r0, 8045e <main+0x232>
   80450:	b672      	cpsid	i
   80452:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80456:	f884 b000 	strb.w	fp, [r4]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8045a:	47b8      	blx	r7
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   8045c:	e7e9      	b.n	80432 <main+0x206>
		cpu_irq_enable();
   8045e:	7026      	strb	r6, [r4, #0]
   80460:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80464:	b662      	cpsie	i
		return;
   80466:	e7e4      	b.n	80432 <main+0x206>
   80468:	00081599 	.word	0x00081599
   8046c:	0008319d 	.word	0x0008319d
   80470:	200036f8 	.word	0x200036f8
   80474:	00080199 	.word	0x00080199
   80478:	400e0600 	.word	0x400e0600
   8047c:	20003714 	.word	0x20003714
   80480:	000800fd 	.word	0x000800fd
   80484:	200036fc 	.word	0x200036fc
   80488:	05b8d800 	.word	0x05b8d800
   8048c:	200003fc 	.word	0x200003fc
   80490:	00083821 	.word	0x00083821
   80494:	00083d31 	.word	0x00083d31
   80498:	20000368 	.word	0x20000368
   8049c:	20003718 	.word	0x20003718
   804a0:	00082fbd 	.word	0x00082fbd
   804a4:	00083879 	.word	0x00083879
   804a8:	200001ec 	.word	0x200001ec
   804ac:	00083ef1 	.word	0x00083ef1
   804b0:	0008aab8 	.word	0x0008aab8
   804b4:	0008aac0 	.word	0x0008aac0
   804b8:	00083b79 	.word	0x00083b79
   804bc:	0008aacc 	.word	0x0008aacc
   804c0:	0008aad8 	.word	0x0008aad8
   804c4:	0008ab18 	.word	0x0008ab18
   804c8:	00083371 	.word	0x00083371
   804cc:	08000001 	.word	0x08000001
   804d0:	10000001 	.word	0x10000001
   804d4:	0008ab2c 	.word	0x0008ab2c
   804d8:	04040400 	.word	0x04040400
   804dc:	400e0000 	.word	0x400e0000
   804e0:	00081611 	.word	0x00081611
   804e4:	0008161d 	.word	0x0008161d
   804e8:	00081629 	.word	0x00081629
   804ec:	00081635 	.word	0x00081635
   804f0:	00083a7d 	.word	0x00083a7d
   804f4:	00080d85 	.word	0x00080d85
   804f8:	0008ab4c 	.word	0x0008ab4c
   804fc:	00080bd5 	.word	0x00080bd5
   80500:	00080931 	.word	0x00080931
   80504:	00083531 	.word	0x00083531

00080508 <ctrl_testmem>:
static unsigned int ctrlmemread_size;

volatile static uint8_t rng_done = 0;
uint8_t testmem_sent_back = 1;
void ctrl_testmem(void)
{
   80508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8050c:	4a3e      	ldr	r2, [pc, #248]	; (80608 <ctrl_testmem+0x100>)
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
     if (address > (sram_size - buflen) )
   8050e:	4b3f      	ldr	r3, [pc, #252]	; (8060c <ctrl_testmem+0x104>)
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80510:	6815      	ldr	r5, [r2, #0]
     if (address > (sram_size - buflen) )
   80512:	681b      	ldr	r3, [r3, #0]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80514:	6854      	ldr	r4, [r2, #4]
     if (address > (sram_size - buflen) )
   80516:	1b5b      	subs	r3, r3, r5
   80518:	42a3      	cmp	r3, r4
   8051a:	d303      	bcc.n	80524 <ctrl_testmem+0x1c>
          return;
     int i =0;
     if (buflen >= sizeof(buffer))
   8051c:	f242 3327 	movw	r3, #8999	; 0x2327
   80520:	429d      	cmp	r5, r3
   80522:	d901      	bls.n	80528 <ctrl_testmem+0x20>
          }
     }

     ctrlmemread_buf = (uint8_t *) found_err;
     ctrlmemread_size = 4;
}
   80524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     LED_On(LED2_GPIO);
   80528:	204c      	movs	r0, #76	; 0x4c
   8052a:	4b39      	ldr	r3, [pc, #228]	; (80610 <ctrl_testmem+0x108>)
   8052c:	4798      	blx	r3
     if (!address) {
   8052e:	2c00      	cmp	r4, #0
   80530:	d05c      	beq.n	805ec <ctrl_testmem+0xe4>
     found_err[1]++;
   80532:	4e38      	ldr	r6, [pc, #224]	; (80614 <ctrl_testmem+0x10c>)
   80534:	8873      	ldrh	r3, [r6, #2]
   80536:	3301      	adds	r3, #1
   80538:	b29b      	uxth	r3, r3
     found_err[0] = 0;
   8053a:	2200      	movs	r2, #0
     for (i = 0; i < buflen / 4; i++) {
   8053c:	08ad      	lsrs	r5, r5, #2
     found_err[1]++;
   8053e:	8073      	strh	r3, [r6, #2]
     found_err[0] = 0;
   80540:	8032      	strh	r2, [r6, #0]
     for (i = 0; i < buflen / 4; i++) {
   80542:	d04c      	beq.n	805de <ctrl_testmem+0xd6>
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   80544:	4b34      	ldr	r3, [pc, #208]	; (80618 <ctrl_testmem+0x110>)
   80546:	4935      	ldr	r1, [pc, #212]	; (8061c <ctrl_testmem+0x114>)
   80548:	681a      	ldr	r2, [r3, #0]
   8054a:	68c8      	ldr	r0, [r1, #12]
   8054c:	4422      	add	r2, r4
   8054e:	680b      	ldr	r3, [r1, #0]
   80550:	e9d1 a701 	ldrd	sl, r7, [r1, #4]
                    found_err[0] = 1;
   80554:	f04f 0801 	mov.w	r8, #1
   80558:	4931      	ldr	r1, [pc, #196]	; (80620 <ctrl_testmem+0x118>)
   8055a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   8055e:	e001      	b.n	80564 <ctrl_testmem+0x5c>
     for (i = 0; i < buflen / 4; i++) {
   80560:	4657      	mov	r7, sl
   80562:	46ca      	mov	sl, r9
}

uint32_t xorshift128(void)
{
     uint32_t s, t = state[3];
     t ^= t << 11;
   80564:	ea80 20c0 	eor.w	r0, r0, r0, lsl #11
     state[2] = state[1];
     s = state[0];
     state[1] = state[0];

     t ^= s;
     t ^= s >> 19;
   80568:	ea80 44d3 	eor.w	r4, r0, r3, lsr #19
   8056c:	405c      	eors	r4, r3
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   8056e:	f892 b000 	ldrb.w	fp, [r2]
   80572:	4699      	mov	r9, r3
     t ^= s >> 19;
   80574:	ea84 2310 	eor.w	r3, r4, r0, lsr #8
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   80578:	b2d8      	uxtb	r0, r3
   8057a:	ea80 040b 	eor.w	r4, r0, fp
               if (buffer[i * 4 + j]) {
   8057e:	4558      	cmp	r0, fp
                    found_err[0] = 1;
   80580:	bf18      	it	ne
   80582:	f8a6 8000 	strhne.w	r8, [r6]
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   80586:	700c      	strb	r4, [r1, #0]
   80588:	7854      	ldrb	r4, [r2, #1]
   8058a:	f3c3 2e07 	ubfx	lr, r3, #8, #8
               if (buffer[i * 4 + j]) {
   8058e:	45a6      	cmp	lr, r4
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   80590:	ea8e 0b04 	eor.w	fp, lr, r4
                    found_err[0] = 1;
   80594:	bf18      	it	ne
   80596:	f8a6 8000 	strhne.w	r8, [r6]
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   8059a:	f881 b001 	strb.w	fp, [r1, #1]
   8059e:	7894      	ldrb	r4, [r2, #2]
   805a0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
               if (buffer[i * 4 + j]) {
   805a4:	45a4      	cmp	ip, r4
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   805a6:	ea8c 0e04 	eor.w	lr, ip, r4
                    found_err[0] = 1;
   805aa:	bf18      	it	ne
   805ac:	f8a6 8000 	strhne.w	r8, [r6]
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   805b0:	f881 e002 	strb.w	lr, [r1, #2]
   805b4:	78d4      	ldrb	r4, [r2, #3]
     for (i = 0; i < buflen / 4; i++) {
   805b6:	3204      	adds	r2, #4
               if (buffer[i * 4 + j]) {
   805b8:	ebb4 6f13 	cmp.w	r4, r3, lsr #24
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   805bc:	ea84 6c13 	eor.w	ip, r4, r3, lsr #24
                    found_err[0] = 1;
   805c0:	bf18      	it	ne
   805c2:	f8a6 8000 	strhne.w	r8, [r6]
     for (i = 0; i < buflen / 4; i++) {
   805c6:	42aa      	cmp	r2, r5
               buffer[i * 4 + j] = xram[i * 4 + j + address] ^ ((rng_val >> (8 * j)) & 0xFF);
   805c8:	f881 c003 	strb.w	ip, [r1, #3]
               if (buffer[i * 4 + j]) {
   805cc:	4638      	mov	r0, r7
     for (i = 0; i < buflen / 4; i++) {
   805ce:	f101 0104 	add.w	r1, r1, #4
   805d2:	d1c5      	bne.n	80560 <ctrl_testmem+0x58>
   805d4:	4a11      	ldr	r2, [pc, #68]	; (8061c <ctrl_testmem+0x114>)
   805d6:	e9c2 a702 	strd	sl, r7, [r2, #8]
   805da:	e9c2 3900 	strd	r3, r9, [r2]
     ctrlmemread_size = 4;
   805de:	2204      	movs	r2, #4
     ctrlmemread_buf = (uint8_t *) found_err;
   805e0:	4910      	ldr	r1, [pc, #64]	; (80624 <ctrl_testmem+0x11c>)
     ctrlmemread_size = 4;
   805e2:	4b11      	ldr	r3, [pc, #68]	; (80628 <ctrl_testmem+0x120>)
     ctrlmemread_buf = (uint8_t *) found_err;
   805e4:	600e      	str	r6, [r1, #0]
     ctrlmemread_size = 4;
   805e6:	601a      	str	r2, [r3, #0]
}
   805e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
               state[i] = seed[i];
   805ec:	490f      	ldr	r1, [pc, #60]	; (8062c <ctrl_testmem+0x124>)
   805ee:	4a0b      	ldr	r2, [pc, #44]	; (8061c <ctrl_testmem+0x114>)
   805f0:	e9d1 6001 	ldrd	r6, r0, [r1, #4]
   805f4:	e9c2 6001 	strd	r6, r0, [r2, #4]
   805f8:	68c8      	ldr	r0, [r1, #12]
   805fa:	6809      	ldr	r1, [r1, #0]
   805fc:	2301      	movs	r3, #1
   805fe:	4e05      	ldr	r6, [pc, #20]	; (80614 <ctrl_testmem+0x10c>)
   80600:	6011      	str	r1, [r2, #0]
   80602:	60d0      	str	r0, [r2, #12]
          done = 0;
   80604:	e799      	b.n	8053a <ctrl_testmem+0x32>
   80606:	bf00      	nop
   80608:	2000311c 	.word	0x2000311c
   8060c:	20000210 	.word	0x20000210
   80610:	00082ee5 	.word	0x00082ee5
   80614:	200030f8 	.word	0x200030f8
   80618:	20000350 	.word	0x20000350
   8061c:	2000310c 	.word	0x2000310c
   80620:	20000dc4 	.word	0x20000dc4
   80624:	200030f0 	.word	0x200030f0
   80628:	200030f4 	.word	0x200030f4
   8062c:	200030fc 	.word	0x200030fc

00080630 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   80630:	b570      	push	{r4, r5, r6, lr}
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80632:	4b08      	ldr	r3, [pc, #32]	; (80654 <ctrl_readmem_ctrl+0x24>)
     FPGA_setlock(fpga_ctrlmem);
   80634:	4a08      	ldr	r2, [pc, #32]	; (80658 <ctrl_readmem_ctrl+0x28>)
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80636:	685c      	ldr	r4, [r3, #4]
     FPGA_setlock(fpga_ctrlmem);
   80638:	2005      	movs	r0, #5
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8063a:	681d      	ldr	r5, [r3, #0]
     FPGA_setlock(fpga_ctrlmem);
   8063c:	4790      	blx	r2
     ctrlmemread_size = buflen;
   8063e:	4b07      	ldr	r3, [pc, #28]	; (8065c <ctrl_readmem_ctrl+0x2c>)
     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   80640:	4a07      	ldr	r2, [pc, #28]	; (80660 <ctrl_readmem_ctrl+0x30>)
   80642:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
     ctrlmemread_size = buflen;
   80646:	601d      	str	r5, [r3, #0]
     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   80648:	6014      	str	r4, [r2, #0]
     LED_On(LED2_GPIO);
   8064a:	204c      	movs	r0, #76	; 0x4c
}
   8064c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     LED_On(LED2_GPIO);
   80650:	4b04      	ldr	r3, [pc, #16]	; (80664 <ctrl_readmem_ctrl+0x34>)
   80652:	4718      	bx	r3
   80654:	2000311c 	.word	0x2000311c
   80658:	00081551 	.word	0x00081551
   8065c:	200030f4 	.word	0x200030f4
   80660:	200030f0 	.word	0x200030f0
   80664:	00082ee5 	.word	0x00082ee5

00080668 <ctrl_writemem_ctrl>:
          }
     }
     seeded = 1;
}

void ctrl_writemem_ctrl(void){
   80668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8066c:	4f0e      	ldr	r7, [pc, #56]	; (806a8 <ctrl_writemem_ctrl+0x40>)

     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);

     //printf("Writing to %x, %d\n", address, buflen);

     FPGA_setlock(fpga_generic);
   8066e:	2001      	movs	r0, #1
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80670:	683c      	ldr	r4, [r7, #0]
     FPGA_setlock(fpga_generic);
   80672:	4e0e      	ldr	r6, [pc, #56]	; (806ac <ctrl_writemem_ctrl+0x44>)
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80674:	687d      	ldr	r5, [r7, #4]
     FPGA_setlock(fpga_generic);
   80676:	47b0      	blx	r6

     /* Start Transaction */
     LED_On(LED1_GPIO);
   80678:	2010      	movs	r0, #16
   8067a:	4b0d      	ldr	r3, [pc, #52]	; (806b0 <ctrl_writemem_ctrl+0x48>)
   8067c:	4798      	blx	r3

     /* Do memory write */
     for(unsigned int i = 0; i < buflen; i++){
   8067e:	b174      	cbz	r4, 8069e <ctrl_writemem_ctrl+0x36>
   80680:	eb07 0c04 	add.w	ip, r7, r4
   80684:	1fec      	subs	r4, r5, #7
   80686:	4d0b      	ldr	r5, [pc, #44]	; (806b4 <ctrl_writemem_ctrl+0x4c>)
   80688:	1dfb      	adds	r3, r7, #7
          xram[i+address] = ctrlbuf_payload[i];
   8068a:	1be4      	subs	r4, r4, r7
   8068c:	f10c 0c07 	add.w	ip, ip, #7
   80690:	18e2      	adds	r2, r4, r3
   80692:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   80696:	6829      	ldr	r1, [r5, #0]
     for(unsigned int i = 0; i < buflen; i++){
   80698:	4563      	cmp	r3, ip
          xram[i+address] = ctrlbuf_payload[i];
   8069a:	5488      	strb	r0, [r1, r2]
     for(unsigned int i = 0; i < buflen; i++){
   8069c:	d1f8      	bne.n	80690 <ctrl_writemem_ctrl+0x28>
     }

     FPGA_setlock(fpga_unlocked);
   8069e:	4633      	mov	r3, r6
}
   806a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     FPGA_setlock(fpga_unlocked);
   806a4:	2000      	movs	r0, #0
   806a6:	4718      	bx	r3
   806a8:	2000311c 	.word	0x2000311c
   806ac:	00081551 	.word	0x00081551
   806b0:	00082ee5 	.word	0x00082ee5
   806b4:	20000350 	.word	0x20000350

000806b8 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   806b8:	b510      	push	{r4, lr}
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   806ba:	4a06      	ldr	r2, [pc, #24]	; (806d4 <ctrl_writemem_bulk+0x1c>)

     FPGA_setlock(fpga_blockout);
   806bc:	4b06      	ldr	r3, [pc, #24]	; (806d8 <ctrl_writemem_bulk+0x20>)
   806be:	2004      	movs	r0, #4
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   806c0:	6854      	ldr	r4, [r2, #4]
     FPGA_setlock(fpga_blockout);
   806c2:	4798      	blx	r3

     /* Set address */
     bulkread_address = address;
   806c4:	4a05      	ldr	r2, [pc, #20]	; (806dc <ctrl_writemem_bulk+0x24>)
     bulkread_len = buflen;
     //FPGA_setaddr(address);

     /* Transaction done in generic callback */
     LED_On(LED1_GPIO);
   806c6:	2010      	movs	r0, #16
     bulkread_address = address;
   806c8:	6014      	str	r4, [r2, #0]
     LED_On(LED1_GPIO);
   806ca:	4b05      	ldr	r3, [pc, #20]	; (806e0 <ctrl_writemem_bulk+0x28>)
}
   806cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     LED_On(LED1_GPIO);
   806d0:	4718      	bx	r3
   806d2:	bf00      	nop
   806d4:	2000311c 	.word	0x2000311c
   806d8:	00081551 	.word	0x00081551
   806dc:	200030ec 	.word	0x200030ec
   806e0:	00082ee5 	.word	0x00082ee5

000806e4 <ctrl_readmem_bulk>:
{
   806e4:	b570      	push	{r4, r5, r6, lr}
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   806e6:	4b08      	ldr	r3, [pc, #32]	; (80708 <ctrl_readmem_bulk+0x24>)
     FPGA_setlock(fpga_blockin);
   806e8:	2002      	movs	r0, #2
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   806ea:	e9d3 5400 	ldrd	r5, r4, [r3]
     FPGA_setlock(fpga_blockin);
   806ee:	4b07      	ldr	r3, [pc, #28]	; (8070c <ctrl_readmem_bulk+0x28>)
   806f0:	4798      	blx	r3
     LED_On(LED2_GPIO);
   806f2:	204c      	movs	r0, #76	; 0x4c
   806f4:	4b06      	ldr	r3, [pc, #24]	; (80710 <ctrl_readmem_bulk+0x2c>)
   806f6:	4798      	blx	r3
     udi_vendor_bulk_in_run(
   806f8:	4629      	mov	r1, r5
   806fa:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   806fe:	4a05      	ldr	r2, [pc, #20]	; (80714 <ctrl_readmem_bulk+0x30>)
   80700:	4b05      	ldr	r3, [pc, #20]	; (80718 <ctrl_readmem_bulk+0x34>)
}
   80702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     udi_vendor_bulk_in_run(
   80706:	4718      	bx	r3
   80708:	2000311c 	.word	0x2000311c
   8070c:	00081551 	.word	0x00081551
   80710:	00082ee5 	.word	0x00082ee5
   80714:	0008079d 	.word	0x0008079d
   80718:	000832a5 	.word	0x000832a5

0008071c <ctrl_readmem_rng_bulk>:
	if (buflen >= sizeof(buffer))
   8071c:	f242 3327 	movw	r3, #8999	; 0x2327
void ctrl_readmem_rng_bulk(void){
   80720:	b510      	push	{r4, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80722:	4a07      	ldr	r2, [pc, #28]	; (80740 <ctrl_readmem_rng_bulk+0x24>)
   80724:	6814      	ldr	r4, [r2, #0]
	if (buflen >= sizeof(buffer))
   80726:	429c      	cmp	r4, r3
   80728:	d900      	bls.n	8072c <ctrl_readmem_rng_bulk+0x10>
}
   8072a:	bd10      	pop	{r4, pc}
	LED_On(LED2_GPIO);
   8072c:	204c      	movs	r0, #76	; 0x4c
   8072e:	4b05      	ldr	r3, [pc, #20]	; (80744 <ctrl_readmem_rng_bulk+0x28>)
   80730:	4798      	blx	r3
	udi_vendor_bulk_in_run(
   80732:	4621      	mov	r1, r4
}
   80734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	udi_vendor_bulk_in_run(
   80738:	4a03      	ldr	r2, [pc, #12]	; (80748 <ctrl_readmem_rng_bulk+0x2c>)
   8073a:	4804      	ldr	r0, [pc, #16]	; (8074c <ctrl_readmem_rng_bulk+0x30>)
   8073c:	4b04      	ldr	r3, [pc, #16]	; (80750 <ctrl_readmem_rng_bulk+0x34>)
   8073e:	4718      	bx	r3
   80740:	2000311c 	.word	0x2000311c
   80744:	00082ee5 	.word	0x00082ee5
   80748:	0008079d 	.word	0x0008079d
   8074c:	20000dc4 	.word	0x20000dc4
   80750:	000832a5 	.word	0x000832a5

00080754 <ballistic_setup_in_received>:
     }
}

bool ballistic_setup_in_received(void)
{
     switch (udd_g_ctrlreq.req.bRequest) {
   80754:	4a0c      	ldr	r2, [pc, #48]	; (80788 <ballistic_setup_in_received+0x34>)
   80756:	7853      	ldrb	r3, [r2, #1]
   80758:	2b12      	cmp	r3, #18
   8075a:	d002      	beq.n	80762 <ballistic_setup_in_received+0xe>
   8075c:	2b15      	cmp	r3, #21
   8075e:	d000      	beq.n	80762 <ballistic_setup_in_received+0xe>
               if (FPGA_lockstatus() == fpga_ctrlmem) {
                    FPGA_setlock(fpga_unlocked);
               }
               return true;
     }
}
   80760:	4770      	bx	lr
{
   80762:	b510      	push	{r4, lr}
               ctrlmemread_size = 0;
   80764:	2400      	movs	r4, #0
               udd_g_ctrlreq.payload_size = ctrlmemread_size;
   80766:	4b09      	ldr	r3, [pc, #36]	; (8078c <ballistic_setup_in_received+0x38>)
               udd_g_ctrlreq.payload = ctrlmemread_buf;
   80768:	4809      	ldr	r0, [pc, #36]	; (80790 <ballistic_setup_in_received+0x3c>)
               udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8076a:	6819      	ldr	r1, [r3, #0]
               udd_g_ctrlreq.payload = ctrlmemread_buf;
   8076c:	6800      	ldr	r0, [r0, #0]
               udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8076e:	8191      	strh	r1, [r2, #12]
               if (FPGA_lockstatus() == fpga_ctrlmem) {
   80770:	4908      	ldr	r1, [pc, #32]	; (80794 <ballistic_setup_in_received+0x40>)
               udd_g_ctrlreq.payload = ctrlmemread_buf;
   80772:	6090      	str	r0, [r2, #8]
               ctrlmemread_size = 0;
   80774:	601c      	str	r4, [r3, #0]
               if (FPGA_lockstatus() == fpga_ctrlmem) {
   80776:	4788      	blx	r1
   80778:	2805      	cmp	r0, #5
   8077a:	d001      	beq.n	80780 <ballistic_setup_in_received+0x2c>
}
   8077c:	2001      	movs	r0, #1
   8077e:	bd10      	pop	{r4, pc}
                    FPGA_setlock(fpga_unlocked);
   80780:	4620      	mov	r0, r4
   80782:	4b05      	ldr	r3, [pc, #20]	; (80798 <ballistic_setup_in_received+0x44>)
   80784:	4798      	blx	r3
   80786:	e7f9      	b.n	8077c <ballistic_setup_in_received+0x28>
   80788:	200036e0 	.word	0x200036e0
   8078c:	200030f4 	.word	0x200030f4
   80790:	200030f0 	.word	0x200030f0
   80794:	0008158d 	.word	0x0008158d
   80798:	00081551 	.word	0x00081551

0008079c <main_vendor_bulk_in_received>:
void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
     UNUSED(nb_transfered);
     UNUSED(ep);
     if (UDD_EP_TRANSFER_OK != status) {
   8079c:	b100      	cbz	r0, 807a0 <main_vendor_bulk_in_received+0x4>
   8079e:	4770      	bx	lr
{
   807a0:	b510      	push	{r4, lr}
          return; // Transfer aborted/error
     }

     if (FPGA_lockstatus() == fpga_blockin){
   807a2:	4b05      	ldr	r3, [pc, #20]	; (807b8 <main_vendor_bulk_in_received+0x1c>)
   807a4:	4604      	mov	r4, r0
   807a6:	4798      	blx	r3
   807a8:	2802      	cmp	r0, #2
   807aa:	d000      	beq.n	807ae <main_vendor_bulk_in_received+0x12>
          FPGA_setlock(fpga_unlocked);
     }
}
   807ac:	bd10      	pop	{r4, pc}
          FPGA_setlock(fpga_unlocked);
   807ae:	4620      	mov	r0, r4
}
   807b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          FPGA_setlock(fpga_unlocked);
   807b4:	4b01      	ldr	r3, [pc, #4]	; (807bc <main_vendor_bulk_in_received+0x20>)
   807b6:	4718      	bx	r3
   807b8:	0008158d 	.word	0x0008158d
   807bc:	00081551 	.word	0x00081551

000807c0 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   807c0:	b510      	push	{r4, lr}
     UNUSED(ep);
     if (UDD_EP_TRANSFER_OK != status) {
   807c2:	b9a8      	cbnz	r0, 807f0 <main_vendor_bulk_out_received+0x30>
          return;
     }

     if (blockendpoint_usage == bep_emem){

          for(uint32_t i = 0; i < nb_transfered; i++){
   807c4:	b181      	cbz	r1, 807e8 <main_vendor_bulk_out_received+0x28>
   807c6:	4810      	ldr	r0, [pc, #64]	; (80808 <main_vendor_bulk_out_received+0x48>)
               xram[i + bulkread_address] = main_buf_loopback[i];
   807c8:	4a10      	ldr	r2, [pc, #64]	; (8080c <main_vendor_bulk_out_received+0x4c>)
   807ca:	4603      	mov	r3, r0
   807cc:	6812      	ldr	r2, [r2, #0]
   807ce:	4c10      	ldr	r4, [pc, #64]	; (80810 <main_vendor_bulk_out_received+0x50>)
   807d0:	4401      	add	r1, r0
   807d2:	eba2 0e00 	sub.w	lr, r2, r0
   807d6:	eb0e 0203 	add.w	r2, lr, r3
   807da:	f813 cb01 	ldrb.w	ip, [r3], #1
   807de:	6820      	ldr	r0, [r4, #0]
          for(uint32_t i = 0; i < nb_transfered; i++){
   807e0:	4299      	cmp	r1, r3
               xram[i + bulkread_address] = main_buf_loopback[i];
   807e2:	f800 c002 	strb.w	ip, [r0, r2]
          for(uint32_t i = 0; i < nb_transfered; i++){
   807e6:	d1f6      	bne.n	807d6 <main_vendor_bulk_out_received+0x16>
          }

          if (FPGA_lockstatus() == fpga_blockout){
   807e8:	4b0a      	ldr	r3, [pc, #40]	; (80814 <main_vendor_bulk_out_received+0x54>)
   807ea:	4798      	blx	r3
   807ec:	2804      	cmp	r0, #4
   807ee:	d007      	beq.n	80800 <main_vendor_bulk_out_received+0x40>

     udi_vendor_bulk_out_run(
          main_buf_loopback,
          sizeof(main_buf_loopback),
          main_vendor_bulk_out_received);
}
   807f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          udi_vendor_bulk_out_run(
   807f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   807f8:	4a07      	ldr	r2, [pc, #28]	; (80818 <main_vendor_bulk_out_received+0x58>)
   807fa:	4803      	ldr	r0, [pc, #12]	; (80808 <main_vendor_bulk_out_received+0x48>)
   807fc:	4b07      	ldr	r3, [pc, #28]	; (8081c <main_vendor_bulk_out_received+0x5c>)
   807fe:	4718      	bx	r3
               FPGA_setlock(fpga_unlocked);
   80800:	4b07      	ldr	r3, [pc, #28]	; (80820 <main_vendor_bulk_out_received+0x60>)
   80802:	2000      	movs	r0, #0
   80804:	4798      	blx	r3
   80806:	e7f3      	b.n	807f0 <main_vendor_bulk_out_received+0x30>
   80808:	2000315c 	.word	0x2000315c
   8080c:	200030ec 	.word	0x200030ec
   80810:	20000350 	.word	0x20000350
   80814:	0008158d 	.word	0x0008158d
   80818:	000807c1 	.word	0x000807c1
   8081c:	000832c5 	.word	0x000832c5
   80820:	00081551 	.word	0x00081551

00080824 <ctrl_writemem_rng>:
{
   80824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80826:	4e1f      	ldr	r6, [pc, #124]	; (808a4 <ctrl_writemem_rng+0x80>)
     LED_On(LED1_GPIO);
   80828:	2010      	movs	r0, #16
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8082a:	6874      	ldr	r4, [r6, #4]
     LED_On(LED1_GPIO);
   8082c:	4b1e      	ldr	r3, [pc, #120]	; (808a8 <ctrl_writemem_rng+0x84>)
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8082e:	6837      	ldr	r7, [r6, #0]
     LED_On(LED1_GPIO);
   80830:	4798      	blx	r3
     if (!address) {
   80832:	b94c      	cbnz	r4, 80848 <ctrl_writemem_rng+0x24>
               state[i] = CTRLBUFFER_WORDPTR[i + 2];
   80834:	4d1d      	ldr	r5, [pc, #116]	; (808ac <ctrl_writemem_rng+0x88>)
               seed[i] = state[i];
   80836:	f8df c078 	ldr.w	ip, [pc, #120]	; 808b0 <ctrl_writemem_rng+0x8c>
               state[i] = CTRLBUFFER_WORDPTR[i + 2];
   8083a:	3608      	adds	r6, #8
   8083c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   80840:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
               seed[i] = state[i];
   80844:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
     for (i = 0; i < num_rng; i++) {
   80848:	08bf      	lsrs	r7, r7, #2
   8084a:	d029      	beq.n	808a0 <ctrl_writemem_rng+0x7c>
   8084c:	4d17      	ldr	r5, [pc, #92]	; (808ac <ctrl_writemem_rng+0x88>)
   8084e:	4e19      	ldr	r6, [pc, #100]	; (808b4 <ctrl_writemem_rng+0x90>)
   80850:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
     s = state[0];
   80854:	6829      	ldr	r1, [r5, #0]
     uint32_t s, t = state[3];
   80856:	68ea      	ldr	r2, [r5, #12]
     t ^= t << 11;
   80858:	ea81 40d1 	eor.w	r0, r1, r1, lsr #19
   8085c:	ea82 22c2 	eor.w	r2, r2, r2, lsl #11
     state[3] = state[2];
   80860:	ea80 0302 	eor.w	r3, r0, r2
     t ^= s >> 19;
   80864:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
     state[2] = state[1];
   80868:	6868      	ldr	r0, [r5, #4]
               xram[i * 4 + j + address] = (rng_val >> (8 * j)) & 0xFF;
   8086a:	6832      	ldr	r2, [r6, #0]
     state[3] = state[2];
   8086c:	68af      	ldr	r7, [r5, #8]
               xram[i * 4 + j + address] = (rng_val >> (8 * j)) & 0xFF;
   8086e:	fa5f fe83 	uxtb.w	lr, r3
     state[0] = t;
   80872:	e9c5 3100 	strd	r3, r1, [r5]
     state[2] = state[1];
   80876:	e9c5 0702 	strd	r0, r7, [r5, #8]
               xram[i * 4 + j + address] = (rng_val >> (8 * j)) & 0xFF;
   8087a:	f802 e004 	strb.w	lr, [r2, r4]
   8087e:	6831      	ldr	r1, [r6, #0]
   80880:	1c62      	adds	r2, r4, #1
   80882:	f3c3 2007 	ubfx	r0, r3, #8, #8
   80886:	5488      	strb	r0, [r1, r2]
   80888:	6831      	ldr	r1, [r6, #0]
   8088a:	1ca2      	adds	r2, r4, #2
   8088c:	f3c3 4007 	ubfx	r0, r3, #16, #8
   80890:	5488      	strb	r0, [r1, r2]
   80892:	6831      	ldr	r1, [r6, #0]
   80894:	1ce2      	adds	r2, r4, #3
     for (i = 0; i < num_rng; i++) {
   80896:	3404      	adds	r4, #4
               xram[i * 4 + j + address] = (rng_val >> (8 * j)) & 0xFF;
   80898:	0e1b      	lsrs	r3, r3, #24
     for (i = 0; i < num_rng; i++) {
   8089a:	45a4      	cmp	ip, r4
               xram[i * 4 + j + address] = (rng_val >> (8 * j)) & 0xFF;
   8089c:	548b      	strb	r3, [r1, r2]
     for (i = 0; i < num_rng; i++) {
   8089e:	d1d9      	bne.n	80854 <ctrl_writemem_rng+0x30>
}
   808a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   808a2:	bf00      	nop
   808a4:	2000311c 	.word	0x2000311c
   808a8:	00082ee5 	.word	0x00082ee5
   808ac:	2000310c 	.word	0x2000310c
   808b0:	200030fc 	.word	0x200030fc
   808b4:	20000350 	.word	0x20000350

000808b8 <ballistic_setup_out_received>:
{
   808b8:	b508      	push	{r3, lr}
     switch (udd_g_ctrlreq.req.bRequest) {
   808ba:	4a15      	ldr	r2, [pc, #84]	; (80910 <ballistic_setup_out_received+0x58>)
   808bc:	7853      	ldrb	r3, [r2, #1]
   808be:	3b10      	subs	r3, #16
   808c0:	2b08      	cmp	r3, #8
   808c2:	d80a      	bhi.n	808da <ballistic_setup_out_received+0x22>
   808c4:	e8df f003 	tbb	[pc, r3]
   808c8:	17130f0b 	.word	0x17130f0b
   808cc:	09091f1b 	.word	0x09091f1b
   808d0:	05          	.byte	0x05
   808d1:	00          	.byte	0x00
          udd_g_ctrlreq.callback = ctrl_readmem_rng_bulk;
   808d2:	4b10      	ldr	r3, [pc, #64]	; (80914 <ballistic_setup_out_received+0x5c>)
          return true;
   808d4:	2001      	movs	r0, #1
          udd_g_ctrlreq.callback = ctrl_readmem_rng_bulk;
   808d6:	6113      	str	r3, [r2, #16]
}
   808d8:	bd08      	pop	{r3, pc}
     switch (udd_g_ctrlreq.req.bRequest) {
   808da:	2000      	movs	r0, #0
}
   808dc:	bd08      	pop	{r3, pc}
          udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   808de:	4b0e      	ldr	r3, [pc, #56]	; (80918 <ballistic_setup_out_received+0x60>)
          return true;
   808e0:	2001      	movs	r0, #1
          udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   808e2:	6113      	str	r3, [r2, #16]
}
   808e4:	bd08      	pop	{r3, pc}
          udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   808e6:	4b0d      	ldr	r3, [pc, #52]	; (8091c <ballistic_setup_out_received+0x64>)
          return true;
   808e8:	2001      	movs	r0, #1
          udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   808ea:	6113      	str	r3, [r2, #16]
}
   808ec:	bd08      	pop	{r3, pc}
          udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   808ee:	4b0c      	ldr	r3, [pc, #48]	; (80920 <ballistic_setup_out_received+0x68>)
          return true;
   808f0:	2001      	movs	r0, #1
          udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   808f2:	6113      	str	r3, [r2, #16]
}
   808f4:	bd08      	pop	{r3, pc}
          udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   808f6:	4b0b      	ldr	r3, [pc, #44]	; (80924 <ballistic_setup_out_received+0x6c>)
          return true;
   808f8:	2001      	movs	r0, #1
          udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   808fa:	6113      	str	r3, [r2, #16]
}
   808fc:	bd08      	pop	{r3, pc}
          ctrl_writemem_rng();
   808fe:	4b0a      	ldr	r3, [pc, #40]	; (80928 <ballistic_setup_out_received+0x70>)
   80900:	4798      	blx	r3
          return true;
   80902:	2001      	movs	r0, #1
}
   80904:	bd08      	pop	{r3, pc}
          udd_g_ctrlreq.callback = ctrl_testmem;
   80906:	4b09      	ldr	r3, [pc, #36]	; (8092c <ballistic_setup_out_received+0x74>)
          return true;
   80908:	2001      	movs	r0, #1
          udd_g_ctrlreq.callback = ctrl_testmem;
   8090a:	6113      	str	r3, [r2, #16]
}
   8090c:	bd08      	pop	{r3, pc}
   8090e:	bf00      	nop
   80910:	200036e0 	.word	0x200036e0
   80914:	0008071d 	.word	0x0008071d
   80918:	000806e5 	.word	0x000806e5
   8091c:	000806b9 	.word	0x000806b9
   80920:	00080631 	.word	0x00080631
   80924:	00080669 	.word	0x00080669
   80928:	00080825 	.word	0x00080825
   8092c:	00080509 	.word	0x00080509

00080930 <ballistic_register_handlers>:

void ballistic_register_handlers(void)
{
   80930:	b510      	push	{r4, lr}
     naeusb_add_in_handler(ballistic_setup_in_received);
   80932:	4b04      	ldr	r3, [pc, #16]	; (80944 <ballistic_register_handlers+0x14>)
   80934:	4804      	ldr	r0, [pc, #16]	; (80948 <ballistic_register_handlers+0x18>)
   80936:	4798      	blx	r3
     naeusb_add_out_handler(ballistic_setup_out_received);
   80938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     naeusb_add_out_handler(ballistic_setup_out_received);
   8093c:	4803      	ldr	r0, [pc, #12]	; (8094c <ballistic_register_handlers+0x1c>)
   8093e:	4b04      	ldr	r3, [pc, #16]	; (80950 <ballistic_register_handlers+0x20>)
   80940:	4718      	bx	r3
   80942:	bf00      	nop
   80944:	00080955 	.word	0x00080955
   80948:	00080755 	.word	0x00080755
   8094c:	000808b9 	.word	0x000808b9
   80950:	0008097d 	.word	0x0008097d

00080954 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   80954:	4907      	ldr	r1, [pc, #28]	; (80974 <naeusb_add_in_handler+0x20>)
   80956:	780a      	ldrb	r2, [r1, #0]
   80958:	2a0f      	cmp	r2, #15
   8095a:	d901      	bls.n	80960 <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   8095c:	2000      	movs	r0, #0
    
}
   8095e:	4770      	bx	lr
   80960:	4603      	mov	r3, r0
{
   80962:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   80964:	1c50      	adds	r0, r2, #1
   80966:	4c04      	ldr	r4, [pc, #16]	; (80978 <naeusb_add_in_handler+0x24>)
   80968:	7008      	strb	r0, [r1, #0]
   8096a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   8096e:	2001      	movs	r0, #1
}
   80970:	bc10      	pop	{r4}
   80972:	4770      	bx	lr
   80974:	2000359c 	.word	0x2000359c
   80978:	2000355c 	.word	0x2000355c

0008097c <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   8097c:	4907      	ldr	r1, [pc, #28]	; (8099c <naeusb_add_out_handler+0x20>)
   8097e:	780a      	ldrb	r2, [r1, #0]
   80980:	2a0f      	cmp	r2, #15
   80982:	d901      	bls.n	80988 <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   80984:	2000      	movs	r0, #0
    
}
   80986:	4770      	bx	lr
   80988:	4603      	mov	r3, r0
{
   8098a:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   8098c:	1c50      	adds	r0, r2, #1
   8098e:	4c04      	ldr	r4, [pc, #16]	; (809a0 <naeusb_add_out_handler+0x24>)
   80990:	7008      	strb	r0, [r1, #0]
   80992:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   80996:	2001      	movs	r0, #1
}
   80998:	bc10      	pop	{r4}
   8099a:	4770      	bx	lr
   8099c:	2000359d 	.word	0x2000359d
   809a0:	200035a0 	.word	0x200035a0

000809a4 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   809a4:	4b00      	ldr	r3, [pc, #0]	; (809a8 <main_suspend_action+0x4>)
   809a6:	4718      	bx	r3
   809a8:	00083a99 	.word	0x00083a99

000809ac <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   809ac:	4b00      	ldr	r3, [pc, #0]	; (809b0 <main_resume_action+0x4>)
   809ae:	4718      	bx	r3
   809b0:	00083abd 	.word	0x00083abd

000809b4 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   809b4:	4b05      	ldr	r3, [pc, #20]	; (809cc <main_sof_action+0x18>)
   809b6:	781b      	ldrb	r3, [r3, #0]
   809b8:	b903      	cbnz	r3, 809bc <main_sof_action+0x8>
   809ba:	4770      	bx	lr
{
   809bc:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   809be:	4b04      	ldr	r3, [pc, #16]	; (809d0 <main_sof_action+0x1c>)
   809c0:	4798      	blx	r3
}
   809c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   809c6:	4b03      	ldr	r3, [pc, #12]	; (809d4 <main_sof_action+0x20>)
   809c8:	4718      	bx	r3
   809ca:	bf00      	nop
   809cc:	20000214 	.word	0x20000214
   809d0:	00082691 	.word	0x00082691
   809d4:	00083ad9 	.word	0x00083ad9

000809d8 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   809d8:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   809da:	2401      	movs	r4, #1
   809dc:	4d04      	ldr	r5, [pc, #16]	; (809f0 <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   809de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   809e2:	4a04      	ldr	r2, [pc, #16]	; (809f4 <main_vendor_enable+0x1c>)
   809e4:	4b04      	ldr	r3, [pc, #16]	; (809f8 <main_vendor_enable+0x20>)
   809e6:	4805      	ldr	r0, [pc, #20]	; (809fc <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   809e8:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   809ea:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   809ec:	4620      	mov	r0, r4
   809ee:	bd38      	pop	{r3, r4, r5, pc}
   809f0:	20000214 	.word	0x20000214
   809f4:	000807c1 	.word	0x000807c1
   809f8:	000832c5 	.word	0x000832c5
   809fc:	2000315c 	.word	0x2000315c

00080a00 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   80a00:	2200      	movs	r2, #0
   80a02:	4b01      	ldr	r3, [pc, #4]	; (80a08 <main_vendor_disable+0x8>)
   80a04:	701a      	strb	r2, [r3, #0]
}
   80a06:	4770      	bx	lr
   80a08:	20000214 	.word	0x20000214

00080a0c <main_setup_out_received>:

bool main_setup_out_received(void)
{
   80a0c:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   80a0e:	4b0f      	ldr	r3, [pc, #60]	; (80a4c <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80a10:	4a0f      	ldr	r2, [pc, #60]	; (80a50 <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80a12:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   80a14:	480f      	ldr	r0, [pc, #60]	; (80a54 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80a16:	2940      	cmp	r1, #64	; 0x40
   80a18:	bf28      	it	cs
   80a1a:	2140      	movcs	r1, #64	; 0x40
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80a1c:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   80a1e:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80a20:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80a22:	b18a      	cbz	r2, 80a48 <main_setup_out_received+0x3c>
   80a24:	4c0c      	ldr	r4, [pc, #48]	; (80a58 <main_setup_out_received+0x4c>)
   80a26:	1e55      	subs	r5, r2, #1
   80a28:	b2ed      	uxtb	r5, r5
   80a2a:	1b53      	subs	r3, r2, r5
   80a2c:	1f25      	subs	r5, r4, #4
   80a2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a32:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   80a36:	e001      	b.n	80a3c <main_setup_out_received+0x30>
   80a38:	42ac      	cmp	r4, r5
   80a3a:	d005      	beq.n	80a48 <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   80a3c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   80a40:	4798      	blx	r3
        if (handler_status == true) {
   80a42:	2800      	cmp	r0, #0
   80a44:	d0f8      	beq.n	80a38 <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   80a46:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   80a48:	2000      	movs	r0, #0
}
   80a4a:	bd38      	pop	{r3, r4, r5, pc}
   80a4c:	200036e0 	.word	0x200036e0
   80a50:	2000359d 	.word	0x2000359d
   80a54:	2000311c 	.word	0x2000311c
   80a58:	200035a0 	.word	0x200035a0

00080a5c <main_setup_in_received>:

bool main_setup_in_received(void)
{
   80a5c:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   80a5e:	4b0b      	ldr	r3, [pc, #44]	; (80a8c <main_setup_in_received+0x30>)
   80a60:	781a      	ldrb	r2, [r3, #0]
   80a62:	b18a      	cbz	r2, 80a88 <main_setup_in_received+0x2c>
   80a64:	4c0a      	ldr	r4, [pc, #40]	; (80a90 <main_setup_in_received+0x34>)
   80a66:	1e55      	subs	r5, r2, #1
   80a68:	b2ed      	uxtb	r5, r5
   80a6a:	1b53      	subs	r3, r2, r5
   80a6c:	1f25      	subs	r5, r4, #4
   80a6e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a72:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   80a76:	e001      	b.n	80a7c <main_setup_in_received+0x20>
   80a78:	42ac      	cmp	r4, r5
   80a7a:	d005      	beq.n	80a88 <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   80a7c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   80a80:	4798      	blx	r3
        if (handler_status == true) {
   80a82:	2800      	cmp	r0, #0
   80a84:	d0f8      	beq.n	80a78 <main_setup_in_received+0x1c>
        }
    }

    return false;

   80a86:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   80a88:	2000      	movs	r0, #0
   80a8a:	bd38      	pop	{r3, r4, r5, pc}
   80a8c:	2000359c 	.word	0x2000359c
   80a90:	2000355c 	.word	0x2000355c

00080a94 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   80a94:	4b04      	ldr	r3, [pc, #16]	; (80aa8 <naeusb_setup_out_received+0x14>)
   80a96:	785a      	ldrb	r2, [r3, #1]
   80a98:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   80a9a:	bf03      	ittte	eq
   80a9c:	4a03      	ldreq	r2, [pc, #12]	; (80aac <naeusb_setup_out_received+0x18>)
            return true;
   80a9e:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   80aa0:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   80aa2:	2000      	movne	r0, #0
}
   80aa4:	4770      	bx	lr
   80aa6:	bf00      	nop
   80aa8:	200036e0 	.word	0x200036e0
   80aac:	00080ab1 	.word	0x00080ab1

00080ab0 <naeusb_sam_cfg_out>:
{
   80ab0:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80ab2:	4b22      	ldr	r3, [pc, #136]	; (80b3c <naeusb_sam_cfg_out+0x8c>)
   80ab4:	789b      	ldrb	r3, [r3, #2]
   80ab6:	3b01      	subs	r3, #1
   80ab8:	2b10      	cmp	r3, #16
   80aba:	d80a      	bhi.n	80ad2 <naeusb_sam_cfg_out+0x22>
   80abc:	e8df f003 	tbb	[pc, r3]
   80ac0:	091b160a 	.word	0x091b160a
   80ac4:	09090909 	.word	0x09090909
   80ac8:	09090909 	.word	0x09090909
   80acc:	2d090909 	.word	0x2d090909
   80ad0:	3a          	.byte	0x3a
   80ad1:	00          	.byte	0x00
}
   80ad2:	bd10      	pop	{r4, pc}
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80ad4:	203e      	movs	r0, #62	; 0x3e
   80ad6:	4b1a      	ldr	r3, [pc, #104]	; (80b40 <naeusb_sam_cfg_out+0x90>)
   80ad8:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   80ada:	4c1a      	ldr	r4, [pc, #104]	; (80b44 <naeusb_sam_cfg_out+0x94>)
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   80adc:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80ade:	2800      	cmp	r0, #0
   80ae0:	d0fc      	beq.n	80adc <naeusb_sam_cfg_out+0x2c>
   80ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80ae6:	2010      	movs	r0, #16
   80ae8:	4b17      	ldr	r3, [pc, #92]	; (80b48 <naeusb_sam_cfg_out+0x98>)
   80aea:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80aec:	2010      	movs	r0, #16
}
   80aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80af2:	4b16      	ldr	r3, [pc, #88]	; (80b4c <naeusb_sam_cfg_out+0x9c>)
   80af4:	4718      	bx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80af6:	2201      	movs	r2, #1
   80af8:	210c      	movs	r1, #12
   80afa:	4b15      	ldr	r3, [pc, #84]	; (80b50 <naeusb_sam_cfg_out+0xa0>)
   80afc:	4815      	ldr	r0, [pc, #84]	; (80b54 <naeusb_sam_cfg_out+0xa4>)
   80afe:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   80b00:	4b15      	ldr	r3, [pc, #84]	; (80b58 <naeusb_sam_cfg_out+0xa8>)
   80b02:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80b04:	4a15      	ldr	r2, [pc, #84]	; (80b5c <naeusb_sam_cfg_out+0xac>)
   80b06:	6853      	ldr	r3, [r2, #4]
   80b08:	0399      	lsls	r1, r3, #14
   80b0a:	d4fc      	bmi.n	80b06 <naeusb_sam_cfg_out+0x56>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80b0c:	6813      	ldr	r3, [r2, #0]
   80b0e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80b12:	f043 0305 	orr.w	r3, r3, #5
   80b16:	6013      	str	r3, [r2, #0]
        while(1);
   80b18:	e7fe      	b.n	80b18 <naeusb_sam_cfg_out+0x68>
   80b1a:	4b0f      	ldr	r3, [pc, #60]	; (80b58 <naeusb_sam_cfg_out+0xa8>)
   80b1c:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80b1e:	4a0f      	ldr	r2, [pc, #60]	; (80b5c <naeusb_sam_cfg_out+0xac>)
   80b20:	6853      	ldr	r3, [r2, #4]
   80b22:	039b      	lsls	r3, r3, #14
   80b24:	d4fc      	bmi.n	80b20 <naeusb_sam_cfg_out+0x70>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80b26:	6813      	ldr	r3, [r2, #0]
   80b28:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80b2c:	f043 0305 	orr.w	r3, r3, #5
   80b30:	6013      	str	r3, [r2, #0]
        while(1);
   80b32:	e7fe      	b.n	80b32 <naeusb_sam_cfg_out+0x82>
        FPGA_releaselock();
   80b34:	4b0a      	ldr	r3, [pc, #40]	; (80b60 <naeusb_sam_cfg_out+0xb0>)
}
   80b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   80b3a:	4718      	bx	r3
   80b3c:	200036e0 	.word	0x200036e0
   80b40:	000830f1 	.word	0x000830f1
   80b44:	00083115 	.word	0x00083115
   80b48:	00083039 	.word	0x00083039
   80b4c:	00083095 	.word	0x00083095
   80b50:	000832e5 	.word	0x000832e5
   80b54:	400e0800 	.word	0x400e0800
   80b58:	000825d5 	.word	0x000825d5
   80b5c:	400e1200 	.word	0x400e1200
   80b60:	00081581 	.word	0x00081581

00080b64 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   80b64:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   80b66:	4c15      	ldr	r4, [pc, #84]	; (80bbc <naeusb_setup_in_received+0x58>)
   80b68:	7863      	ldrb	r3, [r4, #1]
   80b6a:	2b17      	cmp	r3, #23
   80b6c:	d01b      	beq.n	80ba6 <naeusb_setup_in_received+0x42>
   80b6e:	2b40      	cmp	r3, #64	; 0x40
   80b70:	d117      	bne.n	80ba2 <naeusb_setup_in_received+0x3e>
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   80b72:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   80b76:	4d12      	ldr	r5, [pc, #72]	; (80bc0 <naeusb_setup_in_received+0x5c>)
   80b78:	4b12      	ldr	r3, [pc, #72]	; (80bc4 <naeusb_setup_in_received+0x60>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   80b7a:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   80b7c:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   80b80:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   80b84:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   80b88:	4b0f      	ldr	r3, [pc, #60]	; (80bc8 <naeusb_setup_in_received+0x64>)
   80b8a:	4910      	ldr	r1, [pc, #64]	; (80bcc <naeusb_setup_in_received+0x68>)
   80b8c:	f105 0009 	add.w	r0, r5, #9
   80b90:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   80b92:	4628      	mov	r0, r5
   80b94:	4b0e      	ldr	r3, [pc, #56]	; (80bd0 <naeusb_setup_in_received+0x6c>)
    udd_g_ctrlreq.payload = respbuf;
   80b96:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   80b98:	4798      	blx	r3
   80b9a:	4603      	mov	r3, r0
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   80b9c:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   80b9e:	81a3      	strh	r3, [r4, #12]
            break;
    }
    return false;
}
   80ba0:	bd38      	pop	{r3, r4, r5, pc}
    switch (udd_g_ctrlreq.req.bRequest) {
   80ba2:	2000      	movs	r0, #0
}
   80ba4:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   80ba6:	f240 1501 	movw	r5, #257	; 0x101
    respbuf[2] = FW_VER_DEBUG;
   80baa:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   80bac:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   80bae:	4b04      	ldr	r3, [pc, #16]	; (80bc0 <naeusb_setup_in_received+0x5c>)
    udd_g_ctrlreq.payload_size = 3;
   80bb0:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   80bb2:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   80bb4:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   80bb6:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   80bb8:	81a2      	strh	r2, [r4, #12]
}
   80bba:	bd38      	pop	{r3, r4, r5, pc}
   80bbc:	200036e0 	.word	0x200036e0
   80bc0:	200035e0 	.word	0x200035e0
   80bc4:	0008ab78 	.word	0x0008ab78
   80bc8:	00083f91 	.word	0x00083f91
   80bcc:	0008ab6c 	.word	0x0008ab6c
   80bd0:	00083f35 	.word	0x00083f35

00080bd4 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   80bd4:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   80bd6:	4b04      	ldr	r3, [pc, #16]	; (80be8 <naeusb_register_handlers+0x14>)
   80bd8:	4804      	ldr	r0, [pc, #16]	; (80bec <naeusb_register_handlers+0x18>)
   80bda:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   80bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   80be0:	4803      	ldr	r0, [pc, #12]	; (80bf0 <naeusb_register_handlers+0x1c>)
   80be2:	4b04      	ldr	r3, [pc, #16]	; (80bf4 <naeusb_register_handlers+0x20>)
   80be4:	4718      	bx	r3
   80be6:	bf00      	nop
   80be8:	00080955 	.word	0x00080955
   80bec:	00080b65 	.word	0x00080b65
   80bf0:	00080a95 	.word	0x00080a95
   80bf4:	0008097d 	.word	0x0008097d

00080bf8 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80bf8:	4a02      	ldr	r2, [pc, #8]	; (80c04 <udc_valid_address+0xc>)
   80bfa:	4b03      	ldr	r3, [pc, #12]	; (80c08 <udc_valid_address+0x10>)
   80bfc:	8850      	ldrh	r0, [r2, #2]
   80bfe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80c02:	4718      	bx	r3
   80c04:	200036e0 	.word	0x200036e0
   80c08:	00082659 	.word	0x00082659

00080c0c <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c0c:	4b15      	ldr	r3, [pc, #84]	; (80c64 <udc_update_iface_desc.part.0+0x58>)
   80c0e:	681b      	ldr	r3, [r3, #0]
   80c10:	681b      	ldr	r3, [r3, #0]
   80c12:	791a      	ldrb	r2, [r3, #4]
   80c14:	4282      	cmp	r2, r0
   80c16:	d922      	bls.n	80c5e <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   80c18:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80c1a:	4c13      	ldr	r4, [pc, #76]	; (80c68 <udc_update_iface_desc.part.0+0x5c>)
   80c1c:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80c1e:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80c22:	449c      	add	ip, r3
	while (ptr_end_desc >
   80c24:	4563      	cmp	r3, ip
   80c26:	d217      	bcs.n	80c58 <udc_update_iface_desc.part.0+0x4c>
   80c28:	2500      	movs	r5, #0
   80c2a:	e004      	b.n	80c36 <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   80c2c:	781a      	ldrb	r2, [r3, #0]
   80c2e:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80c30:	4413      	add	r3, r2
	while (ptr_end_desc >
   80c32:	459c      	cmp	ip, r3
   80c34:	d90c      	bls.n	80c50 <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80c36:	785a      	ldrb	r2, [r3, #1]
   80c38:	2a04      	cmp	r2, #4
   80c3a:	d1f7      	bne.n	80c2c <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80c3c:	789a      	ldrb	r2, [r3, #2]
   80c3e:	4282      	cmp	r2, r0
   80c40:	d1f4      	bne.n	80c2c <udc_update_iface_desc.part.0+0x20>
   80c42:	78da      	ldrb	r2, [r3, #3]
   80c44:	428a      	cmp	r2, r1
   80c46:	d1f1      	bne.n	80c2c <udc_update_iface_desc.part.0+0x20>
   80c48:	b105      	cbz	r5, 80c4c <udc_update_iface_desc.part.0+0x40>
   80c4a:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   80c4c:	2001      	movs	r0, #1
   80c4e:	e001      	b.n	80c54 <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   80c50:	2000      	movs	r0, #0
   80c52:	6023      	str	r3, [r4, #0]
}
   80c54:	bc30      	pop	{r4, r5}
   80c56:	4770      	bx	lr
		return false;
   80c58:	2000      	movs	r0, #0
}
   80c5a:	bc30      	pop	{r4, r5}
   80c5c:	4770      	bx	lr
		return false;
   80c5e:	2000      	movs	r0, #0
}
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop
   80c64:	20003628 	.word	0x20003628
   80c68:	2000362c 	.word	0x2000362c

00080c6c <udc_iface_enable.part.0>:
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
   80c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c70:	4607      	mov	r7, r0
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80c72:	4b12      	ldr	r3, [pc, #72]	; (80cbc <udc_iface_enable.part.0+0x50>)
   80c74:	4d12      	ldr	r5, [pc, #72]	; (80cc0 <udc_iface_enable.part.0+0x54>)
   80c76:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80c78:	4e12      	ldr	r6, [pc, #72]	; (80cc4 <udc_iface_enable.part.0+0x58>)
			udc_ptr_conf->desc +
   80c7a:	6829      	ldr	r1, [r5, #0]
			desc->bLength);
   80c7c:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   80c7e:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80c80:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80c82:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80c84:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   80c86:	42a2      	cmp	r2, r4
   80c88:	d806      	bhi.n	80c98 <udc_iface_enable.part.0+0x2c>
   80c8a:	e008      	b.n	80c9e <udc_iface_enable.part.0+0x32>
		if (desc_id == desc->bDescriptorType) {
   80c8c:	2b05      	cmp	r3, #5
   80c8e:	d00d      	beq.n	80cac <udc_iface_enable.part.0+0x40>
				desc->bLength);
   80c90:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80c92:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   80c94:	42a2      	cmp	r2, r4
   80c96:	d902      	bls.n	80c9e <udc_iface_enable.part.0+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80c98:	7863      	ldrb	r3, [r4, #1]
   80c9a:	2b04      	cmp	r3, #4
   80c9c:	d1f6      	bne.n	80c8c <udc_iface_enable.part.0+0x20>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80c9e:	684b      	ldr	r3, [r1, #4]
   80ca0:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
}
   80ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80ca8:	681b      	ldr	r3, [r3, #0]
   80caa:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80cac:	88a2      	ldrh	r2, [r4, #4]
   80cae:	78e1      	ldrb	r1, [r4, #3]
   80cb0:	78a0      	ldrb	r0, [r4, #2]
   80cb2:	47b0      	blx	r6
   80cb4:	2800      	cmp	r0, #0
   80cb6:	d1e0      	bne.n	80c7a <udc_iface_enable.part.0+0xe>
}
   80cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80cbc:	2000362c 	.word	0x2000362c
   80cc0:	20003628 	.word	0x20003628
   80cc4:	000829b1 	.word	0x000829b1

00080cc8 <udc_iface_disable.part.0>:
static bool udc_iface_disable(uint8_t iface_num)
   80cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80ccc:	4f26      	ldr	r7, [pc, #152]	; (80d68 <udc_iface_disable.part.0+0xa0>)
static bool udc_iface_disable(uint8_t iface_num)
   80cce:	4680      	mov	r8, r0
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80cd0:	683b      	ldr	r3, [r7, #0]
   80cd2:	685b      	ldr	r3, [r3, #4]
   80cd4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cd8:	68eb      	ldr	r3, [r5, #12]
   80cda:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   80cdc:	4b23      	ldr	r3, [pc, #140]	; (80d6c <udc_iface_disable.part.0+0xa4>)
   80cde:	781b      	ldrb	r3, [r3, #0]
   80ce0:	b383      	cbz	r3, 80d44 <udc_iface_disable.part.0+0x7c>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80ce2:	683b      	ldr	r3, [r7, #0]
   80ce4:	681b      	ldr	r3, [r3, #0]
   80ce6:	791a      	ldrb	r2, [r3, #4]
   80ce8:	4542      	cmp	r2, r8
   80cea:	d92b      	bls.n	80d44 <udc_iface_disable.part.0+0x7c>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80cec:	f8df c080 	ldr.w	ip, [pc, #128]	; 80d70 <udc_iface_disable.part.0+0xa8>
   80cf0:	f8cc 3000 	str.w	r3, [ip]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80cf4:	885a      	ldrh	r2, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80cf6:	441a      	add	r2, r3
	while (ptr_end_desc >
   80cf8:	4293      	cmp	r3, r2
   80cfa:	d223      	bcs.n	80d44 <udc_iface_disable.part.0+0x7c>
   80cfc:	461c      	mov	r4, r3
   80cfe:	2600      	movs	r6, #0
   80d00:	e004      	b.n	80d0c <udc_iface_disable.part.0+0x44>
				udc_ptr_iface->bLength);
   80d02:	7821      	ldrb	r1, [r4, #0]
   80d04:	2601      	movs	r6, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80d06:	440c      	add	r4, r1
	while (ptr_end_desc >
   80d08:	42a2      	cmp	r2, r4
   80d0a:	d925      	bls.n	80d58 <udc_iface_disable.part.0+0x90>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80d0c:	7861      	ldrb	r1, [r4, #1]
   80d0e:	2904      	cmp	r1, #4
   80d10:	d1f7      	bne.n	80d02 <udc_iface_disable.part.0+0x3a>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80d12:	78a1      	ldrb	r1, [r4, #2]
   80d14:	4541      	cmp	r1, r8
   80d16:	d1f4      	bne.n	80d02 <udc_iface_disable.part.0+0x3a>
   80d18:	78e1      	ldrb	r1, [r4, #3]
   80d1a:	4281      	cmp	r1, r0
   80d1c:	d1f1      	bne.n	80d02 <udc_iface_disable.part.0+0x3a>
   80d1e:	b306      	cbz	r6, 80d62 <udc_iface_disable.part.0+0x9a>
   80d20:	f8cc 4000 	str.w	r4, [ip]
			udd_ep_free(ep_desc->bEndpointAddress);
   80d24:	4e13      	ldr	r6, [pc, #76]	; (80d74 <udc_iface_disable.part.0+0xac>)
   80d26:	e004      	b.n	80d32 <udc_iface_disable.part.0+0x6a>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80d28:	7863      	ldrb	r3, [r4, #1]
   80d2a:	2b04      	cmp	r3, #4
   80d2c:	d005      	beq.n	80d3a <udc_iface_disable.part.0+0x72>
		if (desc_id == desc->bDescriptorType) {
   80d2e:	2b05      	cmp	r3, #5
   80d30:	d00b      	beq.n	80d4a <udc_iface_disable.part.0+0x82>
			desc->bLength);
   80d32:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80d34:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   80d36:	42a2      	cmp	r2, r4
   80d38:	d8f6      	bhi.n	80d28 <udc_iface_disable.part.0+0x60>
	udi_api->disable();
   80d3a:	686b      	ldr	r3, [r5, #4]
   80d3c:	4798      	blx	r3
	return true;
   80d3e:	2001      	movs	r0, #1
}
   80d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   80d44:	2000      	movs	r0, #0
}
   80d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   80d4a:	78a0      	ldrb	r0, [r4, #2]
   80d4c:	47b0      	blx	r6
			udc_ptr_conf->desc +
   80d4e:	683b      	ldr	r3, [r7, #0]
   80d50:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80d52:	885a      	ldrh	r2, [r3, #2]
   80d54:	441a      	add	r2, r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80d56:	e7ec      	b.n	80d32 <udc_iface_disable.part.0+0x6a>
   80d58:	f8cc 4000 	str.w	r4, [ip]
		return false;
   80d5c:	2000      	movs	r0, #0
}
   80d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80d62:	461c      	mov	r4, r3
   80d64:	e7de      	b.n	80d24 <udc_iface_disable.part.0+0x5c>
   80d66:	bf00      	nop
   80d68:	20003628 	.word	0x20003628
   80d6c:	20003625 	.word	0x20003625
   80d70:	2000362c 	.word	0x2000362c
   80d74:	000826ad 	.word	0x000826ad

00080d78 <udc_get_interface_desc>:
	return udc_ptr_iface;
   80d78:	4b01      	ldr	r3, [pc, #4]	; (80d80 <udc_get_interface_desc+0x8>)
}
   80d7a:	6818      	ldr	r0, [r3, #0]
   80d7c:	4770      	bx	lr
   80d7e:	bf00      	nop
   80d80:	2000362c 	.word	0x2000362c

00080d84 <udc_start>:
	udd_enable();
   80d84:	4b00      	ldr	r3, [pc, #0]	; (80d88 <udc_start+0x4>)
   80d86:	4718      	bx	r3
   80d88:	00082515 	.word	0x00082515

00080d8c <udc_reset>:
{
   80d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (udc_num_configuration) {
   80d90:	4e1f      	ldr	r6, [pc, #124]	; (80e10 <udc_reset+0x84>)
   80d92:	7832      	ldrb	r2, [r6, #0]
   80d94:	2a00      	cmp	r2, #0
   80d96:	d02e      	beq.n	80df6 <udc_reset+0x6a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80d98:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80e14 <udc_reset+0x88>
   80d9c:	f8d8 3000 	ldr.w	r3, [r8]
   80da0:	681b      	ldr	r3, [r3, #0]
   80da2:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
   80da4:	b339      	cbz	r1, 80df6 <udc_reset+0x6a>
   80da6:	2500      	movs	r5, #0
   80da8:	4628      	mov	r0, r5
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80daa:	4f1b      	ldr	r7, [pc, #108]	; (80e18 <udc_reset+0x8c>)
	if (0 == udc_num_configuration) {
   80dac:	b1ea      	cbz	r2, 80dea <udc_reset+0x5e>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80dae:	603b      	str	r3, [r7, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80db0:	8859      	ldrh	r1, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80db2:	4419      	add	r1, r3
	while (ptr_end_desc >
   80db4:	4299      	cmp	r1, r3
   80db6:	bf88      	it	hi
   80db8:	2400      	movhi	r4, #0
   80dba:	d805      	bhi.n	80dc8 <udc_reset+0x3c>
   80dbc:	e011      	b.n	80de2 <udc_reset+0x56>
				udc_ptr_iface->bLength);
   80dbe:	781a      	ldrb	r2, [r3, #0]
   80dc0:	2401      	movs	r4, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80dc2:	4413      	add	r3, r2
	while (ptr_end_desc >
   80dc4:	4299      	cmp	r1, r3
   80dc6:	d91c      	bls.n	80e02 <udc_reset+0x76>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80dc8:	785a      	ldrb	r2, [r3, #1]
   80dca:	2a04      	cmp	r2, #4
   80dcc:	d1f7      	bne.n	80dbe <udc_reset+0x32>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80dce:	789a      	ldrb	r2, [r3, #2]
   80dd0:	4282      	cmp	r2, r0
   80dd2:	d1f4      	bne.n	80dbe <udc_reset+0x32>
   80dd4:	78da      	ldrb	r2, [r3, #3]
   80dd6:	2a00      	cmp	r2, #0
   80dd8:	d1f1      	bne.n	80dbe <udc_reset+0x32>
   80dda:	b104      	cbz	r4, 80dde <udc_reset+0x52>
   80ddc:	603b      	str	r3, [r7, #0]
   80dde:	4b0f      	ldr	r3, [pc, #60]	; (80e1c <udc_reset+0x90>)
   80de0:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80de2:	f8d8 3000 	ldr.w	r3, [r8]
   80de6:	681b      	ldr	r3, [r3, #0]
   80de8:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
   80dea:	3501      	adds	r5, #1
   80dec:	b2e8      	uxtb	r0, r5
   80dee:	4288      	cmp	r0, r1
   80df0:	d201      	bcs.n	80df6 <udc_reset+0x6a>
	if (0 == udc_num_configuration) {
   80df2:	7832      	ldrb	r2, [r6, #0]
   80df4:	e7da      	b.n	80dac <udc_reset+0x20>
	udc_num_configuration = 0;
   80df6:	2300      	movs	r3, #0
	udc_device_status =
   80df8:	4a09      	ldr	r2, [pc, #36]	; (80e20 <udc_reset+0x94>)
	udc_num_configuration = 0;
   80dfa:	7033      	strb	r3, [r6, #0]
	udc_device_status =
   80dfc:	8013      	strh	r3, [r2, #0]
}
   80dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e02:	f8d8 2000 	ldr.w	r2, [r8]
   80e06:	603b      	str	r3, [r7, #0]
   80e08:	6813      	ldr	r3, [r2, #0]
   80e0a:	7919      	ldrb	r1, [r3, #4]
   80e0c:	e7ed      	b.n	80dea <udc_reset+0x5e>
   80e0e:	bf00      	nop
   80e10:	20003625 	.word	0x20003625
   80e14:	20003628 	.word	0x20003628
   80e18:	2000362c 	.word	0x2000362c
   80e1c:	00080cc9 	.word	0x00080cc9
   80e20:	20003620 	.word	0x20003620

00080e24 <udc_sof_notify>:
{
   80e24:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   80e26:	4b11      	ldr	r3, [pc, #68]	; (80e6c <udc_sof_notify+0x48>)
   80e28:	781b      	ldrb	r3, [r3, #0]
   80e2a:	b1eb      	cbz	r3, 80e68 <udc_sof_notify+0x44>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e2c:	4d10      	ldr	r5, [pc, #64]	; (80e70 <udc_sof_notify+0x4c>)
   80e2e:	682a      	ldr	r2, [r5, #0]
   80e30:	6813      	ldr	r3, [r2, #0]
   80e32:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
   80e34:	b1c1      	cbz	r1, 80e68 <udc_sof_notify+0x44>
   80e36:	2400      	movs	r4, #0
   80e38:	4623      	mov	r3, r4
   80e3a:	6852      	ldr	r2, [r2, #4]
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   80e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80e40:	691b      	ldr	r3, [r3, #16]
   80e42:	b16b      	cbz	r3, 80e60 <udc_sof_notify+0x3c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80e44:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e46:	682a      	ldr	r2, [r5, #0]
		for (iface_num = 0;
   80e48:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e4a:	6811      	ldr	r1, [r2, #0]
		for (iface_num = 0;
   80e4c:	b2e3      	uxtb	r3, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e4e:	7909      	ldrb	r1, [r1, #4]
		for (iface_num = 0;
   80e50:	428b      	cmp	r3, r1
   80e52:	d209      	bcs.n	80e68 <udc_sof_notify+0x44>
   80e54:	6852      	ldr	r2, [r2, #4]
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   80e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80e5a:	691b      	ldr	r3, [r3, #16]
   80e5c:	2b00      	cmp	r3, #0
   80e5e:	d1f1      	bne.n	80e44 <udc_sof_notify+0x20>
		for (iface_num = 0;
   80e60:	3401      	adds	r4, #1
   80e62:	b2e3      	uxtb	r3, r4
   80e64:	4299      	cmp	r1, r3
   80e66:	d8e9      	bhi.n	80e3c <udc_sof_notify+0x18>
}
   80e68:	bd38      	pop	{r3, r4, r5, pc}
   80e6a:	bf00      	nop
   80e6c:	20003625 	.word	0x20003625
   80e70:	20003628 	.word	0x20003628

00080e74 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   80e74:	2300      	movs	r3, #0
{
   80e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   80e7a:	4ca4      	ldr	r4, [pc, #656]	; (8110c <udc_process_setup+0x298>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   80e7c:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   80e7e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   80e82:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   80e86:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   80e88:	f000 8115 	beq.w	810b6 <udc_process_setup+0x242>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   80e8c:	f994 3000 	ldrsb.w	r3, [r4]
   80e90:	7822      	ldrb	r2, [r4, #0]
   80e92:	2b00      	cmp	r3, #0
   80e94:	db0f      	blt.n	80eb6 <udc_process_setup+0x42>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80e96:	f012 0f60 	tst.w	r2, #96	; 0x60
   80e9a:	f000 8096 	beq.w	80fca <udc_process_setup+0x156>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   80e9e:	f012 0f1e 	tst.w	r2, #30
   80ea2:	d041      	beq.n	80f28 <udc_process_setup+0xb4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80ea4:	f002 021f 	and.w	r2, r2, #31
   80ea8:	2a02      	cmp	r2, #2
   80eaa:	f000 8123 	beq.w	810f4 <udc_process_setup+0x280>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80eae:	2500      	movs	r5, #0
#endif
}
   80eb0:	4628      	mov	r0, r5
   80eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   80eb6:	88e5      	ldrh	r5, [r4, #6]
   80eb8:	2d00      	cmp	r5, #0
   80eba:	d0f8      	beq.n	80eae <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80ebc:	f012 0f60 	tst.w	r2, #96	; 0x60
   80ec0:	d1ed      	bne.n	80e9e <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80ec2:	f012 031f 	ands.w	r3, r2, #31
   80ec6:	f000 81c9 	beq.w	8125c <udc_process_setup+0x3e8>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80eca:	2b01      	cmp	r3, #1
   80ecc:	f040 812e 	bne.w	8112c <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
   80ed0:	7863      	ldrb	r3, [r4, #1]
   80ed2:	2b0a      	cmp	r3, #10
   80ed4:	d125      	bne.n	80f22 <udc_process_setup+0xae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   80ed6:	2d01      	cmp	r5, #1
   80ed8:	d123      	bne.n	80f22 <udc_process_setup+0xae>
	if (!udc_num_configuration) {
   80eda:	4b8d      	ldr	r3, [pc, #564]	; (81110 <udc_process_setup+0x29c>)
   80edc:	781b      	ldrb	r3, [r3, #0]
   80ede:	b303      	cbz	r3, 80f22 <udc_process_setup+0xae>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80ee0:	4b8c      	ldr	r3, [pc, #560]	; (81114 <udc_process_setup+0x2a0>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80ee2:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80ee4:	681f      	ldr	r7, [r3, #0]
   80ee6:	683b      	ldr	r3, [r7, #0]
   80ee8:	791b      	ldrb	r3, [r3, #4]
   80eea:	42b3      	cmp	r3, r6
   80eec:	d919      	bls.n	80f22 <udc_process_setup+0xae>
	if (0 == udc_num_configuration) {
   80eee:	2100      	movs	r1, #0
   80ef0:	4630      	mov	r0, r6
   80ef2:	4b89      	ldr	r3, [pc, #548]	; (81118 <udc_process_setup+0x2a4>)
   80ef4:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   80ef6:	4605      	mov	r5, r0
   80ef8:	2800      	cmp	r0, #0
   80efa:	f000 819b 	beq.w	81234 <udc_process_setup+0x3c0>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80efe:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   80f00:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   80f04:	68db      	ldr	r3, [r3, #12]
   80f06:	4798      	blx	r3
   80f08:	4602      	mov	r2, r0
   80f0a:	4884      	ldr	r0, [pc, #528]	; (8111c <udc_process_setup+0x2a8>)
	udd_set_setup_payload(&udc_iface_setting,1);
   80f0c:	2101      	movs	r1, #1
   80f0e:	4b84      	ldr	r3, [pc, #528]	; (81120 <udc_process_setup+0x2ac>)
	udc_iface_setting = udi_api->getsetting();
   80f10:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   80f12:	4798      	blx	r3
	return true;
   80f14:	e7cc      	b.n	80eb0 <udc_process_setup+0x3c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80f16:	2b01      	cmp	r3, #1
   80f18:	f000 81b1 	beq.w	8127e <udc_process_setup+0x40a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80f1c:	2b02      	cmp	r3, #2
   80f1e:	f000 80d8 	beq.w	810d2 <udc_process_setup+0x25e>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   80f22:	f012 0f1e 	tst.w	r2, #30
   80f26:	d1c2      	bne.n	80eae <udc_process_setup+0x3a>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   80f28:	88a7      	ldrh	r7, [r4, #4]
   80f2a:	2f02      	cmp	r7, #2
   80f2c:	d102      	bne.n	80f34 <udc_process_setup+0xc0>
			udd_g_ctrlreq.req.wIndex = 1;
   80f2e:	2301      	movs	r3, #1
   80f30:	461f      	mov	r7, r3
   80f32:	80a3      	strh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   80f34:	4d76      	ldr	r5, [pc, #472]	; (81110 <udc_process_setup+0x29c>)
   80f36:	782b      	ldrb	r3, [r5, #0]
   80f38:	2b00      	cmp	r3, #0
   80f3a:	d0b8      	beq.n	80eae <udc_process_setup+0x3a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80f3c:	4e75      	ldr	r6, [pc, #468]	; (81114 <udc_process_setup+0x2a0>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80f3e:	b2ff      	uxtb	r7, r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80f40:	6830      	ldr	r0, [r6, #0]
   80f42:	6803      	ldr	r3, [r0, #0]
   80f44:	f893 c004 	ldrb.w	ip, [r3, #4]
   80f48:	4567      	cmp	r7, ip
   80f4a:	d35b      	bcc.n	81004 <udc_process_setup+0x190>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80f4c:	f002 021f 	and.w	r2, r2, #31
   80f50:	2a02      	cmp	r2, #2
   80f52:	d1ac      	bne.n	80eae <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80f54:	f1bc 0f00 	cmp.w	ip, #0
   80f58:	d0a9      	beq.n	80eae <udc_process_setup+0x3a>
   80f5a:	2700      	movs	r7, #0
   80f5c:	46b8      	mov	r8, r7
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80f5e:	4c71      	ldr	r4, [pc, #452]	; (81124 <udc_process_setup+0x2b0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   80f60:	6843      	ldr	r3, [r0, #4]
   80f62:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80f66:	f8d9 300c 	ldr.w	r3, [r9, #12]
   80f6a:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   80f6c:	782b      	ldrb	r3, [r5, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80f6e:	4684      	mov	ip, r0
	if (0 == udc_num_configuration) {
   80f70:	2b00      	cmp	r3, #0
   80f72:	d09c      	beq.n	80eae <udc_process_setup+0x3a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80f74:	6833      	ldr	r3, [r6, #0]
   80f76:	681b      	ldr	r3, [r3, #0]
   80f78:	791a      	ldrb	r2, [r3, #4]
   80f7a:	4542      	cmp	r2, r8
   80f7c:	d997      	bls.n	80eae <udc_process_setup+0x3a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80f7e:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80f80:	8859      	ldrh	r1, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80f82:	4419      	add	r1, r3
	while (ptr_end_desc >
   80f84:	428b      	cmp	r3, r1
   80f86:	d292      	bcs.n	80eae <udc_process_setup+0x3a>
   80f88:	2000      	movs	r0, #0
   80f8a:	e005      	b.n	80f98 <udc_process_setup+0x124>
				udc_ptr_iface->bLength);
   80f8c:	781a      	ldrb	r2, [r3, #0]
   80f8e:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80f90:	4413      	add	r3, r2
	while (ptr_end_desc >
   80f92:	4299      	cmp	r1, r3
   80f94:	f240 8097 	bls.w	810c6 <udc_process_setup+0x252>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80f98:	785a      	ldrb	r2, [r3, #1]
   80f9a:	2a04      	cmp	r2, #4
   80f9c:	d1f6      	bne.n	80f8c <udc_process_setup+0x118>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80f9e:	789a      	ldrb	r2, [r3, #2]
   80fa0:	4542      	cmp	r2, r8
   80fa2:	d1f3      	bne.n	80f8c <udc_process_setup+0x118>
   80fa4:	78da      	ldrb	r2, [r3, #3]
   80fa6:	4562      	cmp	r2, ip
   80fa8:	d1f0      	bne.n	80f8c <udc_process_setup+0x118>
   80faa:	b100      	cbz	r0, 80fae <udc_process_setup+0x13a>
   80fac:	6023      	str	r3, [r4, #0]
		if (udi_api->setup()) {
   80fae:	f8d9 3008 	ldr.w	r3, [r9, #8]
   80fb2:	4798      	blx	r3
   80fb4:	2800      	cmp	r0, #0
   80fb6:	d17c      	bne.n	810b2 <udc_process_setup+0x23e>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80fb8:	6830      	ldr	r0, [r6, #0]
   80fba:	3701      	adds	r7, #1
   80fbc:	6803      	ldr	r3, [r0, #0]
   80fbe:	fa5f f887 	uxtb.w	r8, r7
   80fc2:	791b      	ldrb	r3, [r3, #4]
   80fc4:	4543      	cmp	r3, r8
   80fc6:	d8cb      	bhi.n	80f60 <udc_process_setup+0xec>
   80fc8:	e771      	b.n	80eae <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80fca:	f012 031f 	ands.w	r3, r2, #31
   80fce:	d1a2      	bne.n	80f16 <udc_process_setup+0xa2>
			switch (udd_g_ctrlreq.req.bRequest) {
   80fd0:	7863      	ldrb	r3, [r4, #1]
   80fd2:	3b01      	subs	r3, #1
   80fd4:	2b08      	cmp	r3, #8
   80fd6:	d8a4      	bhi.n	80f22 <udc_process_setup+0xae>
   80fd8:	a101      	add	r1, pc, #4	; (adr r1, 80fe0 <udc_process_setup+0x16c>)
   80fda:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   80fde:	bf00      	nop
   80fe0:	00081239 	.word	0x00081239
   80fe4:	00080f23 	.word	0x00080f23
   80fe8:	00081215 	.word	0x00081215
   80fec:	00080f23 	.word	0x00080f23
   80ff0:	00081205 	.word	0x00081205
   80ff4:	00080f23 	.word	0x00080f23
   80ff8:	00080f23 	.word	0x00080f23
   80ffc:	00080f23 	.word	0x00080f23
   81000:	00081153 	.word	0x00081153
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81004:	f8df 811c 	ldr.w	r8, [pc, #284]	; 81124 <udc_process_setup+0x2b0>
   81008:	f8c8 3000 	str.w	r3, [r8]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8100c:	f8b3 e002 	ldrh.w	lr, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81010:	449e      	add	lr, r3
	while (ptr_end_desc >
   81012:	4573      	cmp	r3, lr
   81014:	d29a      	bcs.n	80f4c <udc_process_setup+0xd8>
   81016:	f04f 0900 	mov.w	r9, #0
   8101a:	e005      	b.n	81028 <udc_process_setup+0x1b4>
				udc_ptr_iface->bLength);
   8101c:	7819      	ldrb	r1, [r3, #0]
   8101e:	f04f 0901 	mov.w	r9, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81022:	440b      	add	r3, r1
	while (ptr_end_desc >
   81024:	459e      	cmp	lr, r3
   81026:	d951      	bls.n	810cc <udc_process_setup+0x258>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81028:	7859      	ldrb	r1, [r3, #1]
   8102a:	2904      	cmp	r1, #4
   8102c:	d1f6      	bne.n	8101c <udc_process_setup+0x1a8>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8102e:	7899      	ldrb	r1, [r3, #2]
   81030:	42b9      	cmp	r1, r7
   81032:	d1f3      	bne.n	8101c <udc_process_setup+0x1a8>
   81034:	78d9      	ldrb	r1, [r3, #3]
   81036:	2900      	cmp	r1, #0
   81038:	d1f0      	bne.n	8101c <udc_process_setup+0x1a8>
   8103a:	f1b9 0f00 	cmp.w	r9, #0
   8103e:	d001      	beq.n	81044 <udc_process_setup+0x1d0>
   81040:	f8c8 3000 	str.w	r3, [r8]
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81044:	6843      	ldr	r3, [r0, #4]
   81046:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8104a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8104e:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81050:	782b      	ldrb	r3, [r5, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81052:	4682      	mov	sl, r0
	if (0 == udc_num_configuration) {
   81054:	2b00      	cmp	r3, #0
   81056:	f43f af2a 	beq.w	80eae <udc_process_setup+0x3a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8105a:	6830      	ldr	r0, [r6, #0]
   8105c:	6803      	ldr	r3, [r0, #0]
   8105e:	f893 c004 	ldrb.w	ip, [r3, #4]
   81062:	4567      	cmp	r7, ip
   81064:	f080 80f8 	bcs.w	81258 <udc_process_setup+0x3e4>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81068:	f8c8 3000 	str.w	r3, [r8]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8106c:	8859      	ldrh	r1, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8106e:	4419      	add	r1, r3
	while (ptr_end_desc >
   81070:	428b      	cmp	r3, r1
   81072:	bf38      	it	cc
   81074:	f04f 0e00 	movcc.w	lr, #0
   81078:	d307      	bcc.n	8108a <udc_process_setup+0x216>
   8107a:	e0ed      	b.n	81258 <udc_process_setup+0x3e4>
				udc_ptr_iface->bLength);
   8107c:	781a      	ldrb	r2, [r3, #0]
   8107e:	f04f 0e01 	mov.w	lr, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81082:	4413      	add	r3, r2
	while (ptr_end_desc >
   81084:	4299      	cmp	r1, r3
   81086:	f240 80e5 	bls.w	81254 <udc_process_setup+0x3e0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8108a:	785a      	ldrb	r2, [r3, #1]
   8108c:	2a04      	cmp	r2, #4
   8108e:	d1f5      	bne.n	8107c <udc_process_setup+0x208>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81090:	789a      	ldrb	r2, [r3, #2]
   81092:	42ba      	cmp	r2, r7
   81094:	d1f2      	bne.n	8107c <udc_process_setup+0x208>
   81096:	78da      	ldrb	r2, [r3, #3]
   81098:	4552      	cmp	r2, sl
   8109a:	d1ef      	bne.n	8107c <udc_process_setup+0x208>
   8109c:	f1be 0f00 	cmp.w	lr, #0
   810a0:	d001      	beq.n	810a6 <udc_process_setup+0x232>
   810a2:	f8c8 3000 	str.w	r3, [r8]
	return udi_api->setup();
   810a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   810aa:	4798      	blx	r3
		if (udc_req_iface()) {
   810ac:	2800      	cmp	r0, #0
   810ae:	f000 81dd 	beq.w	8146c <udc_process_setup+0x5f8>
			return true;
   810b2:	2501      	movs	r5, #1
   810b4:	e6fc      	b.n	80eb0 <udc_process_setup+0x3c>
		return true;
   810b6:	2501      	movs	r5, #1
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   810b8:	219e      	movs	r1, #158	; 0x9e
   810ba:	481b      	ldr	r0, [pc, #108]	; (81128 <udc_process_setup+0x2b4>)
   810bc:	4b18      	ldr	r3, [pc, #96]	; (81120 <udc_process_setup+0x2ac>)
   810be:	4798      	blx	r3
}
   810c0:	4628      	mov	r0, r5
   810c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return false;
   810c6:	2500      	movs	r5, #0
   810c8:	6023      	str	r3, [r4, #0]
   810ca:	e6f1      	b.n	80eb0 <udc_process_setup+0x3c>
   810cc:	f8c8 3000 	str.w	r3, [r8]
   810d0:	e73c      	b.n	80f4c <udc_process_setup+0xd8>
			switch (udd_g_ctrlreq.req.bRequest) {
   810d2:	7863      	ldrb	r3, [r4, #1]
   810d4:	2b01      	cmp	r3, #1
   810d6:	f000 80fc 	beq.w	812d2 <udc_process_setup+0x45e>
   810da:	2b03      	cmp	r3, #3
   810dc:	d106      	bne.n	810ec <udc_process_setup+0x278>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   810de:	88e3      	ldrh	r3, [r4, #6]
   810e0:	8861      	ldrh	r1, [r4, #2]
   810e2:	430b      	orrs	r3, r1
   810e4:	b29b      	uxth	r3, r3
   810e6:	2b00      	cmp	r3, #0
   810e8:	f000 81c8 	beq.w	8147c <udc_process_setup+0x608>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   810ec:	f012 0f1e 	tst.w	r2, #30
   810f0:	f43f af1a 	beq.w	80f28 <udc_process_setup+0xb4>
	if (0 == udc_num_configuration) {
   810f4:	4d06      	ldr	r5, [pc, #24]	; (81110 <udc_process_setup+0x29c>)
   810f6:	782b      	ldrb	r3, [r5, #0]
   810f8:	2b00      	cmp	r3, #0
   810fa:	f43f aed8 	beq.w	80eae <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   810fe:	4e05      	ldr	r6, [pc, #20]	; (81114 <udc_process_setup+0x2a0>)
   81100:	6830      	ldr	r0, [r6, #0]
   81102:	6803      	ldr	r3, [r0, #0]
   81104:	f893 c004 	ldrb.w	ip, [r3, #4]
   81108:	e724      	b.n	80f54 <udc_process_setup+0xe0>
   8110a:	bf00      	nop
   8110c:	200036e0 	.word	0x200036e0
   81110:	20003625 	.word	0x20003625
   81114:	20003628 	.word	0x20003628
   81118:	00080c0d 	.word	0x00080c0d
   8111c:	20003624 	.word	0x20003624
   81120:	000826a1 	.word	0x000826a1
   81124:	2000362c 	.word	0x2000362c
   81128:	2000023c 	.word	0x2000023c
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8112c:	2b02      	cmp	r3, #2
   8112e:	f47f aef8 	bne.w	80f22 <udc_process_setup+0xae>
			switch (udd_g_ctrlreq.req.bRequest) {
   81132:	7863      	ldrb	r3, [r4, #1]
   81134:	2b00      	cmp	r3, #0
   81136:	d1d9      	bne.n	810ec <udc_process_setup+0x278>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81138:	2d02      	cmp	r5, #2
   8113a:	d1d7      	bne.n	810ec <udc_process_setup+0x278>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8113c:	7920      	ldrb	r0, [r4, #4]
   8113e:	4b9b      	ldr	r3, [pc, #620]	; (813ac <udc_process_setup+0x538>)
   81140:	4798      	blx	r3
   81142:	4602      	mov	r2, r0
   81144:	489a      	ldr	r0, [pc, #616]	; (813b0 <udc_process_setup+0x53c>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81146:	4629      	mov	r1, r5
   81148:	4b9a      	ldr	r3, [pc, #616]	; (813b4 <udc_process_setup+0x540>)
			return true;
   8114a:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   8114c:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8114e:	4798      	blx	r3
	return true;
   81150:	e6ae      	b.n	80eb0 <udc_process_setup+0x3c>
	if (udd_g_ctrlreq.req.wLength) {
   81152:	88e3      	ldrh	r3, [r4, #6]
   81154:	2b00      	cmp	r3, #0
   81156:	f47f aee4 	bne.w	80f22 <udc_process_setup+0xae>
	if (!udd_getaddress()) {
   8115a:	4b97      	ldr	r3, [pc, #604]	; (813b8 <udc_process_setup+0x544>)
   8115c:	4798      	blx	r3
   8115e:	2800      	cmp	r0, #0
   81160:	d068      	beq.n	81234 <udc_process_setup+0x3c0>
	if (udd_is_high_speed()) {
   81162:	4f96      	ldr	r7, [pc, #600]	; (813bc <udc_process_setup+0x548>)
   81164:	47b8      	blx	r7
				udc_config.confdev_hs->bNumConfigurations) {
   81166:	4e96      	ldr	r6, [pc, #600]	; (813c0 <udc_process_setup+0x54c>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81168:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   8116a:	2800      	cmp	r0, #0
   8116c:	f000 8180 	beq.w	81470 <udc_process_setup+0x5fc>
				udc_config.confdev_hs->bNumConfigurations) {
   81170:	68b2      	ldr	r2, [r6, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81172:	7c52      	ldrb	r2, [r2, #17]
   81174:	429a      	cmp	r2, r3
   81176:	d35d      	bcc.n	81234 <udc_process_setup+0x3c0>
	udc_reset();
   81178:	4b92      	ldr	r3, [pc, #584]	; (813c4 <udc_process_setup+0x550>)
   8117a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   8117c:	4d92      	ldr	r5, [pc, #584]	; (813c8 <udc_process_setup+0x554>)
   8117e:	78a3      	ldrb	r3, [r4, #2]
   81180:	702b      	strb	r3, [r5, #0]
	if (udc_num_configuration == 0) {
   81182:	2b00      	cmp	r3, #0
   81184:	d095      	beq.n	810b2 <udc_process_setup+0x23e>
	if (udd_is_high_speed()) {
   81186:	47b8      	blx	r7
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81188:	782b      	ldrb	r3, [r5, #0]
	if (udd_is_high_speed()) {
   8118a:	2800      	cmp	r0, #0
   8118c:	f000 81bb 	beq.w	81506 <udc_process_setup+0x692>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81190:	6932      	ldr	r2, [r6, #16]
   81192:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
   81196:	3901      	subs	r1, #1
   81198:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8119c:	4e8b      	ldr	r6, [pc, #556]	; (813cc <udc_process_setup+0x558>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8119e:	6810      	ldr	r0, [r2, #0]
   811a0:	6032      	str	r2, [r6, #0]
   811a2:	7902      	ldrb	r2, [r0, #4]
   811a4:	2a00      	cmp	r2, #0
   811a6:	d084      	beq.n	810b2 <udc_process_setup+0x23e>
   811a8:	f04f 0800 	mov.w	r8, #0
   811ac:	46c4      	mov	ip, r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   811ae:	4f88      	ldr	r7, [pc, #544]	; (813d0 <udc_process_setup+0x55c>)
	if (0 == udc_num_configuration) {
   811b0:	2b00      	cmp	r3, #0
   811b2:	d03f      	beq.n	81234 <udc_process_setup+0x3c0>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   811b4:	6038      	str	r0, [r7, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   811b6:	8842      	ldrh	r2, [r0, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   811b8:	4402      	add	r2, r0
	while (ptr_end_desc >
   811ba:	4282      	cmp	r2, r0
   811bc:	d93a      	bls.n	81234 <udc_process_setup+0x3c0>
   811be:	2100      	movs	r1, #0
   811c0:	e005      	b.n	811ce <udc_process_setup+0x35a>
				udc_ptr_iface->bLength);
   811c2:	7803      	ldrb	r3, [r0, #0]
   811c4:	2101      	movs	r1, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   811c6:	4418      	add	r0, r3
	while (ptr_end_desc >
   811c8:	4282      	cmp	r2, r0
   811ca:	f240 814c 	bls.w	81466 <udc_process_setup+0x5f2>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   811ce:	7843      	ldrb	r3, [r0, #1]
   811d0:	2b04      	cmp	r3, #4
   811d2:	d1f6      	bne.n	811c2 <udc_process_setup+0x34e>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   811d4:	7883      	ldrb	r3, [r0, #2]
   811d6:	4563      	cmp	r3, ip
   811d8:	d1f3      	bne.n	811c2 <udc_process_setup+0x34e>
   811da:	78c3      	ldrb	r3, [r0, #3]
   811dc:	2b00      	cmp	r3, #0
   811de:	d1f0      	bne.n	811c2 <udc_process_setup+0x34e>
   811e0:	b101      	cbz	r1, 811e4 <udc_process_setup+0x370>
   811e2:	6038      	str	r0, [r7, #0]
   811e4:	4660      	mov	r0, ip
   811e6:	4b7b      	ldr	r3, [pc, #492]	; (813d4 <udc_process_setup+0x560>)
   811e8:	4798      	blx	r3
		if (!udc_iface_enable(iface_num, 0)) {
   811ea:	b318      	cbz	r0, 81234 <udc_process_setup+0x3c0>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811ec:	6833      	ldr	r3, [r6, #0]
   811ee:	f108 0801 	add.w	r8, r8, #1
   811f2:	6818      	ldr	r0, [r3, #0]
   811f4:	fa5f fc88 	uxtb.w	ip, r8
   811f8:	7903      	ldrb	r3, [r0, #4]
   811fa:	4563      	cmp	r3, ip
   811fc:	f67f af59 	bls.w	810b2 <udc_process_setup+0x23e>
	if (0 == udc_num_configuration) {
   81200:	782b      	ldrb	r3, [r5, #0]
   81202:	e7d5      	b.n	811b0 <udc_process_setup+0x33c>
	if (udd_g_ctrlreq.req.wLength) {
   81204:	88e3      	ldrh	r3, [r4, #6]
   81206:	2b00      	cmp	r3, #0
   81208:	f47f ae8b 	bne.w	80f22 <udc_process_setup+0xae>
	udd_g_ctrlreq.callback = udc_valid_address;
   8120c:	4b72      	ldr	r3, [pc, #456]	; (813d8 <udc_process_setup+0x564>)
			return true;
   8120e:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   81210:	6123      	str	r3, [r4, #16]
	return true;
   81212:	e64d      	b.n	80eb0 <udc_process_setup+0x3c>
	if (udd_g_ctrlreq.req.wLength) {
   81214:	88e3      	ldrh	r3, [r4, #6]
   81216:	2b00      	cmp	r3, #0
   81218:	f47f ae83 	bne.w	80f22 <udc_process_setup+0xae>
	switch (udd_g_ctrlreq.req.wValue) {
   8121c:	8863      	ldrh	r3, [r4, #2]
   8121e:	2b02      	cmp	r3, #2
   81220:	f47f ae7f 	bne.w	80f22 <udc_process_setup+0xae>
		if (!udd_is_high_speed()) {
   81224:	4b65      	ldr	r3, [pc, #404]	; (813bc <udc_process_setup+0x548>)
   81226:	4798      	blx	r3
   81228:	4605      	mov	r5, r0
   8122a:	b118      	cbz	r0, 81234 <udc_process_setup+0x3c0>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8122c:	7923      	ldrb	r3, [r4, #4]
   8122e:	2b00      	cmp	r3, #0
   81230:	f000 8151 	beq.w	814d6 <udc_process_setup+0x662>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81234:	7822      	ldrb	r2, [r4, #0]
   81236:	e632      	b.n	80e9e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   81238:	88e3      	ldrh	r3, [r4, #6]
   8123a:	2b00      	cmp	r3, #0
   8123c:	f47f ae71 	bne.w	80f22 <udc_process_setup+0xae>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81240:	8865      	ldrh	r5, [r4, #2]
   81242:	2d01      	cmp	r5, #1
   81244:	f47f ae6d 	bne.w	80f22 <udc_process_setup+0xae>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81248:	4a64      	ldr	r2, [pc, #400]	; (813dc <udc_process_setup+0x568>)
   8124a:	8813      	ldrh	r3, [r2, #0]
   8124c:	f023 0302 	bic.w	r3, r3, #2
   81250:	8013      	strh	r3, [r2, #0]
		return true;
   81252:	e62d      	b.n	80eb0 <udc_process_setup+0x3c>
   81254:	f8c8 3000 	str.w	r3, [r8]
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81258:	7822      	ldrb	r2, [r4, #0]
   8125a:	e677      	b.n	80f4c <udc_process_setup+0xd8>
			switch (udd_g_ctrlreq.req.bRequest) {
   8125c:	7863      	ldrb	r3, [r4, #1]
   8125e:	2b06      	cmp	r3, #6
   81260:	d04d      	beq.n	812fe <udc_process_setup+0x48a>
   81262:	2b08      	cmp	r3, #8
   81264:	d043      	beq.n	812ee <udc_process_setup+0x47a>
   81266:	2b00      	cmp	r3, #0
   81268:	f47f ae5b 	bne.w	80f22 <udc_process_setup+0xae>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8126c:	2d02      	cmp	r5, #2
   8126e:	f47f ae58 	bne.w	80f22 <udc_process_setup+0xae>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81272:	4629      	mov	r1, r5
   81274:	4859      	ldr	r0, [pc, #356]	; (813dc <udc_process_setup+0x568>)
   81276:	4b4f      	ldr	r3, [pc, #316]	; (813b4 <udc_process_setup+0x540>)
   81278:	4798      	blx	r3
			return true;
   8127a:	2501      	movs	r5, #1
   8127c:	e618      	b.n	80eb0 <udc_process_setup+0x3c>
			switch (udd_g_ctrlreq.req.bRequest) {
   8127e:	7863      	ldrb	r3, [r4, #1]
   81280:	2b0b      	cmp	r3, #11
   81282:	f47f ae4e 	bne.w	80f22 <udc_process_setup+0xae>
	if (udd_g_ctrlreq.req.wLength) {
   81286:	88e1      	ldrh	r1, [r4, #6]
   81288:	2900      	cmp	r1, #0
   8128a:	f47f ae4a 	bne.w	80f22 <udc_process_setup+0xae>
	if (!udc_num_configuration) {
   8128e:	4f4e      	ldr	r7, [pc, #312]	; (813c8 <udc_process_setup+0x554>)
   81290:	783b      	ldrb	r3, [r7, #0]
   81292:	2b00      	cmp	r3, #0
   81294:	f43f ae45 	beq.w	80f22 <udc_process_setup+0xae>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81298:	7925      	ldrb	r5, [r4, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8129a:	4e51      	ldr	r6, [pc, #324]	; (813e0 <udc_process_setup+0x56c>)
   8129c:	4628      	mov	r0, r5
   8129e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
	if (0 == udc_num_configuration) {
   812a2:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   812a4:	2800      	cmp	r0, #0
   812a6:	d0c5      	beq.n	81234 <udc_process_setup+0x3c0>
   812a8:	4628      	mov	r0, r5
   812aa:	4b4e      	ldr	r3, [pc, #312]	; (813e4 <udc_process_setup+0x570>)
   812ac:	4798      	blx	r3
	if (!udc_iface_disable(iface_num)) {
   812ae:	2800      	cmp	r0, #0
   812b0:	d0c0      	beq.n	81234 <udc_process_setup+0x3c0>
	if (0 == udc_num_configuration) {
   812b2:	783b      	ldrb	r3, [r7, #0]
   812b4:	2b00      	cmp	r3, #0
   812b6:	d0bd      	beq.n	81234 <udc_process_setup+0x3c0>
   812b8:	4628      	mov	r0, r5
   812ba:	fa5f f188 	uxtb.w	r1, r8
   812be:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   812c0:	2800      	cmp	r0, #0
   812c2:	d0b7      	beq.n	81234 <udc_process_setup+0x3c0>
   812c4:	4628      	mov	r0, r5
   812c6:	4b43      	ldr	r3, [pc, #268]	; (813d4 <udc_process_setup+0x560>)
   812c8:	4798      	blx	r3
		if (udc_reqstd()) {
   812ca:	2800      	cmp	r0, #0
   812cc:	f47f aef1 	bne.w	810b2 <udc_process_setup+0x23e>
   812d0:	e7b0      	b.n	81234 <udc_process_setup+0x3c0>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   812d2:	88e3      	ldrh	r3, [r4, #6]
   812d4:	8861      	ldrh	r1, [r4, #2]
   812d6:	430b      	orrs	r3, r1
   812d8:	b29b      	uxth	r3, r3
   812da:	2b00      	cmp	r3, #0
   812dc:	f47f af06 	bne.w	810ec <udc_process_setup+0x278>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   812e0:	7920      	ldrb	r0, [r4, #4]
   812e2:	4b41      	ldr	r3, [pc, #260]	; (813e8 <udc_process_setup+0x574>)
   812e4:	4798      	blx	r3
		if (udc_reqstd()) {
   812e6:	2800      	cmp	r0, #0
   812e8:	f47f aee3 	bne.w	810b2 <udc_process_setup+0x23e>
   812ec:	e7a2      	b.n	81234 <udc_process_setup+0x3c0>
	if (udd_g_ctrlreq.req.wLength != 1) {
   812ee:	2d01      	cmp	r5, #1
   812f0:	f47f ae17 	bne.w	80f22 <udc_process_setup+0xae>
	udd_set_setup_payload(&udc_num_configuration,1);
   812f4:	4629      	mov	r1, r5
   812f6:	4834      	ldr	r0, [pc, #208]	; (813c8 <udc_process_setup+0x554>)
   812f8:	4b2e      	ldr	r3, [pc, #184]	; (813b4 <udc_process_setup+0x540>)
   812fa:	4798      	blx	r3
	return true;
   812fc:	e5d8      	b.n	80eb0 <udc_process_setup+0x3c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   812fe:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81300:	0a0b      	lsrs	r3, r1, #8
   81302:	3b01      	subs	r3, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81304:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81306:	2b0e      	cmp	r3, #14
   81308:	f63f adc9 	bhi.w	80e9e <udc_process_setup+0x2a>
   8130c:	a101      	add	r1, pc, #4	; (adr r1, 81314 <udc_process_setup+0x4a0>)
   8130e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   81312:	bf00      	nop
   81314:	00081419 	.word	0x00081419
   81318:	000813f1 	.word	0x000813f1
   8131c:	0008139f 	.word	0x0008139f
   81320:	00080e9f 	.word	0x00080e9f
   81324:	00080e9f 	.word	0x00080e9f
   81328:	00081393 	.word	0x00081393
   8132c:	00081369 	.word	0x00081369
   81330:	00080e9f 	.word	0x00080e9f
   81334:	00080e9f 	.word	0x00080e9f
   81338:	00080e9f 	.word	0x00080e9f
   8133c:	00080e9f 	.word	0x00080e9f
   81340:	00080e9f 	.word	0x00080e9f
   81344:	00080e9f 	.word	0x00080e9f
   81348:	00080e9f 	.word	0x00080e9f
   8134c:	00081351 	.word	0x00081351
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   81350:	2121      	movs	r1, #33	; 0x21
   81352:	4826      	ldr	r0, [pc, #152]	; (813ec <udc_process_setup+0x578>)
   81354:	4b17      	ldr	r3, [pc, #92]	; (813b4 <udc_process_setup+0x540>)
   81356:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   81358:	88e3      	ldrh	r3, [r4, #6]
   8135a:	89a2      	ldrh	r2, [r4, #12]
   8135c:	429a      	cmp	r2, r3
   8135e:	f67f aea8 	bls.w	810b2 <udc_process_setup+0x23e>
			return true;
   81362:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81364:	81a3      	strh	r3, [r4, #12]
   81366:	e5a3      	b.n	80eb0 <udc_process_setup+0x3c>
		if (!udd_is_high_speed()) {
   81368:	4b14      	ldr	r3, [pc, #80]	; (813bc <udc_process_setup+0x548>)
   8136a:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   8136c:	4b14      	ldr	r3, [pc, #80]	; (813c0 <udc_process_setup+0x54c>)
		if (!udd_is_high_speed()) {
   8136e:	2800      	cmp	r0, #0
   81370:	f040 808e 	bne.w	81490 <udc_process_setup+0x61c>
			if (conf_num >= udc_config.confdev_hs->
   81374:	689a      	ldr	r2, [r3, #8]
   81376:	7c52      	ldrb	r2, [r2, #17]
   81378:	42aa      	cmp	r2, r5
   8137a:	f67f af5b 	bls.w	81234 <udc_process_setup+0x3c0>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8137e:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81380:	4b0c      	ldr	r3, [pc, #48]	; (813b4 <udc_process_setup+0x540>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81382:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81386:	8841      	ldrh	r1, [r0, #2]
   81388:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8138a:	2207      	movs	r2, #7
   8138c:	68a3      	ldr	r3, [r4, #8]
   8138e:	705a      	strb	r2, [r3, #1]
		break;
   81390:	e7e2      	b.n	81358 <udc_process_setup+0x4e4>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81392:	4a0b      	ldr	r2, [pc, #44]	; (813c0 <udc_process_setup+0x54c>)
   81394:	4b07      	ldr	r3, [pc, #28]	; (813b4 <udc_process_setup+0x540>)
   81396:	68d0      	ldr	r0, [r2, #12]
   81398:	7801      	ldrb	r1, [r0, #0]
   8139a:	4798      	blx	r3
		break;
   8139c:	e7dc      	b.n	81358 <udc_process_setup+0x4e4>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8139e:	2d03      	cmp	r5, #3
   813a0:	f63f ad7d 	bhi.w	80e9e <udc_process_setup+0x2a>
   813a4:	e8df f005 	tbb	[pc, r5]
   813a8:	425c5457 	.word	0x425c5457
   813ac:	00082731 	.word	0x00082731
   813b0:	20003622 	.word	0x20003622
   813b4:	000826a1 	.word	0x000826a1
   813b8:	00082681 	.word	0x00082681
   813bc:	00082649 	.word	0x00082649
   813c0:	2000036c 	.word	0x2000036c
   813c4:	00080d8d 	.word	0x00080d8d
   813c8:	20003625 	.word	0x20003625
   813cc:	20003628 	.word	0x20003628
   813d0:	2000362c 	.word	0x2000362c
   813d4:	00080c6d 	.word	0x00080c6d
   813d8:	00080bf9 	.word	0x00080bf9
   813dc:	20003620 	.word	0x20003620
   813e0:	00080c0d 	.word	0x00080c0d
   813e4:	00080cc9 	.word	0x00080cc9
   813e8:	0008280d 	.word	0x0008280d
   813ec:	20000218 	.word	0x20000218
		if (udd_is_high_speed()) {
   813f0:	4b48      	ldr	r3, [pc, #288]	; (81514 <udc_process_setup+0x6a0>)
   813f2:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   813f4:	4b48      	ldr	r3, [pc, #288]	; (81518 <udc_process_setup+0x6a4>)
		if (udd_is_high_speed()) {
   813f6:	2800      	cmp	r0, #0
   813f8:	d056      	beq.n	814a8 <udc_process_setup+0x634>
			if (conf_num >= udc_config.confdev_hs->
   813fa:	689a      	ldr	r2, [r3, #8]
   813fc:	7c52      	ldrb	r2, [r2, #17]
   813fe:	42aa      	cmp	r2, r5
   81400:	f67f af18 	bls.w	81234 <udc_process_setup+0x3c0>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81404:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81406:	4b45      	ldr	r3, [pc, #276]	; (8151c <udc_process_setup+0x6a8>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81408:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8140c:	8841      	ldrh	r1, [r0, #2]
   8140e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81410:	2202      	movs	r2, #2
   81412:	68a3      	ldr	r3, [r4, #8]
   81414:	705a      	strb	r2, [r3, #1]
		break;
   81416:	e79f      	b.n	81358 <udc_process_setup+0x4e4>
		if (!udd_is_high_speed()) {
   81418:	4b3e      	ldr	r3, [pc, #248]	; (81514 <udc_process_setup+0x6a0>)
   8141a:	4798      	blx	r3
   8141c:	2800      	cmp	r0, #0
   8141e:	d14f      	bne.n	814c0 <udc_process_setup+0x64c>
				(uint8_t *) udc_config.confdev_hs,
   81420:	4a3d      	ldr	r2, [pc, #244]	; (81518 <udc_process_setup+0x6a4>)
			udd_set_setup_payload(
   81422:	4b3e      	ldr	r3, [pc, #248]	; (8151c <udc_process_setup+0x6a8>)
				(uint8_t *) udc_config.confdev_hs,
   81424:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   81426:	7801      	ldrb	r1, [r0, #0]
   81428:	4798      	blx	r3
   8142a:	e795      	b.n	81358 <udc_process_setup+0x4e4>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8142c:	2220      	movs	r2, #32
   8142e:	4b3c      	ldr	r3, [pc, #240]	; (81520 <udc_process_setup+0x6ac>)
		for(i = 0; i < str_length; i++) {
   81430:	4e3c      	ldr	r6, [pc, #240]	; (81524 <udc_process_setup+0x6b0>)
   81432:	189d      	adds	r5, r3, r2
   81434:	4631      	mov	r1, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81436:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   8143a:	429d      	cmp	r5, r3
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8143c:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   81440:	d1f9      	bne.n	81436 <udc_process_setup+0x5c2>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81442:	0052      	lsls	r2, r2, #1
   81444:	1c91      	adds	r1, r2, #2
		udd_set_setup_payload(
   81446:	4837      	ldr	r0, [pc, #220]	; (81524 <udc_process_setup+0x6b0>)
   81448:	4b34      	ldr	r3, [pc, #208]	; (8151c <udc_process_setup+0x6a8>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8144a:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   8144c:	4798      	blx	r3
   8144e:	e783      	b.n	81358 <udc_process_setup+0x4e4>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   81450:	2215      	movs	r2, #21
		str = udc_string_manufacturer_name;
   81452:	4b35      	ldr	r3, [pc, #212]	; (81528 <udc_process_setup+0x6b4>)
   81454:	e7ec      	b.n	81430 <udc_process_setup+0x5bc>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   81456:	2104      	movs	r1, #4
   81458:	4834      	ldr	r0, [pc, #208]	; (8152c <udc_process_setup+0x6b8>)
   8145a:	4b30      	ldr	r3, [pc, #192]	; (8151c <udc_process_setup+0x6a8>)
   8145c:	4798      	blx	r3
	if (str_length) {
   8145e:	e77b      	b.n	81358 <udc_process_setup+0x4e4>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   81460:	2213      	movs	r2, #19
		str = udc_string_product_name;
   81462:	4b33      	ldr	r3, [pc, #204]	; (81530 <udc_process_setup+0x6bc>)
   81464:	e7e4      	b.n	81430 <udc_process_setup+0x5bc>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81466:	7822      	ldrb	r2, [r4, #0]
   81468:	6038      	str	r0, [r7, #0]
   8146a:	e518      	b.n	80e9e <udc_process_setup+0x2a>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8146c:	7822      	ldrb	r2, [r4, #0]
   8146e:	e519      	b.n	80ea4 <udc_process_setup+0x30>
				udc_config.confdev_lsfs->bNumConfigurations) {
   81470:	6832      	ldr	r2, [r6, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81472:	7c52      	ldrb	r2, [r2, #17]
   81474:	429a      	cmp	r2, r3
   81476:	f4bf ae7f 	bcs.w	81178 <udc_process_setup+0x304>
   8147a:	e6db      	b.n	81234 <udc_process_setup+0x3c0>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8147c:	7920      	ldrb	r0, [r4, #4]
   8147e:	4b2d      	ldr	r3, [pc, #180]	; (81534 <udc_process_setup+0x6c0>)
   81480:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81482:	7920      	ldrb	r0, [r4, #4]
   81484:	4b2c      	ldr	r3, [pc, #176]	; (81538 <udc_process_setup+0x6c4>)
   81486:	4798      	blx	r3
		if (udc_reqstd()) {
   81488:	2800      	cmp	r0, #0
   8148a:	f47f ae12 	bne.w	810b2 <udc_process_setup+0x23e>
   8148e:	e6d1      	b.n	81234 <udc_process_setup+0x3c0>
			if (conf_num >= udc_config.confdev_lsfs->
   81490:	681a      	ldr	r2, [r3, #0]
   81492:	7c52      	ldrb	r2, [r2, #17]
   81494:	42aa      	cmp	r2, r5
   81496:	f67f aecd 	bls.w	81234 <udc_process_setup+0x3c0>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8149a:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   8149c:	4b1f      	ldr	r3, [pc, #124]	; (8151c <udc_process_setup+0x6a8>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8149e:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   814a2:	8841      	ldrh	r1, [r0, #2]
   814a4:	4798      	blx	r3
   814a6:	e770      	b.n	8138a <udc_process_setup+0x516>
			if (conf_num >= udc_config.confdev_lsfs->
   814a8:	681a      	ldr	r2, [r3, #0]
   814aa:	7c52      	ldrb	r2, [r2, #17]
   814ac:	42aa      	cmp	r2, r5
   814ae:	f67f aec1 	bls.w	81234 <udc_process_setup+0x3c0>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   814b2:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   814b4:	4b19      	ldr	r3, [pc, #100]	; (8151c <udc_process_setup+0x6a8>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   814b6:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   814ba:	8841      	ldrh	r1, [r0, #2]
   814bc:	4798      	blx	r3
   814be:	e7a7      	b.n	81410 <udc_process_setup+0x59c>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   814c0:	2010      	movs	r0, #16
   814c2:	2102      	movs	r1, #2
   814c4:	4b14      	ldr	r3, [pc, #80]	; (81518 <udc_process_setup+0x6a4>)
			udd_set_setup_payload(
   814c6:	4d15      	ldr	r5, [pc, #84]	; (8151c <udc_process_setup+0x6a8>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   814c8:	681a      	ldr	r2, [r3, #0]
   814ca:	7090      	strb	r0, [r2, #2]
   814cc:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   814ce:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   814d0:	7801      	ldrb	r1, [r0, #0]
   814d2:	47a8      	blx	r5
   814d4:	e740      	b.n	81358 <udc_process_setup+0x4e4>
		udc_reset();
   814d6:	4b19      	ldr	r3, [pc, #100]	; (8153c <udc_process_setup+0x6c8>)
   814d8:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   814da:	88a3      	ldrh	r3, [r4, #4]
   814dc:	0a1b      	lsrs	r3, r3, #8
   814de:	3b01      	subs	r3, #1
   814e0:	2b03      	cmp	r3, #3
   814e2:	f63f aea7 	bhi.w	81234 <udc_process_setup+0x3c0>
   814e6:	e8df f003 	tbb	[pc, r3]
   814ea:	080b      	.short	0x080b
   814ec:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   814ee:	4b14      	ldr	r3, [pc, #80]	; (81540 <udc_process_setup+0x6cc>)
   814f0:	6123      	str	r3, [r4, #16]
			return true;
   814f2:	e4dd      	b.n	80eb0 <udc_process_setup+0x3c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   814f4:	4b13      	ldr	r3, [pc, #76]	; (81544 <udc_process_setup+0x6d0>)
   814f6:	6123      	str	r3, [r4, #16]
			return true;
   814f8:	e4da      	b.n	80eb0 <udc_process_setup+0x3c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   814fa:	4b13      	ldr	r3, [pc, #76]	; (81548 <udc_process_setup+0x6d4>)
   814fc:	6123      	str	r3, [r4, #16]
			return true;
   814fe:	e4d7      	b.n	80eb0 <udc_process_setup+0x3c>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   81500:	4b12      	ldr	r3, [pc, #72]	; (8154c <udc_process_setup+0x6d8>)
   81502:	6123      	str	r3, [r4, #16]
			return true;
   81504:	e4d4      	b.n	80eb0 <udc_process_setup+0x3c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81506:	6872      	ldr	r2, [r6, #4]
   81508:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
   8150c:	3901      	subs	r1, #1
   8150e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   81512:	e643      	b.n	8119c <udc_process_setup+0x328>
   81514:	00082649 	.word	0x00082649
   81518:	2000036c 	.word	0x2000036c
   8151c:	000826a1 	.word	0x000826a1
   81520:	200001ec 	.word	0x200001ec
   81524:	200002dc 	.word	0x200002dc
   81528:	20000324 	.word	0x20000324
   8152c:	20000320 	.word	0x20000320
   81530:	2000033c 	.word	0x2000033c
   81534:	00082cdd 	.word	0x00082cdd
   81538:	00082765 	.word	0x00082765
   8153c:	00080d8d 	.word	0x00080d8d
   81540:	00082de5 	.word	0x00082de5
   81544:	00082dcd 	.word	0x00082dcd
   81548:	00082da9 	.word	0x00082da9
   8154c:	00082d85 	.word	0x00082d85

00081550 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81550:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   81552:	4b08      	ldr	r3, [pc, #32]	; (81574 <FPGA_setlock+0x24>)
{
   81554:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   81556:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81558:	4b07      	ldr	r3, [pc, #28]	; (81578 <FPGA_setlock+0x28>)
   8155a:	781a      	ldrb	r2, [r3, #0]
   8155c:	b92a      	cbnz	r2, 8156a <FPGA_setlock+0x1a>
  {
    ret = 1;
   8155e:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   81560:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   81562:	4b06      	ldr	r3, [pc, #24]	; (8157c <FPGA_setlock+0x2c>)
   81564:	4798      	blx	r3
  return ret;
}
   81566:	4628      	mov	r0, r5
   81568:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   8156a:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   8156c:	4b03      	ldr	r3, [pc, #12]	; (8157c <FPGA_setlock+0x2c>)
   8156e:	4798      	blx	r3
}
   81570:	4628      	mov	r0, r5
   81572:	bd38      	pop	{r3, r4, r5, pc}
   81574:	000838e5 	.word	0x000838e5
   81578:	20003630 	.word	0x20003630
   8157c:	00083925 	.word	0x00083925

00081580 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   81580:	2200      	movs	r2, #0
   81582:	4b01      	ldr	r3, [pc, #4]	; (81588 <FPGA_releaselock+0x8>)
   81584:	701a      	strb	r2, [r3, #0]
}
   81586:	4770      	bx	lr
   81588:	20003630 	.word	0x20003630

0008158c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   8158c:	4b01      	ldr	r3, [pc, #4]	; (81594 <FPGA_lockstatus+0x8>)
   8158e:	7818      	ldrb	r0, [r3, #0]
}
   81590:	4770      	bx	lr
   81592:	bf00      	nop
   81594:	20003630 	.word	0x20003630

00081598 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81598:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   8159a:	2604      	movs	r6, #4
{
   8159c:	b087      	sub	sp, #28
   8159e:	4604      	mov	r4, r0
   815a0:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   815a2:	220f      	movs	r2, #15
   815a4:	210e      	movs	r1, #14
   815a6:	480c      	ldr	r0, [pc, #48]	; (815d8 <flash_read_unique_id+0x40>)
   815a8:	4f0c      	ldr	r7, [pc, #48]	; (815dc <flash_read_unique_id+0x44>)
   815aa:	ab02      	add	r3, sp, #8
   815ac:	9600      	str	r6, [sp, #0]
   815ae:	47b8      	blx	r7
   815b0:	b970      	cbnz	r0, 815d0 <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   815b2:	2d04      	cmp	r5, #4
   815b4:	4626      	mov	r6, r4
   815b6:	462a      	mov	r2, r5
   815b8:	4604      	mov	r4, r0
   815ba:	bf28      	it	cs
   815bc:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   815be:	b125      	cbz	r5, 815ca <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   815c0:	4630      	mov	r0, r6
   815c2:	4b07      	ldr	r3, [pc, #28]	; (815e0 <flash_read_unique_id+0x48>)
   815c4:	a902      	add	r1, sp, #8
   815c6:	0092      	lsls	r2, r2, #2
   815c8:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   815ca:	4620      	mov	r0, r4
   815cc:	b007      	add	sp, #28
   815ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   815d0:	2410      	movs	r4, #16
}
   815d2:	4620      	mov	r0, r4
   815d4:	b007      	add	sp, #28
   815d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   815d8:	400e0800 	.word	0x400e0800
   815dc:	20000001 	.word	0x20000001
   815e0:	00083ba1 	.word	0x00083ba1

000815e4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   815e4:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   815e6:	6942      	ldr	r2, [r0, #20]
   815e8:	0792      	lsls	r2, r2, #30
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   815ea:	bf43      	ittte	mi
   815ec:	f3c1 0108 	ubfxmi	r1, r1, #0, #9
	return 0;
   815f0:	2000      	movmi	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
   815f2:	61d9      	strmi	r1, [r3, #28]
		return 1;
   815f4:	2001      	movpl	r0, #1
}
   815f6:	4770      	bx	lr

000815f8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815f8:	6943      	ldr	r3, [r0, #20]
   815fa:	07db      	lsls	r3, r3, #31
   815fc:	d505      	bpl.n	8160a <usart_read+0x12>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   815fe:	6983      	ldr	r3, [r0, #24]

	return 0;
   81600:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81602:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81606:	600b      	str	r3, [r1, #0]
	return 0;
   81608:	4770      	bx	lr
		return 1;
   8160a:	2001      	movs	r0, #1
}
   8160c:	4770      	bx	lr
   8160e:	bf00      	nop

00081610 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   81610:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   81618:	670a      	str	r2, [r1, #112]	; 0x70
}
   8161a:	4770      	bx	lr

0008161c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8161c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81620:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   81624:	674a      	str	r2, [r1, #116]	; 0x74
}
   81626:	4770      	bx	lr

00081628 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   81628:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8162c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   81630:	678a      	str	r2, [r1, #120]	; 0x78
}
   81632:	4770      	bx	lr

00081634 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   81634:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81638:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8163c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   81640:	4770      	bx	lr
   81642:	bf00      	nop

00081644 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81644:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   81646:	4b2e      	ldr	r3, [pc, #184]	; (81700 <PIOA_Handler+0xbc>)
   81648:	482e      	ldr	r0, [pc, #184]	; (81704 <PIOA_Handler+0xc0>)
   8164a:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   8164c:	4b2e      	ldr	r3, [pc, #184]	; (81708 <PIOA_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   8164e:	4604      	mov	r4, r0
	status &= pio_get_interrupt_mask(p_pio);
   81650:	482c      	ldr	r0, [pc, #176]	; (81704 <PIOA_Handler+0xc0>)
   81652:	4798      	blx	r3
	if (status != 0) {
   81654:	4004      	ands	r4, r0
   81656:	d015      	beq.n	81684 <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81658:	4d2c      	ldr	r5, [pc, #176]	; (8170c <PIOA_Handler+0xc8>)
   8165a:	6828      	ldr	r0, [r5, #0]
   8165c:	280a      	cmp	r0, #10
   8165e:	d012      	beq.n	81686 <PIOA_Handler+0x42>
   81660:	6928      	ldr	r0, [r5, #16]
   81662:	280a      	cmp	r0, #10
   81664:	d01f      	beq.n	816a6 <PIOA_Handler+0x62>
   81666:	6a28      	ldr	r0, [r5, #32]
   81668:	280a      	cmp	r0, #10
   8166a:	d025      	beq.n	816b8 <PIOA_Handler+0x74>
   8166c:	6b28      	ldr	r0, [r5, #48]	; 0x30
   8166e:	280a      	cmp	r0, #10
   81670:	d02b      	beq.n	816ca <PIOA_Handler+0x86>
   81672:	6c28      	ldr	r0, [r5, #64]	; 0x40
   81674:	280a      	cmp	r0, #10
   81676:	d031      	beq.n	816dc <PIOA_Handler+0x98>
   81678:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8167a:	280a      	cmp	r0, #10
   8167c:	d037      	beq.n	816ee <PIOA_Handler+0xaa>
   8167e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   81680:	280a      	cmp	r0, #10
   81682:	d009      	beq.n	81698 <PIOA_Handler+0x54>
	pio_handler_process(PIOA, ID_PIOA);
}
   81684:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81686:	6869      	ldr	r1, [r5, #4]
   81688:	420c      	tst	r4, r1
   8168a:	d0e9      	beq.n	81660 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8168c:	68eb      	ldr	r3, [r5, #12]
   8168e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81690:	686b      	ldr	r3, [r5, #4]
		while (status != 0) {
   81692:	439c      	bics	r4, r3
   81694:	d1e4      	bne.n	81660 <PIOA_Handler+0x1c>
   81696:	e7f5      	b.n	81684 <PIOA_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81698:	6e69      	ldr	r1, [r5, #100]	; 0x64
   8169a:	4221      	tst	r1, r4
   8169c:	d0f2      	beq.n	81684 <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8169e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
}
   816a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816a4:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   816a6:	6969      	ldr	r1, [r5, #20]
   816a8:	4221      	tst	r1, r4
   816aa:	d0dc      	beq.n	81666 <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816ac:	69eb      	ldr	r3, [r5, #28]
   816ae:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   816b0:	696b      	ldr	r3, [r5, #20]
		while (status != 0) {
   816b2:	439c      	bics	r4, r3
   816b4:	d1d7      	bne.n	81666 <PIOA_Handler+0x22>
   816b6:	e7e5      	b.n	81684 <PIOA_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   816b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   816ba:	4221      	tst	r1, r4
   816bc:	d0d6      	beq.n	8166c <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   816c0:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   816c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		while (status != 0) {
   816c4:	439c      	bics	r4, r3
   816c6:	d1d1      	bne.n	8166c <PIOA_Handler+0x28>
   816c8:	e7dc      	b.n	81684 <PIOA_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   816ca:	6b69      	ldr	r1, [r5, #52]	; 0x34
   816cc:	420c      	tst	r4, r1
   816ce:	d0d0      	beq.n	81672 <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816d0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   816d2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   816d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		while (status != 0) {
   816d6:	439c      	bics	r4, r3
   816d8:	d1cb      	bne.n	81672 <PIOA_Handler+0x2e>
   816da:	e7d3      	b.n	81684 <PIOA_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   816dc:	6c69      	ldr	r1, [r5, #68]	; 0x44
   816de:	420c      	tst	r4, r1
   816e0:	d0ca      	beq.n	81678 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   816e4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   816e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		while (status != 0) {
   816e8:	439c      	bics	r4, r3
   816ea:	d1c5      	bne.n	81678 <PIOA_Handler+0x34>
   816ec:	e7ca      	b.n	81684 <PIOA_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   816ee:	6d69      	ldr	r1, [r5, #84]	; 0x54
   816f0:	420c      	tst	r4, r1
   816f2:	d0c4      	beq.n	8167e <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   816f6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   816f8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		while (status != 0) {
   816fa:	439c      	bics	r4, r3
   816fc:	d1bf      	bne.n	8167e <PIOA_Handler+0x3a>
}
   816fe:	bd70      	pop	{r4, r5, r6, pc}
   81700:	00083331 	.word	0x00083331
   81704:	400e0c00 	.word	0x400e0c00
   81708:	00083335 	.word	0x00083335
   8170c:	20003634 	.word	0x20003634

00081710 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81710:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   81712:	4b2e      	ldr	r3, [pc, #184]	; (817cc <PIOB_Handler+0xbc>)
   81714:	482e      	ldr	r0, [pc, #184]	; (817d0 <PIOB_Handler+0xc0>)
   81716:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   81718:	4b2e      	ldr	r3, [pc, #184]	; (817d4 <PIOB_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   8171a:	4604      	mov	r4, r0
	status &= pio_get_interrupt_mask(p_pio);
   8171c:	482c      	ldr	r0, [pc, #176]	; (817d0 <PIOB_Handler+0xc0>)
   8171e:	4798      	blx	r3
	if (status != 0) {
   81720:	4004      	ands	r4, r0
   81722:	d015      	beq.n	81750 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81724:	4d2c      	ldr	r5, [pc, #176]	; (817d8 <PIOB_Handler+0xc8>)
   81726:	6828      	ldr	r0, [r5, #0]
   81728:	280b      	cmp	r0, #11
   8172a:	d012      	beq.n	81752 <PIOB_Handler+0x42>
   8172c:	6928      	ldr	r0, [r5, #16]
   8172e:	280b      	cmp	r0, #11
   81730:	d01f      	beq.n	81772 <PIOB_Handler+0x62>
   81732:	6a28      	ldr	r0, [r5, #32]
   81734:	280b      	cmp	r0, #11
   81736:	d025      	beq.n	81784 <PIOB_Handler+0x74>
   81738:	6b28      	ldr	r0, [r5, #48]	; 0x30
   8173a:	280b      	cmp	r0, #11
   8173c:	d02b      	beq.n	81796 <PIOB_Handler+0x86>
   8173e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   81740:	280b      	cmp	r0, #11
   81742:	d031      	beq.n	817a8 <PIOB_Handler+0x98>
   81744:	6d28      	ldr	r0, [r5, #80]	; 0x50
   81746:	280b      	cmp	r0, #11
   81748:	d037      	beq.n	817ba <PIOB_Handler+0xaa>
   8174a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   8174c:	280b      	cmp	r0, #11
   8174e:	d009      	beq.n	81764 <PIOB_Handler+0x54>
    pio_handler_process(PIOB, ID_PIOB);
}
   81750:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81752:	6869      	ldr	r1, [r5, #4]
   81754:	420c      	tst	r4, r1
   81756:	d0e9      	beq.n	8172c <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81758:	68eb      	ldr	r3, [r5, #12]
   8175a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8175c:	686b      	ldr	r3, [r5, #4]
		while (status != 0) {
   8175e:	439c      	bics	r4, r3
   81760:	d1e4      	bne.n	8172c <PIOB_Handler+0x1c>
   81762:	e7f5      	b.n	81750 <PIOB_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81764:	6e69      	ldr	r1, [r5, #100]	; 0x64
   81766:	4221      	tst	r1, r4
   81768:	d0f2      	beq.n	81750 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8176a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
}
   8176c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81770:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81772:	6969      	ldr	r1, [r5, #20]
   81774:	4221      	tst	r1, r4
   81776:	d0dc      	beq.n	81732 <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81778:	69eb      	ldr	r3, [r5, #28]
   8177a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8177c:	696b      	ldr	r3, [r5, #20]
		while (status != 0) {
   8177e:	439c      	bics	r4, r3
   81780:	d1d7      	bne.n	81732 <PIOB_Handler+0x22>
   81782:	e7e5      	b.n	81750 <PIOB_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81784:	6a69      	ldr	r1, [r5, #36]	; 0x24
   81786:	4221      	tst	r1, r4
   81788:	d0d6      	beq.n	81738 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8178a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   8178c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8178e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		while (status != 0) {
   81790:	439c      	bics	r4, r3
   81792:	d1d1      	bne.n	81738 <PIOB_Handler+0x28>
   81794:	e7dc      	b.n	81750 <PIOB_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81796:	6b69      	ldr	r1, [r5, #52]	; 0x34
   81798:	420c      	tst	r4, r1
   8179a:	d0d0      	beq.n	8173e <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8179c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8179e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   817a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		while (status != 0) {
   817a2:	439c      	bics	r4, r3
   817a4:	d1cb      	bne.n	8173e <PIOB_Handler+0x2e>
   817a6:	e7d3      	b.n	81750 <PIOB_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   817a8:	6c69      	ldr	r1, [r5, #68]	; 0x44
   817aa:	420c      	tst	r4, r1
   817ac:	d0ca      	beq.n	81744 <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   817ae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   817b0:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   817b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		while (status != 0) {
   817b4:	439c      	bics	r4, r3
   817b6:	d1c5      	bne.n	81744 <PIOB_Handler+0x34>
   817b8:	e7ca      	b.n	81750 <PIOB_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   817ba:	6d69      	ldr	r1, [r5, #84]	; 0x54
   817bc:	420c      	tst	r4, r1
   817be:	d0c4      	beq.n	8174a <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   817c0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   817c2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   817c4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		while (status != 0) {
   817c6:	439c      	bics	r4, r3
   817c8:	d1bf      	bne.n	8174a <PIOB_Handler+0x3a>
}
   817ca:	bd70      	pop	{r4, r5, r6, pc}
   817cc:	00083331 	.word	0x00083331
   817d0:	400e0e00 	.word	0x400e0e00
   817d4:	00083335 	.word	0x00083335
   817d8:	20003634 	.word	0x20003634

000817dc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   817dc:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   817de:	4b2e      	ldr	r3, [pc, #184]	; (81898 <PIOC_Handler+0xbc>)
   817e0:	482e      	ldr	r0, [pc, #184]	; (8189c <PIOC_Handler+0xc0>)
   817e2:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   817e4:	4b2e      	ldr	r3, [pc, #184]	; (818a0 <PIOC_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   817e6:	4604      	mov	r4, r0
	status &= pio_get_interrupt_mask(p_pio);
   817e8:	482c      	ldr	r0, [pc, #176]	; (8189c <PIOC_Handler+0xc0>)
   817ea:	4798      	blx	r3
	if (status != 0) {
   817ec:	4004      	ands	r4, r0
   817ee:	d015      	beq.n	8181c <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   817f0:	4d2c      	ldr	r5, [pc, #176]	; (818a4 <PIOC_Handler+0xc8>)
   817f2:	6828      	ldr	r0, [r5, #0]
   817f4:	280c      	cmp	r0, #12
   817f6:	d012      	beq.n	8181e <PIOC_Handler+0x42>
   817f8:	6928      	ldr	r0, [r5, #16]
   817fa:	280c      	cmp	r0, #12
   817fc:	d01f      	beq.n	8183e <PIOC_Handler+0x62>
   817fe:	6a28      	ldr	r0, [r5, #32]
   81800:	280c      	cmp	r0, #12
   81802:	d025      	beq.n	81850 <PIOC_Handler+0x74>
   81804:	6b28      	ldr	r0, [r5, #48]	; 0x30
   81806:	280c      	cmp	r0, #12
   81808:	d02b      	beq.n	81862 <PIOC_Handler+0x86>
   8180a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   8180c:	280c      	cmp	r0, #12
   8180e:	d031      	beq.n	81874 <PIOC_Handler+0x98>
   81810:	6d28      	ldr	r0, [r5, #80]	; 0x50
   81812:	280c      	cmp	r0, #12
   81814:	d037      	beq.n	81886 <PIOC_Handler+0xaa>
   81816:	6e28      	ldr	r0, [r5, #96]	; 0x60
   81818:	280c      	cmp	r0, #12
   8181a:	d009      	beq.n	81830 <PIOC_Handler+0x54>
	pio_handler_process(PIOC, ID_PIOC);
}
   8181c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8181e:	6869      	ldr	r1, [r5, #4]
   81820:	420c      	tst	r4, r1
   81822:	d0e9      	beq.n	817f8 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81824:	68eb      	ldr	r3, [r5, #12]
   81826:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81828:	686b      	ldr	r3, [r5, #4]
		while (status != 0) {
   8182a:	439c      	bics	r4, r3
   8182c:	d1e4      	bne.n	817f8 <PIOC_Handler+0x1c>
   8182e:	e7f5      	b.n	8181c <PIOC_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81830:	6e69      	ldr	r1, [r5, #100]	; 0x64
   81832:	4221      	tst	r1, r4
   81834:	d0f2      	beq.n	8181c <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81836:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
}
   81838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8183c:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8183e:	6969      	ldr	r1, [r5, #20]
   81840:	4221      	tst	r1, r4
   81842:	d0dc      	beq.n	817fe <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81844:	69eb      	ldr	r3, [r5, #28]
   81846:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81848:	696b      	ldr	r3, [r5, #20]
		while (status != 0) {
   8184a:	439c      	bics	r4, r3
   8184c:	d1d7      	bne.n	817fe <PIOC_Handler+0x22>
   8184e:	e7e5      	b.n	8181c <PIOC_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81850:	6a69      	ldr	r1, [r5, #36]	; 0x24
   81852:	4221      	tst	r1, r4
   81854:	d0d6      	beq.n	81804 <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81856:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   81858:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8185a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		while (status != 0) {
   8185c:	439c      	bics	r4, r3
   8185e:	d1d1      	bne.n	81804 <PIOC_Handler+0x28>
   81860:	e7dc      	b.n	8181c <PIOC_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81862:	6b69      	ldr	r1, [r5, #52]	; 0x34
   81864:	420c      	tst	r4, r1
   81866:	d0d0      	beq.n	8180a <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81868:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8186a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8186c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		while (status != 0) {
   8186e:	439c      	bics	r4, r3
   81870:	d1cb      	bne.n	8180a <PIOC_Handler+0x2e>
   81872:	e7d3      	b.n	8181c <PIOC_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81874:	6c69      	ldr	r1, [r5, #68]	; 0x44
   81876:	420c      	tst	r4, r1
   81878:	d0ca      	beq.n	81810 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8187a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   8187c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8187e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		while (status != 0) {
   81880:	439c      	bics	r4, r3
   81882:	d1c5      	bne.n	81810 <PIOC_Handler+0x34>
   81884:	e7ca      	b.n	8181c <PIOC_Handler+0x40>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81886:	6d69      	ldr	r1, [r5, #84]	; 0x54
   81888:	420c      	tst	r4, r1
   8188a:	d0c4      	beq.n	81816 <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8188c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   8188e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81890:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		while (status != 0) {
   81892:	439c      	bics	r4, r3
   81894:	d1bf      	bne.n	81816 <PIOC_Handler+0x3a>
}
   81896:	bd70      	pop	{r4, r5, r6, pc}
   81898:	00083331 	.word	0x00083331
   8189c:	400e1000 	.word	0x400e1000
   818a0:	00083335 	.word	0x00083335
   818a4:	20003634 	.word	0x20003634

000818a8 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   818a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   818ac:	1e41      	subs	r1, r0, #1

	if (!ptr_job->busy) {
   818ae:	4c6d      	ldr	r4, [pc, #436]	; (81a64 <udd_ep_trans_done+0x1bc>)
   818b0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   818b4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   818b8:	7d1a      	ldrb	r2, [r3, #20]
   818ba:	07d7      	lsls	r7, r2, #31
   818bc:	d568      	bpl.n	81990 <udd_ep_trans_done+0xe8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   818be:	e9d3 5602 	ldrd	r5, r6, [r3, #8]
   818c2:	42ae      	cmp	r6, r5
   818c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   818c8:	d064      	beq.n	81994 <udd_ep_trans_done+0xec>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   818ca:	1bad      	subs	r5, r5, r6

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   818cc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   818d0:	d81d      	bhi.n	8190e <udd_ep_trans_done+0x66>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   818d2:	0142      	lsls	r2, r0, #5
   818d4:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   818d8:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   818dc:	f8d2 e100 	ldr.w	lr, [r2, #256]	; 0x100
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   818e0:	042f      	lsls	r7, r5, #16
		if (Is_udd_endpoint_in(ep)) {
   818e2:	f01e 0f08 	tst.w	lr, #8
   818e6:	f000 8088 	beq.w	819fa <udd_ep_trans_done+0x152>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   818ea:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   818ee:	f002 0e07 	and.w	lr, r2, #7
   818f2:	2208      	movs	r2, #8
   818f4:	fa02 f20e 	lsl.w	r2, r2, lr
   818f8:	3a01      	subs	r2, #1
   818fa:	422a      	tst	r2, r5
   818fc:	f000 80ae 	beq.w	81a5c <udd_ep_trans_done+0x1b4>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   81900:	7d1a      	ldrb	r2, [r3, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   81902:	f047 0729 	orr.w	r7, r7, #41	; 0x29
				ptr_job->b_shortpacket = false;
   81906:	f36f 0241 	bfc	r2, #1, #1
   8190a:	751a      	strb	r2, [r3, #20]
   8190c:	e00d      	b.n	8192a <udd_ep_trans_done+0x82>
		if (Is_udd_endpoint_in(ep)) {
   8190e:	0143      	lsls	r3, r0, #5
   81910:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   81914:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   81918:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8191c:	0717      	lsls	r7, r2, #28
   8191e:	d575      	bpl.n	81a0c <udd_ep_trans_done+0x164>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81920:	2721      	movs	r7, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81922:	f44f 3580 	mov.w	r5, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81926:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8192a:	eb0c 0201 	add.w	r2, ip, r1
   8192e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   81932:	6853      	ldr	r3, [r2, #4]
   81934:	441e      	add	r6, r3
   81936:	4b4c      	ldr	r3, [pc, #304]	; (81a68 <udd_ep_trans_done+0x1c0>)
   81938:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   8193c:	605e      	str	r6, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8193e:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i");
   81942:	b672      	cpsid	i
   81944:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81948:	f04f 0800 	mov.w	r8, #0
   8194c:	4e47      	ldr	r6, [pc, #284]	; (81a6c <udd_ep_trans_done+0x1c4>)
   8194e:	f886 8000 	strb.w	r8, [r6]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   81952:	f8d3 800c 	ldr.w	r8, [r3, #12]
   81956:	f018 0f10 	tst.w	r8, #16
   8195a:	d061      	beq.n	81a20 <udd_ep_trans_done+0x178>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8195c:	f1be 0f00 	cmp.w	lr, #0
   81960:	d104      	bne.n	8196c <udd_ep_trans_done+0xc4>
		cpu_irq_enable();
   81962:	2301      	movs	r3, #1
   81964:	7033      	strb	r3, [r6, #0]
   81966:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8196a:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   8196c:	eb0c 0201 	add.w	r2, ip, r1
   81970:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   81974:	68d3      	ldr	r3, [r2, #12]
	}
	if (Is_udd_endpoint_in(ep)) {
   81976:	4e3e      	ldr	r6, [pc, #248]	; (81a70 <udd_ep_trans_done+0x1c8>)
		ptr_job->buf_size = ptr_job->buf_cnt;
   81978:	6093      	str	r3, [r2, #8]
	if (Is_udd_endpoint_in(ep)) {
   8197a:	f100 0308 	add.w	r3, r0, #8
   8197e:	015d      	lsls	r5, r3, #5
   81980:	5975      	ldr	r5, [r6, r5]
		if (ptr_job->b_shortpacket) {
   81982:	7d12      	ldrb	r2, [r2, #20]
	if (Is_udd_endpoint_in(ep)) {
   81984:	072e      	lsls	r6, r5, #28
   81986:	d501      	bpl.n	8198c <udd_ep_trans_done+0xe4>
		if (ptr_job->b_shortpacket) {
   81988:	0795      	lsls	r5, r2, #30
   8198a:	d429      	bmi.n	819e0 <udd_ep_trans_done+0x138>
	if (ptr_job->busy == false) {
   8198c:	07d2      	lsls	r2, r2, #31
   8198e:	d408      	bmi.n	819a2 <udd_ep_trans_done+0xfa>
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
   81990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Is_udd_endpoint_in(ep)) {
   81994:	4e36      	ldr	r6, [pc, #216]	; (81a70 <udd_ep_trans_done+0x1c8>)
   81996:	f100 0308 	add.w	r3, r0, #8
   8199a:	015d      	lsls	r5, r3, #5
   8199c:	5975      	ldr	r5, [r6, r5]
   8199e:	072d      	lsls	r5, r5, #28
   819a0:	d41c      	bmi.n	819dc <udd_ep_trans_done+0x134>
	ptr_job->busy = false;
   819a2:	eb0c 0501 	add.w	r5, ip, r1
   819a6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	if (NULL == ptr_job->call_trans) {
   819aa:	f854 6035 	ldr.w	r6, [r4, r5, lsl #3]
	ptr_job->busy = false;
   819ae:	7d15      	ldrb	r5, [r2, #20]
   819b0:	f36f 0500 	bfc	r5, #0, #1
   819b4:	7515      	strb	r5, [r2, #20]
	if (NULL == ptr_job->call_trans) {
   819b6:	2e00      	cmp	r6, #0
   819b8:	d0ea      	beq.n	81990 <udd_ep_trans_done+0xe8>
	if (Is_udd_endpoint_in(ep_num)) {
   819ba:	4a2d      	ldr	r2, [pc, #180]	; (81a70 <udd_ep_trans_done+0x1c8>)
   819bc:	015b      	lsls	r3, r3, #5
   819be:	58d3      	ldr	r3, [r2, r3]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   819c0:	4461      	add	r1, ip
	if (Is_udd_endpoint_in(ep_num)) {
   819c2:	071b      	lsls	r3, r3, #28
		ep_num |= USB_EP_DIR_IN;
   819c4:	bf48      	it	mi
   819c6:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   819ca:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   819ce:	4602      	mov	r2, r0
   819d0:	4633      	mov	r3, r6
   819d2:	68a1      	ldr	r1, [r4, #8]
   819d4:	2000      	movs	r0, #0
}
   819d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   819da:	4718      	bx	r3
		if (ptr_job->b_shortpacket) {
   819dc:	0792      	lsls	r2, r2, #30
   819de:	d5e0      	bpl.n	819a2 <udd_ep_trans_done+0xfa>
			udd_enable_tx_pkt_ready_interrupt(ep);
   819e0:	f44f 6400 	mov.w	r4, #2048	; 0x800
			udd_enable_endpoint_interrupt(ep);
   819e4:	f44f 7280 	mov.w	r2, #256	; 0x100
			udd_enable_tx_pkt_ready_interrupt(ep);
   819e8:	4921      	ldr	r1, [pc, #132]	; (81a70 <udd_ep_trans_done+0x1c8>)
			udd_enable_endpoint_interrupt(ep);
   819ea:	4082      	lsls	r2, r0
			udd_enable_tx_pkt_ready_interrupt(ep);
   819ec:	eb01 1343 	add.w	r3, r1, r3, lsl #5
   819f0:	605c      	str	r4, [r3, #4]
			udd_enable_endpoint_interrupt(ep);
   819f2:	690b      	ldr	r3, [r1, #16]
   819f4:	431a      	orrs	r2, r3
   819f6:	610a      	str	r2, [r1, #16]
			return;
   819f8:	e7ca      	b.n	81990 <udd_ep_trans_done+0xe8>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   819fa:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   819fe:	f3c3 1301 	ubfx	r3, r3, #4, #2
   81a02:	2b01      	cmp	r3, #1
   81a04:	d022      	beq.n	81a4c <udd_ep_trans_done+0x1a4>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   81a06:	f047 0735 	orr.w	r7, r7, #53	; 0x35
   81a0a:	e78e      	b.n	8192a <udd_ep_trans_done+0x82>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   81a0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   81a10:	f3c2 1201 	ubfx	r2, r2, #4, #2
   81a14:	2a01      	cmp	r2, #1
   81a16:	d083      	beq.n	81920 <udd_ep_trans_done+0x78>
   81a18:	2735      	movs	r7, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81a1a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   81a1e:	e784      	b.n	8192a <udd_ep_trans_done+0x82>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   81a20:	609f      	str	r7, [r3, #8]
			udd_enable_endpoint_dma_interrupt(ep);
   81a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   81a26:	fa03 f101 	lsl.w	r1, r3, r1
			ptr_job->buf_cnt += next_trans;
   81a2a:	68d3      	ldr	r3, [r2, #12]
			ptr_job->buf_load = next_trans;
   81a2c:	6115      	str	r5, [r2, #16]
			ptr_job->buf_cnt += next_trans;
   81a2e:	441d      	add	r5, r3
			udd_enable_endpoint_dma_interrupt(ep);
   81a30:	4b0f      	ldr	r3, [pc, #60]	; (81a70 <udd_ep_trans_done+0x1c8>)
			ptr_job->buf_cnt += next_trans;
   81a32:	60d5      	str	r5, [r2, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   81a34:	691a      	ldr	r2, [r3, #16]
   81a36:	4311      	orrs	r1, r2
   81a38:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   81a3a:	f1be 0f00 	cmp.w	lr, #0
   81a3e:	d1a7      	bne.n	81990 <udd_ep_trans_done+0xe8>
		cpu_irq_enable();
   81a40:	2301      	movs	r3, #1
   81a42:	7033      	strb	r3, [r6, #0]
   81a44:	f3bf 8f5f 	dmb	sy
   81a48:	b662      	cpsie	i
}
   81a4a:	e7a1      	b.n	81990 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81a4c:	2308      	movs	r3, #8
   81a4e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   81a52:	f002 0207 	and.w	r2, r2, #7
   81a56:	4093      	lsls	r3, r2
   81a58:	42ab      	cmp	r3, r5
   81a5a:	d2d4      	bcs.n	81a06 <udd_ep_trans_done+0x15e>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   81a5c:	f047 0721 	orr.w	r7, r7, #33	; 0x21
   81a60:	e763      	b.n	8192a <udd_ep_trans_done+0x82>
   81a62:	bf00      	nop
   81a64:	200036ac 	.word	0x200036ac
   81a68:	400a4300 	.word	0x400a4300
   81a6c:	20000368 	.word	0x20000368
   81a70:	400a4000 	.word	0x400a4000

00081a74 <udd_ctrl_in_sent>:
{
   81a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81a78:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   81a7c:	b672      	cpsid	i
   81a7e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81a82:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   81a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81a88:	4d5a      	ldr	r5, [pc, #360]	; (81bf4 <udd_ctrl_in_sent+0x180>)
   81a8a:	4a5b      	ldr	r2, [pc, #364]	; (81bf8 <udd_ctrl_in_sent+0x184>)
   81a8c:	7028      	strb	r0, [r5, #0]
   81a8e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   81a92:	b923      	cbnz	r3, 81a9e <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   81a94:	2301      	movs	r3, #1
   81a96:	702b      	strb	r3, [r5, #0]
   81a98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81a9c:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81a9e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 81bfc <udd_ctrl_in_sent+0x188>
   81aa2:	f898 3000 	ldrb.w	r3, [r8]
   81aa6:	2b03      	cmp	r3, #3
   81aa8:	d063      	beq.n	81b72 <udd_ctrl_in_sent+0xfe>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81aaa:	4f55      	ldr	r7, [pc, #340]	; (81c00 <udd_ctrl_in_sent+0x18c>)
   81aac:	4e55      	ldr	r6, [pc, #340]	; (81c04 <udd_ctrl_in_sent+0x190>)
   81aae:	883a      	ldrh	r2, [r7, #0]
   81ab0:	89b4      	ldrh	r4, [r6, #12]
   81ab2:	1aa4      	subs	r4, r4, r2
   81ab4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   81ab6:	2c00      	cmp	r4, #0
   81ab8:	d038      	beq.n	81b2c <udd_ctrl_in_sent+0xb8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81aba:	4613      	mov	r3, r2
   81abc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 81c08 <udd_ctrl_in_sent+0x194>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81ac0:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   81ac2:	bf86      	itte	hi
   81ac4:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   81ac6:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   81ac8:	2201      	movls	r2, #1
   81aca:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81ace:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81ad0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   81ad4:	b672      	cpsid	i
   81ad6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81ada:	2100      	movs	r1, #0
   81adc:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   81ade:	4946      	ldr	r1, [pc, #280]	; (81bf8 <udd_ctrl_in_sent+0x184>)
   81ae0:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   81ae4:	0589      	lsls	r1, r1, #22
   81ae6:	d439      	bmi.n	81b5c <udd_ctrl_in_sent+0xe8>
	for (i = 0; i < nb_remain; i++) {
   81ae8:	b154      	cbz	r4, 81b00 <udd_ctrl_in_sent+0x8c>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81aea:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   81aec:	4b47      	ldr	r3, [pc, #284]	; (81c0c <udd_ctrl_in_sent+0x198>)
		*ptr_dest++ = *ptr_src++;
   81aee:	4618      	mov	r0, r3
   81af0:	3301      	adds	r3, #1
   81af2:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   81af6:	b2d9      	uxtb	r1, r3
   81af8:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   81afa:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   81afe:	d3f6      	bcc.n	81aee <udd_ctrl_in_sent+0x7a>
	udd_ack_in_send(0);
   81b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
	udd_raise_tx_pkt_ready(0);
   81b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
	udd_ctrl_payload_buf_cnt += nb_remain;
   81b08:	883b      	ldrh	r3, [r7, #0]
   81b0a:	441c      	add	r4, r3
	udd_ack_in_send(0);
   81b0c:	4b3a      	ldr	r3, [pc, #232]	; (81bf8 <udd_ctrl_in_sent+0x184>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   81b0e:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   81b10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   81b14:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   81b18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   81b1c:	b926      	cbnz	r6, 81b28 <udd_ctrl_in_sent+0xb4>
		cpu_irq_enable();
   81b1e:	2301      	movs	r3, #1
   81b20:	702b      	strb	r3, [r5, #0]
   81b22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81b26:	b662      	cpsie	i
}
   81b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81b2c:	4938      	ldr	r1, [pc, #224]	; (81c10 <udd_ctrl_in_sent+0x19c>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81b2e:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81b30:	880b      	ldrh	r3, [r1, #0]
   81b32:	4413      	add	r3, r2
   81b34:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81b36:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81b38:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81b3a:	d042      	beq.n	81bc2 <udd_ctrl_in_sent+0x14e>
				|| b_shortpacket) {
   81b3c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 81c08 <udd_ctrl_in_sent+0x194>
   81b40:	f899 a000 	ldrb.w	sl, [r9]
   81b44:	f1ba 0f00 	cmp.w	sl, #0
   81b48:	d13b      	bne.n	81bc2 <udd_ctrl_in_sent+0x14e>
		if ((!udd_g_ctrlreq.over_under_run)
   81b4a:	6973      	ldr	r3, [r6, #20]
   81b4c:	2b00      	cmp	r3, #0
   81b4e:	d035      	beq.n	81bbc <udd_ctrl_in_sent+0x148>
				|| (!udd_g_ctrlreq.over_under_run())) {
   81b50:	4798      	blx	r3
   81b52:	2800      	cmp	r0, #0
   81b54:	d149      	bne.n	81bea <udd_ctrl_in_sent+0x176>
		b_shortpacket = true;
   81b56:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81b58:	883b      	ldrh	r3, [r7, #0]
   81b5a:	e7b6      	b.n	81aca <udd_ctrl_in_sent+0x56>
	if (cpu_irq_is_enabled_flags(flags))
   81b5c:	b926      	cbnz	r6, 81b68 <udd_ctrl_in_sent+0xf4>
		cpu_irq_enable();
   81b5e:	2301      	movs	r3, #1
   81b60:	702b      	strb	r3, [r5, #0]
   81b62:	f3bf 8f5f 	dmb	sy
   81b66:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81b68:	2304      	movs	r3, #4
   81b6a:	f888 3000 	strb.w	r3, [r8]
}
   81b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   81b72:	4e24      	ldr	r6, [pc, #144]	; (81c04 <udd_ctrl_in_sent+0x190>)
   81b74:	6933      	ldr	r3, [r6, #16]
   81b76:	b103      	cbz	r3, 81b7a <udd_ctrl_in_sent+0x106>
		udd_g_ctrlreq.callback();
   81b78:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81b7a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   81b7e:	b672      	cpsid	i
   81b80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81b84:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   81b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81b8a:	4a1b      	ldr	r2, [pc, #108]	; (81bf8 <udd_ctrl_in_sent+0x184>)
   81b8c:	7028      	strb	r0, [r5, #0]
   81b8e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   81b92:	b923      	cbnz	r3, 81b9e <udd_ctrl_in_sent+0x12a>
		cpu_irq_enable();
   81b94:	2301      	movs	r3, #1
   81b96:	702b      	strb	r3, [r5, #0]
   81b98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81b9c:	b662      	cpsie	i
	udd_ack_out_received(0);
   81b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
   81ba2:	4a15      	ldr	r2, [pc, #84]	; (81bf8 <udd_ctrl_in_sent+0x184>)
	udd_g_ctrlreq.callback = NULL;
   81ba4:	2000      	movs	r0, #0
	udd_ack_out_received(0);
   81ba6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.callback = NULL;
   81baa:	2100      	movs	r1, #0
	udd_g_ctrlreq.payload_size = 0;
   81bac:	2300      	movs	r3, #0
	udd_g_ctrlreq.callback = NULL;
   81bae:	e9c6 0104 	strd	r0, r1, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   81bb2:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81bb4:	f888 3000 	strb.w	r3, [r8]
}
   81bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81bbc:	4613      	mov	r3, r2
		b_shortpacket = true;
   81bbe:	2201      	movs	r2, #1
   81bc0:	e783      	b.n	81aca <udd_ctrl_in_sent+0x56>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81bc2:	2304      	movs	r3, #4
   81bc4:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81bc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   81bcc:	b672      	cpsid	i
   81bce:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   81bd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	cpu_irq_disable();
   81bd6:	2000      	movs	r0, #0
   81bd8:	4b07      	ldr	r3, [pc, #28]	; (81bf8 <udd_ctrl_in_sent+0x184>)
   81bda:	7028      	strb	r0, [r5, #0]
   81bdc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   81be0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   81be4:	2900      	cmp	r1, #0
   81be6:	d19f      	bne.n	81b28 <udd_ctrl_in_sent+0xb4>
   81be8:	e799      	b.n	81b1e <udd_ctrl_in_sent+0xaa>
			udd_ctrl_payload_buf_cnt = 0;
   81bea:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   81bec:	4653      	mov	r3, sl
   81bee:	89b4      	ldrh	r4, [r6, #12]
   81bf0:	e766      	b.n	81ac0 <udd_ctrl_in_sent+0x4c>
   81bf2:	bf00      	nop
   81bf4:	20000368 	.word	0x20000368
   81bf8:	400a4000 	.word	0x400a4000
   81bfc:	200036aa 	.word	0x200036aa
   81c00:	200036a6 	.word	0x200036a6
   81c04:	200036e0 	.word	0x200036e0
   81c08:	200036a4 	.word	0x200036a4
   81c0c:	20180000 	.word	0x20180000
   81c10:	200036a8 	.word	0x200036a8

00081c14 <UDPHS_Handler>:
{
   81c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   81c18:	4b85      	ldr	r3, [pc, #532]	; (81e30 <UDPHS_Handler+0x21c>)
   81c1a:	201d      	movs	r0, #29
   81c1c:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81c1e:	4b85      	ldr	r3, [pc, #532]	; (81e34 <UDPHS_Handler+0x220>)
   81c20:	4798      	blx	r3
   81c22:	b928      	cbnz	r0, 81c30 <UDPHS_Handler+0x1c>
   81c24:	4b84      	ldr	r3, [pc, #528]	; (81e38 <UDPHS_Handler+0x224>)
   81c26:	695b      	ldr	r3, [r3, #20]
   81c28:	f013 0302 	ands.w	r3, r3, #2
   81c2c:	f000 8081 	beq.w	81d32 <UDPHS_Handler+0x11e>
	if (Is_udd_sof()) {
   81c30:	4b81      	ldr	r3, [pc, #516]	; (81e38 <UDPHS_Handler+0x224>)
   81c32:	695a      	ldr	r2, [r3, #20]
   81c34:	0712      	lsls	r2, r2, #28
   81c36:	d46d      	bmi.n	81d14 <UDPHS_Handler+0x100>
	if (Is_udd_msof()) {
   81c38:	695a      	ldr	r2, [r3, #20]
   81c3a:	0757      	lsls	r7, r2, #29
   81c3c:	d473      	bmi.n	81d26 <UDPHS_Handler+0x112>
	uint32_t status = udd_get_endpoint_status(0);
   81c3e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   81c42:	6959      	ldr	r1, [r3, #20]
   81c44:	05ce      	lsls	r6, r1, #23
   81c46:	d521      	bpl.n	81c8c <UDPHS_Handler+0x78>
	udd_disable_nak_in_interrupt(0);
   81c48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	udd_disable_nak_out_interrupt(0);
   81c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (Is_udd_endpoint_status_setup_received(status)) {
   81c50:	04d5      	lsls	r5, r2, #19
	udd_disable_nak_in_interrupt(0);
   81c52:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   81c56:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   81c5a:	f100 80ff 	bmi.w	81e5c <UDPHS_Handler+0x248>
	if (Is_udd_endpoint_status_in_sent(status)
   81c5e:	0554      	lsls	r4, r2, #21
   81c60:	d504      	bpl.n	81c6c <UDPHS_Handler+0x58>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   81c62:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   81c66:	0558      	lsls	r0, r3, #21
   81c68:	f100 827c 	bmi.w	82164 <UDPHS_Handler+0x550>
	if (Is_udd_endpoint_status_out_received(status)) {
   81c6c:	0591      	lsls	r1, r2, #22
   81c6e:	f100 81a2 	bmi.w	81fb6 <UDPHS_Handler+0x3a2>
	if (Is_udd_endpoint_status_stall(status)) {
   81c72:	0493      	lsls	r3, r2, #18
   81c74:	d504      	bpl.n	81c80 <UDPHS_Handler+0x6c>
		udd_ack_stall(0);
   81c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81c7a:	4b6f      	ldr	r3, [pc, #444]	; (81e38 <UDPHS_Handler+0x224>)
   81c7c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   81c80:	0417      	lsls	r7, r2, #16
   81c82:	f100 8185 	bmi.w	81f90 <UDPHS_Handler+0x37c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   81c86:	0455      	lsls	r5, r2, #17
   81c88:	f100 8270 	bmi.w	8216c <UDPHS_Handler+0x558>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81c8c:	4b6a      	ldr	r3, [pc, #424]	; (81e38 <UDPHS_Handler+0x224>)
   81c8e:	691a      	ldr	r2, [r3, #16]
   81c90:	0194      	lsls	r4, r2, #6
   81c92:	d503      	bpl.n	81c9c <UDPHS_Handler+0x88>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81c94:	695b      	ldr	r3, [r3, #20]
   81c96:	0198      	lsls	r0, r3, #6
   81c98:	f100 8354 	bmi.w	82344 <UDPHS_Handler+0x730>
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81c9c:	4b66      	ldr	r3, [pc, #408]	; (81e38 <UDPHS_Handler+0x224>)
   81c9e:	691a      	ldr	r2, [r3, #16]
   81ca0:	0591      	lsls	r1, r2, #22
   81ca2:	d556      	bpl.n	81d52 <UDPHS_Handler+0x13e>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   81ca4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   81ca8:	0512      	lsls	r2, r2, #20
   81caa:	d54c      	bpl.n	81d46 <UDPHS_Handler+0x132>
					&& !Is_udd_tx_pkt_ready(ep)) {
   81cac:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   81cb0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
   81cb4:	d147      	bne.n	81d46 <UDPHS_Handler+0x132>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   81cb6:	2201      	movs	r2, #1
		ptr_job = &udd_ep_job[ep - 1];
   81cb8:	4611      	mov	r1, r2
				udd_disable_tx_pkt_ready_interrupt(ep);
   81cba:	f44f 6c00 	mov.w	ip, #2048	; 0x800
   81cbe:	f8df e178 	ldr.w	lr, [pc, #376]	; 81e38 <UDPHS_Handler+0x224>
	if (ptr_job->busy == false) {
   81cc2:	4c5e      	ldr	r4, [pc, #376]	; (81e3c <UDPHS_Handler+0x228>)
				udd_disable_tx_pkt_ready_interrupt(ep);
   81cc4:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
	if (ptr_job->busy == false) {
   81cc8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   81ccc:	eb04 07c0 	add.w	r7, r4, r0, lsl #3
				udd_disable_tx_pkt_ready_interrupt(ep);
   81cd0:	f8c6 c108 	str.w	ip, [r6, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   81cd4:	f8c6 c114 	str.w	ip, [r6, #276]	; 0x114
	if (ptr_job->busy == false) {
   81cd8:	7d3e      	ldrb	r6, [r7, #20]
   81cda:	00c0      	lsls	r0, r0, #3
   81cdc:	07f6      	lsls	r6, r6, #31
   81cde:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81ce2:	d52b      	bpl.n	81d3c <UDPHS_Handler+0x128>
	if (NULL == ptr_job->call_trans) {
   81ce4:	5826      	ldr	r6, [r4, r0]
	ptr_job->busy = false;
   81ce6:	7d38      	ldrb	r0, [r7, #20]
   81ce8:	f36f 0000 	bfc	r0, #0, #1
   81cec:	7538      	strb	r0, [r7, #20]
	if (NULL == ptr_job->call_trans) {
   81cee:	b32e      	cbz	r6, 81d3c <UDPHS_Handler+0x128>
	if (Is_udd_endpoint_in(ep_num)) {
   81cf0:	3108      	adds	r1, #8
   81cf2:	0149      	lsls	r1, r1, #5
   81cf4:	f85e 1001 	ldr.w	r1, [lr, r1]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81cf8:	442b      	add	r3, r5
	if (Is_udd_endpoint_in(ep_num)) {
   81cfa:	070f      	lsls	r7, r1, #28
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81cfc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   81d00:	68a1      	ldr	r1, [r4, #8]
   81d02:	4633      	mov	r3, r6
}
   81d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81d08:	f04f 0000 	mov.w	r0, #0
		ep_num |= USB_EP_DIR_IN;
   81d0c:	bf48      	it	mi
   81d0e:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81d12:	4718      	bx	r3
		udd_ack_sof();
   81d14:	2208      	movs	r2, #8
   81d16:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   81d18:	695b      	ldr	r3, [r3, #20]
   81d1a:	07db      	lsls	r3, r3, #31
   81d1c:	d510      	bpl.n	81d40 <UDPHS_Handler+0x12c>
}
   81d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		UDC_SOF_EVENT();
   81d22:	4b47      	ldr	r3, [pc, #284]	; (81e40 <UDPHS_Handler+0x22c>)
   81d24:	4718      	bx	r3
		udd_ack_msof();
   81d26:	2104      	movs	r1, #4
   81d28:	6199      	str	r1, [r3, #24]
		udc_sof_notify();
   81d2a:	4a46      	ldr	r2, [pc, #280]	; (81e44 <UDPHS_Handler+0x230>)
}
   81d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udc_sof_notify();
   81d30:	4710      	bx	r2
   81d32:	b672      	cpsid	i
   81d34:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81d38:	4a43      	ldr	r2, [pc, #268]	; (81e48 <UDPHS_Handler+0x234>)
   81d3a:	7013      	strb	r3, [r2, #0]
}
   81d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   81d40:	4b40      	ldr	r3, [pc, #256]	; (81e44 <UDPHS_Handler+0x230>)
   81d42:	4798      	blx	r3
   81d44:	e7eb      	b.n	81d1e <UDPHS_Handler+0x10a>
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   81d46:	4b3c      	ldr	r3, [pc, #240]	; (81e38 <UDPHS_Handler+0x224>)
   81d48:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   81d4c:	0357      	lsls	r7, r2, #13
   81d4e:	f100 80f3 	bmi.w	81f38 <UDPHS_Handler+0x324>
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81d52:	4b39      	ldr	r3, [pc, #228]	; (81e38 <UDPHS_Handler+0x224>)
   81d54:	691a      	ldr	r2, [r3, #16]
   81d56:	0156      	lsls	r6, r2, #5
   81d58:	d503      	bpl.n	81d62 <UDPHS_Handler+0x14e>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81d5a:	695b      	ldr	r3, [r3, #20]
   81d5c:	015d      	lsls	r5, r3, #5
   81d5e:	f100 8311 	bmi.w	82384 <UDPHS_Handler+0x770>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81d62:	4b35      	ldr	r3, [pc, #212]	; (81e38 <UDPHS_Handler+0x224>)
   81d64:	691a      	ldr	r2, [r3, #16]
   81d66:	0551      	lsls	r1, r2, #21
   81d68:	d51a      	bpl.n	81da0 <UDPHS_Handler+0x18c>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   81d6a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
   81d6e:	0512      	lsls	r2, r2, #20
   81d70:	d507      	bpl.n	81d82 <UDPHS_Handler+0x16e>
					&& !Is_udd_tx_pkt_ready(ep)) {
   81d72:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   81d76:	051f      	lsls	r7, r3, #20
   81d78:	d403      	bmi.n	81d82 <UDPHS_Handler+0x16e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   81d7a:	2202      	movs	r2, #2
		ptr_job = &udd_ep_job[ep - 1];
   81d7c:	2301      	movs	r3, #1
   81d7e:	4611      	mov	r1, r2
   81d80:	e79b      	b.n	81cba <UDPHS_Handler+0xa6>
			if (Is_udd_bank_interrupt_enabled(ep)
   81d82:	4b2d      	ldr	r3, [pc, #180]	; (81e38 <UDPHS_Handler+0x224>)
   81d84:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
   81d88:	0356      	lsls	r6, r2, #13
   81d8a:	d509      	bpl.n	81da0 <UDPHS_Handler+0x18c>
					&& (0 == udd_nb_busy_bank(ep))) {
   81d8c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   81d90:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   81d94:	d104      	bne.n	81da0 <UDPHS_Handler+0x18c>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81d96:	f44f 6680 	mov.w	r6, #1024	; 0x400
		ptr_job = &udd_ep_job[ep - 1];
   81d9a:	2201      	movs	r2, #1
   81d9c:	2302      	movs	r3, #2
   81d9e:	e0d6      	b.n	81f4e <UDPHS_Handler+0x33a>
	if (Is_udd_reset()) {
   81da0:	4925      	ldr	r1, [pc, #148]	; (81e38 <UDPHS_Handler+0x224>)
   81da2:	694c      	ldr	r4, [r1, #20]
   81da4:	f014 0410 	ands.w	r4, r4, #16
   81da8:	f040 8154 	bne.w	82054 <UDPHS_Handler+0x440>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81dac:	690b      	ldr	r3, [r1, #16]
   81dae:	0798      	lsls	r0, r3, #30
   81db0:	d51b      	bpl.n	81dea <UDPHS_Handler+0x1d6>
   81db2:	694b      	ldr	r3, [r1, #20]
   81db4:	079a      	lsls	r2, r3, #30
   81db6:	d518      	bpl.n	81dea <UDPHS_Handler+0x1d6>
		udd_ack_wake_up();
   81db8:	2320      	movs	r3, #32
		udd_ack_suspend();
   81dba:	2502      	movs	r5, #2
		udd_ack_wake_up();
   81dbc:	618b      	str	r3, [r1, #24]
		udd_disable_suspend_interrupt();
   81dbe:	690b      	ldr	r3, [r1, #16]
		udd_disable_periph_ck();
   81dc0:	4a22      	ldr	r2, [pc, #136]	; (81e4c <UDPHS_Handler+0x238>)
		udd_disable_suspend_interrupt();
   81dc2:	f023 0302 	bic.w	r3, r3, #2
   81dc6:	610b      	str	r3, [r1, #16]
		udd_enable_wake_up_interrupt();
   81dc8:	690b      	ldr	r3, [r1, #16]
		udd_disable_periph_ck();
   81dca:	201d      	movs	r0, #29
		udd_enable_wake_up_interrupt();
   81dcc:	f043 0320 	orr.w	r3, r3, #32
   81dd0:	610b      	str	r3, [r1, #16]
		udd_ack_suspend();
   81dd2:	618d      	str	r5, [r1, #24]
		udd_disable_periph_ck();
   81dd4:	4790      	blx	r2
		UDC_SUSPEND_EVENT();
   81dd6:	4b1e      	ldr	r3, [pc, #120]	; (81e50 <UDPHS_Handler+0x23c>)
   81dd8:	4798      	blx	r3
	if (!b_idle && udd_b_idle) {
   81dda:	4a1e      	ldr	r2, [pc, #120]	; (81e54 <UDPHS_Handler+0x240>)
   81ddc:	7813      	ldrb	r3, [r2, #0]
   81dde:	2b00      	cmp	r3, #0
   81de0:	f040 8285 	bne.w	822ee <UDPHS_Handler+0x6da>
	udd_b_idle = b_idle;
   81de4:	2300      	movs	r3, #0
   81de6:	7013      	strb	r3, [r2, #0]
		goto udd_interrupt_end;
   81de8:	e7a8      	b.n	81d3c <UDPHS_Handler+0x128>
	if (Is_udd_wake_up()) {
   81dea:	4b13      	ldr	r3, [pc, #76]	; (81e38 <UDPHS_Handler+0x224>)
   81dec:	695b      	ldr	r3, [r3, #20]
   81dee:	069b      	lsls	r3, r3, #26
   81df0:	d5a4      	bpl.n	81d3c <UDPHS_Handler+0x128>
	if (b_idle && !udd_b_idle) {
   81df2:	4a18      	ldr	r2, [pc, #96]	; (81e54 <UDPHS_Handler+0x240>)
   81df4:	7813      	ldrb	r3, [r2, #0]
   81df6:	2b00      	cmp	r3, #0
   81df8:	f000 820c 	beq.w	82214 <UDPHS_Handler+0x600>
		udd_ack_suspend();
   81dfc:	2402      	movs	r4, #2
	udd_b_idle = b_idle;
   81dfe:	2501      	movs	r5, #1
		udd_ack_wake_up();
   81e00:	2020      	movs	r0, #32
		udd_ack_suspend();
   81e02:	4b0d      	ldr	r3, [pc, #52]	; (81e38 <UDPHS_Handler+0x224>)
	udd_b_idle = b_idle;
   81e04:	7015      	strb	r5, [r2, #0]
		udd_ack_suspend();
   81e06:	619c      	str	r4, [r3, #24]
		udd_ack_wake_up();
   81e08:	6198      	str	r0, [r3, #24]
		udd_disable_wake_up_interrupt();
   81e0a:	691a      	ldr	r2, [r3, #16]
		UDC_RESUME_EVENT();
   81e0c:	4912      	ldr	r1, [pc, #72]	; (81e58 <UDPHS_Handler+0x244>)
		udd_disable_wake_up_interrupt();
   81e0e:	f022 0220 	bic.w	r2, r2, #32
   81e12:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   81e14:	691a      	ldr	r2, [r3, #16]
   81e16:	4322      	orrs	r2, r4
   81e18:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   81e1a:	691a      	ldr	r2, [r3, #16]
   81e1c:	f042 0208 	orr.w	r2, r2, #8
   81e20:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   81e22:	691a      	ldr	r2, [r3, #16]
   81e24:	f042 0204 	orr.w	r2, r2, #4
   81e28:	611a      	str	r2, [r3, #16]
}
   81e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		UDC_RESUME_EVENT();
   81e2e:	4708      	bx	r1
   81e30:	0008319d 	.word	0x0008319d
   81e34:	00083795 	.word	0x00083795
   81e38:	400a4000 	.word	0x400a4000
   81e3c:	200036ac 	.word	0x200036ac
   81e40:	000809b5 	.word	0x000809b5
   81e44:	00080e25 	.word	0x00080e25
   81e48:	20000368 	.word	0x20000368
   81e4c:	000831c1 	.word	0x000831c1
   81e50:	000809a5 	.word	0x000809a5
   81e54:	200036a5 	.word	0x200036a5
   81e58:	000809ad 	.word	0x000809ad
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81e5c:	4c74      	ldr	r4, [pc, #464]	; (82030 <UDPHS_Handler+0x41c>)
   81e5e:	7823      	ldrb	r3, [r4, #0]
   81e60:	b313      	cbz	r3, 81ea8 <UDPHS_Handler+0x294>
	if (udd_g_ctrlreq.callback) {
   81e62:	4f74      	ldr	r7, [pc, #464]	; (82034 <UDPHS_Handler+0x420>)
   81e64:	693b      	ldr	r3, [r7, #16]
   81e66:	b103      	cbz	r3, 81e6a <UDPHS_Handler+0x256>
		udd_g_ctrlreq.callback();
   81e68:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e6a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   81e6e:	b672      	cpsid	i
   81e70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e74:	2100      	movs	r1, #0
	udd_disable_in_send_interrupt(0);
   81e76:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81e7a:	4b6f      	ldr	r3, [pc, #444]	; (82038 <UDPHS_Handler+0x424>)
   81e7c:	7019      	strb	r1, [r3, #0]
   81e7e:	496f      	ldr	r1, [pc, #444]	; (8203c <UDPHS_Handler+0x428>)
   81e80:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   81e84:	b922      	cbnz	r2, 81e90 <UDPHS_Handler+0x27c>
		cpu_irq_enable();
   81e86:	2201      	movs	r2, #1
   81e88:	701a      	strb	r2, [r3, #0]
   81e8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81e8e:	b662      	cpsie	i
	udd_ack_out_received(0);
   81e90:	f44f 7200 	mov.w	r2, #512	; 0x200
   81e94:	4b69      	ldr	r3, [pc, #420]	; (8203c <UDPHS_Handler+0x428>)
	udd_g_ctrlreq.callback = NULL;
   81e96:	2000      	movs	r0, #0
   81e98:	2100      	movs	r1, #0
	udd_ack_out_received(0);
   81e9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_g_ctrlreq.payload_size = 0;
   81e9e:	2300      	movs	r3, #0
	udd_g_ctrlreq.callback = NULL;
   81ea0:	e9c7 0104 	strd	r0, r1, [r7, #16]
	udd_g_ctrlreq.payload_size = 0;
   81ea4:	81bb      	strh	r3, [r7, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81ea6:	7023      	strb	r3, [r4, #0]
	if (8 != udd_byte_count(0)) {
   81ea8:	4e64      	ldr	r6, [pc, #400]	; (8203c <UDPHS_Handler+0x428>)
   81eaa:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
   81eae:	f3c3 530a 	ubfx	r3, r3, #20, #11
   81eb2:	2b08      	cmp	r3, #8
   81eb4:	f040 80b1 	bne.w	8201a <UDPHS_Handler+0x406>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   81eb8:	4b61      	ldr	r3, [pc, #388]	; (82040 <UDPHS_Handler+0x42c>)
   81eba:	4d5e      	ldr	r5, [pc, #376]	; (82034 <UDPHS_Handler+0x420>)
   81ebc:	781a      	ldrb	r2, [r3, #0]
   81ebe:	702a      	strb	r2, [r5, #0]
   81ec0:	785a      	ldrb	r2, [r3, #1]
   81ec2:	706a      	strb	r2, [r5, #1]
   81ec4:	789a      	ldrb	r2, [r3, #2]
   81ec6:	70aa      	strb	r2, [r5, #2]
   81ec8:	78da      	ldrb	r2, [r3, #3]
   81eca:	70ea      	strb	r2, [r5, #3]
   81ecc:	791a      	ldrb	r2, [r3, #4]
   81ece:	712a      	strb	r2, [r5, #4]
   81ed0:	795a      	ldrb	r2, [r3, #5]
   81ed2:	716a      	strb	r2, [r5, #5]
   81ed4:	7999      	ldrb	r1, [r3, #6]
   81ed6:	79da      	ldrb	r2, [r3, #7]
	if (udc_process_setup() == false) {
   81ed8:	4b5a      	ldr	r3, [pc, #360]	; (82044 <UDPHS_Handler+0x430>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   81eda:	71a9      	strb	r1, [r5, #6]
   81edc:	71ea      	strb	r2, [r5, #7]
	if (udc_process_setup() == false) {
   81ede:	4798      	blx	r3
   81ee0:	2800      	cmp	r0, #0
   81ee2:	f000 809a 	beq.w	8201a <UDPHS_Handler+0x406>
	udd_ack_setup_received(0);
   81ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81eea:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
	if (Udd_setup_is_in()) {
   81eee:	f995 3000 	ldrsb.w	r3, [r5]
   81ef2:	2b00      	cmp	r3, #0
   81ef4:	f2c0 81f0 	blt.w	822d8 <UDPHS_Handler+0x6c4>
		if (0 == udd_g_ctrlreq.req.wLength) {
   81ef8:	88eb      	ldrh	r3, [r5, #6]
   81efa:	2b00      	cmp	r3, #0
   81efc:	f000 8247 	beq.w	8238e <UDPHS_Handler+0x77a>
		udd_ctrl_prev_payload_buf_cnt = 0;
   81f00:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   81f02:	2001      	movs	r0, #1
		udd_ack_nak_in(0);
   81f04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
		udd_ctrl_prev_payload_buf_cnt = 0;
   81f08:	494f      	ldr	r1, [pc, #316]	; (82048 <UDPHS_Handler+0x434>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   81f0a:	7020      	strb	r0, [r4, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   81f0c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81f0e:	494f      	ldr	r1, [pc, #316]	; (8204c <UDPHS_Handler+0x438>)
   81f10:	800b      	strh	r3, [r1, #0]
		udd_ack_nak_in(0);
   81f12:	f8c6 2118 	str.w	r2, [r6, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81f16:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81f1a:	b672      	cpsid	i
   81f1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81f20:	4945      	ldr	r1, [pc, #276]	; (82038 <UDPHS_Handler+0x424>)
   81f22:	700b      	strb	r3, [r1, #0]
		udd_enable_nak_in_interrupt(0);
   81f24:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   81f28:	2c00      	cmp	r4, #0
   81f2a:	f47f af07 	bne.w	81d3c <UDPHS_Handler+0x128>
		cpu_irq_enable();
   81f2e:	7008      	strb	r0, [r1, #0]
   81f30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f34:	b662      	cpsie	i
   81f36:	e701      	b.n	81d3c <UDPHS_Handler+0x128>
					&& (0 == udd_nb_busy_bank(ep))) {
   81f38:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   81f3c:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   81f40:	f3c3 4281 	ubfx	r2, r3, #18, #2
   81f44:	f47f af05 	bne.w	81d52 <UDPHS_Handler+0x13e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81f48:	f44f 7600 	mov.w	r6, #512	; 0x200
		ptr_job = &udd_ep_job[ep - 1];
   81f4c:	2301      	movs	r3, #1
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   81f4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   81f52:	2520      	movs	r5, #32
				udd_reset_data_toggle(ep);
   81f54:	2440      	movs	r4, #64	; 0x40
				udd_disable_bank_interrupt(ep);
   81f56:	4939      	ldr	r1, [pc, #228]	; (8203c <UDPHS_Handler+0x428>)
				ptr_job->stall_requested = false;
   81f58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
				udd_disable_bank_interrupt(ep);
   81f5c:	eb01 1343 	add.w	r3, r1, r3, lsl #5
   81f60:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   81f64:	6908      	ldr	r0, [r1, #16]
   81f66:	ea20 0006 	bic.w	r0, r0, r6
   81f6a:	6108      	str	r0, [r1, #16]
				ptr_job->stall_requested = false;
   81f6c:	4938      	ldr	r1, [pc, #224]	; (82050 <UDPHS_Handler+0x43c>)
   81f6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   81f72:	7d11      	ldrb	r1, [r2, #20]
   81f74:	f36f 0182 	bfc	r1, #2, #1
   81f78:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   81f7a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81f7e:	f022 0202 	bic.w	r2, r2, #2
   81f82:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   81f86:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
				udd_reset_data_toggle(ep);
   81f8a:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   81f8e:	e6d5      	b.n	81d3c <UDPHS_Handler+0x128>
		udd_ack_nak_out(0);
   81f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f94:	4b29      	ldr	r3, [pc, #164]	; (8203c <UDPHS_Handler+0x428>)
   81f96:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   81f9a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
   81f9e:	0556      	lsls	r6, r2, #21
   81fa0:	f53f aecc 	bmi.w	81d3c <UDPHS_Handler+0x128>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81fa4:	4a22      	ldr	r2, [pc, #136]	; (82030 <UDPHS_Handler+0x41c>)
   81fa6:	7812      	ldrb	r2, [r2, #0]
   81fa8:	2a03      	cmp	r2, #3
   81faa:	f47f aec7 	bne.w	81d3c <UDPHS_Handler+0x128>
		udd_enable_stall_handshake(0);
   81fae:	2220      	movs	r2, #32
   81fb0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   81fb4:	e6c2      	b.n	81d3c <UDPHS_Handler+0x128>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   81fb6:	4c1e      	ldr	r4, [pc, #120]	; (82030 <UDPHS_Handler+0x41c>)
   81fb8:	7823      	ldrb	r3, [r4, #0]
   81fba:	2b01      	cmp	r3, #1
   81fbc:	f000 80ed 	beq.w	8219a <UDPHS_Handler+0x586>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   81fc0:	2b02      	cmp	r3, #2
   81fc2:	f000 8120 	beq.w	82206 <UDPHS_Handler+0x5f2>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   81fc6:	2b04      	cmp	r3, #4
   81fc8:	f000 811d 	beq.w	82206 <UDPHS_Handler+0x5f2>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81fcc:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   81fce:	2220      	movs	r2, #32
   81fd0:	4b1a      	ldr	r3, [pc, #104]	; (8203c <UDPHS_Handler+0x428>)
   81fd2:	4f18      	ldr	r7, [pc, #96]	; (82034 <UDPHS_Handler+0x420>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81fd4:	7021      	strb	r1, [r4, #0]
	udd_enable_stall_handshake(0);
   81fd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81fda:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   81fde:	b672      	cpsid	i
   81fe0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81fe4:	2100      	movs	r1, #0
	udd_disable_in_send_interrupt(0);
   81fe6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81fea:	4b13      	ldr	r3, [pc, #76]	; (82038 <UDPHS_Handler+0x424>)
   81fec:	7019      	strb	r1, [r3, #0]
   81fee:	4913      	ldr	r1, [pc, #76]	; (8203c <UDPHS_Handler+0x428>)
   81ff0:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   81ff4:	b922      	cbnz	r2, 82000 <UDPHS_Handler+0x3ec>
		cpu_irq_enable();
   81ff6:	2201      	movs	r2, #1
   81ff8:	701a      	strb	r2, [r3, #0]
   81ffa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81ffe:	b662      	cpsie	i
	udd_ack_out_received(0);
   82000:	f44f 7100 	mov.w	r1, #512	; 0x200
   82004:	4a0d      	ldr	r2, [pc, #52]	; (8203c <UDPHS_Handler+0x428>)
	udd_g_ctrlreq.payload_size = 0;
   82006:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   82008:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.callback = NULL;
   8200c:	2000      	movs	r0, #0
   8200e:	2100      	movs	r1, #0
	udd_g_ctrlreq.payload_size = 0;
   82010:	81bb      	strh	r3, [r7, #12]
	udd_g_ctrlreq.callback = NULL;
   82012:	e9c7 0104 	strd	r0, r1, [r7, #16]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82016:	7023      	strb	r3, [r4, #0]
   82018:	e690      	b.n	81d3c <UDPHS_Handler+0x128>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8201a:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   8201c:	2220      	movs	r2, #32
		udd_ack_setup_received(0);
   8201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82022:	7021      	strb	r1, [r4, #0]
	udd_enable_stall_handshake(0);
   82024:	f8c6 2114 	str.w	r2, [r6, #276]	; 0x114
		udd_ack_setup_received(0);
   82028:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
		return;
   8202c:	e686      	b.n	81d3c <UDPHS_Handler+0x128>
   8202e:	bf00      	nop
   82030:	200036aa 	.word	0x200036aa
   82034:	200036e0 	.word	0x200036e0
   82038:	20000368 	.word	0x20000368
   8203c:	400a4000 	.word	0x400a4000
   82040:	20180000 	.word	0x20180000
   82044:	00080e75 	.word	0x00080e75
   82048:	200036a8 	.word	0x200036a8
   8204c:	200036a6 	.word	0x200036a6
   82050:	200036ac 	.word	0x200036ac
		udd_ack_reset();
   82054:	2310      	movs	r3, #16
	if (ptr_job->busy == false) {
   82056:	4cb0      	ldr	r4, [pc, #704]	; (82318 <UDPHS_Handler+0x704>)
		udd_ack_reset();
   82058:	618b      	str	r3, [r1, #24]
	if (ptr_job->busy == false) {
   8205a:	7d23      	ldrb	r3, [r4, #20]
   8205c:	f013 0201 	ands.w	r2, r3, #1
   82060:	d00d      	beq.n	8207e <UDPHS_Handler+0x46a>
	if (NULL == ptr_job->call_trans) {
   82062:	6825      	ldr	r5, [r4, #0]
	ptr_job->busy = false;
   82064:	f36f 0300 	bfc	r3, #0, #1
   82068:	7523      	strb	r3, [r4, #20]
	if (NULL == ptr_job->call_trans) {
   8206a:	b145      	cbz	r5, 8207e <UDPHS_Handler+0x46a>
	if (Is_udd_endpoint_in(ep_num)) {
   8206c:	f8d1 3120 	ldr.w	r3, [r1, #288]	; 0x120
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82070:	2001      	movs	r0, #1
		ep_num |= USB_EP_DIR_IN;
   82072:	f013 0f08 	tst.w	r3, #8
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82076:	bf18      	it	ne
   82078:	2281      	movne	r2, #129	; 0x81
   8207a:	68a1      	ldr	r1, [r4, #8]
   8207c:	47a8      	blx	r5
	if (ptr_job->busy == false) {
   8207e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   82082:	07dd      	lsls	r5, r3, #31
   82084:	d510      	bpl.n	820a8 <UDPHS_Handler+0x494>
	if (NULL == ptr_job->call_trans) {
   82086:	69a5      	ldr	r5, [r4, #24]
	ptr_job->busy = false;
   82088:	f36f 0300 	bfc	r3, #0, #1
   8208c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (NULL == ptr_job->call_trans) {
   82090:	b155      	cbz	r5, 820a8 <UDPHS_Handler+0x494>
	if (Is_udd_endpoint_in(ep_num)) {
   82092:	4ba2      	ldr	r3, [pc, #648]	; (8231c <UDPHS_Handler+0x708>)
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82094:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   82096:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8209a:	6a21      	ldr	r1, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8209c:	f013 0f08 	tst.w	r3, #8
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   820a0:	bf14      	ite	ne
   820a2:	2282      	movne	r2, #130	; 0x82
   820a4:	2202      	moveq	r2, #2
   820a6:	47a8      	blx	r5
		udc_reset();
   820a8:	4b9d      	ldr	r3, [pc, #628]	; (82320 <UDPHS_Handler+0x70c>)
   820aa:	4798      	blx	r3
	udd_enable_endpoint(0);
   820ac:	2001      	movs	r0, #1
	udd_configure_address(0);
   820ae:	4b9b      	ldr	r3, [pc, #620]	; (8231c <UDPHS_Handler+0x708>)
   820b0:	681a      	ldr	r2, [r3, #0]
   820b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   820b6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   820b8:	681a      	ldr	r2, [r3, #0]
   820ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   820be:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   820c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   820c4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   820c8:	f022 0203 	bic.w	r2, r2, #3
   820cc:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   820d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   820d4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   820d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   820dc:	b672      	cpsid	i
   820de:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   820e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	cpu_irq_disable();
   820e6:	2500      	movs	r5, #0
   820e8:	498e      	ldr	r1, [pc, #568]	; (82324 <UDPHS_Handler+0x710>)
   820ea:	700d      	strb	r5, [r1, #0]
   820ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   820f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   820f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   820f8:	691a      	ldr	r2, [r3, #16]
   820fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   820fe:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   82100:	b91c      	cbnz	r4, 8210a <UDPHS_Handler+0x4f6>
		cpu_irq_enable();
   82102:	7008      	strb	r0, [r1, #0]
   82104:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82108:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8210a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8210e:	b672      	cpsid	i
   82110:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82114:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   82116:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8211a:	4a80      	ldr	r2, [pc, #512]	; (8231c <UDPHS_Handler+0x708>)
   8211c:	700c      	strb	r4, [r1, #0]
   8211e:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   82122:	b923      	cbnz	r3, 8212e <UDPHS_Handler+0x51a>
		cpu_irq_enable();
   82124:	2301      	movs	r3, #1
   82126:	700b      	strb	r3, [r1, #0]
   82128:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8212c:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   8212e:	2600      	movs	r6, #0
   82130:	2700      	movs	r7, #0
	udd_g_ctrlreq.payload_size = 0;
   82132:	2100      	movs	r1, #0
	udd_ack_out_received(0);
   82134:	f44f 7400 	mov.w	r4, #512	; 0x200
	udd_g_ctrlreq.callback = NULL;
   82138:	4a7b      	ldr	r2, [pc, #492]	; (82328 <UDPHS_Handler+0x714>)
	udd_ack_out_received(0);
   8213a:	4b78      	ldr	r3, [pc, #480]	; (8231c <UDPHS_Handler+0x708>)
	udd_g_ctrlreq.callback = NULL;
   8213c:	e9c2 6704 	strd	r6, r7, [r2, #16]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82140:	487a      	ldr	r0, [pc, #488]	; (8232c <UDPHS_Handler+0x718>)
	udd_ack_out_received(0);
   82142:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82146:	7001      	strb	r1, [r0, #0]
	udd_g_ctrlreq.payload_size = 0;
   82148:	8191      	strh	r1, [r2, #12]
		udd_enable_sof_interrupt();
   8214a:	691a      	ldr	r2, [r3, #16]
   8214c:	f042 0208 	orr.w	r2, r2, #8
   82150:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   82152:	691a      	ldr	r2, [r3, #16]
   82154:	f042 0204 	orr.w	r2, r2, #4
   82158:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   8215a:	691a      	ldr	r2, [r3, #16]
   8215c:	f042 0202 	orr.w	r2, r2, #2
   82160:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   82162:	e5eb      	b.n	81d3c <UDPHS_Handler+0x128>
		udd_ctrl_in_sent();
   82164:	4b72      	ldr	r3, [pc, #456]	; (82330 <UDPHS_Handler+0x71c>)
}
   82166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udd_ctrl_in_sent();
   8216a:	4718      	bx	r3
		udd_ack_nak_in(0);
   8216c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   82170:	4a6a      	ldr	r2, [pc, #424]	; (8231c <UDPHS_Handler+0x708>)
   82172:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	if (Is_udd_out_received(0))
   82176:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
   8217a:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   8217e:	f47f addd 	bne.w	81d3c <UDPHS_Handler+0x128>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82182:	486a      	ldr	r0, [pc, #424]	; (8232c <UDPHS_Handler+0x718>)
   82184:	7801      	ldrb	r1, [r0, #0]
   82186:	2901      	cmp	r1, #1
   82188:	f000 811e 	beq.w	823c8 <UDPHS_Handler+0x7b4>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8218c:	2904      	cmp	r1, #4
   8218e:	f47f add5 	bne.w	81d3c <UDPHS_Handler+0x128>
		udd_enable_stall_handshake(0);
   82192:	2320      	movs	r3, #32
   82194:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   82198:	e5d0      	b.n	81d3c <UDPHS_Handler+0x128>
	nb_data = udd_byte_count(0);
   8219a:	4b60      	ldr	r3, [pc, #384]	; (8231c <UDPHS_Handler+0x708>)
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8219c:	4e65      	ldr	r6, [pc, #404]	; (82334 <UDPHS_Handler+0x720>)
	nb_data = udd_byte_count(0);
   8219e:	f8d3 511c 	ldr.w	r5, [r3, #284]	; 0x11c
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   821a2:	4f61      	ldr	r7, [pc, #388]	; (82328 <UDPHS_Handler+0x714>)
   821a4:	8833      	ldrh	r3, [r6, #0]
   821a6:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
	nb_data = udd_byte_count(0);
   821aa:	f3c5 550a 	ubfx	r5, r5, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   821ae:	195a      	adds	r2, r3, r5
   821b0:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   821b2:	bfac      	ite	ge
   821b4:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   821b8:	ebac 0503 	sublt.w	r5, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   821bc:	68ba      	ldr	r2, [r7, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   821be:	bfb8      	it	lt
   821c0:	b2ad      	uxthlt	r5, r5
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   821c2:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   821c4:	2d00      	cmp	r5, #0
   821c6:	f000 8120 	beq.w	8240a <UDPHS_Handler+0x7f6>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   821ca:	4b5b      	ldr	r3, [pc, #364]	; (82338 <UDPHS_Handler+0x724>)
		*ptr_dest++ = *ptr_src++;
   821cc:	4618      	mov	r0, r3
   821ce:	3301      	adds	r3, #1
   821d0:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   821d2:	b2d9      	uxtb	r1, r3
   821d4:	42a9      	cmp	r1, r5
		*ptr_dest++ = *ptr_src++;
   821d6:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   821da:	d3f7      	bcc.n	821cc <UDPHS_Handler+0x5b8>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   821dc:	2d40      	cmp	r5, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   821de:	f8a6 c000 	strh.w	ip, [r6]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   821e2:	d053      	beq.n	8228c <UDPHS_Handler+0x678>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   821e4:	697b      	ldr	r3, [r7, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   821e6:	f8a7 c00c 	strh.w	ip, [r7, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   821ea:	b33b      	cbz	r3, 8223c <UDPHS_Handler+0x628>
			if (!udd_g_ctrlreq.over_under_run()) {
   821ec:	4798      	blx	r3
   821ee:	bb28      	cbnz	r0, 8223c <UDPHS_Handler+0x628>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   821f0:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   821f2:	2120      	movs	r1, #32
			udd_ack_out_received(0);
   821f4:	f44f 7200 	mov.w	r2, #512	; 0x200
	udd_enable_stall_handshake(0);
   821f8:	4b48      	ldr	r3, [pc, #288]	; (8231c <UDPHS_Handler+0x708>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   821fa:	7020      	strb	r0, [r4, #0]
	udd_enable_stall_handshake(0);
   821fc:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
			udd_ack_out_received(0);
   82200:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82204:	e59a      	b.n	81d3c <UDPHS_Handler+0x128>
	if (udd_g_ctrlreq.callback) {
   82206:	4f48      	ldr	r7, [pc, #288]	; (82328 <UDPHS_Handler+0x714>)
   82208:	693b      	ldr	r3, [r7, #16]
   8220a:	2b00      	cmp	r3, #0
   8220c:	f43f aee5 	beq.w	81fda <UDPHS_Handler+0x3c6>
		udd_g_ctrlreq.callback();
   82210:	4798      	blx	r3
   82212:	e6e2      	b.n	81fda <UDPHS_Handler+0x3c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82214:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82218:	b672      	cpsid	i
   8221a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8221e:	4841      	ldr	r0, [pc, #260]	; (82324 <UDPHS_Handler+0x710>)
	++sleepmgr_locks[mode];
   82220:	4946      	ldr	r1, [pc, #280]	; (8233c <UDPHS_Handler+0x728>)
   82222:	7003      	strb	r3, [r0, #0]
   82224:	788b      	ldrb	r3, [r1, #2]
   82226:	3301      	adds	r3, #1
   82228:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8222a:	2c00      	cmp	r4, #0
   8222c:	f47f ade6 	bne.w	81dfc <UDPHS_Handler+0x1e8>
		cpu_irq_enable();
   82230:	2301      	movs	r3, #1
   82232:	7003      	strb	r3, [r0, #0]
   82234:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82238:	b662      	cpsie	i
}
   8223a:	e5df      	b.n	81dfc <UDPHS_Handler+0x1e8>
		udd_ack_out_received(0);
   8223c:	f44f 7100 	mov.w	r1, #512	; 0x200
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   82240:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   82242:	4b36      	ldr	r3, [pc, #216]	; (8231c <UDPHS_Handler+0x708>)
   82244:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   82248:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8224a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   8224e:	b672      	cpsid	i
   82250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82254:	2500      	movs	r5, #0
   82256:	4833      	ldr	r0, [pc, #204]	; (82324 <UDPHS_Handler+0x710>)
	udd_ack_in_send(0);
   82258:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8225c:	7005      	strb	r5, [r0, #0]
	udd_ack_nak_out(0);
   8225e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	udd_raise_tx_pkt_ready(0);
   82262:	f44f 6500 	mov.w	r5, #2048	; 0x800
	udd_ack_in_send(0);
   82266:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8226a:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8226e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_ack_nak_out(0);
   82272:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   82276:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8227a:	2c00      	cmp	r4, #0
   8227c:	f47f ad5e 	bne.w	81d3c <UDPHS_Handler+0x128>
		cpu_irq_enable();
   82280:	2301      	movs	r3, #1
   82282:	7003      	strb	r3, [r0, #0]
   82284:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82288:	b662      	cpsie	i
   8228a:	e557      	b.n	81d3c <UDPHS_Handler+0x128>
			(udd_ctrl_prev_payload_buf_cnt +
   8228c:	4d2c      	ldr	r5, [pc, #176]	; (82340 <UDPHS_Handler+0x72c>)
			|| (udd_g_ctrlreq.req.wLength <=
   8228e:	88fa      	ldrh	r2, [r7, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   82290:	882b      	ldrh	r3, [r5, #0]
   82292:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   82294:	429a      	cmp	r2, r3
   82296:	dda5      	ble.n	821e4 <UDPHS_Handler+0x5d0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82298:	89bb      	ldrh	r3, [r7, #12]
   8229a:	4563      	cmp	r3, ip
   8229c:	f000 80b8 	beq.w	82410 <UDPHS_Handler+0x7fc>
	udd_ack_out_received(0);
   822a0:	f44f 7100 	mov.w	r1, #512	; 0x200
	udd_ack_nak_in(0);
   822a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	udd_ack_out_received(0);
   822a8:	4b1c      	ldr	r3, [pc, #112]	; (8231c <UDPHS_Handler+0x708>)
   822aa:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   822ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   822b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   822b6:	b672      	cpsid	i
   822b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   822bc:	2400      	movs	r4, #0
   822be:	4919      	ldr	r1, [pc, #100]	; (82324 <UDPHS_Handler+0x710>)
   822c0:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   822c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   822c6:	2800      	cmp	r0, #0
   822c8:	f47f ad38 	bne.w	81d3c <UDPHS_Handler+0x128>
		cpu_irq_enable();
   822cc:	2301      	movs	r3, #1
   822ce:	700b      	strb	r3, [r1, #0]
   822d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   822d4:	b662      	cpsie	i
   822d6:	e531      	b.n	81d3c <UDPHS_Handler+0x128>
		udd_ctrl_prev_payload_buf_cnt = 0;
   822d8:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   822da:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   822dc:	4d18      	ldr	r5, [pc, #96]	; (82340 <UDPHS_Handler+0x72c>)
		udd_ctrl_payload_buf_cnt = 0;
   822de:	4815      	ldr	r0, [pc, #84]	; (82334 <UDPHS_Handler+0x720>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   822e0:	802b      	strh	r3, [r5, #0]
		udd_ctrl_payload_buf_cnt = 0;
   822e2:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   822e4:	7021      	strb	r1, [r4, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   822e6:	4a12      	ldr	r2, [pc, #72]	; (82330 <UDPHS_Handler+0x71c>)
}
   822e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   822ec:	4710      	bx	r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   822ee:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   822f2:	b672      	cpsid	i
   822f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   822f8:	480a      	ldr	r0, [pc, #40]	; (82324 <UDPHS_Handler+0x710>)
	--sleepmgr_locks[mode];
   822fa:	4910      	ldr	r1, [pc, #64]	; (8233c <UDPHS_Handler+0x728>)
   822fc:	7004      	strb	r4, [r0, #0]
   822fe:	788b      	ldrb	r3, [r1, #2]
   82300:	3b01      	subs	r3, #1
   82302:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   82304:	2d00      	cmp	r5, #0
   82306:	f47f ad6d 	bne.w	81de4 <UDPHS_Handler+0x1d0>
		cpu_irq_enable();
   8230a:	2301      	movs	r3, #1
   8230c:	7003      	strb	r3, [r0, #0]
   8230e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82312:	b662      	cpsie	i
}
   82314:	e566      	b.n	81de4 <UDPHS_Handler+0x1d0>
   82316:	bf00      	nop
   82318:	200036ac 	.word	0x200036ac
   8231c:	400a4000 	.word	0x400a4000
   82320:	00080d8d 	.word	0x00080d8d
   82324:	20000368 	.word	0x20000368
   82328:	200036e0 	.word	0x200036e0
   8232c:	200036aa 	.word	0x200036aa
   82330:	00081a75 	.word	0x00081a75
   82334:	200036a6 	.word	0x200036a6
   82338:	20180000 	.word	0x20180000
   8233c:	20003718 	.word	0x20003718
   82340:	200036a8 	.word	0x200036a8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82344:	2001      	movs	r0, #1
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   82346:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
		ptr_job = &udd_ep_job[ep - 1];
   8234a:	2200      	movs	r2, #0
			if (udd_endpoint_dma_get_status(ep)
   8234c:	4b38      	ldr	r3, [pc, #224]	; (82430 <UDPHS_Handler+0x81c>)
   8234e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   82352:	68d9      	ldr	r1, [r3, #12]
   82354:	07cc      	lsls	r4, r1, #31
   82356:	f53f acf1 	bmi.w	81d3c <UDPHS_Handler+0x128>
			udd_disable_endpoint_dma_interrupt(ep);
   8235a:	4c36      	ldr	r4, [pc, #216]	; (82434 <UDPHS_Handler+0x820>)
   8235c:	6921      	ldr	r1, [r4, #16]
   8235e:	ea21 0105 	bic.w	r1, r1, r5
   82362:	6121      	str	r1, [r4, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   82364:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   82366:	0c1b      	lsrs	r3, r3, #16
   82368:	d008      	beq.n	8237c <UDPHS_Handler+0x768>
				ptr_job->buf_cnt -= nb_remaining;
   8236a:	4933      	ldr	r1, [pc, #204]	; (82438 <UDPHS_Handler+0x824>)
   8236c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   82370:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82374:	68d1      	ldr	r1, [r2, #12]
   82376:	1acb      	subs	r3, r1, r3
				ptr_job->buf_size = ptr_job->buf_cnt;
   82378:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
   8237c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			udd_ep_trans_done(ep);
   82380:	4b2e      	ldr	r3, [pc, #184]	; (8243c <UDPHS_Handler+0x828>)
   82382:	4718      	bx	r3
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82384:	2002      	movs	r0, #2
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   82386:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
		ptr_job = &udd_ep_job[ep - 1];
   8238a:	2201      	movs	r2, #1
   8238c:	e7de      	b.n	8234c <UDPHS_Handler+0x738>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8238e:	2203      	movs	r2, #3
   82390:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82392:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   82396:	b672      	cpsid	i
   82398:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8239c:	4928      	ldr	r1, [pc, #160]	; (82440 <UDPHS_Handler+0x82c>)
	udd_ack_in_send(0);
   8239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   823a2:	700b      	strb	r3, [r1, #0]
	udd_raise_tx_pkt_ready(0);
   823a4:	f44f 6400 	mov.w	r4, #2048	; 0x800
	udd_ack_nak_out(0);
   823a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	udd_ack_in_send(0);
   823ac:	f8c6 2118 	str.w	r2, [r6, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   823b0:	f8c6 4114 	str.w	r4, [r6, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   823b4:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
	udd_ack_nak_out(0);
   823b8:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   823bc:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   823c0:	2800      	cmp	r0, #0
   823c2:	f47f acbb 	bne.w	81d3c <UDPHS_Handler+0x128>
   823c6:	e781      	b.n	822cc <UDPHS_Handler+0x6b8>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   823c8:	2403      	movs	r4, #3
   823ca:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   823cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   823d0:	b672      	cpsid	i
   823d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   823d6:	4c1a      	ldr	r4, [pc, #104]	; (82440 <UDPHS_Handler+0x82c>)
	udd_ack_in_send(0);
   823d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   823dc:	7023      	strb	r3, [r4, #0]
	udd_raise_tx_pkt_ready(0);
   823de:	f44f 6600 	mov.w	r6, #2048	; 0x800
	udd_ack_nak_out(0);
   823e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	udd_ack_in_send(0);
   823e6:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   823ea:	f8c2 6114 	str.w	r6, [r2, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   823ee:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
	udd_ack_nak_out(0);
   823f2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   823f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   823fa:	2d00      	cmp	r5, #0
   823fc:	f47f ac9e 	bne.w	81d3c <UDPHS_Handler+0x128>
		cpu_irq_enable();
   82400:	7021      	strb	r1, [r4, #0]
   82402:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82406:	b662      	cpsie	i
   82408:	e498      	b.n	81d3c <UDPHS_Handler+0x128>
	udd_ctrl_payload_buf_cnt += nb_data;
   8240a:	f8a6 c000 	strh.w	ip, [r6]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8240e:	e6e9      	b.n	821e4 <UDPHS_Handler+0x5d0>
		if (!udd_g_ctrlreq.over_under_run) {
   82410:	697b      	ldr	r3, [r7, #20]
   82412:	2b00      	cmp	r3, #0
   82414:	f43f aeec 	beq.w	821f0 <UDPHS_Handler+0x5dc>
		if (!udd_g_ctrlreq.over_under_run()) {
   82418:	4798      	blx	r3
   8241a:	2800      	cmp	r0, #0
   8241c:	f43f aee8 	beq.w	821f0 <UDPHS_Handler+0x5dc>
		udd_ctrl_payload_buf_cnt = 0;
   82420:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82422:	882b      	ldrh	r3, [r5, #0]
   82424:	8831      	ldrh	r1, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82426:	8032      	strh	r2, [r6, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82428:	440b      	add	r3, r1
   8242a:	802b      	strh	r3, [r5, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8242c:	e738      	b.n	822a0 <UDPHS_Handler+0x68c>
   8242e:	bf00      	nop
   82430:	400a4300 	.word	0x400a4300
   82434:	400a4000 	.word	0x400a4000
   82438:	200036ac 	.word	0x200036ac
   8243c:	000818a9 	.word	0x000818a9
   82440:	20000368 	.word	0x20000368

00082444 <udd_attach>:
{
   82444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82448:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   8244c:	b672      	cpsid	i
   8244e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82452:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   82454:	4b29      	ldr	r3, [pc, #164]	; (824fc <udd_attach+0xb8>)
   82456:	4c2a      	ldr	r4, [pc, #168]	; (82500 <udd_attach+0xbc>)
   82458:	781a      	ldrb	r2, [r3, #0]
   8245a:	7021      	strb	r1, [r4, #0]
   8245c:	2a00      	cmp	r2, #0
   8245e:	d03b      	beq.n	824d8 <udd_attach+0x94>
	udd_b_idle = b_idle;
   82460:	2501      	movs	r5, #1
	udd_enable_periph_ck();
   82462:	4a28      	ldr	r2, [pc, #160]	; (82504 <udd_attach+0xc0>)
   82464:	201d      	movs	r0, #29
	udd_b_idle = b_idle;
   82466:	701d      	strb	r5, [r3, #0]
	udd_ack_sof();
   82468:	f04f 0808 	mov.w	r8, #8
	udd_enable_periph_ck();
   8246c:	4790      	blx	r2
	udd_ack_suspend();
   8246e:	2702      	movs	r7, #2
	udd_ack_msof();
   82470:	f04f 0e04 	mov.w	lr, #4
	udd_ack_reset();
   82474:	f04f 0c10 	mov.w	ip, #16
	udd_ack_wake_up();
   82478:	2120      	movs	r1, #32
	udd_attach_device();
   8247a:	4b23      	ldr	r3, [pc, #140]	; (82508 <udd_attach+0xc4>)
	udd_disable_periph_ck();
   8247c:	201d      	movs	r0, #29
	udd_attach_device();
   8247e:	681a      	ldr	r2, [r3, #0]
   82480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   82484:	601a      	str	r2, [r3, #0]
   82486:	681a      	ldr	r2, [r3, #0]
   82488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8248c:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   8248e:	691a      	ldr	r2, [r3, #16]
   82490:	f042 0210 	orr.w	r2, r2, #16
   82494:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   82496:	691a      	ldr	r2, [r3, #16]
   82498:	f042 0202 	orr.w	r2, r2, #2
   8249c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   8249e:	691a      	ldr	r2, [r3, #16]
   824a0:	f042 0220 	orr.w	r2, r2, #32
   824a4:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   824a6:	691a      	ldr	r2, [r3, #16]
   824a8:	f042 0208 	orr.w	r2, r2, #8
   824ac:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   824ae:	691a      	ldr	r2, [r3, #16]
   824b0:	f042 0204 	orr.w	r2, r2, #4
   824b4:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   824b6:	f8c3 8018 	str.w	r8, [r3, #24]
	udd_disable_periph_ck();
   824ba:	4a14      	ldr	r2, [pc, #80]	; (8250c <udd_attach+0xc8>)
	udd_ack_msof();
   824bc:	f8c3 e018 	str.w	lr, [r3, #24]
	udd_ack_reset();
   824c0:	f8c3 c018 	str.w	ip, [r3, #24]
	udd_ack_suspend();
   824c4:	619f      	str	r7, [r3, #24]
	udd_ack_wake_up();
   824c6:	6199      	str	r1, [r3, #24]
	udd_disable_periph_ck();
   824c8:	4790      	blx	r2
	if (cpu_irq_is_enabled_flags(flags))
   824ca:	b91e      	cbnz	r6, 824d4 <udd_attach+0x90>
		cpu_irq_enable();
   824cc:	7025      	strb	r5, [r4, #0]
   824ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   824d2:	b662      	cpsie	i
}
   824d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   824d8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   824dc:	b672      	cpsid	i
   824de:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   824e2:	490b      	ldr	r1, [pc, #44]	; (82510 <udd_attach+0xcc>)
	cpu_irq_disable();
   824e4:	7022      	strb	r2, [r4, #0]
   824e6:	788a      	ldrb	r2, [r1, #2]
   824e8:	3201      	adds	r2, #1
   824ea:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   824ec:	2800      	cmp	r0, #0
   824ee:	d1b7      	bne.n	82460 <udd_attach+0x1c>
		cpu_irq_enable();
   824f0:	2201      	movs	r2, #1
   824f2:	7022      	strb	r2, [r4, #0]
   824f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   824f8:	b662      	cpsie	i
}
   824fa:	e7b1      	b.n	82460 <udd_attach+0x1c>
   824fc:	200036a5 	.word	0x200036a5
   82500:	20000368 	.word	0x20000368
   82504:	0008319d 	.word	0x0008319d
   82508:	400a4000 	.word	0x400a4000
   8250c:	000831c1 	.word	0x000831c1
   82510:	20003718 	.word	0x20003718

00082514 <udd_enable>:
{
   82514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_enable_usb();
   82516:	4b25      	ldr	r3, [pc, #148]	; (825ac <udd_enable+0x98>)
   82518:	4798      	blx	r3
	udd_enable_periph_ck();
   8251a:	4b25      	ldr	r3, [pc, #148]	; (825b0 <udd_enable+0x9c>)
   8251c:	201d      	movs	r0, #29
   8251e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82520:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   82524:	b672      	cpsid	i
   82526:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8252a:	2400      	movs	r4, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8252c:	f04f 0e50 	mov.w	lr, #80	; 0x50
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82530:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		udd_ep_job[i].busy = false;
   82534:	4a1f      	ldr	r2, [pc, #124]	; (825b4 <udd_enable+0xa0>)
   82536:	4d20      	ldr	r5, [pc, #128]	; (825b8 <udd_enable+0xa4>)
   82538:	7d11      	ldrb	r1, [r2, #20]
	udd_enable_periph();
   8253a:	4b20      	ldr	r3, [pc, #128]	; (825bc <udd_enable+0xa8>)
		udd_ep_job[i].busy = false;
   8253c:	f021 0105 	bic.w	r1, r1, #5
   82540:	7511      	strb	r1, [r2, #20]
   82542:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
   82546:	702c      	strb	r4, [r5, #0]
   82548:	f021 0105 	bic.w	r1, r1, #5
   8254c:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	udd_enable_periph();
   82550:	681a      	ldr	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82552:	4f1b      	ldr	r7, [pc, #108]	; (825c0 <udd_enable+0xac>)
   82554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   82558:	601a      	str	r2, [r3, #0]
   8255a:	f887 e31d 	strb.w	lr, [r7, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8255e:	f8c7 c000 	str.w	ip, [r7]
	udd_high_speed_enable();
   82562:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   82566:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	udd_high_speed_enable();
   8256a:	f022 0203 	bic.w	r2, r2, #3
   8256e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   82572:	4b14      	ldr	r3, [pc, #80]	; (825c4 <udd_enable+0xb0>)
   82574:	4798      	blx	r3
	udd_b_idle = false;
   82576:	4b14      	ldr	r3, [pc, #80]	; (825c8 <udd_enable+0xb4>)
   82578:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8257a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8257e:	b672      	cpsid	i
   82580:	f3bf 8f5f 	dmb	sy
   82584:	4a11      	ldr	r2, [pc, #68]	; (825cc <udd_enable+0xb8>)
   82586:	702c      	strb	r4, [r5, #0]
   82588:	78d3      	ldrb	r3, [r2, #3]
   8258a:	3301      	adds	r3, #1
   8258c:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   8258e:	b921      	cbnz	r1, 8259a <udd_enable+0x86>
		cpu_irq_enable();
   82590:	2301      	movs	r3, #1
   82592:	702b      	strb	r3, [r5, #0]
   82594:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82598:	b662      	cpsie	i
	udd_attach();
   8259a:	4b0d      	ldr	r3, [pc, #52]	; (825d0 <udd_enable+0xbc>)
   8259c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   8259e:	b926      	cbnz	r6, 825aa <udd_enable+0x96>
		cpu_irq_enable();
   825a0:	2301      	movs	r3, #1
   825a2:	702b      	strb	r3, [r5, #0]
   825a4:	f3bf 8f5f 	dmb	sy
   825a8:	b662      	cpsie	i
}
   825aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825ac:	00082f89 	.word	0x00082f89
   825b0:	0008319d 	.word	0x0008319d
   825b4:	200036ac 	.word	0x200036ac
   825b8:	20000368 	.word	0x20000368
   825bc:	400a4000 	.word	0x400a4000
   825c0:	e000e100 	.word	0xe000e100
   825c4:	000831e5 	.word	0x000831e5
   825c8:	200036a5 	.word	0x200036a5
   825cc:	20003718 	.word	0x20003718
   825d0:	00082445 	.word	0x00082445

000825d4 <udd_detach>:
{
   825d4:	b510      	push	{r4, lr}
	udd_enable_periph_ck();
   825d6:	4b16      	ldr	r3, [pc, #88]	; (82630 <udd_detach+0x5c>)
   825d8:	201d      	movs	r0, #29
   825da:	4798      	blx	r3
	udd_detach_device();
   825dc:	4b15      	ldr	r3, [pc, #84]	; (82634 <udd_detach+0x60>)
	udd_disable_periph_ck();
   825de:	201d      	movs	r0, #29
	udd_detach_device();
   825e0:	681a      	ldr	r2, [r3, #0]
	udd_disable_periph_ck();
   825e2:	4915      	ldr	r1, [pc, #84]	; (82638 <udd_detach+0x64>)
	udd_detach_device();
   825e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   825e8:	601a      	str	r2, [r3, #0]
   825ea:	681a      	ldr	r2, [r3, #0]
   825ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   825f0:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   825f2:	4788      	blx	r1
	if (!b_idle && udd_b_idle) {
   825f4:	4b11      	ldr	r3, [pc, #68]	; (8263c <udd_detach+0x68>)
   825f6:	781a      	ldrb	r2, [r3, #0]
   825f8:	b912      	cbnz	r2, 82600 <udd_detach+0x2c>
	udd_b_idle = b_idle;
   825fa:	2200      	movs	r2, #0
   825fc:	701a      	strb	r2, [r3, #0]
}
   825fe:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82600:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82604:	b672      	cpsid	i
   82606:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8260a:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   8260e:	490c      	ldr	r1, [pc, #48]	; (82640 <udd_detach+0x6c>)
   82610:	480c      	ldr	r0, [pc, #48]	; (82644 <udd_detach+0x70>)
   82612:	788a      	ldrb	r2, [r1, #2]
   82614:	3a01      	subs	r2, #1
   82616:	708a      	strb	r2, [r1, #2]
   82618:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   8261c:	2c00      	cmp	r4, #0
   8261e:	d1ec      	bne.n	825fa <udd_detach+0x26>
		cpu_irq_enable();
   82620:	2201      	movs	r2, #1
   82622:	7002      	strb	r2, [r0, #0]
   82624:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82628:	b662      	cpsie	i
	udd_b_idle = b_idle;
   8262a:	2200      	movs	r2, #0
   8262c:	701a      	strb	r2, [r3, #0]
}
   8262e:	bd10      	pop	{r4, pc}
   82630:	0008319d 	.word	0x0008319d
   82634:	400a4000 	.word	0x400a4000
   82638:	000831c1 	.word	0x000831c1
   8263c:	200036a5 	.word	0x200036a5
   82640:	20003718 	.word	0x20003718
   82644:	20000368 	.word	0x20000368

00082648 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   82648:	4b02      	ldr	r3, [pc, #8]	; (82654 <udd_is_high_speed+0xc>)
   8264a:	6958      	ldr	r0, [r3, #20]
}
   8264c:	f000 0001 	and.w	r0, r0, #1
   82650:	4770      	bx	lr
   82652:	bf00      	nop
   82654:	400a4000 	.word	0x400a4000

00082658 <udd_set_address>:
	udd_disable_address();
   82658:	4b08      	ldr	r3, [pc, #32]	; (8267c <udd_set_address+0x24>)
	udd_configure_address(address);
   8265a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   8265e:	681a      	ldr	r2, [r3, #0]
   82660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   82664:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   82666:	681a      	ldr	r2, [r3, #0]
   82668:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8266c:	4302      	orrs	r2, r0
   8266e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   82670:	681a      	ldr	r2, [r3, #0]
   82672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82676:	601a      	str	r2, [r3, #0]
}
   82678:	4770      	bx	lr
   8267a:	bf00      	nop
   8267c:	400a4000 	.word	0x400a4000

00082680 <udd_getaddress>:
	return udd_get_configured_address();
   82680:	4b02      	ldr	r3, [pc, #8]	; (8268c <udd_getaddress+0xc>)
   82682:	6818      	ldr	r0, [r3, #0]
}
   82684:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82688:	4770      	bx	lr
   8268a:	bf00      	nop
   8268c:	400a4000 	.word	0x400a4000

00082690 <udd_get_frame_number>:
	return udd_frame_number();
   82690:	4b02      	ldr	r3, [pc, #8]	; (8269c <udd_get_frame_number+0xc>)
   82692:	6858      	ldr	r0, [r3, #4]
}
   82694:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   82698:	4770      	bx	lr
   8269a:	bf00      	nop
   8269c:	400a4000 	.word	0x400a4000

000826a0 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   826a0:	4b01      	ldr	r3, [pc, #4]	; (826a8 <udd_set_setup_payload+0x8>)
   826a2:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   826a4:	8199      	strh	r1, [r3, #12]
}
   826a6:	4770      	bx	lr
   826a8:	200036e0 	.word	0x200036e0

000826ac <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   826ac:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   826b0:	2a02      	cmp	r2, #2
   826b2:	d900      	bls.n	826b6 <udd_ep_free+0xa>
   826b4:	4770      	bx	lr
{
   826b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_disable_endpoint(ep_index);
   826b8:	2701      	movs	r7, #1
   826ba:	0153      	lsls	r3, r2, #5
   826bc:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   826c0:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   826c4:	4603      	mov	r3, r0
   826c6:	f8c0 7108 	str.w	r7, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   826ca:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   826ce:	1e55      	subs	r5, r2, #1
	if (ptr_job->busy == false) {
   826d0:	4c16      	ldr	r4, [pc, #88]	; (8272c <udd_ep_free+0x80>)
   826d2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
	udd_configure_endpoint_bank(ep_index, 0);
   826d6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
	if (ptr_job->busy == false) {
   826da:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
	udd_configure_endpoint_bank(ep_index, 0);
   826de:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	if (ptr_job->busy == false) {
   826e2:	f89c 0014 	ldrb.w	r0, [ip, #20]
   826e6:	fa05 f607 	lsl.w	r6, r5, r7
   826ea:	07c7      	lsls	r7, r0, #31
   826ec:	ea4f 01c1 	mov.w	r1, r1, lsl #3
   826f0:	d513      	bpl.n	8271a <udd_ep_free+0x6e>
	if (NULL == ptr_job->call_trans) {
   826f2:	5867      	ldr	r7, [r4, r1]
	ptr_job->busy = false;
   826f4:	4601      	mov	r1, r0
   826f6:	f36f 0100 	bfc	r1, #0, #1
   826fa:	f88c 1014 	strb.w	r1, [ip, #20]
	if (NULL == ptr_job->call_trans) {
   826fe:	b167      	cbz	r7, 8271a <udd_ep_free+0x6e>
	if (Is_udd_endpoint_in(ep_num)) {
   82700:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82704:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   82706:	071b      	lsls	r3, r3, #28
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82708:	eb06 0305 	add.w	r3, r6, r5
   8270c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   82710:	6899      	ldr	r1, [r3, #8]
		ep_num |= USB_EP_DIR_IN;
   82712:	bf48      	it	mi
   82714:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82718:	47b8      	blx	r7
	udd_ep_job[ep_index - 1].stall_requested = false;
   8271a:	1973      	adds	r3, r6, r5
   8271c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   82720:	7d1a      	ldrb	r2, [r3, #20]
   82722:	f36f 0282 	bfc	r2, #2, #1
   82726:	751a      	strb	r2, [r3, #20]
}
   82728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8272a:	bf00      	nop
   8272c:	200036ac 	.word	0x200036ac

00082730 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82730:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   82734:	0143      	lsls	r3, r0, #5
   82736:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8273a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8273e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   82742:	069b      	lsls	r3, r3, #26
   82744:	d409      	bmi.n	8275a <udd_ep_is_halted+0x2a>
   82746:	4b06      	ldr	r3, [pc, #24]	; (82760 <udd_ep_is_halted+0x30>)
   82748:	3801      	subs	r0, #1
   8274a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8274e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   82752:	7d00      	ldrb	r0, [r0, #20]
   82754:	f3c0 0080 	ubfx	r0, r0, #2, #1
   82758:	4770      	bx	lr
   8275a:	2001      	movs	r0, #1
}
   8275c:	4770      	bx	lr
   8275e:	bf00      	nop
   82760:	200036ac 	.word	0x200036ac

00082764 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82764:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   82768:	2b02      	cmp	r3, #2
   8276a:	d82c      	bhi.n	827c6 <udd_ep_set_halt+0x62>
{
   8276c:	b530      	push	{r4, r5, lr}
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8276e:	4d25      	ldr	r5, [pc, #148]	; (82804 <udd_ep_set_halt+0xa0>)
   82770:	0159      	lsls	r1, r3, #5
   82772:	eb05 1e43 	add.w	lr, r5, r3, lsl #5
   82776:	f8de 211c 	ldr.w	r2, [lr, #284]	; 0x11c
   8277a:	0692      	lsls	r2, r2, #26
   8277c:	d421      	bmi.n	827c2 <udd_ep_set_halt+0x5e>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8277e:	4c22      	ldr	r4, [pc, #136]	; (82808 <udd_ep_set_halt+0xa4>)
	ptr_job = &udd_ep_job[ep_index - 1];
   82780:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82782:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   82786:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
   8278a:	f89c 4014 	ldrb.w	r4, [ip, #20]
   8278e:	f014 0204 	ands.w	r2, r4, #4
   82792:	d116      	bne.n	827c2 <udd_ep_set_halt+0x5e>
	if (ptr_job->busy == true) {
   82794:	07e4      	lsls	r4, r4, #31
   82796:	d418      	bmi.n	827ca <udd_ep_set_halt+0x66>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82798:	0602      	lsls	r2, r0, #24
   8279a:	d418      	bmi.n	827ce <udd_ep_set_halt+0x6a>
	udd_ack_stall(ep_index);
   8279c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	udd_enable_stall_handshake(ep_index);
   827a0:	2420      	movs	r4, #32
	udd_disable_endpoint_bank_autoswitch(ep_index);
   827a2:	f101 2340 	add.w	r3, r1, #1073758208	; 0x40004000
   827a6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   827aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
	return true;
   827ae:	2001      	movs	r0, #1
	udd_disable_endpoint_bank_autoswitch(ep_index);
   827b0:	f022 0202 	bic.w	r2, r2, #2
   827b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   827b8:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   827bc:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
}
   827c0:	bd30      	pop	{r4, r5, pc}
		return true; // Already STALL
   827c2:	2001      	movs	r0, #1
}
   827c4:	bd30      	pop	{r4, r5, pc}
		return false;
   827c6:	2000      	movs	r0, #0
}
   827c8:	4770      	bx	lr
		return false;
   827ca:	4610      	mov	r0, r2
}
   827cc:	bd30      	pop	{r4, r5, pc}
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   827ce:	f8de 211c 	ldr.w	r2, [lr, #284]	; 0x11c
   827d2:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   827d6:	d0e1      	beq.n	8279c <udd_ep_set_halt+0x38>
			udd_enable_bank_interrupt(ep_index);
   827d8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
			udd_enable_endpoint_interrupt(ep_index);
   827dc:	f44f 7280 	mov.w	r2, #256	; 0x100
			ptr_job->stall_requested = true;
   827e0:	f89c 1014 	ldrb.w	r1, [ip, #20]
			return true;
   827e4:	2001      	movs	r0, #1
			ptr_job->stall_requested = true;
   827e6:	f041 0104 	orr.w	r1, r1, #4
   827ea:	f88c 1014 	strb.w	r1, [ip, #20]
			udd_enable_bank_interrupt(ep_index);
   827ee:	f103 0108 	add.w	r1, r3, #8
   827f2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   827f6:	604c      	str	r4, [r1, #4]
			udd_enable_endpoint_interrupt(ep_index);
   827f8:	6929      	ldr	r1, [r5, #16]
   827fa:	fa02 f303 	lsl.w	r3, r2, r3
   827fe:	430b      	orrs	r3, r1
   82800:	612b      	str	r3, [r5, #16]
}
   82802:	bd30      	pop	{r4, r5, pc}
   82804:	400a4000 	.word	0x400a4000
   82808:	200036ac 	.word	0x200036ac

0008280c <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   8280c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   82810:	2802      	cmp	r0, #2
   82812:	d85a      	bhi.n	828ca <udd_ep_clear_halt+0xbe>
{
   82814:	b570      	push	{r4, r5, r6, lr}
	ptr_job = &udd_ep_job[ep - 1];
   82816:	f100 3cff 	add.w	ip, r0, #4294967295
	if (ptr_job->stall_requested) {
   8281a:	4c2d      	ldr	r4, [pc, #180]	; (828d0 <udd_ep_clear_halt+0xc4>)
   8281c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
   82820:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   82824:	7d0b      	ldrb	r3, [r1, #20]
   82826:	ea4f 024c 	mov.w	r2, ip, lsl #1
   8282a:	075d      	lsls	r5, r3, #29
   8282c:	d526      	bpl.n	8287c <udd_ep_clear_halt+0x70>
		udd_disable_bank_interrupt(ep);
   8282e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
		udd_disable_endpoint_interrupt(ep);
   82832:	f44f 7e80 	mov.w	lr, #256	; 0x100
		ptr_job->stall_requested = false;
   82836:	7d0b      	ldrb	r3, [r1, #20]
		udd_disable_endpoint_interrupt(ep);
   82838:	fa0e fe00 	lsl.w	lr, lr, r0
		ptr_job->stall_requested = false;
   8283c:	f36f 0382 	bfc	r3, #2, #1
   82840:	750b      	strb	r3, [r1, #20]
		udd_disable_bank_interrupt(ep);
   82842:	4924      	ldr	r1, [pc, #144]	; (828d4 <udd_ep_clear_halt+0xc8>)
   82844:	0143      	lsls	r3, r0, #5
   82846:	eb01 1540 	add.w	r5, r1, r0, lsl #5
   8284a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   8284e:	6908      	ldr	r0, [r1, #16]
   82850:	ea20 000e 	bic.w	r0, r0, lr
   82854:	6108      	str	r0, [r1, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   82856:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
   8285a:	068d      	lsls	r5, r1, #26
   8285c:	d417      	bmi.n	8288e <udd_ep_clear_halt+0x82>
		if (ptr_job->busy == true) {
   8285e:	eb02 030c 	add.w	r3, r2, ip
   82862:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   82866:	7d11      	ldrb	r1, [r2, #20]
   82868:	00db      	lsls	r3, r3, #3
   8286a:	07c8      	lsls	r0, r1, #31
   8286c:	d504      	bpl.n	82878 <udd_ep_clear_halt+0x6c>
			ptr_job->busy = false;
   8286e:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   82872:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   82874:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   82876:	4798      	blx	r3
	return true;
   82878:	2001      	movs	r0, #1
}
   8287a:	bd70      	pop	{r4, r5, r6, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   8287c:	0143      	lsls	r3, r0, #5
   8287e:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   82882:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   82886:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   8288a:	0689      	lsls	r1, r1, #26
   8288c:	d5f4      	bpl.n	82878 <udd_ep_clear_halt+0x6c>
		if (Is_udd_stall(ep)) {
   8288e:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   82892:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   82896:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
   8289a:	0486      	lsls	r6, r0, #18
   8289c:	d506      	bpl.n	828ac <udd_ep_clear_halt+0xa0>
			udd_ack_stall(ep);
   8289e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   828a2:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
			udd_reset_data_toggle(ep);
   828a6:	2040      	movs	r0, #64	; 0x40
   828a8:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   828ac:	2020      	movs	r0, #32
   828ae:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   828b2:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   828b6:	460b      	mov	r3, r1
   828b8:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   828bc:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   828c0:	f041 0102 	orr.w	r1, r1, #2
   828c4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (b_stall_cleared) {
   828c8:	e7c9      	b.n	8285e <udd_ep_clear_halt+0x52>
		return false;
   828ca:	2000      	movs	r0, #0
}
   828cc:	4770      	bx	lr
   828ce:	bf00      	nop
   828d0:	200036ac 	.word	0x200036ac
   828d4:	400a4000 	.word	0x400a4000

000828d8 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   828d8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   828dc:	2802      	cmp	r0, #2
   828de:	d857      	bhi.n	82990 <udd_ep_run+0xb8>
{
   828e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   828e4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
   828e8:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   828ec:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   828f0:	f8dc 410c 	ldr.w	r4, [ip, #268]	; 0x10c
   828f4:	07e5      	lsls	r5, r4, #31
   828f6:	d548      	bpl.n	8298a <udd_ep_run+0xb2>
			|| Is_udd_endpoint_stall_requested(ep)
   828f8:	f8dc 411c 	ldr.w	r4, [ip, #284]	; 0x11c
   828fc:	06a4      	lsls	r4, r4, #26
   828fe:	d444      	bmi.n	8298a <udd_ep_run+0xb2>
	ptr_job = &udd_ep_job[ep - 1];
   82900:	1e45      	subs	r5, r0, #1
			|| ptr_job->stall_requested) {
   82902:	4e28      	ldr	r6, [pc, #160]	; (829a4 <udd_ep_run+0xcc>)
   82904:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
   82908:	eb06 0ccc 	add.w	ip, r6, ip, lsl #3
   8290c:	f89c 4014 	ldrb.w	r4, [ip, #20]
   82910:	006f      	lsls	r7, r5, #1
   82912:	f014 0e04 	ands.w	lr, r4, #4
   82916:	d138      	bne.n	8298a <udd_ep_run+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82918:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   8291c:	b672      	cpsid	i
   8291e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82922:	f8df 8084 	ldr.w	r8, [pc, #132]	; 829a8 <udd_ep_run+0xd0>
   82926:	f888 e000 	strb.w	lr, [r8]
	if (ptr_job->busy == true) {
   8292a:	f89c e014 	ldrb.w	lr, [ip, #20]
   8292e:	f01e 0f01 	tst.w	lr, #1
   82932:	d129      	bne.n	82988 <udd_ep_run+0xb0>
	ptr_job->busy = true;
   82934:	f89c e014 	ldrb.w	lr, [ip, #20]
   82938:	f04e 0e01 	orr.w	lr, lr, #1
   8293c:	f88c e014 	strb.w	lr, [ip, #20]
	if (cpu_irq_is_enabled_flags(flags))
   82940:	b92c      	cbnz	r4, 8294e <udd_ep_run+0x76>
		cpu_irq_enable();
   82942:	2401      	movs	r4, #1
   82944:	f888 4000 	strb.w	r4, [r8]
   82948:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8294c:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   8294e:	f04f 0c00 	mov.w	ip, #0
	ptr_job->call_trans = callback;
   82952:	f8dd e018 	ldr.w	lr, [sp, #24]
	ptr_job->buf = buf;
   82956:	197c      	adds	r4, r7, r5
	ptr_job->call_trans = callback;
   82958:	f846 e034 	str.w	lr, [r6, r4, lsl #3]
	ptr_job->buf = buf;
   8295c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	ptr_job->buf_size = buf_size;
   82960:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   82964:	e9c4 cc03 	strd	ip, ip, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82968:	b911      	cbnz	r1, 82970 <udd_ep_run+0x98>
   8296a:	fab3 f183 	clz	r1, r3
   8296e:	0949      	lsrs	r1, r1, #5
   82970:	197b      	adds	r3, r7, r5
   82972:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   82976:	7d1a      	ldrb	r2, [r3, #20]
   82978:	f361 0241 	bfi	r2, r1, #1, #1
   8297c:	751a      	strb	r2, [r3, #20]
	udd_ep_trans_done(ep);
   8297e:	490b      	ldr	r1, [pc, #44]	; (829ac <udd_ep_run+0xd4>)
   82980:	4788      	blx	r1
	return true;
   82982:	2001      	movs	r0, #1
}
   82984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpu_irq_is_enabled_flags(flags))
   82988:	b124      	cbz	r4, 82994 <udd_ep_run+0xbc>
		return false;
   8298a:	2000      	movs	r0, #0
}
   8298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   82990:	2000      	movs	r0, #0
}
   82992:	4770      	bx	lr
		cpu_irq_enable();
   82994:	2301      	movs	r3, #1
   82996:	f888 3000 	strb.w	r3, [r8]
   8299a:	f3bf 8f5f 	dmb	sy
   8299e:	b662      	cpsie	i
		return false; // Job already on going
   829a0:	4620      	mov	r0, r4
}
   829a2:	e7f3      	b.n	8298c <udd_ep_run+0xb4>
   829a4:	200036ac 	.word	0x200036ac
   829a8:	20000368 	.word	0x20000368
   829ac:	000818a9 	.word	0x000818a9

000829b0 <udd_ep_alloc>:
{
   829b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ep = ep & USB_EP_ADDR_MASK;
   829b4:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   829b8:	2c02      	cmp	r4, #2
{
   829ba:	b083      	sub	sp, #12
	if (ep > USB_DEVICE_MAX_EP) {
   829bc:	f200 8135 	bhi.w	82c2a <udd_ep_alloc+0x27a>
	if (Is_udd_endpoint_enabled(ep)) {
   829c0:	ea4f 1c44 	mov.w	ip, r4, lsl #5
   829c4:	f10c 2340 	add.w	r3, ip, #1073758208	; 0x40004000
   829c8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   829cc:	4680      	mov	r8, r0
   829ce:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   829d2:	46a6      	mov	lr, r4
   829d4:	f010 0001 	ands.w	r0, r0, #1
   829d8:	f040 8127 	bne.w	82c2a <udd_ep_alloc+0x27a>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   829dc:	f001 0503 	and.w	r5, r1, #3
   829e0:	2d02      	cmp	r5, #2
   829e2:	f000 812e 	beq.w	82c42 <udd_ep_alloc+0x292>
   829e6:	2d03      	cmp	r5, #3
   829e8:	f000 8123 	beq.w	82c32 <udd_ep_alloc+0x282>
   829ec:	2d01      	cmp	r5, #1
   829ee:	f040 811d 	bne.w	82c2c <udd_ep_alloc+0x27c>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   829f2:	2c00      	cmp	r4, #0
   829f4:	f000 811d 	beq.w	82c32 <udd_ep_alloc+0x282>
		switch(MaxEndpointSize & (0x3u << 11)) {
   829f8:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   829fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   82a00:	f000 8121 	beq.w	82c46 <udd_ep_alloc+0x296>
			nb_tran = 3;
   82a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   82a08:	bf08      	it	eq
   82a0a:	2503      	moveq	r5, #3
		MaxEndpointSize &= ~(0x3u << 11);
   82a0c:	2740      	movs	r7, #64	; 0x40
   82a0e:	2601      	movs	r6, #1
   82a10:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   82a14:	b292      	uxth	r2, r2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82a16:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   82a1a:	0109      	lsls	r1, r1, #4
   82a1c:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   82a20:	f001 0330 	and.w	r3, r1, #48	; 0x30
   82a24:	f8dc 1100 	ldr.w	r1, [ip, #256]	; 0x100
   82a28:	f018 0f80 	tst.w	r8, #128	; 0x80
   82a2c:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
   82a30:	bf14      	ite	ne
   82a32:	f04f 0808 	movne.w	r8, #8
   82a36:	f04f 0800 	moveq.w	r8, #0
   82a3a:	f021 0103 	bic.w	r1, r1, #3
   82a3e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   82a42:	ea41 0103 	orr.w	r1, r1, r3
   82a46:	f080 80fa 	bcs.w	82c3e <udd_ep_alloc+0x28e>
   82a4a:	2a08      	cmp	r2, #8
   82a4c:	bf38      	it	cc
   82a4e:	2208      	movcc	r2, #8
   82a50:	0053      	lsls	r3, r2, #1
   82a52:	3b01      	subs	r3, #1
   82a54:	fab3 f383 	clz	r3, r3
   82a58:	f1c3 031c 	rsb	r3, r3, #28
   82a5c:	4339      	orrs	r1, r7
   82a5e:	ea41 0808 	orr.w	r8, r1, r8
   82a62:	b106      	cbz	r6, 82a66 <udd_ep_alloc+0xb6>
   82a64:	0228      	lsls	r0, r5, #8
   82a66:	ea43 0308 	orr.w	r3, r3, r8
   82a6a:	4318      	orrs	r0, r3
   82a6c:	f8cc 0100 	str.w	r0, [ip, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   82a70:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
   82a74:	2b00      	cmp	r3, #0
   82a76:	f280 80d8 	bge.w	82c2a <udd_ep_alloc+0x27a>
	udd_enable_endpoint(ep);
   82a7a:	2701      	movs	r7, #1
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82a7c:	2302      	movs	r3, #2
	ep_allocated = 0;
   82a7e:	2500      	movs	r5, #0
		if (Is_udd_endpoint_enabled(i)) {
   82a80:	4e93      	ldr	r6, [pc, #588]	; (82cd0 <udd_ep_alloc+0x320>)
	udd_enable_endpoint(ep);
   82a82:	f8cc 7104 	str.w	r7, [ip, #260]	; 0x104
		if (Is_udd_endpoint_enabled(i)) {
   82a86:	eb06 1843 	add.w	r8, r6, r3, lsl #5
   82a8a:	f8d8 110c 	ldr.w	r1, [r8, #268]	; 0x10c
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82a8e:	1e58      	subs	r0, r3, #1
		if (Is_udd_endpoint_enabled(i)) {
   82a90:	07c9      	lsls	r1, r1, #31
   82a92:	ea4f 1243 	mov.w	r2, r3, lsl #5
   82a96:	d514      	bpl.n	82ac2 <udd_ep_alloc+0x112>
   82a98:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   82a9c:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   82aa0:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   82aa4:	005b      	lsls	r3, r3, #1
   82aa6:	f3c1 1181 	ubfx	r1, r1, #6, #2
   82aaa:	fa01 f303 	lsl.w	r3, r1, r3
			udd_disable_endpoint(i);
   82aae:	f8c8 7108 	str.w	r7, [r8, #264]	; 0x108
			ep_allocated |=  bank << (i * 2);
   82ab2:	432b      	orrs	r3, r5
   82ab4:	b29d      	uxth	r5, r3
			udd_configure_endpoint_bank(i, 0);
   82ab6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   82aba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   82abe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82ac2:	b2c3      	uxtb	r3, r0
   82ac4:	429c      	cmp	r4, r3
   82ac6:	d9de      	bls.n	82a86 <udd_ep_alloc+0xd6>
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82ac8:	0063      	lsls	r3, r4, #1
   82aca:	fa45 f303 	asr.w	r3, r5, r3
		if (bank == 0) {
   82ace:	f013 0203 	ands.w	r2, r3, #3
   82ad2:	d02a      	beq.n	82b2a <udd_ep_alloc+0x17a>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82ad4:	1e63      	subs	r3, r4, #1
		bool b_restart = ptr_job->busy;
   82ad6:	4e7f      	ldr	r6, [pc, #508]	; (82cd4 <udd_ep_alloc+0x324>)
   82ad8:	eb03 0843 	add.w	r8, r3, r3, lsl #1
		udd_enable_endpoint(i);
   82adc:	f04f 0a01 	mov.w	sl, #1
		bool b_restart = ptr_job->busy;
   82ae0:	eb06 00c8 	add.w	r0, r6, r8, lsl #3
   82ae4:	7d07      	ldrb	r7, [r0, #20]
		udd_configure_endpoint_bank(i, bank);
   82ae6:	f8dc 1100 	ldr.w	r1, [ip, #256]	; 0x100
		ptr_job->busy = false;
   82aea:	46b9      	mov	r9, r7
		udd_configure_endpoint_bank(i, bank);
   82aec:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   82af0:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   82af4:	f8cc 2100 	str.w	r2, [ip, #256]	; 0x100
		udd_enable_endpoint(i);
   82af8:	f8cc a104 	str.w	sl, [ip, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   82afc:	f8dc 2100 	ldr.w	r2, [ip, #256]	; 0x100
		ptr_job->busy = false;
   82b00:	f36f 0900 	bfc	r9, #0, #1
		if (!Is_udd_endpoint_mapped(i)) {
   82b04:	2a00      	cmp	r2, #0
		bool b_restart = ptr_job->busy;
   82b06:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   82b0a:	ea07 070a 	and.w	r7, r7, sl
		ptr_job->busy = false;
   82b0e:	f880 9014 	strb.w	r9, [r0, #20]
		bool b_restart = ptr_job->busy;
   82b12:	fa03 f10a 	lsl.w	r1, r3, sl
		if (!Is_udd_endpoint_mapped(i)) {
   82b16:	da71      	bge.n	82bfc <udd_ep_alloc+0x24c>
		udd_enable_endpoint_bank_autoswitch(i);
   82b18:	f8dc 3104 	ldr.w	r3, [ip, #260]	; 0x104
   82b1c:	f043 0302 	orr.w	r3, r3, #2
   82b20:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
		if (b_restart) {
   82b24:	2f00      	cmp	r7, #0
   82b26:	f040 80a4 	bne.w	82c72 <udd_ep_alloc+0x2c2>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82b2a:	1c60      	adds	r0, r4, #1
   82b2c:	b2c0      	uxtb	r0, r0
   82b2e:	2803      	cmp	r0, #3
   82b30:	d05f      	beq.n	82bf2 <udd_ep_alloc+0x242>
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82b32:	0043      	lsls	r3, r0, #1
   82b34:	fa45 f303 	asr.w	r3, r5, r3
		if (bank == 0) {
   82b38:	f013 0103 	ands.w	r1, r3, #3
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82b3c:	4686      	mov	lr, r0
		if (bank == 0) {
   82b3e:	d031      	beq.n	82ba4 <udd_ep_alloc+0x1f4>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82b40:	1e43      	subs	r3, r0, #1
		bool b_restart = ptr_job->busy;
   82b42:	4e64      	ldr	r6, [pc, #400]	; (82cd4 <udd_ep_alloc+0x324>)
   82b44:	eb03 0943 	add.w	r9, r3, r3, lsl #1
		udd_enable_endpoint(i);
   82b48:	f04f 0a01 	mov.w	sl, #1
		bool b_restart = ptr_job->busy;
   82b4c:	eb06 07c9 	add.w	r7, r6, r9, lsl #3
   82b50:	f897 c014 	ldrb.w	ip, [r7, #20]
   82b54:	0142      	lsls	r2, r0, #5
		ptr_job->busy = false;
   82b56:	46e0      	mov	r8, ip
   82b58:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   82b5c:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   82b60:	f8d2 b100 	ldr.w	fp, [r2, #256]	; 0x100
		bool b_restart = ptr_job->busy;
   82b64:	ea0c 0c0a 	and.w	ip, ip, sl
		udd_configure_endpoint_bank(i, bank);
   82b68:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   82b6c:	ea4b 1181 	orr.w	r1, fp, r1, lsl #6
   82b70:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
		udd_enable_endpoint(i);
   82b74:	f8c2 a104 	str.w	sl, [r2, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   82b78:	f8d2 a100 	ldr.w	sl, [r2, #256]	; 0x100
		ptr_job->busy = false;
   82b7c:	f36f 0800 	bfc	r8, #0, #1
		if (!Is_udd_endpoint_mapped(i)) {
   82b80:	f1ba 0f00 	cmp.w	sl, #0
		bool b_restart = ptr_job->busy;
   82b84:	ea4f 09c9 	mov.w	r9, r9, lsl #3
		ptr_job->busy = false;
   82b88:	f887 8014 	strb.w	r8, [r7, #20]
		bool b_restart = ptr_job->busy;
   82b8c:	ea4f 0143 	mov.w	r1, r3, lsl #1
		if (!Is_udd_endpoint_mapped(i)) {
   82b90:	da33      	bge.n	82bfa <udd_ep_alloc+0x24a>
		udd_enable_endpoint_bank_autoswitch(i);
   82b92:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   82b96:	f043 0302 	orr.w	r3, r3, #2
   82b9a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (b_restart) {
   82b9e:	f1bc 0f00 	cmp.w	ip, #0
   82ba2:	d152      	bne.n	82c4a <udd_ep_alloc+0x29a>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82ba4:	bb2c      	cbnz	r4, 82bf2 <udd_ep_alloc+0x242>
		if (bank == 0) {
   82ba6:	f015 0f30 	tst.w	r5, #48	; 0x30
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82baa:	f3c5 1001 	ubfx	r0, r5, #4, #2
		if (bank == 0) {
   82bae:	d020      	beq.n	82bf2 <udd_ep_alloc+0x242>
		bool b_restart = ptr_job->busy;
   82bb0:	4e48      	ldr	r6, [pc, #288]	; (82cd4 <udd_ep_alloc+0x324>)
		udd_configure_endpoint_bank(i, bank);
   82bb2:	4a47      	ldr	r2, [pc, #284]	; (82cd0 <udd_ep_alloc+0x320>)
		bool b_restart = ptr_job->busy;
   82bb4:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   82bb8:	f003 0501 	and.w	r5, r3, #1
		ptr_job->busy = false;
   82bbc:	f364 0300 	bfi	r3, r4, #0, #1
   82bc0:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
		udd_enable_endpoint(i);
   82bc4:	2301      	movs	r3, #1
		udd_configure_endpoint_bank(i, bank);
   82bc6:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   82bca:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   82bce:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
   82bd2:	f8c2 1140 	str.w	r1, [r2, #320]	; 0x140
		udd_enable_endpoint(i);
   82bd6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
		if (!Is_udd_endpoint_mapped(i)) {
   82bda:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   82bde:	2900      	cmp	r1, #0
   82be0:	da72      	bge.n	82cc8 <udd_ep_alloc+0x318>
		udd_enable_endpoint_bank_autoswitch(i);
   82be2:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   82be6:	f043 0302 	orr.w	r3, r3, #2
   82bea:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
		if (b_restart) {
   82bee:	2d00      	cmp	r5, #0
   82bf0:	d155      	bne.n	82c9e <udd_ep_alloc+0x2ee>
	return true;
   82bf2:	2001      	movs	r0, #1
}
   82bf4:	b003      	add	sp, #12
   82bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!Is_udd_endpoint_mapped(i)) {
   82bfa:	4604      	mov	r4, r0
			if (NULL == ptr_job->call_trans) {
   82bfc:	18ca      	adds	r2, r1, r3
   82bfe:	f856 5032 	ldr.w	r5, [r6, r2, lsl #3]
   82c02:	b195      	cbz	r5, 82c2a <udd_ep_alloc+0x27a>
			if (Is_udd_endpoint_in(i)) {
   82c04:	4a32      	ldr	r2, [pc, #200]	; (82cd0 <udd_ep_alloc+0x320>)
   82c06:	f10e 0e08 	add.w	lr, lr, #8
   82c0a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
   82c0e:	f852 200e 	ldr.w	r2, [r2, lr]
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82c12:	440b      	add	r3, r1
			if (Is_udd_endpoint_in(i)) {
   82c14:	0712      	lsls	r2, r2, #28
				i |= USB_EP_DIR_IN;
   82c16:	bf44      	itt	mi
   82c18:	f064 047f 	ornmi	r4, r4, #127	; 0x7f
   82c1c:	b2e4      	uxtbmi	r4, r4
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82c1e:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   82c22:	4622      	mov	r2, r4
   82c24:	2001      	movs	r0, #1
   82c26:	68f1      	ldr	r1, [r6, #12]
   82c28:	47a8      	blx	r5
			return false;
   82c2a:	2000      	movs	r0, #0
}
   82c2c:	b003      	add	sp, #12
   82c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82c32:	2740      	movs	r7, #64	; 0x40
	} else if (MaxEndpointSize & (0x3u << 11)) {
   82c34:	f412 56c0 	ands.w	r6, r2, #6144	; 0x1800
   82c38:	d1f7      	bne.n	82c2a <udd_ep_alloc+0x27a>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   82c3a:	4635      	mov	r5, r6
   82c3c:	e6eb      	b.n	82a16 <udd_ep_alloc+0x66>
   82c3e:	2307      	movs	r3, #7
   82c40:	e70c      	b.n	82a5c <udd_ep_alloc+0xac>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82c42:	2780      	movs	r7, #128	; 0x80
   82c44:	e7f6      	b.n	82c34 <udd_ep_alloc+0x284>
		switch(MaxEndpointSize & (0x3u << 11)) {
   82c46:	2502      	movs	r5, #2
   82c48:	e6e0      	b.n	82a0c <udd_ep_alloc+0x5c>
			b_restart = udd_ep_run(i,
   82c4a:	f856 3009 	ldr.w	r3, [r6, r9]
   82c4e:	4e22      	ldr	r6, [pc, #136]	; (82cd8 <udd_ep_alloc+0x328>)
   82c50:	9300      	str	r3, [sp, #0]
   82c52:	68b9      	ldr	r1, [r7, #8]
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c54:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
			b_restart = udd_ep_run(i,
   82c58:	4411      	add	r1, r2
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c5a:	1a9a      	subs	r2, r3, r2
			b_restart = udd_ep_run(i,
   82c5c:	1acb      	subs	r3, r1, r3
   82c5e:	6879      	ldr	r1, [r7, #4]
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c60:	60fa      	str	r2, [r7, #12]
			b_restart = udd_ep_run(i,
   82c62:	440a      	add	r2, r1
					ptr_job->b_shortpacket,
   82c64:	7d39      	ldrb	r1, [r7, #20]
			b_restart = udd_ep_run(i,
   82c66:	f3c1 0140 	ubfx	r1, r1, #1, #1
   82c6a:	47b0      	blx	r6
			if (!b_restart) {
   82c6c:	2800      	cmp	r0, #0
   82c6e:	d199      	bne.n	82ba4 <udd_ep_alloc+0x1f4>
   82c70:	e7db      	b.n	82c2a <udd_ep_alloc+0x27a>
			b_restart = udd_ep_run(i,
   82c72:	f856 3008 	ldr.w	r3, [r6, r8]
   82c76:	4e18      	ldr	r6, [pc, #96]	; (82cd8 <udd_ep_alloc+0x328>)
   82c78:	9300      	str	r3, [sp, #0]
   82c7a:	6881      	ldr	r1, [r0, #8]
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c7c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
			b_restart = udd_ep_run(i,
   82c80:	4411      	add	r1, r2
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c82:	1a9a      	subs	r2, r3, r2
			b_restart = udd_ep_run(i,
   82c84:	1acb      	subs	r3, r1, r3
   82c86:	6841      	ldr	r1, [r0, #4]
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c88:	60c2      	str	r2, [r0, #12]
			b_restart = udd_ep_run(i,
   82c8a:	440a      	add	r2, r1
					ptr_job->b_shortpacket,
   82c8c:	7d01      	ldrb	r1, [r0, #20]
			b_restart = udd_ep_run(i,
   82c8e:	4620      	mov	r0, r4
   82c90:	f3c1 0140 	ubfx	r1, r1, #1, #1
   82c94:	47b0      	blx	r6
			if (!b_restart) {
   82c96:	2800      	cmp	r0, #0
   82c98:	f47f af47 	bne.w	82b2a <udd_ep_alloc+0x17a>
   82c9c:	e7c5      	b.n	82c2a <udd_ep_alloc+0x27a>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82c9e:	e9d6 3109 	ldrd	r3, r1, [r6, #36]	; 0x24
			b_restart = udd_ep_run(i,
   82ca2:	e9d6 2407 	ldrd	r2, r4, [r6, #28]
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82ca6:	1a58      	subs	r0, r3, r1
			b_restart = udd_ep_run(i,
   82ca8:	4421      	add	r1, r4
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82caa:	6270      	str	r0, [r6, #36]	; 0x24
			b_restart = udd_ep_run(i,
   82cac:	1acb      	subs	r3, r1, r3
   82cae:	4402      	add	r2, r0
					ptr_job->b_shortpacket,
   82cb0:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
			b_restart = udd_ep_run(i,
   82cb4:	69b0      	ldr	r0, [r6, #24]
   82cb6:	4c08      	ldr	r4, [pc, #32]	; (82cd8 <udd_ep_alloc+0x328>)
   82cb8:	9000      	str	r0, [sp, #0]
   82cba:	f3c1 0140 	ubfx	r1, r1, #1, #1
   82cbe:	2002      	movs	r0, #2
   82cc0:	47a0      	blx	r4
			if (!b_restart) {
   82cc2:	2800      	cmp	r0, #0
   82cc4:	d195      	bne.n	82bf2 <udd_ep_alloc+0x242>
   82cc6:	e7b0      	b.n	82c2a <udd_ep_alloc+0x27a>
   82cc8:	2402      	movs	r4, #2
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82cca:	46a6      	mov	lr, r4
   82ccc:	4621      	mov	r1, r4
   82cce:	e795      	b.n	82bfc <udd_ep_alloc+0x24c>
   82cd0:	400a4000 	.word	0x400a4000
   82cd4:	200036ac 	.word	0x200036ac
   82cd8:	000828d9 	.word	0x000828d9

00082cdc <udd_ep_abort>:
	udd_endpoint_dma_set_control(ep_index, 0);
   82cdc:	2100      	movs	r1, #0
   82cde:	4b26      	ldr	r3, [pc, #152]	; (82d78 <udd_ep_abort+0x9c>)
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82ce0:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   82ce4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	if (ep & USB_EP_DIR_IN) {
   82ce8:	0600      	lsls	r0, r0, #24
{
   82cea:	b530      	push	{r4, r5, lr}
	udd_endpoint_dma_set_control(ep_index, 0);
   82cec:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   82cee:	d428      	bmi.n	82d42 <udd_ep_abort+0x66>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82cf0:	1e51      	subs	r1, r2, #1
	if (ptr_job->busy == false) {
   82cf2:	4822      	ldr	r0, [pc, #136]	; (82d7c <udd_ep_abort+0xa0>)
   82cf4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   82cf8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   82cfc:	f894 e014 	ldrb.w	lr, [r4, #20]
   82d00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   82d04:	f01e 0f01 	tst.w	lr, #1
   82d08:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82d0c:	d018      	beq.n	82d40 <udd_ep_abort+0x64>
	if (NULL == ptr_job->call_trans) {
   82d0e:	58c5      	ldr	r5, [r0, r3]
	ptr_job->busy = false;
   82d10:	4673      	mov	r3, lr
   82d12:	f36f 0300 	bfc	r3, #0, #1
   82d16:	7523      	strb	r3, [r4, #20]
	if (NULL == ptr_job->call_trans) {
   82d18:	b195      	cbz	r5, 82d40 <udd_ep_abort+0x64>
	if (Is_udd_endpoint_in(ep_num)) {
   82d1a:	4c19      	ldr	r4, [pc, #100]	; (82d80 <udd_ep_abort+0xa4>)
   82d1c:	f102 0308 	add.w	r3, r2, #8
   82d20:	015b      	lsls	r3, r3, #5
   82d22:	58e3      	ldr	r3, [r4, r3]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82d24:	4461      	add	r1, ip
	if (Is_udd_endpoint_in(ep_num)) {
   82d26:	071b      	lsls	r3, r3, #28
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82d28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   82d2c:	462b      	mov	r3, r5
}
   82d2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82d32:	f04f 0001 	mov.w	r0, #1
   82d36:	6889      	ldr	r1, [r1, #8]
		ep_num |= USB_EP_DIR_IN;
   82d38:	bf48      	it	mi
   82d3a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82d3e:	4718      	bx	r3
}
   82d40:	bd30      	pop	{r4, r5, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   82d42:	0153      	lsls	r3, r2, #5
   82d44:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   82d48:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   82d4c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   82d50:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   82d54:	d0cc      	beq.n	82cf0 <udd_ep_abort+0x14>
			udd_kill_last_in_bank(ep_index);
   82d56:	f44f 7400 	mov.w	r4, #512	; 0x200
   82d5a:	f503 7c8a 	add.w	ip, r3, #276	; 0x114
   82d5e:	f8cc 4000 	str.w	r4, [ip]
			while(Is_udd_kill_last(ep_index));
   82d62:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   82d66:	0589      	lsls	r1, r1, #22
   82d68:	d4fb      	bmi.n	82d62 <udd_ep_abort+0x86>
		for(;udd_nb_busy_bank(ep_index);) {
   82d6a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   82d6e:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   82d72:	d1f4      	bne.n	82d5e <udd_ep_abort+0x82>
   82d74:	e7bc      	b.n	82cf0 <udd_ep_abort+0x14>
   82d76:	bf00      	nop
   82d78:	400a4300 	.word	0x400a4300
   82d7c:	200036ac 	.word	0x200036ac
   82d80:	400a4000 	.word	0x400a4000

00082d84 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   82d84:	4a07      	ldr	r2, [pc, #28]	; (82da4 <udd_test_mode_j+0x20>)
   82d86:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   82d8a:	f023 0303 	bic.w	r3, r3, #3
   82d8e:	f043 0302 	orr.w	r3, r3, #2
   82d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   82d96:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   82d9a:	f043 0304 	orr.w	r3, r3, #4
   82d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82da2:	4770      	bx	lr
   82da4:	400a4000 	.word	0x400a4000

00082da8 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   82da8:	4a07      	ldr	r2, [pc, #28]	; (82dc8 <udd_test_mode_k+0x20>)
   82daa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   82dae:	f023 0303 	bic.w	r3, r3, #3
   82db2:	f043 0302 	orr.w	r3, r3, #2
   82db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   82dba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   82dbe:	f043 0308 	orr.w	r3, r3, #8
   82dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82dc6:	4770      	bx	lr
   82dc8:	400a4000 	.word	0x400a4000

00082dcc <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   82dcc:	4a04      	ldr	r2, [pc, #16]	; (82de0 <udd_test_mode_se0_nak+0x14>)
   82dce:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   82dd2:	f023 0303 	bic.w	r3, r3, #3
   82dd6:	f043 0302 	orr.w	r3, r3, #2
   82dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82dde:	4770      	bx	lr
   82de0:	400a4000 	.word	0x400a4000

00082de4 <udd_test_mode_packet>:
{
   82de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82de8:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   82dea:	466d      	mov	r5, sp
	udd_disable_endpoint(0);
   82dec:	f04f 0801 	mov.w	r8, #1
	ptr_src = test_packet;
   82df0:	46ec      	mov	ip, sp
	const uint8_t test_packet[] = {
   82df2:	4e21      	ldr	r6, [pc, #132]	; (82e78 <udd_test_mode_packet+0x94>)
	udd_disable_endpoint(0);
   82df4:	4f21      	ldr	r7, [pc, #132]	; (82e7c <udd_test_mode_packet+0x98>)
	const uint8_t test_packet[] = {
   82df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   82df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   82dfa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   82dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   82dfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   82e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   82e02:	e896 0003 	ldmia.w	r6, {r0, r1}
   82e06:	f845 0b04 	str.w	r0, [r5], #4
   82e0a:	7029      	strb	r1, [r5, #0]
	udd_disable_endpoint(0);
   82e0c:	f8c7 8108 	str.w	r8, [r7, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   82e10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   82e14:	f1cc 5e00 	rsb	lr, ip, #536870912	; 0x20000000
   82e18:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82e1c:	f023 0303 	bic.w	r3, r3, #3
   82e20:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   82e24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	udd_enable_endpoint(0);
   82e28:	f8c7 8104 	str.w	r8, [r7, #260]	; 0x104
	udd_enable_hs_test_mode();
   82e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   82e30:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   82e34:	f023 0303 	bic.w	r3, r3, #3
   82e38:	f043 0302 	orr.w	r3, r3, #2
   82e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   82e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   82e44:	f50e 1ec0 	add.w	lr, lr, #1572864	; 0x180000
   82e48:	f043 0310 	orr.w	r3, r3, #16
   82e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	for (i = 0; i < sizeof(test_packet); i++) {
   82e50:	eb0c 030e 	add.w	r3, ip, lr
		*ptr_dest++ = *ptr_src++;
   82e54:	f81c 2b01 	ldrb.w	r2, [ip], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   82e58:	45a4      	cmp	ip, r4
		*ptr_dest++ = *ptr_src++;
   82e5a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   82e5c:	d1f8      	bne.n	82e50 <udd_test_mode_packet+0x6c>
	udd_ack_in_send(0);
   82e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	udd_raise_tx_pkt_ready(0);
   82e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
	udd_ack_in_send(0);
   82e66:	4b05      	ldr	r3, [pc, #20]	; (82e7c <udd_test_mode_packet+0x98>)
   82e68:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82e6c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82e70:	b00e      	add	sp, #56	; 0x38
   82e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e76:	bf00      	nop
   82e78:	0008ab84 	.word	0x0008ab84
   82e7c:	400a4000 	.word	0x400a4000

00082e80 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82e80:	3801      	subs	r0, #1
   82e82:	2802      	cmp	r0, #2
   82e84:	d81a      	bhi.n	82ebc <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   82e86:	b1da      	cbz	r2, 82ec0 <_write+0x40>
{
   82e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e8c:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   82e8e:	4614      	mov	r4, r2
   82e90:	4f0c      	ldr	r7, [pc, #48]	; (82ec4 <_write+0x44>)
   82e92:	f8df 8034 	ldr.w	r8, [pc, #52]	; 82ec8 <_write+0x48>
   82e96:	1c56      	adds	r6, r2, #1
   82e98:	e001      	b.n	82e9e <_write+0x1e>
   82e9a:	3c01      	subs	r4, #1
   82e9c:	d00b      	beq.n	82eb6 <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   82e9e:	6838      	ldr	r0, [r7, #0]
   82ea0:	f8d8 3000 	ldr.w	r3, [r8]
   82ea4:	f815 1b01 	ldrb.w	r1, [r5], #1
   82ea8:	4798      	blx	r3
   82eaa:	2800      	cmp	r0, #0
   82eac:	eba6 0204 	sub.w	r2, r6, r4
   82eb0:	daf3      	bge.n	82e9a <_write+0x1a>
		return -1;
   82eb2:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   82eb6:	4610      	mov	r0, r2
   82eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   82ebc:	f04f 32ff 	mov.w	r2, #4294967295
}
   82ec0:	4610      	mov	r0, r2
   82ec2:	4770      	bx	lr
   82ec4:	200036fc 	.word	0x200036fc
   82ec8:	200036f8 	.word	0x200036f8

00082ecc <LED_Off>:
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82ecc:	2811      	cmp	r0, #17
   82ece:	d004      	beq.n	82eda <LED_Off+0xe>
   82ed0:	2810      	cmp	r0, #16
   82ed2:	d002      	beq.n	82eda <LED_Off+0xe>
   82ed4:	284c      	cmp	r0, #76	; 0x4c
   82ed6:	d000      	beq.n	82eda <LED_Off+0xe>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   82ed8:	4770      	bx	lr
				gpio_set_pin_low(led_gpio);
   82eda:	4b01      	ldr	r3, [pc, #4]	; (82ee0 <LED_Off+0x14>)
   82edc:	4718      	bx	r3
   82ede:	bf00      	nop
   82ee0:	00083355 	.word	0x00083355

00082ee4 <LED_On>:
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82ee4:	2811      	cmp	r0, #17
   82ee6:	d004      	beq.n	82ef2 <LED_On+0xe>
   82ee8:	2810      	cmp	r0, #16
   82eea:	d002      	beq.n	82ef2 <LED_On+0xe>
   82eec:	284c      	cmp	r0, #76	; 0x4c
   82eee:	d000      	beq.n	82ef2 <LED_On+0xe>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   82ef0:	4770      	bx	lr
				gpio_set_pin_high(led_gpio);
   82ef2:	4b01      	ldr	r3, [pc, #4]	; (82ef8 <LED_On+0x14>)
   82ef4:	4718      	bx	r3
   82ef6:	bf00      	nop
   82ef8:	00083339 	.word	0x00083339

00082efc <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82efc:	4917      	ldr	r1, [pc, #92]	; (82f5c <Reset_Handler+0x60>)
   82efe:	4818      	ldr	r0, [pc, #96]	; (82f60 <Reset_Handler+0x64>)
{
   82f00:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   82f02:	4281      	cmp	r1, r0
   82f04:	d009      	beq.n	82f1a <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   82f06:	4a17      	ldr	r2, [pc, #92]	; (82f64 <Reset_Handler+0x68>)
   82f08:	4290      	cmp	r0, r2
   82f0a:	d206      	bcs.n	82f1a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   82f0c:	3a01      	subs	r2, #1
   82f0e:	1a12      	subs	r2, r2, r0
   82f10:	f022 0203 	bic.w	r2, r2, #3
   82f14:	4b14      	ldr	r3, [pc, #80]	; (82f68 <Reset_Handler+0x6c>)
   82f16:	3204      	adds	r2, #4
   82f18:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82f1a:	4814      	ldr	r0, [pc, #80]	; (82f6c <Reset_Handler+0x70>)
   82f1c:	4a14      	ldr	r2, [pc, #80]	; (82f70 <Reset_Handler+0x74>)
   82f1e:	4290      	cmp	r0, r2
   82f20:	d207      	bcs.n	82f32 <Reset_Handler+0x36>
		*pDest++ = 0;
   82f22:	3a01      	subs	r2, #1
   82f24:	1a12      	subs	r2, r2, r0
   82f26:	f022 0203 	bic.w	r2, r2, #3
   82f2a:	2100      	movs	r1, #0
   82f2c:	4b11      	ldr	r3, [pc, #68]	; (82f74 <Reset_Handler+0x78>)
   82f2e:	3204      	adds	r2, #4
   82f30:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82f32:	4b11      	ldr	r3, [pc, #68]	; (82f78 <Reset_Handler+0x7c>)
   82f34:	4911      	ldr	r1, [pc, #68]	; (82f7c <Reset_Handler+0x80>)
   82f36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   82f3a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82f3e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   82f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82f46:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   82f48:	d203      	bcs.n	82f52 <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82f4a:	688b      	ldr	r3, [r1, #8]
   82f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82f50:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82f52:	4b0b      	ldr	r3, [pc, #44]	; (82f80 <Reset_Handler+0x84>)
   82f54:	4798      	blx	r3

	/* Branch to main function */
	main();
   82f56:	4b0b      	ldr	r3, [pc, #44]	; (82f84 <Reset_Handler+0x88>)
   82f58:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82f5a:	e7fe      	b.n	82f5a <Reset_Handler+0x5e>
   82f5c:	0008b004 	.word	0x0008b004
   82f60:	20000000 	.word	0x20000000
   82f64:	20000da8 	.word	0x20000da8
   82f68:	00083ba1 	.word	0x00083ba1
   82f6c:	20000da8 	.word	0x20000da8
   82f70:	20003768 	.word	0x20003768
   82f74:	00083c8d 	.word	0x00083c8d
   82f78:	00080000 	.word	0x00080000
   82f7c:	e000ed00 	.word	0xe000ed00
   82f80:	00083b31 	.word	0x00083b31
   82f84:	0008022d 	.word	0x0008022d

00082f88 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82f88:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f8a:	203e      	movs	r0, #62	; 0x3e
   82f8c:	4b07      	ldr	r3, [pc, #28]	; (82fac <sysclk_enable_usb+0x24>)
   82f8e:	4798      	blx	r3
		break;
   82f90:	4c07      	ldr	r4, [pc, #28]	; (82fb0 <sysclk_enable_usb+0x28>)
		return pmc_osc_is_ready_main_xtal();
   82f92:	47a0      	blx	r4
   82f94:	2800      	cmp	r0, #0
   82f96:	d0fc      	beq.n	82f92 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82f98:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   82f9c:	4b05      	ldr	r3, [pc, #20]	; (82fb4 <sysclk_enable_usb+0x2c>)
   82f9e:	4c06      	ldr	r4, [pc, #24]	; (82fb8 <sysclk_enable_usb+0x30>)
   82fa0:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   82fa2:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82fa4:	2800      	cmp	r0, #0
   82fa6:	d0fc      	beq.n	82fa2 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   82fa8:	bd10      	pop	{r4, pc}
   82faa:	bf00      	nop
   82fac:	000830f1 	.word	0x000830f1
   82fb0:	00083115 	.word	0x00083115
   82fb4:	400e0400 	.word	0x400e0400
   82fb8:	0008318d 	.word	0x0008318d

00082fbc <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82fbc:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82fbe:	4812      	ldr	r0, [pc, #72]	; (83008 <sysclk_init+0x4c>)
   82fc0:	4d12      	ldr	r5, [pc, #72]	; (8300c <sysclk_init+0x50>)
   82fc2:	47a8      	blx	r5
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82fc4:	203e      	movs	r0, #62	; 0x3e
   82fc6:	4b12      	ldr	r3, [pc, #72]	; (83010 <sysclk_init+0x54>)
   82fc8:	4798      	blx	r3
		break;
   82fca:	4c12      	ldr	r4, [pc, #72]	; (83014 <sysclk_init+0x58>)
		return pmc_osc_is_ready_main_xtal();
   82fcc:	47a0      	blx	r4
   82fce:	2800      	cmp	r0, #0
   82fd0:	d0fc      	beq.n	82fcc <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82fd2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82fd6:	4b10      	ldr	r3, [pc, #64]	; (83018 <sysclk_init+0x5c>)
   82fd8:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82fda:	4c10      	ldr	r4, [pc, #64]	; (8301c <sysclk_init+0x60>)
   82fdc:	47a0      	blx	r4
   82fde:	2800      	cmp	r0, #0
   82fe0:	d0fc      	beq.n	82fdc <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   82fe2:	4b0f      	ldr	r3, [pc, #60]	; (83020 <sysclk_init+0x64>)
   82fe4:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82fe6:	4b0f      	ldr	r3, [pc, #60]	; (83024 <sysclk_init+0x68>)
   82fe8:	4a0f      	ldr	r2, [pc, #60]	; (83028 <sysclk_init+0x6c>)
   82fea:	4c10      	ldr	r4, [pc, #64]	; (8302c <sysclk_init+0x70>)
   82fec:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   82fee:	47a0      	blx	r4
   82ff0:	2800      	cmp	r0, #0
   82ff2:	d0fc      	beq.n	82fee <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82ff4:	4b0e      	ldr	r3, [pc, #56]	; (83030 <sysclk_init+0x74>)
   82ff6:	2010      	movs	r0, #16
   82ff8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82ffa:	4b0e      	ldr	r3, [pc, #56]	; (83034 <sysclk_init+0x78>)
   82ffc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82ffe:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   83004:	4800      	ldr	r0, [pc, #0]	; (83008 <sysclk_init+0x4c>)
   83006:	4718      	bx	r3
   83008:	05b8d800 	.word	0x05b8d800
   8300c:	20000181 	.word	0x20000181
   83010:	000830f1 	.word	0x000830f1
   83014:	00083115 	.word	0x00083115
   83018:	00083135 	.word	0x00083135
   8301c:	00083125 	.word	0x00083125
   83020:	0008315d 	.word	0x0008315d
   83024:	400e0400 	.word	0x400e0400
   83028:	200f3f01 	.word	0x200f3f01
   8302c:	0008316d 	.word	0x0008316d
   83030:	00083095 	.word	0x00083095
   83034:	00083991 	.word	0x00083991

00083038 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83038:	4915      	ldr	r1, [pc, #84]	; (83090 <pmc_switch_mck_to_mainck+0x58>)
   8303a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8303c:	f023 0303 	bic.w	r3, r3, #3
   83040:	f043 0301 	orr.w	r3, r3, #1
   83044:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83046:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   83048:	071b      	lsls	r3, r3, #28
   8304a:	bf58      	it	pl
   8304c:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   83050:	d502      	bpl.n	83058 <pmc_switch_mck_to_mainck+0x20>
   83052:	e004      	b.n	8305e <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83054:	3b01      	subs	r3, #1
   83056:	d016      	beq.n	83086 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83058:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8305a:	0712      	lsls	r2, r2, #28
   8305c:	d5fa      	bpl.n	83054 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8305e:	490c      	ldr	r1, [pc, #48]	; (83090 <pmc_switch_mck_to_mainck+0x58>)
   83060:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83066:	4303      	orrs	r3, r0
   83068:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8306a:	6e88      	ldr	r0, [r1, #104]	; 0x68
   8306c:	f010 0008 	ands.w	r0, r0, #8
   83070:	bf08      	it	eq
   83072:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   83076:	d002      	beq.n	8307e <pmc_switch_mck_to_mainck+0x46>
   83078:	e007      	b.n	8308a <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8307a:	3b01      	subs	r3, #1
   8307c:	d003      	beq.n	83086 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8307e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83080:	0712      	lsls	r2, r2, #28
   83082:	d5fa      	bpl.n	8307a <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   83084:	4770      	bx	lr
			return 1;
   83086:	2001      	movs	r0, #1
   83088:	4770      	bx	lr
	return 0;
   8308a:	2000      	movs	r0, #0
   8308c:	4770      	bx	lr
   8308e:	bf00      	nop
   83090:	400e0400 	.word	0x400e0400

00083094 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83094:	4915      	ldr	r1, [pc, #84]	; (830ec <pmc_switch_mck_to_pllack+0x58>)
   83096:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8309c:	4303      	orrs	r3, r0
   8309e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830a0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   830a2:	071b      	lsls	r3, r3, #28
   830a4:	bf58      	it	pl
   830a6:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   830aa:	d502      	bpl.n	830b2 <pmc_switch_mck_to_pllack+0x1e>
   830ac:	e004      	b.n	830b8 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   830ae:	3b01      	subs	r3, #1
   830b0:	d017      	beq.n	830e2 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   830b4:	0710      	lsls	r0, r2, #28
   830b6:	d5fa      	bpl.n	830ae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   830b8:	490c      	ldr	r1, [pc, #48]	; (830ec <pmc_switch_mck_to_pllack+0x58>)
   830ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   830bc:	f023 0303 	bic.w	r3, r3, #3
   830c0:	f043 0302 	orr.w	r3, r3, #2
   830c4:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830c6:	6e88      	ldr	r0, [r1, #104]	; 0x68
   830c8:	f010 0008 	ands.w	r0, r0, #8
   830cc:	bf08      	it	eq
   830ce:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   830d2:	d002      	beq.n	830da <pmc_switch_mck_to_pllack+0x46>
   830d4:	e007      	b.n	830e6 <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   830d6:	3b01      	subs	r3, #1
   830d8:	d003      	beq.n	830e2 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   830dc:	0712      	lsls	r2, r2, #28
   830de:	d5fa      	bpl.n	830d6 <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   830e0:	4770      	bx	lr
			return 1;
   830e2:	2001      	movs	r0, #1
   830e4:	4770      	bx	lr
	return 0;
   830e6:	2000      	movs	r0, #0
   830e8:	4770      	bx	lr
   830ea:	bf00      	nop
   830ec:	400e0400 	.word	0x400e0400

000830f0 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   830f0:	4a07      	ldr	r2, [pc, #28]	; (83110 <pmc_osc_enable_main_xtal+0x20>)
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   830f2:	0203      	lsls	r3, r0, #8
	uint32_t mor = PMC->CKGR_MOR;
   830f4:	6a11      	ldr	r1, [r2, #32]
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   830f6:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   830f8:	f021 0103 	bic.w	r1, r1, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   830fc:	430b      	orrs	r3, r1
   830fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83102:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   83106:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83108:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8310a:	07db      	lsls	r3, r3, #31
   8310c:	d5fc      	bpl.n	83108 <pmc_osc_enable_main_xtal+0x18>
}
   8310e:	4770      	bx	lr
   83110:	400e0400 	.word	0x400e0400

00083114 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83114:	4b02      	ldr	r3, [pc, #8]	; (83120 <pmc_osc_is_ready_main_xtal+0xc>)
   83116:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83118:	f000 0001 	and.w	r0, r0, #1
   8311c:	4770      	bx	lr
   8311e:	bf00      	nop
   83120:	400e0400 	.word	0x400e0400

00083124 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83124:	4b02      	ldr	r3, [pc, #8]	; (83130 <pmc_osc_is_ready_mainck+0xc>)
   83126:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83128:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8312c:	4770      	bx	lr
   8312e:	bf00      	nop
   83130:	400e0400 	.word	0x400e0400

00083134 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   83134:	4b08      	ldr	r3, [pc, #32]	; (83158 <pmc_mainck_osc_select+0x24>)
   83136:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   83138:	b130      	cbz	r0, 83148 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8313a:	4a07      	ldr	r2, [pc, #28]	; (83158 <pmc_mainck_osc_select+0x24>)
		mor |=  CKGR_MOR_MOSCSEL;
   8313c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83140:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83144:	6213      	str	r3, [r2, #32]
}
   83146:	4770      	bx	lr
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83148:	4a03      	ldr	r2, [pc, #12]	; (83158 <pmc_mainck_osc_select+0x24>)
		mor &= ~CKGR_MOR_MOSCSEL;
   8314a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8314e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83152:	6213      	str	r3, [r2, #32]
}
   83154:	4770      	bx	lr
   83156:	bf00      	nop
   83158:	400e0400 	.word	0x400e0400

0008315c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8315c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83160:	4b01      	ldr	r3, [pc, #4]	; (83168 <pmc_disable_pllack+0xc>)
   83162:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83164:	4770      	bx	lr
   83166:	bf00      	nop
   83168:	400e0400 	.word	0x400e0400

0008316c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8316c:	4b02      	ldr	r3, [pc, #8]	; (83178 <pmc_is_locked_pllack+0xc>)
   8316e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83170:	f000 0002 	and.w	r0, r0, #2
   83174:	4770      	bx	lr
   83176:	bf00      	nop
   83178:	400e0400 	.word	0x400e0400

0008317c <pmc_disable_upll_clock>:
/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   8317c:	4a02      	ldr	r2, [pc, #8]	; (83188 <pmc_disable_upll_clock+0xc>)
   8317e:	69d3      	ldr	r3, [r2, #28]
   83180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83184:	61d3      	str	r3, [r2, #28]
}
   83186:	4770      	bx	lr
   83188:	400e0400 	.word	0x400e0400

0008318c <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8318c:	4b02      	ldr	r3, [pc, #8]	; (83198 <pmc_is_locked_upll+0xc>)
   8318e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83190:	f000 0040 	and.w	r0, r0, #64	; 0x40
   83194:	4770      	bx	lr
   83196:	bf00      	nop
   83198:	400e0400 	.word	0x400e0400

0008319c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8319c:	281d      	cmp	r0, #29
   8319e:	d80a      	bhi.n	831b6 <pmc_enable_periph_clk+0x1a>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   831a0:	2301      	movs	r3, #1
   831a2:	4a06      	ldr	r2, [pc, #24]	; (831bc <pmc_enable_periph_clk+0x20>)
   831a4:	4083      	lsls	r3, r0
   831a6:	6991      	ldr	r1, [r2, #24]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   831a8:	2000      	movs	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   831aa:	ea33 0101 	bics.w	r1, r3, r1
   831ae:	d001      	beq.n	831b4 <pmc_enable_periph_clk+0x18>
			PMC->PMC_PCER0 = 1 << ul_id;
   831b0:	6113      	str	r3, [r2, #16]
   831b2:	4770      	bx	lr
}
   831b4:	4770      	bx	lr
		return 1;
   831b6:	2001      	movs	r0, #1
   831b8:	4770      	bx	lr
   831ba:	bf00      	nop
   831bc:	400e0400 	.word	0x400e0400

000831c0 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   831c0:	281d      	cmp	r0, #29
   831c2:	d80a      	bhi.n	831da <pmc_disable_periph_clk+0x1a>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   831c4:	2301      	movs	r3, #1
   831c6:	4a06      	ldr	r2, [pc, #24]	; (831e0 <pmc_disable_periph_clk+0x20>)
   831c8:	4083      	lsls	r3, r0
   831ca:	6991      	ldr	r1, [r2, #24]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   831cc:	2000      	movs	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   831ce:	ea33 0101 	bics.w	r1, r3, r1
   831d2:	d000      	beq.n	831d6 <pmc_disable_periph_clk+0x16>
}
   831d4:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   831d6:	6153      	str	r3, [r2, #20]
   831d8:	4770      	bx	lr
		return 1;
   831da:	2001      	movs	r0, #1
   831dc:	4770      	bx	lr
   831de:	bf00      	nop
   831e0:	400e0400 	.word	0x400e0400

000831e4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   831e4:	4b03      	ldr	r3, [pc, #12]	; (831f4 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   831e6:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   831ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   831ec:	4310      	orrs	r0, r2
   831ee:	6718      	str	r0, [r3, #112]	; 0x70
}
   831f0:	4770      	bx	lr
   831f2:	bf00      	nop
   831f4:	400e0400 	.word	0x400e0400

000831f8 <pmc_enable_waitmode>:
 */
void pmc_enable_waitmode(void)
{
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   831f8:	490a      	ldr	r1, [pc, #40]	; (83224 <pmc_enable_waitmode+0x2c>)
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   831fa:	4a0b      	ldr	r2, [pc, #44]	; (83228 <pmc_enable_waitmode+0x30>)
	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   831fc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   831fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83202:	670b      	str	r3, [r1, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   83204:	6913      	ldr	r3, [r2, #16]
   83206:	f023 0304 	bic.w	r3, r3, #4
   8320a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   8320c:	bf20      	wfe
   8320e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
   83212:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   83214:	3b01      	subs	r3, #1
   83216:	d1fc      	bne.n	83212 <pmc_enable_waitmode+0x1a>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   83218:	4a02      	ldr	r2, [pc, #8]	; (83224 <pmc_enable_waitmode+0x2c>)
   8321a:	6a13      	ldr	r3, [r2, #32]
   8321c:	071b      	lsls	r3, r3, #28
   8321e:	d5fc      	bpl.n	8321a <pmc_enable_waitmode+0x22>

}
   83220:	4770      	bx	lr
   83222:	bf00      	nop
   83224:	400e0400 	.word	0x400e0400
   83228:	e000ed00 	.word	0xe000ed00

0008322c <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   8322c:	4b01      	ldr	r3, [pc, #4]	; (83234 <udi_vendor_getsetting+0x8>)
}
   8322e:	7818      	ldrb	r0, [r3, #0]
   83230:	4770      	bx	lr
   83232:	bf00      	nop
   83234:	20003700 	.word	0x20003700

00083238 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   83238:	4b02      	ldr	r3, [pc, #8]	; (83244 <udi_vendor_disable+0xc>)
   8323a:	781b      	ldrb	r3, [r3, #0]
   8323c:	b103      	cbz	r3, 83240 <udi_vendor_disable+0x8>
}
   8323e:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   83240:	4b01      	ldr	r3, [pc, #4]	; (83248 <udi_vendor_disable+0x10>)
   83242:	4718      	bx	r3
   83244:	20003700 	.word	0x20003700
   83248:	00080a01 	.word	0x00080a01

0008324c <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   8324c:	4b08      	ldr	r3, [pc, #32]	; (83270 <udi_vendor_setup+0x24>)
   8324e:	f993 2000 	ldrsb.w	r2, [r3]
   83252:	781b      	ldrb	r3, [r3, #0]
   83254:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83256:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   8325a:	db03      	blt.n	83264 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8325c:	2b40      	cmp	r3, #64	; 0x40
   8325e:	d005      	beq.n	8326c <udi_vendor_setup+0x20>
}
   83260:	2000      	movs	r0, #0
   83262:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83264:	2b40      	cmp	r3, #64	; 0x40
   83266:	d1fb      	bne.n	83260 <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83268:	4b02      	ldr	r3, [pc, #8]	; (83274 <udi_vendor_setup+0x28>)
   8326a:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8326c:	4b02      	ldr	r3, [pc, #8]	; (83278 <udi_vendor_setup+0x2c>)
   8326e:	4718      	bx	r3
   83270:	200036e0 	.word	0x200036e0
   83274:	00080a5d 	.word	0x00080a5d
   83278:	00080a0d 	.word	0x00080a0d

0008327c <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8327c:	4b06      	ldr	r3, [pc, #24]	; (83298 <udi_vendor_enable+0x1c>)
{
   8327e:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83280:	4798      	blx	r3
   83282:	4a06      	ldr	r2, [pc, #24]	; (8329c <udi_vendor_enable+0x20>)
   83284:	78c3      	ldrb	r3, [r0, #3]
   83286:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   83288:	b10b      	cbz	r3, 8328e <udi_vendor_enable+0x12>
}
   8328a:	2001      	movs	r0, #1
   8328c:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8328e:	4b04      	ldr	r3, [pc, #16]	; (832a0 <udi_vendor_enable+0x24>)
}
   83290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83294:	4718      	bx	r3
   83296:	bf00      	nop
   83298:	00080d79 	.word	0x00080d79
   8329c:	20003700 	.word	0x20003700
   832a0:	000809d9 	.word	0x000809d9

000832a4 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   832a4:	b530      	push	{r4, r5, lr}
   832a6:	4684      	mov	ip, r0
   832a8:	4615      	mov	r5, r2
   832aa:	b083      	sub	sp, #12
   832ac:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   832ae:	4662      	mov	r2, ip
   832b0:	2100      	movs	r1, #0
   832b2:	4c03      	ldr	r4, [pc, #12]	; (832c0 <udi_vendor_bulk_in_run+0x1c>)
   832b4:	9500      	str	r5, [sp, #0]
   832b6:	2081      	movs	r0, #129	; 0x81
   832b8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   832ba:	b003      	add	sp, #12
   832bc:	bd30      	pop	{r4, r5, pc}
   832be:	bf00      	nop
   832c0:	000828d9 	.word	0x000828d9

000832c4 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   832c4:	b530      	push	{r4, r5, lr}
   832c6:	4684      	mov	ip, r0
   832c8:	4615      	mov	r5, r2
   832ca:	b083      	sub	sp, #12
   832cc:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   832ce:	4662      	mov	r2, ip
   832d0:	2100      	movs	r1, #0
   832d2:	4c03      	ldr	r4, [pc, #12]	; (832e0 <udi_vendor_bulk_out_run+0x1c>)
   832d4:	9500      	str	r5, [sp, #0]
   832d6:	2002      	movs	r0, #2
   832d8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   832da:	b003      	add	sp, #12
   832dc:	bd30      	pop	{r4, r5, pc}
   832de:	bf00      	nop
   832e0:	000828d9 	.word	0x000828d9

000832e4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   832e4:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   832e6:	f1a1 030e 	sub.w	r3, r1, #14
   832ea:	2b01      	cmp	r3, #1
   832ec:	d917      	bls.n	8331e <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   832ee:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   832f2:	b672      	cpsid	i
  __ASM volatile ("dmb");
   832f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   832f8:	2300      	movs	r3, #0
   832fa:	4c0a      	ldr	r4, [pc, #40]	; (83324 <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   832fc:	b2c9      	uxtb	r1, r1
   832fe:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   83300:	4b09      	ldr	r3, [pc, #36]	; (83328 <efc_perform_command+0x44>)
   83302:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   83306:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   83308:	4b08      	ldr	r3, [pc, #32]	; (8332c <efc_perform_command+0x48>)
   8330a:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   8330e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83310:	b925      	cbnz	r5, 8331c <efc_perform_command+0x38>
		cpu_irq_enable();
   83312:	2301      	movs	r3, #1
   83314:	7023      	strb	r3, [r4, #0]
   83316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8331a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   8331c:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   8331e:	f04f 30ff 	mov.w	r0, #4294967295
}
   83322:	bd38      	pop	{r3, r4, r5, pc}
   83324:	20000368 	.word	0x20000368
   83328:	00ffff00 	.word	0x00ffff00
   8332c:	200000dd 	.word	0x200000dd

00083330 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83330:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83332:	4770      	bx	lr

00083334 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83334:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83336:	4770      	bx	lr

00083338 <pio_set_pin_high>:
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83338:	2201      	movs	r2, #1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8333a:	0943      	lsrs	r3, r0, #5
   8333c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83340:	f203 7306 	addw	r3, r3, #1798	; 0x706
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83344:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83348:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8334a:	fa02 f000 	lsl.w	r0, r2, r0
   8334e:	6318      	str	r0, [r3, #48]	; 0x30
}
   83350:	4770      	bx	lr
   83352:	bf00      	nop

00083354 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83354:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83356:	0943      	lsrs	r3, r0, #5
   83358:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8335c:	f203 7306 	addw	r3, r3, #1798	; 0x706
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83360:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83364:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83366:	fa02 f000 	lsl.w	r0, r2, r0
   8336a:	6358      	str	r0, [r3, #52]	; 0x34
}
   8336c:	4770      	bx	lr
   8336e:	bf00      	nop

00083370 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83370:	0943      	lsrs	r3, r0, #5
   83372:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   83376:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8337a:	f203 7306 	addw	r3, r3, #1798	; 0x706
	switch (ul_flags & PIO_TYPE_Msk) {
   8337e:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83382:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83386:	d035      	beq.n	833f4 <pio_configure_pin+0x84>
{
   83388:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   8338a:	d816      	bhi.n	833ba <pio_configure_pin+0x4a>
   8338c:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   83390:	d01b      	beq.n	833ca <pio_configure_pin+0x5a>
   83392:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   83396:	d115      	bne.n	833c4 <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83398:	f04f 0c01 	mov.w	ip, #1
   8339c:	f000 001f 	and.w	r0, r0, #31
   833a0:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   833a4:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   833a6:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   833a8:	4310      	orrs	r0, r2
   833aa:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   833ac:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   833b0:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   833b2:	d01b      	beq.n	833ec <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   833b4:	665a      	str	r2, [r3, #100]	; 0x64
}
   833b6:	bc10      	pop	{r4}
   833b8:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   833ba:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   833be:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   833c2:	d02f      	beq.n	83424 <pio_configure_pin+0xb4>
   833c4:	2000      	movs	r0, #0
}
   833c6:	bc10      	pop	{r4}
   833c8:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   833ca:	f04f 0c01 	mov.w	ip, #1
   833ce:	f000 001f 	and.w	r0, r0, #31
   833d2:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   833d6:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   833d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   833da:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   833dc:	4020      	ands	r0, r4
   833de:	ea20 0002 	bic.w	r0, r0, r2
   833e2:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   833e4:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   833e8:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   833ea:	d1e3      	bne.n	833b4 <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   833ec:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   833ee:	4660      	mov	r0, ip
}
   833f0:	bc10      	pop	{r4}
   833f2:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   833f4:	2201      	movs	r2, #1
   833f6:	f000 001f 	and.w	r0, r0, #31
   833fa:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   833fc:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   833fe:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83400:	bf4c      	ite	mi
   83402:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83404:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83406:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   8340a:	bf14      	ite	ne
   8340c:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   8340e:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83410:	0788      	lsls	r0, r1, #30
   83412:	d422      	bmi.n	8345a <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   83414:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   83416:	bf48      	it	mi
   83418:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   8341c:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8341e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83420:	601a      	str	r2, [r3, #0]
}
   83422:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83424:	2201      	movs	r2, #1
   83426:	f000 001f 	and.w	r0, r0, #31
   8342a:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8342c:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83430:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   83434:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   83436:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83438:	bf4c      	ite	mi
   8343a:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8343c:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   8343e:	b954      	cbnz	r4, 83456 <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   83440:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   83442:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   83446:	bf0c      	ite	eq
   83448:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8344a:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8344c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8344e:	601a      	str	r2, [r3, #0]
	return 1;
   83450:	2001      	movs	r0, #1
}
   83452:	bc10      	pop	{r4}
   83454:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   83456:	651a      	str	r2, [r3, #80]	; 0x50
   83458:	e7f3      	b.n	83442 <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   8345a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   8345e:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83460:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83462:	601a      	str	r2, [r3, #0]
}
   83464:	4770      	bx	lr
   83466:	bf00      	nop

00083468 <pio_configure_pin_group>:
{
   83468:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   8346a:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   8346e:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   83472:	d029      	beq.n	834c8 <pio_configure_pin_group+0x60>
{
   83474:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   83476:	d810      	bhi.n	8349a <pio_configure_pin_group+0x32>
   83478:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   8347c:	d015      	beq.n	834aa <pio_configure_pin_group+0x42>
   8347e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   83482:	d10f      	bne.n	834a4 <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   83484:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83486:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83488:	4308      	orrs	r0, r1
   8348a:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   8348c:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   83490:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   83492:	d015      	beq.n	834c0 <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   83494:	6659      	str	r1, [r3, #100]	; 0x64
}
   83496:	bc10      	pop	{r4}
   83498:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   8349a:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   8349e:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   834a2:	d025      	beq.n	834f0 <pio_configure_pin_group+0x88>
   834a4:	2000      	movs	r0, #0
}
   834a6:	bc10      	pop	{r4}
   834a8:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   834aa:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   834ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   834ae:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   834b0:	4020      	ands	r0, r4
   834b2:	ea20 0001 	bic.w	r0, r0, r1
   834b6:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   834b8:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   834bc:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   834be:	d1e9      	bne.n	83494 <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   834c0:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   834c2:	2001      	movs	r0, #1
}
   834c4:	bc10      	pop	{r4}
   834c6:	4770      	bx	lr
	if (ul_pull_up_enable) {
   834c8:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   834ca:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   834cc:	bf4c      	ite	mi
   834ce:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   834d0:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   834d2:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   834d6:	bf14      	ite	ne
   834d8:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   834da:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   834dc:	0790      	lsls	r0, r2, #30
   834de:	d41e      	bmi.n	8351e <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   834e0:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   834e2:	bf48      	it	mi
   834e4:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   834e8:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   834ea:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   834ec:	6019      	str	r1, [r3, #0]
}
   834ee:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   834f0:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   834f4:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   834f8:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   834fa:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   834fc:	bf4c      	ite	mi
   834fe:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83500:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   83502:	b954      	cbnz	r4, 8351a <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   83504:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   83506:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   8350a:	bf0c      	ite	eq
   8350c:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8350e:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   83510:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83512:	6019      	str	r1, [r3, #0]
	return 1;
   83514:	2001      	movs	r0, #1
}
   83516:	bc10      	pop	{r4}
   83518:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   8351a:	6519      	str	r1, [r3, #80]	; 0x50
   8351c:	e7f3      	b.n	83506 <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   8351e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   83522:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83524:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83526:	6019      	str	r1, [r3, #0]
}
   83528:	4770      	bx	lr
   8352a:	bf00      	nop

0008352c <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   8352c:	e7fe      	b.n	8352c <Dummy_Handler>
   8352e:	bf00      	nop

00083530 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   83530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (sleep_mode) {
   83534:	2804      	cmp	r0, #4
{
   83536:	4604      	mov	r4, r0
   83538:	b083      	sub	sp, #12
	switch (sleep_mode) {
   8353a:	dc1b      	bgt.n	83574 <pmc_sleep+0x44>
   8353c:	2802      	cmp	r0, #2
   8353e:	dc28      	bgt.n	83592 <pmc_sleep+0x62>
   83540:	1e43      	subs	r3, r0, #1
   83542:	2b01      	cmp	r3, #1
   83544:	d813      	bhi.n	8356e <pmc_sleep+0x3e>
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
   83546:	2001      	movs	r0, #1
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   83548:	4985      	ldr	r1, [pc, #532]	; (83760 <pmc_sleep+0x230>)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   8354a:	4a86      	ldr	r2, [pc, #536]	; (83764 <pmc_sleep+0x234>)
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   8354c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   8354e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   83552:	670b      	str	r3, [r1, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   83554:	6913      	ldr	r3, [r2, #16]
		cpu_irq_enable();
   83556:	4984      	ldr	r1, [pc, #528]	; (83768 <pmc_sleep+0x238>)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   83558:	f023 0304 	bic.w	r3, r3, #4
   8355c:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   8355e:	7008      	strb	r0, [r1, #0]
   83560:	f3bf 8f5f 	dmb	sy
   83564:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   83566:	2c02      	cmp	r4, #2
   83568:	f000 80cf 	beq.w	8370a <pmc_sleep+0x1da>
  __ASM volatile ("wfe");
   8356c:	bf20      	wfe
		__WFE() ;
#endif
		break;
#endif
	}
}
   8356e:	b003      	add	sp, #12
   83570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (sleep_mode) {
   83574:	2805      	cmp	r0, #5
   83576:	d1fa      	bne.n	8356e <pmc_sleep+0x3e>
		cpu_irq_enable();
   83578:	2001      	movs	r0, #1
		SCB->SCR |= SCR_SLEEPDEEP;
   8357a:	4a7a      	ldr	r2, [pc, #488]	; (83764 <pmc_sleep+0x234>)
		cpu_irq_enable();
   8357c:	497a      	ldr	r1, [pc, #488]	; (83768 <pmc_sleep+0x238>)
		SCB->SCR |= SCR_SLEEPDEEP;
   8357e:	6913      	ldr	r3, [r2, #16]
   83580:	f043 0304 	orr.w	r3, r3, #4
   83584:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   83586:	7008      	strb	r0, [r1, #0]
  __ASM volatile ("dmb");
   83588:	f3bf 8f5f 	dmb	sy
   8358c:	b662      	cpsie	i
  __ASM volatile ("wfe");
   8358e:	bf20      	wfe
   83590:	e7ed      	b.n	8356e <pmc_sleep+0x3e>
  __ASM volatile ("cpsid i");
   83592:	b672      	cpsid	i
  __ASM volatile ("dmb");
   83594:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83598:	2600      	movs	r6, #0
		b_is_sleep_clock_used = true;
   8359a:	2201      	movs	r2, #1
		cpu_irq_disable();
   8359c:	4d72      	ldr	r5, [pc, #456]	; (83768 <pmc_sleep+0x238>)
		b_is_sleep_clock_used = true;
   8359e:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8376c <pmc_sleep+0x23c>
	uint32_t mor  = PMC->CKGR_MOR;
   835a2:	4b6f      	ldr	r3, [pc, #444]	; (83760 <pmc_sleep+0x230>)
		cpu_irq_disable();
   835a4:	702e      	strb	r6, [r5, #0]
		b_is_sleep_clock_used = true;
   835a6:	f888 2000 	strb.w	r2, [r8]
	uint32_t mor  = PMC->CKGR_MOR;
   835aa:	6a1f      	ldr	r7, [r3, #32]
	uint32_t fmr1 = EFC1->EEFC_FMR;
   835ac:	4970      	ldr	r1, [pc, #448]	; (83770 <pmc_sleep+0x240>)
	uint32_t fmr  = EFC0->EEFC_FMR;
   835ae:	4871      	ldr	r0, [pc, #452]	; (83774 <pmc_sleep+0x244>)
	uint32_t mckr = PMC->PMC_MCKR;
   835b0:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
   835b4:	f8d0 a000 	ldr.w	sl, [r0]
	uint32_t fmr1 = EFC1->EEFC_FMR;
   835b8:	f8d1 9000 	ldr.w	r9, [r1]
		*p_pll0_setting = PMC->CKGR_PLLAR;
   835bc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   835be:	f447 115c 	orr.w	r1, r7, #3604480	; 0x370000
		*p_pll1_setting = PMC->CKGR_UCKR;
   835c2:	69da      	ldr	r2, [r3, #28]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   835c4:	f041 0108 	orr.w	r1, r1, #8
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   835c8:	f01b 0f02 	tst.w	fp, #2
		*p_pll1_setting = PMC->CKGR_UCKR;
   835cc:	9201      	str	r2, [sp, #4]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   835ce:	6219      	str	r1, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   835d0:	f040 8092 	bne.w	836f8 <pmc_sleep+0x1c8>
   835d4:	4658      	mov	r0, fp
	if (mckr & PMC_MCKR_PRES_Msk) {
   835d6:	f010 0f70 	tst.w	r0, #112	; 0x70
   835da:	d006      	beq.n	835ea <pmc_sleep+0xba>
		PMC->PMC_MCKR = mckr;
   835dc:	4960      	ldr	r1, [pc, #384]	; (83760 <pmc_sleep+0x230>)
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   835de:	f020 0070 	bic.w	r0, r0, #112	; 0x70
		PMC->PMC_MCKR = mckr;
   835e2:	6308      	str	r0, [r1, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   835e4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   835e6:	071b      	lsls	r3, r3, #28
   835e8:	d5fc      	bpl.n	835e4 <pmc_sleep+0xb4>
	pmc_disable_pllack();
   835ea:	4b63      	ldr	r3, [pc, #396]	; (83778 <pmc_sleep+0x248>)
   835ec:	4798      	blx	r3
	pmc_disable_upll_clock();
   835ee:	4b63      	ldr	r3, [pc, #396]	; (8377c <pmc_sleep+0x24c>)
   835f0:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   835f2:	495b      	ldr	r1, [pc, #364]	; (83760 <pmc_sleep+0x230>)
   835f4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   835f6:	0398      	lsls	r0, r3, #14
   835f8:	d5fc      	bpl.n	835f4 <pmc_sleep+0xc4>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   835fa:	6a0b      	ldr	r3, [r1, #32]
   835fc:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83604:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83608:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8360a:	4955      	ldr	r1, [pc, #340]	; (83760 <pmc_sleep+0x230>)
   8360c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8360e:	03da      	lsls	r2, r3, #15
   83610:	d5fc      	bpl.n	8360c <pmc_sleep+0xdc>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   83612:	4858      	ldr	r0, [pc, #352]	; (83774 <pmc_sleep+0x244>)
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   83614:	4b56      	ldr	r3, [pc, #344]	; (83770 <pmc_sleep+0x240>)
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   83616:	f42a 6270 	bic.w	r2, sl, #3840	; 0xf00
   8361a:	6002      	str	r2, [r0, #0]
	if (disable_xtal) {
   8361c:	2c04      	cmp	r4, #4
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   8361e:	f429 6070 	bic.w	r0, r9, #3840	; 0xf00
   83622:	6018      	str	r0, [r3, #0]
	if (disable_xtal) {
   83624:	d107      	bne.n	83636 <pmc_sleep+0x106>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83626:	6a0b      	ldr	r3, [r1, #32]
   83628:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8362c:	f023 0301 	bic.w	r3, r3, #1
   83630:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83634:	620b      	str	r3, [r1, #32]
		cpu_irq_enable();
   83636:	2301      	movs	r3, #1
   83638:	702b      	strb	r3, [r5, #0]
   8363a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8363e:	b662      	cpsie	i
		pmc_enable_waitmode();
   83640:	4b4f      	ldr	r3, [pc, #316]	; (83780 <pmc_sleep+0x250>)
   83642:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   83644:	b672      	cpsid	i
   83646:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   8364a:	2300      	movs	r3, #0
   8364c:	702b      	strb	r3, [r5, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   8364e:	07bb      	lsls	r3, r7, #30
   83650:	d55f      	bpl.n	83712 <pmc_sleep+0x1e2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83652:	4943      	ldr	r1, [pc, #268]	; (83760 <pmc_sleep+0x230>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83654:	484b      	ldr	r0, [pc, #300]	; (83784 <pmc_sleep+0x254>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83656:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83658:	4018      	ands	r0, r3
   8365a:	4b4b      	ldr	r3, [pc, #300]	; (83788 <pmc_sleep+0x258>)
   8365c:	4303      	orrs	r3, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8365e:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83660:	6a0b      	ldr	r3, [r1, #32]
					| CKGR_MOR_KEY_PASSWD;
   83662:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83666:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8366a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8366e:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   83670:	4946      	ldr	r1, [pc, #280]	; (8378c <pmc_sleep+0x25c>)
   83672:	4031      	ands	r1, r6
   83674:	2900      	cmp	r1, #0
   83676:	d04a      	beq.n	8370e <pmc_sleep+0x1de>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   83678:	4b39      	ldr	r3, [pc, #228]	; (83760 <pmc_sleep+0x230>)
   8367a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
   8367e:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   83680:	2102      	movs	r1, #2
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   83682:	2342      	movs	r3, #66	; 0x42
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   83684:	9a01      	ldr	r2, [sp, #4]
   83686:	03d7      	lsls	r7, r2, #15
   83688:	d502      	bpl.n	83690 <pmc_sleep+0x160>
		pll_sr |= PMC_SR_LOCKU;
   8368a:	4619      	mov	r1, r3
		PMC->CKGR_UCKR = pll1_setting;
   8368c:	4b34      	ldr	r3, [pc, #208]	; (83760 <pmc_sleep+0x230>)
   8368e:	61da      	str	r2, [r3, #28]
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   83690:	f00b 0303 	and.w	r3, fp, #3
   83694:	2b02      	cmp	r3, #2
   83696:	d05e      	beq.n	83756 <pmc_sleep+0x226>
   83698:	2b03      	cmp	r3, #3
   8369a:	d103      	bne.n	836a4 <pmc_sleep+0x174>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8369c:	4830      	ldr	r0, [pc, #192]	; (83760 <pmc_sleep+0x230>)
   8369e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   836a0:	065c      	lsls	r4, r3, #25
   836a2:	d5fc      	bpl.n	8369e <pmc_sleep+0x16e>
	mckr = PMC->PMC_MCKR;
   836a4:	482e      	ldr	r0, [pc, #184]	; (83760 <pmc_sleep+0x230>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   836a6:	f00b 0370 	and.w	r3, fp, #112	; 0x70
	mckr = PMC->PMC_MCKR;
   836aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   836ac:	f024 0470 	bic.w	r4, r4, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   836b0:	4323      	orrs	r3, r4
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   836b2:	6303      	str	r3, [r0, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   836b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   836b6:	071a      	lsls	r2, r3, #28
   836b8:	d5fc      	bpl.n	836b4 <pmc_sleep+0x184>
	EFC0->EEFC_FMR = fmr_setting;
   836ba:	4b2e      	ldr	r3, [pc, #184]	; (83774 <pmc_sleep+0x244>)
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   836bc:	4a28      	ldr	r2, [pc, #160]	; (83760 <pmc_sleep+0x230>)
	EFC0->EEFC_FMR = fmr_setting;
   836be:	f8c3 a000 	str.w	sl, [r3]
	EFC1->EEFC_FMR = fmr_setting1;
   836c2:	f8c3 9200 	str.w	r9, [r3, #512]	; 0x200
	PMC->PMC_MCKR = mck_setting;
   836c6:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   836ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
   836cc:	071b      	lsls	r3, r3, #28
   836ce:	d5fc      	bpl.n	836ca <pmc_sleep+0x19a>
	while (!(PMC->PMC_SR & pll_sr));
   836d0:	4a23      	ldr	r2, [pc, #140]	; (83760 <pmc_sleep+0x230>)
   836d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   836d4:	420b      	tst	r3, r1
   836d6:	d0fc      	beq.n	836d2 <pmc_sleep+0x1a2>
		b_is_sleep_clock_used = false;
   836d8:	2600      	movs	r6, #0
		if (callback_clocks_restored) {
   836da:	4c2d      	ldr	r4, [pc, #180]	; (83790 <pmc_sleep+0x260>)
		b_is_sleep_clock_used = false;
   836dc:	f888 6000 	strb.w	r6, [r8]
		if (callback_clocks_restored) {
   836e0:	6823      	ldr	r3, [r4, #0]
   836e2:	b10b      	cbz	r3, 836e8 <pmc_sleep+0x1b8>
			callback_clocks_restored();
   836e4:	4798      	blx	r3
			callback_clocks_restored = NULL;
   836e6:	6026      	str	r6, [r4, #0]
		cpu_irq_enable();
   836e8:	2301      	movs	r3, #1
   836ea:	702b      	strb	r3, [r5, #0]
   836ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   836f0:	b662      	cpsie	i
}
   836f2:	b003      	add	sp, #12
   836f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   836f8:	f02b 0003 	bic.w	r0, fp, #3
   836fc:	f040 0001 	orr.w	r0, r0, #1
		PMC->PMC_MCKR = mckr;
   83700:	6318      	str	r0, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83702:	6e99      	ldr	r1, [r3, #104]	; 0x68
   83704:	070a      	lsls	r2, r1, #28
   83706:	d5fc      	bpl.n	83702 <pmc_sleep+0x1d2>
   83708:	e765      	b.n	835d6 <pmc_sleep+0xa6>
  __ASM volatile ("wfi");
   8370a:	bf30      	wfi
}
   8370c:	e72f      	b.n	8356e <pmc_sleep+0x3e>
   8370e:	2340      	movs	r3, #64	; 0x40
   83710:	e7b8      	b.n	83684 <pmc_sleep+0x154>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   83712:	07ff      	lsls	r7, r7, #31
   83714:	d5ac      	bpl.n	83670 <pmc_sleep+0x140>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   83716:	4912      	ldr	r1, [pc, #72]	; (83760 <pmc_sleep+0x230>)
   83718:	6a0b      	ldr	r3, [r1, #32]
   8371a:	07dc      	lsls	r4, r3, #31
   8371c:	d40c      	bmi.n	83738 <pmc_sleep+0x208>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8371e:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83720:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83724:	f023 0303 	bic.w	r3, r3, #3
   83728:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8372c:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83730:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83732:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   83734:	07da      	lsls	r2, r3, #31
   83736:	d5fc      	bpl.n	83732 <pmc_sleep+0x202>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   83738:	4909      	ldr	r1, [pc, #36]	; (83760 <pmc_sleep+0x230>)
   8373a:	6a0b      	ldr	r3, [r1, #32]
   8373c:	01d8      	lsls	r0, r3, #7
   8373e:	d408      	bmi.n	83752 <pmc_sleep+0x222>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83740:	6a0b      	ldr	r3, [r1, #32]
   83742:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8374a:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8374c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8374e:	03db      	lsls	r3, r3, #15
   83750:	d5fc      	bpl.n	8374c <pmc_sleep+0x21c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83752:	4903      	ldr	r1, [pc, #12]	; (83760 <pmc_sleep+0x230>)
   83754:	e784      	b.n	83660 <pmc_sleep+0x130>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   83756:	4802      	ldr	r0, [pc, #8]	; (83760 <pmc_sleep+0x230>)
   83758:	6e83      	ldr	r3, [r0, #104]	; 0x68
   8375a:	079e      	lsls	r6, r3, #30
   8375c:	d5fc      	bpl.n	83758 <pmc_sleep+0x228>
   8375e:	e7a1      	b.n	836a4 <pmc_sleep+0x174>
   83760:	400e0400 	.word	0x400e0400
   83764:	e000ed00 	.word	0xe000ed00
   83768:	20000368 	.word	0x20000368
   8376c:	20003701 	.word	0x20003701
   83770:	400e0a00 	.word	0x400e0a00
   83774:	400e0800 	.word	0x400e0800
   83778:	0008315d 	.word	0x0008315d
   8377c:	0008317d 	.word	0x0008317d
   83780:	000831f9 	.word	0x000831f9
   83784:	fec8fffc 	.word	0xfec8fffc
   83788:	01370002 	.word	0x01370002
   8378c:	07ff0000 	.word	0x07ff0000
   83790:	20003704 	.word	0x20003704

00083794 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83794:	4b02      	ldr	r3, [pc, #8]	; (837a0 <pmc_is_wakeup_clocks_restored+0xc>)
   83796:	7818      	ldrb	r0, [r3, #0]
}
   83798:	f080 0001 	eor.w	r0, r0, #1
   8379c:	4770      	bx	lr
   8379e:	bf00      	nop
   837a0:	20003701 	.word	0x20003701

000837a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   837a4:	4a0c      	ldr	r2, [pc, #48]	; (837d8 <_sbrk+0x34>)
{
   837a6:	4603      	mov	r3, r0
	if (heap == NULL) {
   837a8:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   837aa:	490c      	ldr	r1, [pc, #48]	; (837dc <_sbrk+0x38>)
	if (heap == NULL) {
   837ac:	b130      	cbz	r0, 837bc <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   837ae:	4403      	add	r3, r0
   837b0:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   837b2:	bfcc      	ite	gt
   837b4:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   837b8:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   837ba:	4770      	bx	lr
{
   837bc:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   837be:	4c08      	ldr	r4, [pc, #32]	; (837e0 <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   837c0:	4423      	add	r3, r4
   837c2:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   837c4:	6014      	str	r4, [r2, #0]
	heap += incr;
   837c6:	bfd8      	it	le
   837c8:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   837ca:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   837cc:	bfc8      	it	gt
   837ce:	f04f 30ff 	movgt.w	r0, #4294967295
}
   837d2:	bc10      	pop	{r4}
   837d4:	4770      	bx	lr
   837d6:	bf00      	nop
   837d8:	20003708 	.word	0x20003708
   837dc:	20083ffc 	.word	0x20083ffc
   837e0:	20084000 	.word	0x20084000

000837e4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   837e4:	f04f 30ff 	mov.w	r0, #4294967295
   837e8:	4770      	bx	lr
   837ea:	bf00      	nop

000837ec <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   837ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   837f0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   837f2:	604b      	str	r3, [r1, #4]
}
   837f4:	4770      	bx	lr
   837f6:	bf00      	nop

000837f8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   837f8:	2001      	movs	r0, #1
   837fa:	4770      	bx	lr

000837fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   837fc:	2000      	movs	r0, #0
   837fe:	4770      	bx	lr

00083800 <_exit>:

extern void _exit(int status)
{
   83800:	4601      	mov	r1, r0
   83802:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
   83804:	4801      	ldr	r0, [pc, #4]	; (8380c <_exit+0xc>)
   83806:	4b02      	ldr	r3, [pc, #8]	; (83810 <_exit+0x10>)
   83808:	4798      	blx	r3

	for (;;);
   8380a:	e7fe      	b.n	8380a <_exit+0xa>
   8380c:	0008abbc 	.word	0x0008abbc
   83810:	00083b79 	.word	0x00083b79

00083814 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   83814:	4770      	bx	lr
   83816:	bf00      	nop

00083818 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   83818:	f04f 30ff 	mov.w	r0, #4294967295
   8381c:	4770      	bx	lr
   8381e:	bf00      	nop

00083820 <uart_init>:
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   83820:	23ac      	movs	r3, #172	; 0xac
   83822:	6003      	str	r3, [r0, #0]
{
   83824:	4602      	mov	r2, r0
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   83826:	e9d1 3000 	ldrd	r3, r0, [r1]
   8382a:	fbb3 f3f0 	udiv	r3, r3, r0
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8382e:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   83832:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   83834:	1e58      	subs	r0, r3, #1
   83836:	4560      	cmp	r0, ip
   83838:	d80c      	bhi.n	83854 <uart_init+0x34>
{
   8383a:	b430      	push	{r4, r5}
	p_uart->UART_BRGR = cd;
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8383c:	f240 2502 	movw	r5, #514	; 0x202

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   83840:	2450      	movs	r4, #80	; 0x50
	p_uart->UART_BRGR = cd;
   83842:	6213      	str	r3, [r2, #32]
	p_uart->UART_MR = p_uart_opt->ul_mode;
   83844:	688b      	ldr	r3, [r1, #8]

	return 0;
   83846:	2000      	movs	r0, #0
	p_uart->UART_MR = p_uart_opt->ul_mode;
   83848:	6053      	str	r3, [r2, #4]
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8384a:	f8c2 5120 	str.w	r5, [r2, #288]	; 0x120
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8384e:	6014      	str	r4, [r2, #0]
}
   83850:	bc30      	pop	{r4, r5}
   83852:	4770      	bx	lr
		return 1;
   83854:	2001      	movs	r0, #1
}
   83856:	4770      	bx	lr

00083858 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   83858:	4603      	mov	r3, r0
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8385a:	6942      	ldr	r2, [r0, #20]
   8385c:	0792      	lsls	r2, r2, #30
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
   8385e:	bf46      	itte	mi
   83860:	2000      	movmi	r0, #0
	p_uart->UART_THR = uc_data;
   83862:	61d9      	strmi	r1, [r3, #28]
		return 1;
   83864:	2001      	movpl	r0, #1
}
   83866:	4770      	bx	lr

00083868 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   83868:	6943      	ldr	r3, [r0, #20]
   8386a:	07db      	lsls	r3, r3, #31
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8386c:	bf43      	ittte	mi
   8386e:	6983      	ldrmi	r3, [r0, #24]
	return 0;
   83870:	2000      	movmi	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
   83872:	700b      	strbmi	r3, [r1, #0]
		return 1;
   83874:	2001      	movpl	r0, #1
}
   83876:	4770      	bx	lr

00083878 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8387c:	4b13      	ldr	r3, [pc, #76]	; (838cc <board_init+0x54>)
{
   8387e:	b570      	push	{r4, r5, r6, lr}
   83880:	200a      	movs	r0, #10
	WDT->WDT_MR = WDT_MR_WDDIS;
   83882:	655a      	str	r2, [r3, #84]	; 0x54
   83884:	4d12      	ldr	r5, [pc, #72]	; (838d0 <board_init+0x58>)
   83886:	47a8      	blx	r5
   83888:	200b      	movs	r0, #11
   8388a:	47a8      	blx	r5
   8388c:	200c      	movs	r0, #12
   8388e:	47a8      	blx	r5
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83890:	4c10      	ldr	r4, [pc, #64]	; (838d4 <board_init+0x5c>)
   83892:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83896:	2011      	movs	r0, #17
   83898:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8389a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8389e:	2010      	movs	r0, #16
   838a0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   838a2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   838a6:	204c      	movs	r0, #76	; 0x4c
   838a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   838aa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   838ae:	2053      	movs	r0, #83	; 0x53
   838b0:	47a0      	blx	r4
	board_sram_pwron();
   838b2:	2053      	movs	r0, #83	; 0x53
   838b4:	4b08      	ldr	r3, [pc, #32]	; (838d8 <board_init+0x60>)
   838b6:	4798      	blx	r3
	 */
	ioport_init();

	iopins_normal();

}
   838b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   838bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   838c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   838c4:	4805      	ldr	r0, [pc, #20]	; (838dc <board_init+0x64>)
   838c6:	4b06      	ldr	r3, [pc, #24]	; (838e0 <board_init+0x68>)
   838c8:	4718      	bx	r3
   838ca:	bf00      	nop
   838cc:	400e1200 	.word	0x400e1200
   838d0:	0008319d 	.word	0x0008319d
   838d4:	00083371 	.word	0x00083371
   838d8:	00083355 	.word	0x00083355
   838dc:	400e0c00 	.word	0x400e0c00
   838e0:	00083469 	.word	0x00083469

000838e4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   838e4:	4b0c      	ldr	r3, [pc, #48]	; (83918 <cpu_irq_enter_critical+0x34>)
   838e6:	681a      	ldr	r2, [r3, #0]
   838e8:	b922      	cbnz	r2, 838f4 <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   838ea:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   838ee:	b129      	cbz	r1, 838fc <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   838f0:	490a      	ldr	r1, [pc, #40]	; (8391c <cpu_irq_enter_critical+0x38>)
   838f2:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   838f4:	681a      	ldr	r2, [r3, #0]
   838f6:	3201      	adds	r2, #1
   838f8:	601a      	str	r2, [r3, #0]
   838fa:	4770      	bx	lr
{
   838fc:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   838fe:	b672      	cpsid	i
  __ASM volatile ("dmb");
   83900:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   83904:	2001      	movs	r0, #1
			cpu_irq_disable();
   83906:	4c06      	ldr	r4, [pc, #24]	; (83920 <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   83908:	4a04      	ldr	r2, [pc, #16]	; (8391c <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   8390a:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   8390c:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   8390e:	681a      	ldr	r2, [r3, #0]
   83910:	3201      	adds	r2, #1
   83912:	601a      	str	r2, [r3, #0]
}
   83914:	bc10      	pop	{r4}
   83916:	4770      	bx	lr
   83918:	2000370c 	.word	0x2000370c
   8391c:	20003710 	.word	0x20003710
   83920:	20000368 	.word	0x20000368

00083924 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   83924:	4b07      	ldr	r3, [pc, #28]	; (83944 <cpu_irq_leave_critical+0x20>)
   83926:	681a      	ldr	r2, [r3, #0]
   83928:	3a01      	subs	r2, #1
   8392a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8392c:	681b      	ldr	r3, [r3, #0]
   8392e:	b943      	cbnz	r3, 83942 <cpu_irq_leave_critical+0x1e>
   83930:	4b05      	ldr	r3, [pc, #20]	; (83948 <cpu_irq_leave_critical+0x24>)
   83932:	781b      	ldrb	r3, [r3, #0]
   83934:	b12b      	cbz	r3, 83942 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   83936:	2201      	movs	r2, #1
   83938:	4b04      	ldr	r3, [pc, #16]	; (8394c <cpu_irq_leave_critical+0x28>)
   8393a:	701a      	strb	r2, [r3, #0]
   8393c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83940:	b662      	cpsie	i
	}
}
   83942:	4770      	bx	lr
   83944:	2000370c 	.word	0x2000370c
   83948:	20003710 	.word	0x20003710
   8394c:	20000368 	.word	0x20000368

00083950 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   83950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   83954:	b9a0      	cbnz	r0, 83980 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   83956:	2a00      	cmp	r2, #0
   83958:	4690      	mov	r8, r2
   8395a:	dd0d      	ble.n	83978 <_read+0x28>
   8395c:	460c      	mov	r4, r1
   8395e:	4f0a      	ldr	r7, [pc, #40]	; (83988 <_read+0x38>)
   83960:	4e0a      	ldr	r6, [pc, #40]	; (8398c <_read+0x3c>)
   83962:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   83964:	4621      	mov	r1, r4
   83966:	6838      	ldr	r0, [r7, #0]
   83968:	6833      	ldr	r3, [r6, #0]
		ptr++;
   8396a:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   8396c:	4798      	blx	r3
	for (; len > 0; --len) {
   8396e:	42ac      	cmp	r4, r5
   83970:	d1f8      	bne.n	83964 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   83972:	4640      	mov	r0, r8
   83974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   83978:	4680      	mov	r8, r0
}
   8397a:	4640      	mov	r0, r8
   8397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83980:	f04f 38ff 	mov.w	r8, #4294967295
   83984:	e7f5      	b.n	83972 <_read+0x22>
   83986:	bf00      	nop
   83988:	200036fc 	.word	0x200036fc
   8398c:	20003714 	.word	0x20003714

00083990 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83990:	4a32      	ldr	r2, [pc, #200]	; (83a5c <SystemCoreClockUpdate+0xcc>)
   83992:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83994:	f003 0303 	and.w	r3, r3, #3
   83998:	2b01      	cmp	r3, #1
   8399a:	d04a      	beq.n	83a32 <SystemCoreClockUpdate+0xa2>
   8399c:	3b02      	subs	r3, #2
   8399e:	2b01      	cmp	r3, #1
   839a0:	d83d      	bhi.n	83a1e <SystemCoreClockUpdate+0x8e>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   839a2:	6a13      	ldr	r3, [r2, #32]
   839a4:	01d9      	lsls	r1, r3, #7
   839a6:	d41d      	bmi.n	839e4 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   839a8:	6a12      	ldr	r2, [r2, #32]
   839aa:	f002 0270 	and.w	r2, r2, #112	; 0x70
   839ae:	2a10      	cmp	r2, #16
   839b0:	d04f      	beq.n	83a52 <SystemCoreClockUpdate+0xc2>
   839b2:	492b      	ldr	r1, [pc, #172]	; (83a60 <SystemCoreClockUpdate+0xd0>)
   839b4:	4b2b      	ldr	r3, [pc, #172]	; (83a64 <SystemCoreClockUpdate+0xd4>)
   839b6:	2a20      	cmp	r2, #32
   839b8:	bf18      	it	ne
   839ba:	460b      	movne	r3, r1
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   839bc:	4927      	ldr	r1, [pc, #156]	; (83a5c <SystemCoreClockUpdate+0xcc>)
   839be:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   839c0:	f002 0203 	and.w	r2, r2, #3
   839c4:	2a02      	cmp	r2, #2
   839c6:	d014      	beq.n	839f2 <SystemCoreClockUpdate+0x62>
   839c8:	4b27      	ldr	r3, [pc, #156]	; (83a68 <SystemCoreClockUpdate+0xd8>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   839ca:	4924      	ldr	r1, [pc, #144]	; (83a5c <SystemCoreClockUpdate+0xcc>)
   839cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   839ce:	f002 0270 	and.w	r2, r2, #112	; 0x70
   839d2:	2a70      	cmp	r2, #112	; 0x70
   839d4:	d01c      	beq.n	83a10 <SystemCoreClockUpdate+0x80>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   839d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   839d8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   839dc:	40d3      	lsrs	r3, r2
   839de:	4a23      	ldr	r2, [pc, #140]	; (83a6c <SystemCoreClockUpdate+0xdc>)
   839e0:	6013      	str	r3, [r2, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   839e2:	4770      	bx	lr
   839e4:	4b1f      	ldr	r3, [pc, #124]	; (83a64 <SystemCoreClockUpdate+0xd4>)
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   839e6:	491d      	ldr	r1, [pc, #116]	; (83a5c <SystemCoreClockUpdate+0xcc>)
   839e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   839ea:	f002 0203 	and.w	r2, r2, #3
   839ee:	2a02      	cmp	r2, #2
   839f0:	d1ea      	bne.n	839c8 <SystemCoreClockUpdate+0x38>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   839f2:	6a88      	ldr	r0, [r1, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   839f4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   839f6:	f3c0 410a 	ubfx	r1, r0, #16, #11
   839fa:	fb01 3303 	mla	r3, r1, r3, r3
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   839fe:	4917      	ldr	r1, [pc, #92]	; (83a5c <SystemCoreClockUpdate+0xcc>)
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   83a00:	b2d2      	uxtb	r2, r2
   83a02:	fbb3 f3f2 	udiv	r3, r3, r2
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83a06:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   83a08:	f002 0270 	and.w	r2, r2, #112	; 0x70
   83a0c:	2a70      	cmp	r2, #112	; 0x70
   83a0e:	d1e2      	bne.n	839d6 <SystemCoreClockUpdate+0x46>
		SystemCoreClock /= 3U;
   83a10:	4a17      	ldr	r2, [pc, #92]	; (83a70 <SystemCoreClockUpdate+0xe0>)
   83a12:	fba2 2303 	umull	r2, r3, r2, r3
   83a16:	4a15      	ldr	r2, [pc, #84]	; (83a6c <SystemCoreClockUpdate+0xdc>)
   83a18:	085b      	lsrs	r3, r3, #1
   83a1a:	6013      	str	r3, [r2, #0]
}
   83a1c:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83a1e:	4b15      	ldr	r3, [pc, #84]	; (83a74 <SystemCoreClockUpdate+0xe4>)
   83a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83a22:	f013 0f80 	tst.w	r3, #128	; 0x80
   83a26:	bf0c      	ite	eq
   83a28:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   83a2c:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   83a30:	e7cb      	b.n	839ca <SystemCoreClockUpdate+0x3a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83a32:	6a13      	ldr	r3, [r2, #32]
   83a34:	01db      	lsls	r3, r3, #7
   83a36:	d40a      	bmi.n	83a4e <SystemCoreClockUpdate+0xbe>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83a38:	6a12      	ldr	r2, [r2, #32]
   83a3a:	f002 0270 	and.w	r2, r2, #112	; 0x70
   83a3e:	2a10      	cmp	r2, #16
   83a40:	d009      	beq.n	83a56 <SystemCoreClockUpdate+0xc6>
   83a42:	4b08      	ldr	r3, [pc, #32]	; (83a64 <SystemCoreClockUpdate+0xd4>)
   83a44:	4906      	ldr	r1, [pc, #24]	; (83a60 <SystemCoreClockUpdate+0xd0>)
   83a46:	2a20      	cmp	r2, #32
   83a48:	bf18      	it	ne
   83a4a:	460b      	movne	r3, r1
   83a4c:	e7bd      	b.n	839ca <SystemCoreClockUpdate+0x3a>
   83a4e:	4b05      	ldr	r3, [pc, #20]	; (83a64 <SystemCoreClockUpdate+0xd4>)
   83a50:	e7bb      	b.n	839ca <SystemCoreClockUpdate+0x3a>
   83a52:	4b09      	ldr	r3, [pc, #36]	; (83a78 <SystemCoreClockUpdate+0xe8>)
   83a54:	e7c7      	b.n	839e6 <SystemCoreClockUpdate+0x56>
   83a56:	4b08      	ldr	r3, [pc, #32]	; (83a78 <SystemCoreClockUpdate+0xe8>)
   83a58:	e7b7      	b.n	839ca <SystemCoreClockUpdate+0x3a>
   83a5a:	bf00      	nop
   83a5c:	400e0400 	.word	0x400e0400
   83a60:	003d0900 	.word	0x003d0900
   83a64:	00b71b00 	.word	0x00b71b00
   83a68:	0e4e1c00 	.word	0x0e4e1c00
   83a6c:	200003f8 	.word	0x200003f8
   83a70:	aaaaaaab 	.word	0xaaaaaaab
   83a74:	400e1200 	.word	0x400e1200
   83a78:	007a1200 	.word	0x007a1200

00083a7c <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   83a7c:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   83a7e:	2011      	movs	r0, #17
   83a80:	4c04      	ldr	r4, [pc, #16]	; (83a94 <ui_init+0x18>)
   83a82:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   83a84:	2010      	movs	r0, #16
   83a86:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   83a88:	4623      	mov	r3, r4
}
   83a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LED_Off(LED2_GPIO);
   83a8e:	204c      	movs	r0, #76	; 0x4c
   83a90:	4718      	bx	r3
   83a92:	bf00      	nop
   83a94:	00082ecd 	.word	0x00082ecd

00083a98 <ui_powerdown>:

void ui_powerdown(void)
{
   83a98:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   83a9a:	2011      	movs	r0, #17
   83a9c:	4c05      	ldr	r4, [pc, #20]	; (83ab4 <ui_powerdown+0x1c>)
   83a9e:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   83aa0:	2010      	movs	r0, #16
   83aa2:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   83aa4:	204c      	movs	r0, #76	; 0x4c
   83aa6:	47a0      	blx	r4
	
	// Power off FPGA
	board_sram_pwroff();
		
}
   83aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	board_sram_pwroff();
   83aac:	2053      	movs	r0, #83	; 0x53
   83aae:	4b02      	ldr	r3, [pc, #8]	; (83ab8 <ui_powerdown+0x20>)
   83ab0:	4718      	bx	r3
   83ab2:	bf00      	nop
   83ab4:	00082ecd 	.word	0x00082ecd
   83ab8:	00083339 	.word	0x00083339

00083abc <ui_wakeup>:

void ui_wakeup(void)
{
   83abc:	b510      	push	{r4, lr}
	LED_On(LED0_GPIO);
   83abe:	2011      	movs	r0, #17
   83ac0:	4b03      	ldr	r3, [pc, #12]	; (83ad0 <ui_wakeup+0x14>)
   83ac2:	4798      	blx	r3
	board_sram_pwron();
}
   83ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	board_sram_pwron();
   83ac8:	2053      	movs	r0, #83	; 0x53
   83aca:	4b02      	ldr	r3, [pc, #8]	; (83ad4 <ui_wakeup+0x18>)
   83acc:	4718      	bx	r3
   83ace:	bf00      	nop
   83ad0:	00082ee5 	.word	0x00082ee5
   83ad4:	00083355 	.word	0x00083355

00083ad8 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if ((framenumber % 1000) == 0) {
   83ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83adc:	4b11      	ldr	r3, [pc, #68]	; (83b24 <ui_process+0x4c>)
{
   83ade:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
   83ae0:	fba3 2300 	umull	r2, r3, r3, r0
   83ae4:	099b      	lsrs	r3, r3, #6
   83ae6:	fb01 0313 	mls	r3, r1, r3, r0
   83aea:	b29b      	uxth	r3, r3
{
   83aec:	4604      	mov	r4, r0
	if ((framenumber % 1000) == 0) {
   83aee:	b1ab      	cbz	r3, 83b1c <ui_process+0x44>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   83af0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83af4:	d003      	beq.n	83afe <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
	
	if ((framenumber % 512) == 0) {
   83af6:	f3c4 0408 	ubfx	r4, r4, #0, #9
   83afa:	b13c      	cbz	r4, 83b0c <ui_process+0x34>
		LED_Off(LED1_GPIO);
		LED_Off(LED2_GPIO);
	}
}
   83afc:	bd10      	pop	{r4, pc}
		LED_Off(LED0_GPIO);
   83afe:	2011      	movs	r0, #17
   83b00:	4b09      	ldr	r3, [pc, #36]	; (83b28 <ui_process+0x50>)
	if ((framenumber % 512) == 0) {
   83b02:	f3c4 0408 	ubfx	r4, r4, #0, #9
		LED_Off(LED0_GPIO);
   83b06:	4798      	blx	r3
	if ((framenumber % 512) == 0) {
   83b08:	2c00      	cmp	r4, #0
   83b0a:	d1f7      	bne.n	83afc <ui_process+0x24>
		LED_Off(LED1_GPIO);
   83b0c:	4c06      	ldr	r4, [pc, #24]	; (83b28 <ui_process+0x50>)
   83b0e:	2010      	movs	r0, #16
   83b10:	47a0      	blx	r4
		LED_Off(LED2_GPIO);
   83b12:	4623      	mov	r3, r4
}
   83b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LED_Off(LED2_GPIO);
   83b18:	204c      	movs	r0, #76	; 0x4c
   83b1a:	4718      	bx	r3
		LED_On(LED0_GPIO);
   83b1c:	2011      	movs	r0, #17
   83b1e:	4b03      	ldr	r3, [pc, #12]	; (83b2c <ui_process+0x54>)
   83b20:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   83b22:	e7e8      	b.n	83af6 <ui_process+0x1e>
   83b24:	10624dd3 	.word	0x10624dd3
   83b28:	00082ecd 	.word	0x00082ecd
   83b2c:	00082ee5 	.word	0x00082ee5

00083b30 <__libc_init_array>:
   83b30:	b570      	push	{r4, r5, r6, lr}
   83b32:	4e0d      	ldr	r6, [pc, #52]	; (83b68 <__libc_init_array+0x38>)
   83b34:	4d0d      	ldr	r5, [pc, #52]	; (83b6c <__libc_init_array+0x3c>)
   83b36:	1b76      	subs	r6, r6, r5
   83b38:	10b6      	asrs	r6, r6, #2
   83b3a:	d006      	beq.n	83b4a <__libc_init_array+0x1a>
   83b3c:	2400      	movs	r4, #0
   83b3e:	f855 3b04 	ldr.w	r3, [r5], #4
   83b42:	3401      	adds	r4, #1
   83b44:	4798      	blx	r3
   83b46:	42a6      	cmp	r6, r4
   83b48:	d1f9      	bne.n	83b3e <__libc_init_array+0xe>
   83b4a:	4e09      	ldr	r6, [pc, #36]	; (83b70 <__libc_init_array+0x40>)
   83b4c:	4d09      	ldr	r5, [pc, #36]	; (83b74 <__libc_init_array+0x44>)
   83b4e:	f007 fa43 	bl	8afd8 <_init>
   83b52:	1b76      	subs	r6, r6, r5
   83b54:	10b6      	asrs	r6, r6, #2
   83b56:	d006      	beq.n	83b66 <__libc_init_array+0x36>
   83b58:	2400      	movs	r4, #0
   83b5a:	f855 3b04 	ldr.w	r3, [r5], #4
   83b5e:	3401      	adds	r4, #1
   83b60:	4798      	blx	r3
   83b62:	42a6      	cmp	r6, r4
   83b64:	d1f9      	bne.n	83b5a <__libc_init_array+0x2a>
   83b66:	bd70      	pop	{r4, r5, r6, pc}
   83b68:	0008afe4 	.word	0x0008afe4
   83b6c:	0008afe4 	.word	0x0008afe4
   83b70:	0008afec 	.word	0x0008afec
   83b74:	0008afe4 	.word	0x0008afe4

00083b78 <iprintf>:
   83b78:	b40f      	push	{r0, r1, r2, r3}
   83b7a:	b500      	push	{lr}
   83b7c:	4a07      	ldr	r2, [pc, #28]	; (83b9c <iprintf+0x24>)
   83b7e:	b083      	sub	sp, #12
   83b80:	ab04      	add	r3, sp, #16
   83b82:	6810      	ldr	r0, [r2, #0]
   83b84:	f853 2b04 	ldr.w	r2, [r3], #4
   83b88:	6881      	ldr	r1, [r0, #8]
   83b8a:	9301      	str	r3, [sp, #4]
   83b8c:	f001 ffc2 	bl	85b14 <_vfiprintf_r>
   83b90:	b003      	add	sp, #12
   83b92:	f85d eb04 	ldr.w	lr, [sp], #4
   83b96:	b004      	add	sp, #16
   83b98:	4770      	bx	lr
   83b9a:	bf00      	nop
   83b9c:	200003fc 	.word	0x200003fc

00083ba0 <memcpy>:
   83ba0:	4684      	mov	ip, r0
   83ba2:	ea41 0300 	orr.w	r3, r1, r0
   83ba6:	f013 0303 	ands.w	r3, r3, #3
   83baa:	d149      	bne.n	83c40 <memcpy+0xa0>
   83bac:	3a40      	subs	r2, #64	; 0x40
   83bae:	d323      	bcc.n	83bf8 <memcpy+0x58>
   83bb0:	680b      	ldr	r3, [r1, #0]
   83bb2:	6003      	str	r3, [r0, #0]
   83bb4:	684b      	ldr	r3, [r1, #4]
   83bb6:	6043      	str	r3, [r0, #4]
   83bb8:	688b      	ldr	r3, [r1, #8]
   83bba:	6083      	str	r3, [r0, #8]
   83bbc:	68cb      	ldr	r3, [r1, #12]
   83bbe:	60c3      	str	r3, [r0, #12]
   83bc0:	690b      	ldr	r3, [r1, #16]
   83bc2:	6103      	str	r3, [r0, #16]
   83bc4:	694b      	ldr	r3, [r1, #20]
   83bc6:	6143      	str	r3, [r0, #20]
   83bc8:	698b      	ldr	r3, [r1, #24]
   83bca:	6183      	str	r3, [r0, #24]
   83bcc:	69cb      	ldr	r3, [r1, #28]
   83bce:	61c3      	str	r3, [r0, #28]
   83bd0:	6a0b      	ldr	r3, [r1, #32]
   83bd2:	6203      	str	r3, [r0, #32]
   83bd4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83bd6:	6243      	str	r3, [r0, #36]	; 0x24
   83bd8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83bda:	6283      	str	r3, [r0, #40]	; 0x28
   83bdc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83bde:	62c3      	str	r3, [r0, #44]	; 0x2c
   83be0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83be2:	6303      	str	r3, [r0, #48]	; 0x30
   83be4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83be6:	6343      	str	r3, [r0, #52]	; 0x34
   83be8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83bea:	6383      	str	r3, [r0, #56]	; 0x38
   83bec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83bee:	63c3      	str	r3, [r0, #60]	; 0x3c
   83bf0:	3040      	adds	r0, #64	; 0x40
   83bf2:	3140      	adds	r1, #64	; 0x40
   83bf4:	3a40      	subs	r2, #64	; 0x40
   83bf6:	d2db      	bcs.n	83bb0 <memcpy+0x10>
   83bf8:	3230      	adds	r2, #48	; 0x30
   83bfa:	d30b      	bcc.n	83c14 <memcpy+0x74>
   83bfc:	680b      	ldr	r3, [r1, #0]
   83bfe:	6003      	str	r3, [r0, #0]
   83c00:	684b      	ldr	r3, [r1, #4]
   83c02:	6043      	str	r3, [r0, #4]
   83c04:	688b      	ldr	r3, [r1, #8]
   83c06:	6083      	str	r3, [r0, #8]
   83c08:	68cb      	ldr	r3, [r1, #12]
   83c0a:	60c3      	str	r3, [r0, #12]
   83c0c:	3010      	adds	r0, #16
   83c0e:	3110      	adds	r1, #16
   83c10:	3a10      	subs	r2, #16
   83c12:	d2f3      	bcs.n	83bfc <memcpy+0x5c>
   83c14:	320c      	adds	r2, #12
   83c16:	d305      	bcc.n	83c24 <memcpy+0x84>
   83c18:	f851 3b04 	ldr.w	r3, [r1], #4
   83c1c:	f840 3b04 	str.w	r3, [r0], #4
   83c20:	3a04      	subs	r2, #4
   83c22:	d2f9      	bcs.n	83c18 <memcpy+0x78>
   83c24:	3204      	adds	r2, #4
   83c26:	d008      	beq.n	83c3a <memcpy+0x9a>
   83c28:	07d2      	lsls	r2, r2, #31
   83c2a:	bf1c      	itt	ne
   83c2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83c30:	f800 3b01 	strbne.w	r3, [r0], #1
   83c34:	d301      	bcc.n	83c3a <memcpy+0x9a>
   83c36:	880b      	ldrh	r3, [r1, #0]
   83c38:	8003      	strh	r3, [r0, #0]
   83c3a:	4660      	mov	r0, ip
   83c3c:	4770      	bx	lr
   83c3e:	bf00      	nop
   83c40:	2a08      	cmp	r2, #8
   83c42:	d313      	bcc.n	83c6c <memcpy+0xcc>
   83c44:	078b      	lsls	r3, r1, #30
   83c46:	d0b1      	beq.n	83bac <memcpy+0xc>
   83c48:	f010 0303 	ands.w	r3, r0, #3
   83c4c:	d0ae      	beq.n	83bac <memcpy+0xc>
   83c4e:	f1c3 0304 	rsb	r3, r3, #4
   83c52:	1ad2      	subs	r2, r2, r3
   83c54:	07db      	lsls	r3, r3, #31
   83c56:	bf1c      	itt	ne
   83c58:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83c5c:	f800 3b01 	strbne.w	r3, [r0], #1
   83c60:	d3a4      	bcc.n	83bac <memcpy+0xc>
   83c62:	f831 3b02 	ldrh.w	r3, [r1], #2
   83c66:	f820 3b02 	strh.w	r3, [r0], #2
   83c6a:	e79f      	b.n	83bac <memcpy+0xc>
   83c6c:	3a04      	subs	r2, #4
   83c6e:	d3d9      	bcc.n	83c24 <memcpy+0x84>
   83c70:	3a01      	subs	r2, #1
   83c72:	f811 3b01 	ldrb.w	r3, [r1], #1
   83c76:	f800 3b01 	strb.w	r3, [r0], #1
   83c7a:	d2f9      	bcs.n	83c70 <memcpy+0xd0>
   83c7c:	780b      	ldrb	r3, [r1, #0]
   83c7e:	7003      	strb	r3, [r0, #0]
   83c80:	784b      	ldrb	r3, [r1, #1]
   83c82:	7043      	strb	r3, [r0, #1]
   83c84:	788b      	ldrb	r3, [r1, #2]
   83c86:	7083      	strb	r3, [r0, #2]
   83c88:	4660      	mov	r0, ip
   83c8a:	4770      	bx	lr

00083c8c <memset>:
   83c8c:	0783      	lsls	r3, r0, #30
   83c8e:	b530      	push	{r4, r5, lr}
   83c90:	d048      	beq.n	83d24 <memset+0x98>
   83c92:	1e54      	subs	r4, r2, #1
   83c94:	2a00      	cmp	r2, #0
   83c96:	d03f      	beq.n	83d18 <memset+0x8c>
   83c98:	4603      	mov	r3, r0
   83c9a:	b2ca      	uxtb	r2, r1
   83c9c:	e001      	b.n	83ca2 <memset+0x16>
   83c9e:	3c01      	subs	r4, #1
   83ca0:	d33a      	bcc.n	83d18 <memset+0x8c>
   83ca2:	f803 2b01 	strb.w	r2, [r3], #1
   83ca6:	079d      	lsls	r5, r3, #30
   83ca8:	d1f9      	bne.n	83c9e <memset+0x12>
   83caa:	2c03      	cmp	r4, #3
   83cac:	d92d      	bls.n	83d0a <memset+0x7e>
   83cae:	b2cd      	uxtb	r5, r1
   83cb0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83cb4:	2c0f      	cmp	r4, #15
   83cb6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83cba:	d936      	bls.n	83d2a <memset+0x9e>
   83cbc:	f1a4 0210 	sub.w	r2, r4, #16
   83cc0:	f022 0c0f 	bic.w	ip, r2, #15
   83cc4:	f103 0e20 	add.w	lr, r3, #32
   83cc8:	44e6      	add	lr, ip
   83cca:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   83cce:	f103 0210 	add.w	r2, r3, #16
   83cd2:	e942 5504 	strd	r5, r5, [r2, #-16]
   83cd6:	e942 5502 	strd	r5, r5, [r2, #-8]
   83cda:	3210      	adds	r2, #16
   83cdc:	4572      	cmp	r2, lr
   83cde:	d1f8      	bne.n	83cd2 <memset+0x46>
   83ce0:	f10c 0201 	add.w	r2, ip, #1
   83ce4:	f014 0f0c 	tst.w	r4, #12
   83ce8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   83cec:	f004 0c0f 	and.w	ip, r4, #15
   83cf0:	d013      	beq.n	83d1a <memset+0x8e>
   83cf2:	f1ac 0304 	sub.w	r3, ip, #4
   83cf6:	f023 0303 	bic.w	r3, r3, #3
   83cfa:	3304      	adds	r3, #4
   83cfc:	4413      	add	r3, r2
   83cfe:	f842 5b04 	str.w	r5, [r2], #4
   83d02:	4293      	cmp	r3, r2
   83d04:	d1fb      	bne.n	83cfe <memset+0x72>
   83d06:	f00c 0403 	and.w	r4, ip, #3
   83d0a:	b12c      	cbz	r4, 83d18 <memset+0x8c>
   83d0c:	b2ca      	uxtb	r2, r1
   83d0e:	441c      	add	r4, r3
   83d10:	f803 2b01 	strb.w	r2, [r3], #1
   83d14:	429c      	cmp	r4, r3
   83d16:	d1fb      	bne.n	83d10 <memset+0x84>
   83d18:	bd30      	pop	{r4, r5, pc}
   83d1a:	4664      	mov	r4, ip
   83d1c:	4613      	mov	r3, r2
   83d1e:	2c00      	cmp	r4, #0
   83d20:	d1f4      	bne.n	83d0c <memset+0x80>
   83d22:	e7f9      	b.n	83d18 <memset+0x8c>
   83d24:	4603      	mov	r3, r0
   83d26:	4614      	mov	r4, r2
   83d28:	e7bf      	b.n	83caa <memset+0x1e>
   83d2a:	461a      	mov	r2, r3
   83d2c:	46a4      	mov	ip, r4
   83d2e:	e7e0      	b.n	83cf2 <memset+0x66>

00083d30 <setbuf>:
   83d30:	2900      	cmp	r1, #0
   83d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83d36:	bf0c      	ite	eq
   83d38:	2202      	moveq	r2, #2
   83d3a:	2200      	movne	r2, #0
   83d3c:	f000 b800 	b.w	83d40 <setvbuf>

00083d40 <setvbuf>:
   83d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83d44:	4c69      	ldr	r4, [pc, #420]	; (83eec <setvbuf+0x1ac>)
   83d46:	460e      	mov	r6, r1
   83d48:	f8d4 8000 	ldr.w	r8, [r4]
   83d4c:	4617      	mov	r7, r2
   83d4e:	4604      	mov	r4, r0
   83d50:	461d      	mov	r5, r3
   83d52:	b083      	sub	sp, #12
   83d54:	f1b8 0f00 	cmp.w	r8, #0
   83d58:	d003      	beq.n	83d62 <setvbuf+0x22>
   83d5a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   83d5e:	2b00      	cmp	r3, #0
   83d60:	d077      	beq.n	83e52 <setvbuf+0x112>
   83d62:	2f02      	cmp	r7, #2
   83d64:	d005      	beq.n	83d72 <setvbuf+0x32>
   83d66:	2f01      	cmp	r7, #1
   83d68:	f200 80ac 	bhi.w	83ec4 <setvbuf+0x184>
   83d6c:	2d00      	cmp	r5, #0
   83d6e:	f2c0 80a9 	blt.w	83ec4 <setvbuf+0x184>
   83d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83d74:	07da      	lsls	r2, r3, #31
   83d76:	d552      	bpl.n	83e1e <setvbuf+0xde>
   83d78:	4621      	mov	r1, r4
   83d7a:	4640      	mov	r0, r8
   83d7c:	f003 fee0 	bl	87b40 <_fflush_r>
   83d80:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83d82:	b141      	cbz	r1, 83d96 <setvbuf+0x56>
   83d84:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83d88:	4299      	cmp	r1, r3
   83d8a:	d002      	beq.n	83d92 <setvbuf+0x52>
   83d8c:	4640      	mov	r0, r8
   83d8e:	f004 f887 	bl	87ea0 <_free_r>
   83d92:	2300      	movs	r3, #0
   83d94:	6323      	str	r3, [r4, #48]	; 0x30
   83d96:	2300      	movs	r3, #0
   83d98:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   83d9c:	61a3      	str	r3, [r4, #24]
   83d9e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   83da2:	6063      	str	r3, [r4, #4]
   83da4:	d164      	bne.n	83e70 <setvbuf+0x130>
   83da6:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   83daa:	f02c 0c03 	bic.w	ip, ip, #3
   83dae:	2f02      	cmp	r7, #2
   83db0:	f8a4 c00c 	strh.w	ip, [r4, #12]
   83db4:	d06a      	beq.n	83e8c <setvbuf+0x14c>
   83db6:	ab01      	add	r3, sp, #4
   83db8:	4621      	mov	r1, r4
   83dba:	4640      	mov	r0, r8
   83dbc:	466a      	mov	r2, sp
   83dbe:	f004 fb8d 	bl	884dc <__swhatbuf_r>
   83dc2:	89a3      	ldrh	r3, [r4, #12]
   83dc4:	4318      	orrs	r0, r3
   83dc6:	81a0      	strh	r0, [r4, #12]
   83dc8:	2d00      	cmp	r5, #0
   83dca:	d02f      	beq.n	83e2c <setvbuf+0xec>
   83dcc:	2e00      	cmp	r6, #0
   83dce:	d02e      	beq.n	83e2e <setvbuf+0xee>
   83dd0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   83dd4:	2b00      	cmp	r3, #0
   83dd6:	d038      	beq.n	83e4a <setvbuf+0x10a>
   83dd8:	9b00      	ldr	r3, [sp, #0]
   83dda:	e9c4 6504 	strd	r6, r5, [r4, #16]
   83dde:	42ab      	cmp	r3, r5
   83de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83de4:	6026      	str	r6, [r4, #0]
   83de6:	bf1c      	itt	ne
   83de8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   83dec:	81a3      	strhne	r3, [r4, #12]
   83dee:	2f01      	cmp	r7, #1
   83df0:	bf04      	itt	eq
   83df2:	f043 0301 	orreq.w	r3, r3, #1
   83df6:	81a3      	strheq	r3, [r4, #12]
   83df8:	b29a      	uxth	r2, r3
   83dfa:	f013 0308 	ands.w	r3, r3, #8
   83dfe:	d02c      	beq.n	83e5a <setvbuf+0x11a>
   83e00:	07d1      	lsls	r1, r2, #31
   83e02:	d55d      	bpl.n	83ec0 <setvbuf+0x180>
   83e04:	2100      	movs	r1, #0
   83e06:	426d      	negs	r5, r5
   83e08:	61a5      	str	r5, [r4, #24]
   83e0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83e0c:	60a1      	str	r1, [r4, #8]
   83e0e:	f015 0501 	ands.w	r5, r5, #1
   83e12:	d027      	beq.n	83e64 <setvbuf+0x124>
   83e14:	2500      	movs	r5, #0
   83e16:	4628      	mov	r0, r5
   83e18:	b003      	add	sp, #12
   83e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83e1e:	89a3      	ldrh	r3, [r4, #12]
   83e20:	059b      	lsls	r3, r3, #22
   83e22:	d4a9      	bmi.n	83d78 <setvbuf+0x38>
   83e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e26:	f004 fae5 	bl	883f4 <__retarget_lock_acquire_recursive>
   83e2a:	e7a5      	b.n	83d78 <setvbuf+0x38>
   83e2c:	9d00      	ldr	r5, [sp, #0]
   83e2e:	4628      	mov	r0, r5
   83e30:	f004 fb84 	bl	8853c <malloc>
   83e34:	4606      	mov	r6, r0
   83e36:	2800      	cmp	r0, #0
   83e38:	d047      	beq.n	83eca <setvbuf+0x18a>
   83e3a:	89a3      	ldrh	r3, [r4, #12]
   83e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83e40:	81a3      	strh	r3, [r4, #12]
   83e42:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   83e46:	2b00      	cmp	r3, #0
   83e48:	d1c6      	bne.n	83dd8 <setvbuf+0x98>
   83e4a:	4640      	mov	r0, r8
   83e4c:	f003 feac 	bl	87ba8 <__sinit>
   83e50:	e7c2      	b.n	83dd8 <setvbuf+0x98>
   83e52:	4640      	mov	r0, r8
   83e54:	f003 fea8 	bl	87ba8 <__sinit>
   83e58:	e783      	b.n	83d62 <setvbuf+0x22>
   83e5a:	60a3      	str	r3, [r4, #8]
   83e5c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83e5e:	f015 0501 	ands.w	r5, r5, #1
   83e62:	d1d7      	bne.n	83e14 <setvbuf+0xd4>
   83e64:	0593      	lsls	r3, r2, #22
   83e66:	d524      	bpl.n	83eb2 <setvbuf+0x172>
   83e68:	4628      	mov	r0, r5
   83e6a:	b003      	add	sp, #12
   83e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83e70:	4640      	mov	r0, r8
   83e72:	6921      	ldr	r1, [r4, #16]
   83e74:	f004 f814 	bl	87ea0 <_free_r>
   83e78:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   83e7c:	2f02      	cmp	r7, #2
   83e7e:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   83e82:	f02c 0c03 	bic.w	ip, ip, #3
   83e86:	f8a4 c00c 	strh.w	ip, [r4, #12]
   83e8a:	d194      	bne.n	83db6 <setvbuf+0x76>
   83e8c:	2500      	movs	r5, #0
   83e8e:	2100      	movs	r1, #0
   83e90:	2201      	movs	r2, #1
   83e92:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83e96:	6023      	str	r3, [r4, #0]
   83e98:	6123      	str	r3, [r4, #16]
   83e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e9c:	f04c 0c02 	orr.w	ip, ip, #2
   83ea0:	07d8      	lsls	r0, r3, #31
   83ea2:	f8a4 c00c 	strh.w	ip, [r4, #12]
   83ea6:	60a1      	str	r1, [r4, #8]
   83ea8:	6162      	str	r2, [r4, #20]
   83eaa:	d4dd      	bmi.n	83e68 <setvbuf+0x128>
   83eac:	f41c 7f00 	tst.w	ip, #512	; 0x200
   83eb0:	d1da      	bne.n	83e68 <setvbuf+0x128>
   83eb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83eb4:	f004 faa0 	bl	883f8 <__retarget_lock_release_recursive>
   83eb8:	4628      	mov	r0, r5
   83eba:	b003      	add	sp, #12
   83ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83ec0:	60a5      	str	r5, [r4, #8]
   83ec2:	e7cb      	b.n	83e5c <setvbuf+0x11c>
   83ec4:	f04f 35ff 	mov.w	r5, #4294967295
   83ec8:	e7ce      	b.n	83e68 <setvbuf+0x128>
   83eca:	f8dd 9000 	ldr.w	r9, [sp]
   83ece:	45a9      	cmp	r9, r5
   83ed0:	d004      	beq.n	83edc <setvbuf+0x19c>
   83ed2:	4648      	mov	r0, r9
   83ed4:	f004 fb32 	bl	8853c <malloc>
   83ed8:	4606      	mov	r6, r0
   83eda:	b920      	cbnz	r0, 83ee6 <setvbuf+0x1a6>
   83edc:	f04f 35ff 	mov.w	r5, #4294967295
   83ee0:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   83ee4:	e7d3      	b.n	83e8e <setvbuf+0x14e>
   83ee6:	464d      	mov	r5, r9
   83ee8:	e7a7      	b.n	83e3a <setvbuf+0xfa>
   83eea:	bf00      	nop
   83eec:	200003fc 	.word	0x200003fc

00083ef0 <sprintf>:
   83ef0:	b40e      	push	{r1, r2, r3}
   83ef2:	b530      	push	{r4, r5, lr}
   83ef4:	4604      	mov	r4, r0
   83ef6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   83efa:	b09c      	sub	sp, #112	; 0x70
   83efc:	4a0b      	ldr	r2, [pc, #44]	; (83f2c <sprintf+0x3c>)
   83efe:	ab1f      	add	r3, sp, #124	; 0x7c
   83f00:	490b      	ldr	r1, [pc, #44]	; (83f30 <sprintf+0x40>)
   83f02:	9205      	str	r2, [sp, #20]
   83f04:	f853 2b04 	ldr.w	r2, [r3], #4
   83f08:	6808      	ldr	r0, [r1, #0]
   83f0a:	a902      	add	r1, sp, #8
   83f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   83f10:	9507      	str	r5, [sp, #28]
   83f12:	9504      	str	r5, [sp, #16]
   83f14:	9406      	str	r4, [sp, #24]
   83f16:	f000 f86f 	bl	83ff8 <_svfprintf_r>
   83f1a:	2200      	movs	r2, #0
   83f1c:	9b02      	ldr	r3, [sp, #8]
   83f1e:	701a      	strb	r2, [r3, #0]
   83f20:	b01c      	add	sp, #112	; 0x70
   83f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   83f26:	b003      	add	sp, #12
   83f28:	4770      	bx	lr
   83f2a:	bf00      	nop
   83f2c:	ffff0208 	.word	0xffff0208
   83f30:	200003fc 	.word	0x200003fc

00083f34 <strlen>:
   83f34:	f020 0103 	bic.w	r1, r0, #3
   83f38:	f010 0003 	ands.w	r0, r0, #3
   83f3c:	f1c0 0000 	rsb	r0, r0, #0
   83f40:	f851 3b04 	ldr.w	r3, [r1], #4
   83f44:	f100 0c04 	add.w	ip, r0, #4
   83f48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83f4c:	f06f 0200 	mvn.w	r2, #0
   83f50:	bf1c      	itt	ne
   83f52:	fa22 f20c 	lsrne.w	r2, r2, ip
   83f56:	4313      	orrne	r3, r2
   83f58:	f04f 0c01 	mov.w	ip, #1
   83f5c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83f60:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83f64:	eba3 020c 	sub.w	r2, r3, ip
   83f68:	ea22 0203 	bic.w	r2, r2, r3
   83f6c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83f70:	bf04      	itt	eq
   83f72:	f851 3b04 	ldreq.w	r3, [r1], #4
   83f76:	3004      	addeq	r0, #4
   83f78:	d0f4      	beq.n	83f64 <strlen+0x30>
   83f7a:	f1c2 0100 	rsb	r1, r2, #0
   83f7e:	ea02 0201 	and.w	r2, r2, r1
   83f82:	fab2 f282 	clz	r2, r2
   83f86:	f1c2 021f 	rsb	r2, r2, #31
   83f8a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83f8e:	4770      	bx	lr

00083f90 <strncpy>:
   83f90:	b530      	push	{r4, r5, lr}
   83f92:	ea40 0401 	orr.w	r4, r0, r1
   83f96:	07a3      	lsls	r3, r4, #30
   83f98:	d122      	bne.n	83fe0 <strncpy+0x50>
   83f9a:	2a03      	cmp	r2, #3
   83f9c:	d920      	bls.n	83fe0 <strncpy+0x50>
   83f9e:	460b      	mov	r3, r1
   83fa0:	4684      	mov	ip, r0
   83fa2:	4619      	mov	r1, r3
   83fa4:	f853 5b04 	ldr.w	r5, [r3], #4
   83fa8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   83fac:	ea24 0405 	bic.w	r4, r4, r5
   83fb0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   83fb4:	d115      	bne.n	83fe2 <strncpy+0x52>
   83fb6:	3a04      	subs	r2, #4
   83fb8:	2a03      	cmp	r2, #3
   83fba:	4619      	mov	r1, r3
   83fbc:	f84c 5b04 	str.w	r5, [ip], #4
   83fc0:	d8ef      	bhi.n	83fa2 <strncpy+0x12>
   83fc2:	f101 3eff 	add.w	lr, r1, #4294967295
   83fc6:	b152      	cbz	r2, 83fde <strncpy+0x4e>
   83fc8:	4663      	mov	r3, ip
   83fca:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   83fce:	1e54      	subs	r4, r2, #1
   83fd0:	f803 1b01 	strb.w	r1, [r3], #1
   83fd4:	b141      	cbz	r1, 83fe8 <strncpy+0x58>
   83fd6:	4622      	mov	r2, r4
   83fd8:	469c      	mov	ip, r3
   83fda:	2a00      	cmp	r2, #0
   83fdc:	d1f4      	bne.n	83fc8 <strncpy+0x38>
   83fde:	bd30      	pop	{r4, r5, pc}
   83fe0:	4684      	mov	ip, r0
   83fe2:	f101 3eff 	add.w	lr, r1, #4294967295
   83fe6:	e7ee      	b.n	83fc6 <strncpy+0x36>
   83fe8:	4462      	add	r2, ip
   83fea:	2c00      	cmp	r4, #0
   83fec:	d0f7      	beq.n	83fde <strncpy+0x4e>
   83fee:	f803 1b01 	strb.w	r1, [r3], #1
   83ff2:	4293      	cmp	r3, r2
   83ff4:	d1fb      	bne.n	83fee <strncpy+0x5e>
   83ff6:	bd30      	pop	{r4, r5, pc}

00083ff8 <_svfprintf_r>:
   83ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ffc:	b0d5      	sub	sp, #340	; 0x154
   83ffe:	460c      	mov	r4, r1
   84000:	910c      	str	r1, [sp, #48]	; 0x30
   84002:	4691      	mov	r9, r2
   84004:	930e      	str	r3, [sp, #56]	; 0x38
   84006:	900a      	str	r0, [sp, #40]	; 0x28
   84008:	f004 f9ec 	bl	883e4 <_localeconv_r>
   8400c:	6803      	ldr	r3, [r0, #0]
   8400e:	4618      	mov	r0, r3
   84010:	9317      	str	r3, [sp, #92]	; 0x5c
   84012:	f7ff ff8f 	bl	83f34 <strlen>
   84016:	89a3      	ldrh	r3, [r4, #12]
   84018:	9016      	str	r0, [sp, #88]	; 0x58
   8401a:	0619      	lsls	r1, r3, #24
   8401c:	d503      	bpl.n	84026 <_svfprintf_r+0x2e>
   8401e:	6923      	ldr	r3, [r4, #16]
   84020:	2b00      	cmp	r3, #0
   84022:	f000 878f 	beq.w	84f44 <_svfprintf_r+0xf4c>
   84026:	2400      	movs	r4, #0
   84028:	ab2b      	add	r3, sp, #172	; 0xac
   8402a:	4622      	mov	r2, r4
   8402c:	4698      	mov	r8, r3
   8402e:	464d      	mov	r5, r9
   84030:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   84034:	9328      	str	r3, [sp, #160]	; 0xa0
   84036:	9412      	str	r4, [sp, #72]	; 0x48
   84038:	2300      	movs	r3, #0
   8403a:	2400      	movs	r4, #0
   8403c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   84040:	782b      	ldrb	r3, [r5, #0]
   84042:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   84046:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   8404a:	9218      	str	r2, [sp, #96]	; 0x60
   8404c:	9208      	str	r2, [sp, #32]
   8404e:	2b00      	cmp	r3, #0
   84050:	f000 81ce 	beq.w	843f0 <_svfprintf_r+0x3f8>
   84054:	46aa      	mov	sl, r5
   84056:	e004      	b.n	84062 <_svfprintf_r+0x6a>
   84058:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   8405c:	2b00      	cmp	r3, #0
   8405e:	f000 8109 	beq.w	84274 <_svfprintf_r+0x27c>
   84062:	2b25      	cmp	r3, #37	; 0x25
   84064:	d1f8      	bne.n	84058 <_svfprintf_r+0x60>
   84066:	ebba 0605 	subs.w	r6, sl, r5
   8406a:	f040 8107 	bne.w	8427c <_svfprintf_r+0x284>
   8406e:	f89a 3000 	ldrb.w	r3, [sl]
   84072:	2b00      	cmp	r3, #0
   84074:	f000 81bc 	beq.w	843f0 <_svfprintf_r+0x3f8>
   84078:	2300      	movs	r3, #0
   8407a:	f04f 32ff 	mov.w	r2, #4294967295
   8407e:	f04f 092b 	mov.w	r9, #43	; 0x2b
   84082:	2420      	movs	r4, #32
   84084:	461f      	mov	r7, r3
   84086:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8408a:	9207      	str	r2, [sp, #28]
   8408c:	f10a 0a01 	add.w	sl, sl, #1
   84090:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   84094:	9309      	str	r3, [sp, #36]	; 0x24
   84096:	f10a 0a01 	add.w	sl, sl, #1
   8409a:	f1a6 0320 	sub.w	r3, r6, #32
   8409e:	2b5a      	cmp	r3, #90	; 0x5a
   840a0:	f200 8120 	bhi.w	842e4 <_svfprintf_r+0x2ec>
   840a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   840a8:	011e02ca 	.word	0x011e02ca
   840ac:	02c5011e 	.word	0x02c5011e
   840b0:	011e011e 	.word	0x011e011e
   840b4:	02a3011e 	.word	0x02a3011e
   840b8:	011e011e 	.word	0x011e011e
   840bc:	02f3006a 	.word	0x02f3006a
   840c0:	0247011e 	.word	0x0247011e
   840c4:	011e02d9 	.word	0x011e02d9
   840c8:	005b02d4 	.word	0x005b02d4
   840cc:	005b005b 	.word	0x005b005b
   840d0:	005b005b 	.word	0x005b005b
   840d4:	005b005b 	.word	0x005b005b
   840d8:	005b005b 	.word	0x005b005b
   840dc:	011e011e 	.word	0x011e011e
   840e0:	011e011e 	.word	0x011e011e
   840e4:	011e011e 	.word	0x011e011e
   840e8:	01b0011e 	.word	0x01b0011e
   840ec:	020b011e 	.word	0x020b011e
   840f0:	01b0007a 	.word	0x01b0007a
   840f4:	01b001b0 	.word	0x01b001b0
   840f8:	011e011e 	.word	0x011e011e
   840fc:	011e011e 	.word	0x011e011e
   84100:	011e029e 	.word	0x011e029e
   84104:	00b6011e 	.word	0x00b6011e
   84108:	011e011e 	.word	0x011e011e
   8410c:	0219011e 	.word	0x0219011e
   84110:	024c011e 	.word	0x024c011e
   84114:	011e011e 	.word	0x011e011e
   84118:	011e073f 	.word	0x011e073f
   8411c:	011e011e 	.word	0x011e011e
   84120:	011e011e 	.word	0x011e011e
   84124:	011e011e 	.word	0x011e011e
   84128:	01b0011e 	.word	0x01b0011e
   8412c:	020b011e 	.word	0x020b011e
   84130:	01b0007c 	.word	0x01b0007c
   84134:	01b001b0 	.word	0x01b001b0
   84138:	007c0291 	.word	0x007c0291
   8413c:	011e0075 	.word	0x011e0075
   84140:	011e0284 	.word	0x011e0284
   84144:	00b80270 	.word	0x00b80270
   84148:	0075025e 	.word	0x0075025e
   8414c:	0219011e 	.word	0x0219011e
   84150:	071c0072 	.word	0x071c0072
   84154:	011e011e 	.word	0x011e011e
   84158:	011e071f 	.word	0x011e071f
   8415c:	0072      	.short	0x0072
   8415e:	2200      	movs	r2, #0
   84160:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84164:	f81a 6b01 	ldrb.w	r6, [sl], #1
   84168:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8416c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   84170:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84174:	2b09      	cmp	r3, #9
   84176:	d9f5      	bls.n	84164 <_svfprintf_r+0x16c>
   84178:	9209      	str	r2, [sp, #36]	; 0x24
   8417a:	e78e      	b.n	8409a <_svfprintf_r+0xa2>
   8417c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8417e:	f853 2b04 	ldr.w	r2, [r3], #4
   84182:	2a00      	cmp	r2, #0
   84184:	9209      	str	r2, [sp, #36]	; 0x24
   84186:	930e      	str	r3, [sp, #56]	; 0x38
   84188:	f2c0 81d2 	blt.w	84530 <_svfprintf_r+0x538>
   8418c:	f89a 6000 	ldrb.w	r6, [sl]
   84190:	e781      	b.n	84096 <_svfprintf_r+0x9e>
   84192:	f89a 6000 	ldrb.w	r6, [sl]
   84196:	f047 0720 	orr.w	r7, r7, #32
   8419a:	e77c      	b.n	84096 <_svfprintf_r+0x9e>
   8419c:	f047 0710 	orr.w	r7, r7, #16
   841a0:	06ba      	lsls	r2, r7, #26
   841a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   841a4:	f140 817d 	bpl.w	844a2 <_svfprintf_r+0x4aa>
   841a8:	3307      	adds	r3, #7
   841aa:	f023 0307 	bic.w	r3, r3, #7
   841ae:	461a      	mov	r2, r3
   841b0:	685b      	ldr	r3, [r3, #4]
   841b2:	f852 4b08 	ldr.w	r4, [r2], #8
   841b6:	4699      	mov	r9, r3
   841b8:	920e      	str	r2, [sp, #56]	; 0x38
   841ba:	2b00      	cmp	r3, #0
   841bc:	f2c0 857f 	blt.w	84cbe <_svfprintf_r+0xcc6>
   841c0:	9b07      	ldr	r3, [sp, #28]
   841c2:	3301      	adds	r3, #1
   841c4:	f001 8039 	beq.w	8523a <_svfprintf_r+0x1242>
   841c8:	ea54 0309 	orrs.w	r3, r4, r9
   841cc:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   841d0:	f000 8505 	beq.w	84bde <_svfprintf_r+0xbe6>
   841d4:	2c0a      	cmp	r4, #10
   841d6:	f179 0300 	sbcs.w	r3, r9, #0
   841da:	f080 8793 	bcs.w	85104 <_svfprintf_r+0x110c>
   841de:	2301      	movs	r3, #1
   841e0:	465f      	mov	r7, fp
   841e2:	3430      	adds	r4, #48	; 0x30
   841e4:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   841e8:	930b      	str	r3, [sp, #44]	; 0x2c
   841ea:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   841ee:	9a07      	ldr	r2, [sp, #28]
   841f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   841f2:	2300      	movs	r3, #0
   841f4:	428a      	cmp	r2, r1
   841f6:	bfb8      	it	lt
   841f8:	460a      	movlt	r2, r1
   841fa:	9206      	str	r2, [sp, #24]
   841fc:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   84200:	930d      	str	r3, [sp, #52]	; 0x34
   84202:	930f      	str	r3, [sp, #60]	; 0x3c
   84204:	9313      	str	r3, [sp, #76]	; 0x4c
   84206:	9310      	str	r3, [sp, #64]	; 0x40
   84208:	2a00      	cmp	r2, #0
   8420a:	d07c      	beq.n	84306 <_svfprintf_r+0x30e>
   8420c:	9b06      	ldr	r3, [sp, #24]
   8420e:	3301      	adds	r3, #1
   84210:	9306      	str	r3, [sp, #24]
   84212:	e078      	b.n	84306 <_svfprintf_r+0x30e>
   84214:	f047 0710 	orr.w	r7, r7, #16
   84218:	f017 0920 	ands.w	r9, r7, #32
   8421c:	f000 8132 	beq.w	84484 <_svfprintf_r+0x48c>
   84220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84222:	3307      	adds	r3, #7
   84224:	f023 0307 	bic.w	r3, r3, #7
   84228:	f8d3 9004 	ldr.w	r9, [r3, #4]
   8422c:	f853 4b08 	ldr.w	r4, [r3], #8
   84230:	930e      	str	r3, [sp, #56]	; 0x38
   84232:	2300      	movs	r3, #0
   84234:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   84238:	2200      	movs	r2, #0
   8423a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8423e:	9a07      	ldr	r2, [sp, #28]
   84240:	1c51      	adds	r1, r2, #1
   84242:	f000 822a 	beq.w	8469a <_svfprintf_r+0x6a2>
   84246:	ea54 0109 	orrs.w	r1, r4, r9
   8424a:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   8424e:	f040 8223 	bne.w	84698 <_svfprintf_r+0x6a0>
   84252:	2a00      	cmp	r2, #0
   84254:	f041 802b 	bne.w	852ae <_svfprintf_r+0x12b6>
   84258:	2b00      	cmp	r3, #0
   8425a:	f040 84c5 	bne.w	84be8 <_svfprintf_r+0xbf0>
   8425e:	f01b 0301 	ands.w	r3, fp, #1
   84262:	930b      	str	r3, [sp, #44]	; 0x2c
   84264:	f000 8554 	beq.w	84d10 <_svfprintf_r+0xd18>
   84268:	2330      	movs	r3, #48	; 0x30
   8426a:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   8426e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   84272:	e7bc      	b.n	841ee <_svfprintf_r+0x1f6>
   84274:	ebba 0605 	subs.w	r6, sl, r5
   84278:	f000 80ba 	beq.w	843f0 <_svfprintf_r+0x3f8>
   8427c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8427e:	e9c8 5600 	strd	r5, r6, [r8]
   84282:	4433      	add	r3, r6
   84284:	932a      	str	r3, [sp, #168]	; 0xa8
   84286:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84288:	3301      	adds	r3, #1
   8428a:	2b07      	cmp	r3, #7
   8428c:	9329      	str	r3, [sp, #164]	; 0xa4
   8428e:	dc05      	bgt.n	8429c <_svfprintf_r+0x2a4>
   84290:	f108 0808 	add.w	r8, r8, #8
   84294:	9b08      	ldr	r3, [sp, #32]
   84296:	4433      	add	r3, r6
   84298:	9308      	str	r3, [sp, #32]
   8429a:	e6e8      	b.n	8406e <_svfprintf_r+0x76>
   8429c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8429e:	980a      	ldr	r0, [sp, #40]	; 0x28
   842a0:	aa28      	add	r2, sp, #160	; 0xa0
   842a2:	f005 fb07 	bl	898b4 <__ssprint_r>
   842a6:	b980      	cbnz	r0, 842ca <_svfprintf_r+0x2d2>
   842a8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   842ac:	e7f2      	b.n	84294 <_svfprintf_r+0x29c>
   842ae:	990c      	ldr	r1, [sp, #48]	; 0x30
   842b0:	980a      	ldr	r0, [sp, #40]	; 0x28
   842b2:	aa28      	add	r2, sp, #160	; 0xa0
   842b4:	f005 fafe 	bl	898b4 <__ssprint_r>
   842b8:	2800      	cmp	r0, #0
   842ba:	f000 808a 	beq.w	843d2 <_svfprintf_r+0x3da>
   842be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   842c0:	b11b      	cbz	r3, 842ca <_svfprintf_r+0x2d2>
   842c2:	990d      	ldr	r1, [sp, #52]	; 0x34
   842c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   842c6:	f003 fdeb 	bl	87ea0 <_free_r>
   842ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   842cc:	899b      	ldrh	r3, [r3, #12]
   842ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   842d2:	9b08      	ldr	r3, [sp, #32]
   842d4:	bf18      	it	ne
   842d6:	f04f 33ff 	movne.w	r3, #4294967295
   842da:	9308      	str	r3, [sp, #32]
   842dc:	9808      	ldr	r0, [sp, #32]
   842de:	b055      	add	sp, #340	; 0x154
   842e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842e4:	2e00      	cmp	r6, #0
   842e6:	f000 8083 	beq.w	843f0 <_svfprintf_r+0x3f8>
   842ea:	2301      	movs	r3, #1
   842ec:	2200      	movs	r2, #0
   842ee:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   842f2:	9306      	str	r3, [sp, #24]
   842f4:	ad3b      	add	r5, sp, #236	; 0xec
   842f6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   842fa:	930b      	str	r3, [sp, #44]	; 0x2c
   842fc:	920d      	str	r2, [sp, #52]	; 0x34
   842fe:	9207      	str	r2, [sp, #28]
   84300:	920f      	str	r2, [sp, #60]	; 0x3c
   84302:	9213      	str	r2, [sp, #76]	; 0x4c
   84304:	9210      	str	r2, [sp, #64]	; 0x40
   84306:	f017 0302 	ands.w	r3, r7, #2
   8430a:	d002      	beq.n	84312 <_svfprintf_r+0x31a>
   8430c:	9906      	ldr	r1, [sp, #24]
   8430e:	3102      	adds	r1, #2
   84310:	9106      	str	r1, [sp, #24]
   84312:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   84316:	d107      	bne.n	84328 <_svfprintf_r+0x330>
   84318:	9909      	ldr	r1, [sp, #36]	; 0x24
   8431a:	9806      	ldr	r0, [sp, #24]
   8431c:	eba1 0900 	sub.w	r9, r1, r0
   84320:	f1b9 0f00 	cmp.w	r9, #0
   84324:	f300 8336 	bgt.w	84994 <_svfprintf_r+0x99c>
   84328:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8432a:	b182      	cbz	r2, 8434e <_svfprintf_r+0x356>
   8432c:	2201      	movs	r2, #1
   8432e:	f8c8 2004 	str.w	r2, [r8, #4]
   84332:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   84334:	3401      	adds	r4, #1
   84336:	3201      	adds	r2, #1
   84338:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   8433c:	2a07      	cmp	r2, #7
   8433e:	942a      	str	r4, [sp, #168]	; 0xa8
   84340:	9229      	str	r2, [sp, #164]	; 0xa4
   84342:	f8c8 1000 	str.w	r1, [r8]
   84346:	f300 8369 	bgt.w	84a1c <_svfprintf_r+0xa24>
   8434a:	f108 0808 	add.w	r8, r8, #8
   8434e:	b17b      	cbz	r3, 84370 <_svfprintf_r+0x378>
   84350:	2302      	movs	r3, #2
   84352:	f8c8 3004 	str.w	r3, [r8, #4]
   84356:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84358:	3402      	adds	r4, #2
   8435a:	3301      	adds	r3, #1
   8435c:	aa21      	add	r2, sp, #132	; 0x84
   8435e:	2b07      	cmp	r3, #7
   84360:	942a      	str	r4, [sp, #168]	; 0xa8
   84362:	9329      	str	r3, [sp, #164]	; 0xa4
   84364:	f8c8 2000 	str.w	r2, [r8]
   84368:	f300 836c 	bgt.w	84a44 <_svfprintf_r+0xa4c>
   8436c:	f108 0808 	add.w	r8, r8, #8
   84370:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   84374:	f000 822e 	beq.w	847d4 <_svfprintf_r+0x7dc>
   84378:	9b07      	ldr	r3, [sp, #28]
   8437a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8437c:	eba3 0b02 	sub.w	fp, r3, r2
   84380:	f1bb 0f00 	cmp.w	fp, #0
   84384:	f300 8271 	bgt.w	8486a <_svfprintf_r+0x872>
   84388:	05fb      	lsls	r3, r7, #23
   8438a:	f100 81c5 	bmi.w	84718 <_svfprintf_r+0x720>
   8438e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84390:	f8c8 5000 	str.w	r5, [r8]
   84394:	441c      	add	r4, r3
   84396:	f8c8 3004 	str.w	r3, [r8, #4]
   8439a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8439c:	942a      	str	r4, [sp, #168]	; 0xa8
   8439e:	3301      	adds	r3, #1
   843a0:	2b07      	cmp	r3, #7
   843a2:	9329      	str	r3, [sp, #164]	; 0xa4
   843a4:	f300 82ea 	bgt.w	8497c <_svfprintf_r+0x984>
   843a8:	f108 0808 	add.w	r8, r8, #8
   843ac:	077b      	lsls	r3, r7, #29
   843ae:	d505      	bpl.n	843bc <_svfprintf_r+0x3c4>
   843b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   843b2:	9a06      	ldr	r2, [sp, #24]
   843b4:	1a9d      	subs	r5, r3, r2
   843b6:	2d00      	cmp	r5, #0
   843b8:	f300 8350 	bgt.w	84a5c <_svfprintf_r+0xa64>
   843bc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   843c0:	9906      	ldr	r1, [sp, #24]
   843c2:	428a      	cmp	r2, r1
   843c4:	bfac      	ite	ge
   843c6:	189b      	addge	r3, r3, r2
   843c8:	185b      	addlt	r3, r3, r1
   843ca:	9308      	str	r3, [sp, #32]
   843cc:	2c00      	cmp	r4, #0
   843ce:	f47f af6e 	bne.w	842ae <_svfprintf_r+0x2b6>
   843d2:	2300      	movs	r3, #0
   843d4:	9329      	str	r3, [sp, #164]	; 0xa4
   843d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   843d8:	b11b      	cbz	r3, 843e2 <_svfprintf_r+0x3ea>
   843da:	990d      	ldr	r1, [sp, #52]	; 0x34
   843dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   843de:	f003 fd5f 	bl	87ea0 <_free_r>
   843e2:	4655      	mov	r5, sl
   843e4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   843e8:	782b      	ldrb	r3, [r5, #0]
   843ea:	2b00      	cmp	r3, #0
   843ec:	f47f ae32 	bne.w	84054 <_svfprintf_r+0x5c>
   843f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   843f2:	2b00      	cmp	r3, #0
   843f4:	f43f af69 	beq.w	842ca <_svfprintf_r+0x2d2>
   843f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   843fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   843fc:	4621      	mov	r1, r4
   843fe:	aa28      	add	r2, sp, #160	; 0xa0
   84400:	f005 fa58 	bl	898b4 <__ssprint_r>
   84404:	89a3      	ldrh	r3, [r4, #12]
   84406:	e762      	b.n	842ce <_svfprintf_r+0x2d6>
   84408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8440a:	3307      	adds	r3, #7
   8440c:	f023 0207 	bic.w	r2, r3, #7
   84410:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   84414:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   84418:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8441c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   84420:	4699      	mov	r9, r3
   84422:	4618      	mov	r0, r3
   84424:	920e      	str	r2, [sp, #56]	; 0x38
   84426:	4621      	mov	r1, r4
   84428:	f04f 32ff 	mov.w	r2, #4294967295
   8442c:	4bb6      	ldr	r3, [pc, #728]	; (84708 <_svfprintf_r+0x710>)
   8442e:	f006 f981 	bl	8a734 <__aeabi_dcmpun>
   84432:	2800      	cmp	r0, #0
   84434:	f040 8496 	bne.w	84d64 <_svfprintf_r+0xd6c>
   84438:	4648      	mov	r0, r9
   8443a:	4621      	mov	r1, r4
   8443c:	f04f 32ff 	mov.w	r2, #4294967295
   84440:	4bb1      	ldr	r3, [pc, #708]	; (84708 <_svfprintf_r+0x710>)
   84442:	f006 f959 	bl	8a6f8 <__aeabi_dcmple>
   84446:	2800      	cmp	r0, #0
   84448:	f040 848c 	bne.w	84d64 <_svfprintf_r+0xd6c>
   8444c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   84450:	2200      	movs	r2, #0
   84452:	2300      	movs	r3, #0
   84454:	f006 f946 	bl	8a6e4 <__aeabi_dcmplt>
   84458:	2800      	cmp	r0, #0
   8445a:	f040 87a6 	bne.w	853aa <_svfprintf_r+0x13b2>
   8445e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   84462:	2100      	movs	r1, #0
   84464:	2003      	movs	r0, #3
   84466:	4da9      	ldr	r5, [pc, #676]	; (8470c <_svfprintf_r+0x714>)
   84468:	4ba9      	ldr	r3, [pc, #676]	; (84710 <_svfprintf_r+0x718>)
   8446a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8446e:	910d      	str	r1, [sp, #52]	; 0x34
   84470:	9006      	str	r0, [sp, #24]
   84472:	2e47      	cmp	r6, #71	; 0x47
   84474:	bfc8      	it	gt
   84476:	461d      	movgt	r5, r3
   84478:	9107      	str	r1, [sp, #28]
   8447a:	900b      	str	r0, [sp, #44]	; 0x2c
   8447c:	910f      	str	r1, [sp, #60]	; 0x3c
   8447e:	9113      	str	r1, [sp, #76]	; 0x4c
   84480:	9110      	str	r1, [sp, #64]	; 0x40
   84482:	e6c1      	b.n	84208 <_svfprintf_r+0x210>
   84484:	f017 0310 	ands.w	r3, r7, #16
   84488:	f040 8462 	bne.w	84d50 <_svfprintf_r+0xd58>
   8448c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   84490:	f000 877b 	beq.w	8538a <_svfprintf_r+0x1392>
   84494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84496:	4699      	mov	r9, r3
   84498:	f852 4b04 	ldr.w	r4, [r2], #4
   8449c:	920e      	str	r2, [sp, #56]	; 0x38
   8449e:	b2a4      	uxth	r4, r4
   844a0:	e6c7      	b.n	84232 <_svfprintf_r+0x23a>
   844a2:	f853 4b04 	ldr.w	r4, [r3], #4
   844a6:	930e      	str	r3, [sp, #56]	; 0x38
   844a8:	06fb      	lsls	r3, r7, #27
   844aa:	f100 8441 	bmi.w	84d30 <_svfprintf_r+0xd38>
   844ae:	067d      	lsls	r5, r7, #25
   844b0:	f140 843b 	bpl.w	84d2a <_svfprintf_r+0xd32>
   844b4:	f344 39c0 	sbfx	r9, r4, #15, #1
   844b8:	464b      	mov	r3, r9
   844ba:	b224      	sxth	r4, r4
   844bc:	e67d      	b.n	841ba <_svfprintf_r+0x1c2>
   844be:	2001      	movs	r0, #1
   844c0:	2200      	movs	r2, #0
   844c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   844c4:	9006      	str	r0, [sp, #24]
   844c6:	f853 1b04 	ldr.w	r1, [r3], #4
   844ca:	ad3b      	add	r5, sp, #236	; 0xec
   844cc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   844d0:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   844d4:	930e      	str	r3, [sp, #56]	; 0x38
   844d6:	900b      	str	r0, [sp, #44]	; 0x2c
   844d8:	e710      	b.n	842fc <_svfprintf_r+0x304>
   844da:	f04f 0900 	mov.w	r9, #0
   844de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   844e0:	9b07      	ldr	r3, [sp, #28]
   844e2:	f854 5b04 	ldr.w	r5, [r4], #4
   844e6:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   844ea:	2d00      	cmp	r5, #0
   844ec:	f000 86ee 	beq.w	852cc <_svfprintf_r+0x12d4>
   844f0:	1c5a      	adds	r2, r3, #1
   844f2:	f000 8560 	beq.w	84fb6 <_svfprintf_r+0xfbe>
   844f6:	461a      	mov	r2, r3
   844f8:	4649      	mov	r1, r9
   844fa:	4628      	mov	r0, r5
   844fc:	f004 fae8 	bl	88ad0 <memchr>
   84500:	900d      	str	r0, [sp, #52]	; 0x34
   84502:	2800      	cmp	r0, #0
   84504:	f001 809e 	beq.w	85644 <_svfprintf_r+0x164c>
   84508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8450a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8450e:	1b5b      	subs	r3, r3, r5
   84510:	930b      	str	r3, [sp, #44]	; 0x2c
   84512:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84516:	f8cd 901c 	str.w	r9, [sp, #28]
   8451a:	940e      	str	r4, [sp, #56]	; 0x38
   8451c:	9306      	str	r3, [sp, #24]
   8451e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   84522:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   84526:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8452a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   8452e:	e66b      	b.n	84208 <_svfprintf_r+0x210>
   84530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84532:	425b      	negs	r3, r3
   84534:	9309      	str	r3, [sp, #36]	; 0x24
   84536:	f89a 6000 	ldrb.w	r6, [sl]
   8453a:	f047 0704 	orr.w	r7, r7, #4
   8453e:	e5aa      	b.n	84096 <_svfprintf_r+0x9e>
   84540:	f047 0b10 	orr.w	fp, r7, #16
   84544:	f01b 0920 	ands.w	r9, fp, #32
   84548:	f000 83aa 	beq.w	84ca0 <_svfprintf_r+0xca8>
   8454c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8454e:	3307      	adds	r3, #7
   84550:	f023 0307 	bic.w	r3, r3, #7
   84554:	461a      	mov	r2, r3
   84556:	f852 4b08 	ldr.w	r4, [r2], #8
   8455a:	f8d3 9004 	ldr.w	r9, [r3, #4]
   8455e:	920e      	str	r2, [sp, #56]	; 0x38
   84560:	2301      	movs	r3, #1
   84562:	e669      	b.n	84238 <_svfprintf_r+0x240>
   84564:	2230      	movs	r2, #48	; 0x30
   84566:	2678      	movs	r6, #120	; 0x78
   84568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8456a:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   8456e:	f853 4b04 	ldr.w	r4, [r3], #4
   84572:	4a68      	ldr	r2, [pc, #416]	; (84714 <_svfprintf_r+0x71c>)
   84574:	930e      	str	r3, [sp, #56]	; 0x38
   84576:	f04f 0900 	mov.w	r9, #0
   8457a:	2302      	movs	r3, #2
   8457c:	f047 0b02 	orr.w	fp, r7, #2
   84580:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   84584:	9218      	str	r2, [sp, #96]	; 0x60
   84586:	e657      	b.n	84238 <_svfprintf_r+0x240>
   84588:	06bd      	lsls	r5, r7, #26
   8458a:	f100 83d6 	bmi.w	84d3a <_svfprintf_r+0xd42>
   8458e:	06fc      	lsls	r4, r7, #27
   84590:	f100 8693 	bmi.w	852ba <_svfprintf_r+0x12c2>
   84594:	0678      	lsls	r0, r7, #25
   84596:	f100 875d 	bmi.w	85454 <_svfprintf_r+0x145c>
   8459a:	05b9      	lsls	r1, r7, #22
   8459c:	f140 868d 	bpl.w	852ba <_svfprintf_r+0x12c2>
   845a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   845a2:	9908      	ldr	r1, [sp, #32]
   845a4:	f853 2b04 	ldr.w	r2, [r3], #4
   845a8:	4655      	mov	r5, sl
   845aa:	7011      	strb	r1, [r2, #0]
   845ac:	930e      	str	r3, [sp, #56]	; 0x38
   845ae:	e71b      	b.n	843e8 <_svfprintf_r+0x3f0>
   845b0:	f89a 6000 	ldrb.w	r6, [sl]
   845b4:	2e6c      	cmp	r6, #108	; 0x6c
   845b6:	bf03      	ittte	eq
   845b8:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   845bc:	f047 0720 	orreq.w	r7, r7, #32
   845c0:	f10a 0a01 	addeq.w	sl, sl, #1
   845c4:	f047 0710 	orrne.w	r7, r7, #16
   845c8:	e565      	b.n	84096 <_svfprintf_r+0x9e>
   845ca:	f89a 6000 	ldrb.w	r6, [sl]
   845ce:	2e68      	cmp	r6, #104	; 0x68
   845d0:	bf03      	ittte	eq
   845d2:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   845d6:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   845da:	f10a 0a01 	addeq.w	sl, sl, #1
   845de:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   845e2:	e558      	b.n	84096 <_svfprintf_r+0x9e>
   845e4:	f89a 6000 	ldrb.w	r6, [sl]
   845e8:	f047 0708 	orr.w	r7, r7, #8
   845ec:	e553      	b.n	84096 <_svfprintf_r+0x9e>
   845ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   845f0:	4630      	mov	r0, r6
   845f2:	f003 fef7 	bl	883e4 <_localeconv_r>
   845f6:	6843      	ldr	r3, [r0, #4]
   845f8:	4618      	mov	r0, r3
   845fa:	931b      	str	r3, [sp, #108]	; 0x6c
   845fc:	f7ff fc9a 	bl	83f34 <strlen>
   84600:	4603      	mov	r3, r0
   84602:	4630      	mov	r0, r6
   84604:	931c      	str	r3, [sp, #112]	; 0x70
   84606:	461e      	mov	r6, r3
   84608:	f003 feec 	bl	883e4 <_localeconv_r>
   8460c:	6883      	ldr	r3, [r0, #8]
   8460e:	9319      	str	r3, [sp, #100]	; 0x64
   84610:	2e00      	cmp	r6, #0
   84612:	f43f adbb 	beq.w	8418c <_svfprintf_r+0x194>
   84616:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84618:	2b00      	cmp	r3, #0
   8461a:	f43f adb7 	beq.w	8418c <_svfprintf_r+0x194>
   8461e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84620:	781b      	ldrb	r3, [r3, #0]
   84622:	2b00      	cmp	r3, #0
   84624:	f43f adb2 	beq.w	8418c <_svfprintf_r+0x194>
   84628:	f89a 6000 	ldrb.w	r6, [sl]
   8462c:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   84630:	e531      	b.n	84096 <_svfprintf_r+0x9e>
   84632:	f89a 6000 	ldrb.w	r6, [sl]
   84636:	f047 0701 	orr.w	r7, r7, #1
   8463a:	e52c      	b.n	84096 <_svfprintf_r+0x9e>
   8463c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   84640:	2b00      	cmp	r3, #0
   84642:	f47f ada3 	bne.w	8418c <_svfprintf_r+0x194>
   84646:	f89a 6000 	ldrb.w	r6, [sl]
   8464a:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   8464e:	e522      	b.n	84096 <_svfprintf_r+0x9e>
   84650:	f89a 6000 	ldrb.w	r6, [sl]
   84654:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84658:	e51d      	b.n	84096 <_svfprintf_r+0x9e>
   8465a:	4652      	mov	r2, sl
   8465c:	f812 6b01 	ldrb.w	r6, [r2], #1
   84660:	2e2a      	cmp	r6, #42	; 0x2a
   84662:	f001 81eb 	beq.w	85a3c <_svfprintf_r+0x1a44>
   84666:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8466a:	2b09      	cmp	r3, #9
   8466c:	4692      	mov	sl, r2
   8466e:	bf98      	it	ls
   84670:	2200      	movls	r2, #0
   84672:	f201 8003 	bhi.w	8567c <_svfprintf_r+0x1684>
   84676:	f81a 6b01 	ldrb.w	r6, [sl], #1
   8467a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8467e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   84682:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84686:	2b09      	cmp	r3, #9
   84688:	d9f5      	bls.n	84676 <_svfprintf_r+0x67e>
   8468a:	9207      	str	r2, [sp, #28]
   8468c:	e505      	b.n	8409a <_svfprintf_r+0xa2>
   8468e:	f89a 6000 	ldrb.w	r6, [sl]
   84692:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   84696:	e4fe      	b.n	84096 <_svfprintf_r+0x9e>
   84698:	46bb      	mov	fp, r7
   8469a:	2b01      	cmp	r3, #1
   8469c:	f43f ad9a 	beq.w	841d4 <_svfprintf_r+0x1dc>
   846a0:	2b02      	cmp	r3, #2
   846a2:	ad54      	add	r5, sp, #336	; 0x150
   846a4:	d112      	bne.n	846cc <_svfprintf_r+0x6d4>
   846a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   846a8:	f004 030f 	and.w	r3, r4, #15
   846ac:	5cd3      	ldrb	r3, [r2, r3]
   846ae:	0924      	lsrs	r4, r4, #4
   846b0:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   846b4:	ea4f 1919 	mov.w	r9, r9, lsr #4
   846b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   846bc:	ea54 0309 	orrs.w	r3, r4, r9
   846c0:	d1f2      	bne.n	846a8 <_svfprintf_r+0x6b0>
   846c2:	ab54      	add	r3, sp, #336	; 0x150
   846c4:	1b5b      	subs	r3, r3, r5
   846c6:	465f      	mov	r7, fp
   846c8:	930b      	str	r3, [sp, #44]	; 0x2c
   846ca:	e590      	b.n	841ee <_svfprintf_r+0x1f6>
   846cc:	f004 0307 	and.w	r3, r4, #7
   846d0:	08e4      	lsrs	r4, r4, #3
   846d2:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   846d6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   846da:	3330      	adds	r3, #48	; 0x30
   846dc:	ea54 0109 	orrs.w	r1, r4, r9
   846e0:	462a      	mov	r2, r5
   846e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   846e6:	d1f1      	bne.n	846cc <_svfprintf_r+0x6d4>
   846e8:	f01b 0f01 	tst.w	fp, #1
   846ec:	d0e9      	beq.n	846c2 <_svfprintf_r+0x6ca>
   846ee:	2b30      	cmp	r3, #48	; 0x30
   846f0:	d0e7      	beq.n	846c2 <_svfprintf_r+0x6ca>
   846f2:	2330      	movs	r3, #48	; 0x30
   846f4:	3a02      	subs	r2, #2
   846f6:	f805 3c01 	strb.w	r3, [r5, #-1]
   846fa:	ab54      	add	r3, sp, #336	; 0x150
   846fc:	1a9b      	subs	r3, r3, r2
   846fe:	465f      	mov	r7, fp
   84700:	4615      	mov	r5, r2
   84702:	930b      	str	r3, [sp, #44]	; 0x2c
   84704:	e573      	b.n	841ee <_svfprintf_r+0x1f6>
   84706:	bf00      	nop
   84708:	7fefffff 	.word	0x7fefffff
   8470c:	0008abdc 	.word	0x0008abdc
   84710:	0008abe0 	.word	0x0008abe0
   84714:	0008abec 	.word	0x0008abec
   84718:	2e65      	cmp	r6, #101	; 0x65
   8471a:	f340 80e9 	ble.w	848f0 <_svfprintf_r+0x8f8>
   8471e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   84722:	2200      	movs	r2, #0
   84724:	2300      	movs	r3, #0
   84726:	f005 ffd3 	bl	8a6d0 <__aeabi_dcmpeq>
   8472a:	2800      	cmp	r0, #0
   8472c:	f000 81d2 	beq.w	84ad4 <_svfprintf_r+0xadc>
   84730:	2301      	movs	r3, #1
   84732:	f8c8 3004 	str.w	r3, [r8, #4]
   84736:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84738:	4abf      	ldr	r2, [pc, #764]	; (84a38 <_svfprintf_r+0xa40>)
   8473a:	3301      	adds	r3, #1
   8473c:	3401      	adds	r4, #1
   8473e:	2b07      	cmp	r3, #7
   84740:	942a      	str	r4, [sp, #168]	; 0xa8
   84742:	9329      	str	r3, [sp, #164]	; 0xa4
   84744:	f8c8 2000 	str.w	r2, [r8]
   84748:	f300 857a 	bgt.w	85240 <_svfprintf_r+0x1248>
   8474c:	f108 0808 	add.w	r8, r8, #8
   84750:	9b22      	ldr	r3, [sp, #136]	; 0x88
   84752:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84754:	4293      	cmp	r3, r2
   84756:	f280 82d7 	bge.w	84d08 <_svfprintf_r+0xd10>
   8475a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8475c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8475e:	441c      	add	r4, r3
   84760:	e9c8 2300 	strd	r2, r3, [r8]
   84764:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84766:	942a      	str	r4, [sp, #168]	; 0xa8
   84768:	3301      	adds	r3, #1
   8476a:	2b07      	cmp	r3, #7
   8476c:	9329      	str	r3, [sp, #164]	; 0xa4
   8476e:	f300 83dd 	bgt.w	84f2c <_svfprintf_r+0xf34>
   84772:	f108 0808 	add.w	r8, r8, #8
   84776:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84778:	1e5d      	subs	r5, r3, #1
   8477a:	2d00      	cmp	r5, #0
   8477c:	f77f ae16 	ble.w	843ac <_svfprintf_r+0x3b4>
   84780:	2d10      	cmp	r5, #16
   84782:	f341 8141 	ble.w	85a08 <_svfprintf_r+0x1a10>
   84786:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 84a3c <_svfprintf_r+0xa44>
   8478a:	4622      	mov	r2, r4
   8478c:	4649      	mov	r1, r9
   8478e:	2610      	movs	r6, #16
   84790:	46b9      	mov	r9, r7
   84792:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84794:	460f      	mov	r7, r1
   84796:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8479a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8479c:	e005      	b.n	847aa <_svfprintf_r+0x7b2>
   8479e:	f108 0808 	add.w	r8, r8, #8
   847a2:	3d10      	subs	r5, #16
   847a4:	2d10      	cmp	r5, #16
   847a6:	f340 8558 	ble.w	8525a <_svfprintf_r+0x1262>
   847aa:	3301      	adds	r3, #1
   847ac:	3210      	adds	r2, #16
   847ae:	2b07      	cmp	r3, #7
   847b0:	e9c8 7600 	strd	r7, r6, [r8]
   847b4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   847b8:	ddf1      	ble.n	8479e <_svfprintf_r+0x7a6>
   847ba:	4621      	mov	r1, r4
   847bc:	4658      	mov	r0, fp
   847be:	aa28      	add	r2, sp, #160	; 0xa0
   847c0:	f005 f878 	bl	898b4 <__ssprint_r>
   847c4:	2800      	cmp	r0, #0
   847c6:	f47f ad7a 	bne.w	842be <_svfprintf_r+0x2c6>
   847ca:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   847ce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   847d2:	e7e6      	b.n	847a2 <_svfprintf_r+0x7aa>
   847d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   847d6:	9a06      	ldr	r2, [sp, #24]
   847d8:	eba3 0b02 	sub.w	fp, r3, r2
   847dc:	f1bb 0f00 	cmp.w	fp, #0
   847e0:	f77f adca 	ble.w	84378 <_svfprintf_r+0x380>
   847e4:	f1bb 0f10 	cmp.w	fp, #16
   847e8:	f341 8005 	ble.w	857f6 <_svfprintf_r+0x17fe>
   847ec:	f8df 924c 	ldr.w	r9, [pc, #588]	; 84a3c <_svfprintf_r+0xa44>
   847f0:	4641      	mov	r1, r8
   847f2:	4620      	mov	r0, r4
   847f4:	46a8      	mov	r8, r5
   847f6:	464c      	mov	r4, r9
   847f8:	2310      	movs	r3, #16
   847fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   847fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   847fe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84802:	e006      	b.n	84812 <_svfprintf_r+0x81a>
   84804:	f1ab 0b10 	sub.w	fp, fp, #16
   84808:	f1bb 0f10 	cmp.w	fp, #16
   8480c:	f101 0108 	add.w	r1, r1, #8
   84810:	dd19      	ble.n	84846 <_svfprintf_r+0x84e>
   84812:	3201      	adds	r2, #1
   84814:	3010      	adds	r0, #16
   84816:	2a07      	cmp	r2, #7
   84818:	e9c1 4300 	strd	r4, r3, [r1]
   8481c:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   84820:	ddf0      	ble.n	84804 <_svfprintf_r+0x80c>
   84822:	4629      	mov	r1, r5
   84824:	4648      	mov	r0, r9
   84826:	aa28      	add	r2, sp, #160	; 0xa0
   84828:	f005 f844 	bl	898b4 <__ssprint_r>
   8482c:	2800      	cmp	r0, #0
   8482e:	f47f ad46 	bne.w	842be <_svfprintf_r+0x2c6>
   84832:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   84836:	f1ab 0b10 	sub.w	fp, fp, #16
   8483a:	f1bb 0f10 	cmp.w	fp, #16
   8483e:	f04f 0310 	mov.w	r3, #16
   84842:	a92b      	add	r1, sp, #172	; 0xac
   84844:	dce5      	bgt.n	84812 <_svfprintf_r+0x81a>
   84846:	4645      	mov	r5, r8
   84848:	46a1      	mov	r9, r4
   8484a:	4688      	mov	r8, r1
   8484c:	4604      	mov	r4, r0
   8484e:	3201      	adds	r2, #1
   84850:	445c      	add	r4, fp
   84852:	2a07      	cmp	r2, #7
   84854:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   84858:	f8c8 9000 	str.w	r9, [r8]
   8485c:	f8c8 b004 	str.w	fp, [r8, #4]
   84860:	f300 8518 	bgt.w	85294 <_svfprintf_r+0x129c>
   84864:	f108 0808 	add.w	r8, r8, #8
   84868:	e586      	b.n	84378 <_svfprintf_r+0x380>
   8486a:	f1bb 0f10 	cmp.w	fp, #16
   8486e:	f340 8597 	ble.w	853a0 <_svfprintf_r+0x13a8>
   84872:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 84a3c <_svfprintf_r+0xa44>
   84876:	4641      	mov	r1, r8
   84878:	4620      	mov	r0, r4
   8487a:	46a8      	mov	r8, r5
   8487c:	464c      	mov	r4, r9
   8487e:	2310      	movs	r3, #16
   84880:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   84882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   84884:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84888:	e006      	b.n	84898 <_svfprintf_r+0x8a0>
   8488a:	f1ab 0b10 	sub.w	fp, fp, #16
   8488e:	f1bb 0f10 	cmp.w	fp, #16
   84892:	f101 0108 	add.w	r1, r1, #8
   84896:	dd19      	ble.n	848cc <_svfprintf_r+0x8d4>
   84898:	3201      	adds	r2, #1
   8489a:	3010      	adds	r0, #16
   8489c:	2a07      	cmp	r2, #7
   8489e:	e9c1 4300 	strd	r4, r3, [r1]
   848a2:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   848a6:	ddf0      	ble.n	8488a <_svfprintf_r+0x892>
   848a8:	4629      	mov	r1, r5
   848aa:	4648      	mov	r0, r9
   848ac:	aa28      	add	r2, sp, #160	; 0xa0
   848ae:	f005 f801 	bl	898b4 <__ssprint_r>
   848b2:	2800      	cmp	r0, #0
   848b4:	f47f ad03 	bne.w	842be <_svfprintf_r+0x2c6>
   848b8:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   848bc:	f1ab 0b10 	sub.w	fp, fp, #16
   848c0:	f1bb 0f10 	cmp.w	fp, #16
   848c4:	f04f 0310 	mov.w	r3, #16
   848c8:	a92b      	add	r1, sp, #172	; 0xac
   848ca:	dce5      	bgt.n	84898 <_svfprintf_r+0x8a0>
   848cc:	4645      	mov	r5, r8
   848ce:	46a1      	mov	r9, r4
   848d0:	4688      	mov	r8, r1
   848d2:	4604      	mov	r4, r0
   848d4:	3201      	adds	r2, #1
   848d6:	445c      	add	r4, fp
   848d8:	2a07      	cmp	r2, #7
   848da:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   848de:	f8c8 9000 	str.w	r9, [r8]
   848e2:	f8c8 b004 	str.w	fp, [r8, #4]
   848e6:	f300 81ce 	bgt.w	84c86 <_svfprintf_r+0xc8e>
   848ea:	f108 0808 	add.w	r8, r8, #8
   848ee:	e54b      	b.n	84388 <_svfprintf_r+0x390>
   848f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   848f2:	2b01      	cmp	r3, #1
   848f4:	f340 817e 	ble.w	84bf4 <_svfprintf_r+0xbfc>
   848f8:	2301      	movs	r3, #1
   848fa:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   848fc:	3401      	adds	r4, #1
   848fe:	441e      	add	r6, r3
   84900:	2e07      	cmp	r6, #7
   84902:	f8c8 5000 	str.w	r5, [r8]
   84906:	942a      	str	r4, [sp, #168]	; 0xa8
   84908:	f8c8 3004 	str.w	r3, [r8, #4]
   8490c:	9629      	str	r6, [sp, #164]	; 0xa4
   8490e:	f300 81e1 	bgt.w	84cd4 <_svfprintf_r+0xcdc>
   84912:	f108 0808 	add.w	r8, r8, #8
   84916:	9b16      	ldr	r3, [sp, #88]	; 0x58
   84918:	3601      	adds	r6, #1
   8491a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8491c:	441c      	add	r4, r3
   8491e:	2e07      	cmp	r6, #7
   84920:	e9c8 2300 	strd	r2, r3, [r8]
   84924:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   84928:	f300 81e1 	bgt.w	84cee <_svfprintf_r+0xcf6>
   8492c:	f108 0808 	add.w	r8, r8, #8
   84930:	2200      	movs	r2, #0
   84932:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   84936:	2300      	movs	r3, #0
   84938:	f005 feca 	bl	8a6d0 <__aeabi_dcmpeq>
   8493c:	2800      	cmp	r0, #0
   8493e:	f040 8176 	bne.w	84c2e <_svfprintf_r+0xc36>
   84942:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84944:	3601      	adds	r6, #1
   84946:	3b01      	subs	r3, #1
   84948:	3501      	adds	r5, #1
   8494a:	441c      	add	r4, r3
   8494c:	2e07      	cmp	r6, #7
   8494e:	f8c8 5000 	str.w	r5, [r8]
   84952:	9629      	str	r6, [sp, #164]	; 0xa4
   84954:	f8c8 3004 	str.w	r3, [r8, #4]
   84958:	942a      	str	r4, [sp, #168]	; 0xa8
   8495a:	f300 815b 	bgt.w	84c14 <_svfprintf_r+0xc1c>
   8495e:	f108 0808 	add.w	r8, r8, #8
   84962:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84964:	3601      	adds	r6, #1
   84966:	441c      	add	r4, r3
   84968:	f8c8 3004 	str.w	r3, [r8, #4]
   8496c:	2e07      	cmp	r6, #7
   8496e:	ab24      	add	r3, sp, #144	; 0x90
   84970:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   84974:	f8c8 3000 	str.w	r3, [r8]
   84978:	f77f ad16 	ble.w	843a8 <_svfprintf_r+0x3b0>
   8497c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8497e:	980a      	ldr	r0, [sp, #40]	; 0x28
   84980:	aa28      	add	r2, sp, #160	; 0xa0
   84982:	f004 ff97 	bl	898b4 <__ssprint_r>
   84986:	2800      	cmp	r0, #0
   84988:	f47f ac99 	bne.w	842be <_svfprintf_r+0x2c6>
   8498c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8498e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84992:	e50b      	b.n	843ac <_svfprintf_r+0x3b4>
   84994:	f1b9 0f10 	cmp.w	r9, #16
   84998:	f340 8650 	ble.w	8563c <_svfprintf_r+0x1644>
   8499c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   849a0:	4640      	mov	r0, r8
   849a2:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   849a6:	46b8      	mov	r8, r7
   849a8:	2410      	movs	r4, #16
   849aa:	464f      	mov	r7, r9
   849ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   849ae:	46a9      	mov	r9, r5
   849b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   849b2:	e004      	b.n	849be <_svfprintf_r+0x9c6>
   849b4:	3f10      	subs	r7, #16
   849b6:	2f10      	cmp	r7, #16
   849b8:	f100 0008 	add.w	r0, r0, #8
   849bc:	dd16      	ble.n	849ec <_svfprintf_r+0x9f4>
   849be:	3201      	adds	r2, #1
   849c0:	4b1f      	ldr	r3, [pc, #124]	; (84a40 <_svfprintf_r+0xa48>)
   849c2:	3110      	adds	r1, #16
   849c4:	2a07      	cmp	r2, #7
   849c6:	e9c0 3400 	strd	r3, r4, [r0]
   849ca:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   849ce:	ddf1      	ble.n	849b4 <_svfprintf_r+0x9bc>
   849d0:	4631      	mov	r1, r6
   849d2:	4628      	mov	r0, r5
   849d4:	aa28      	add	r2, sp, #160	; 0xa0
   849d6:	f004 ff6d 	bl	898b4 <__ssprint_r>
   849da:	2800      	cmp	r0, #0
   849dc:	f47f ac6f 	bne.w	842be <_svfprintf_r+0x2c6>
   849e0:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   849e4:	3f10      	subs	r7, #16
   849e6:	2f10      	cmp	r7, #16
   849e8:	a82b      	add	r0, sp, #172	; 0xac
   849ea:	dce8      	bgt.n	849be <_svfprintf_r+0x9c6>
   849ec:	464d      	mov	r5, r9
   849ee:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   849f2:	46b9      	mov	r9, r7
   849f4:	4647      	mov	r7, r8
   849f6:	4680      	mov	r8, r0
   849f8:	eb09 0401 	add.w	r4, r9, r1
   849fc:	3201      	adds	r2, #1
   849fe:	4910      	ldr	r1, [pc, #64]	; (84a40 <_svfprintf_r+0xa48>)
   84a00:	2a07      	cmp	r2, #7
   84a02:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   84a06:	f8c8 9004 	str.w	r9, [r8, #4]
   84a0a:	f8c8 1000 	str.w	r1, [r8]
   84a0e:	f300 83c3 	bgt.w	85198 <_svfprintf_r+0x11a0>
   84a12:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   84a16:	f108 0808 	add.w	r8, r8, #8
   84a1a:	e486      	b.n	8432a <_svfprintf_r+0x332>
   84a1c:	990c      	ldr	r1, [sp, #48]	; 0x30
   84a1e:	980a      	ldr	r0, [sp, #40]	; 0x28
   84a20:	aa28      	add	r2, sp, #160	; 0xa0
   84a22:	931d      	str	r3, [sp, #116]	; 0x74
   84a24:	f004 ff46 	bl	898b4 <__ssprint_r>
   84a28:	2800      	cmp	r0, #0
   84a2a:	f47f ac48 	bne.w	842be <_svfprintf_r+0x2c6>
   84a2e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   84a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   84a32:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84a36:	e48a      	b.n	8434e <_svfprintf_r+0x356>
   84a38:	0008ac1c 	.word	0x0008ac1c
   84a3c:	0008ac30 	.word	0x0008ac30
   84a40:	0008ac20 	.word	0x0008ac20
   84a44:	990c      	ldr	r1, [sp, #48]	; 0x30
   84a46:	980a      	ldr	r0, [sp, #40]	; 0x28
   84a48:	aa28      	add	r2, sp, #160	; 0xa0
   84a4a:	f004 ff33 	bl	898b4 <__ssprint_r>
   84a4e:	2800      	cmp	r0, #0
   84a50:	f47f ac35 	bne.w	842be <_svfprintf_r+0x2c6>
   84a54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   84a56:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84a5a:	e489      	b.n	84370 <_svfprintf_r+0x378>
   84a5c:	2d10      	cmp	r5, #16
   84a5e:	f340 86c4 	ble.w	857ea <_svfprintf_r+0x17f2>
   84a62:	2610      	movs	r6, #16
   84a64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84a66:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   84a68:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   84a6c:	e004      	b.n	84a78 <_svfprintf_r+0xa80>
   84a6e:	3d10      	subs	r5, #16
   84a70:	2d10      	cmp	r5, #16
   84a72:	f108 0808 	add.w	r8, r8, #8
   84a76:	dd17      	ble.n	84aa8 <_svfprintf_r+0xab0>
   84a78:	3301      	adds	r3, #1
   84a7a:	4ab8      	ldr	r2, [pc, #736]	; (84d5c <_svfprintf_r+0xd64>)
   84a7c:	3410      	adds	r4, #16
   84a7e:	2b07      	cmp	r3, #7
   84a80:	e9c8 2600 	strd	r2, r6, [r8]
   84a84:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   84a88:	ddf1      	ble.n	84a6e <_svfprintf_r+0xa76>
   84a8a:	4649      	mov	r1, r9
   84a8c:	4638      	mov	r0, r7
   84a8e:	aa28      	add	r2, sp, #160	; 0xa0
   84a90:	f004 ff10 	bl	898b4 <__ssprint_r>
   84a94:	2800      	cmp	r0, #0
   84a96:	f47f ac12 	bne.w	842be <_svfprintf_r+0x2c6>
   84a9a:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   84a9e:	3d10      	subs	r5, #16
   84aa0:	2d10      	cmp	r5, #16
   84aa2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84aa6:	dce7      	bgt.n	84a78 <_svfprintf_r+0xa80>
   84aa8:	3301      	adds	r3, #1
   84aaa:	4aac      	ldr	r2, [pc, #688]	; (84d5c <_svfprintf_r+0xd64>)
   84aac:	442c      	add	r4, r5
   84aae:	2b07      	cmp	r3, #7
   84ab0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   84ab4:	f8c8 5004 	str.w	r5, [r8, #4]
   84ab8:	f8c8 2000 	str.w	r2, [r8]
   84abc:	f77f ac7e 	ble.w	843bc <_svfprintf_r+0x3c4>
   84ac0:	990c      	ldr	r1, [sp, #48]	; 0x30
   84ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
   84ac4:	aa28      	add	r2, sp, #160	; 0xa0
   84ac6:	f004 fef5 	bl	898b4 <__ssprint_r>
   84aca:	2800      	cmp	r0, #0
   84acc:	f47f abf7 	bne.w	842be <_svfprintf_r+0x2c6>
   84ad0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   84ad2:	e473      	b.n	843bc <_svfprintf_r+0x3c4>
   84ad4:	9922      	ldr	r1, [sp, #136]	; 0x88
   84ad6:	2900      	cmp	r1, #0
   84ad8:	f340 836f 	ble.w	851ba <_svfprintf_r+0x11c2>
   84adc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   84ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84ae2:	4599      	cmp	r9, r3
   84ae4:	bfa8      	it	ge
   84ae6:	4699      	movge	r9, r3
   84ae8:	f1b9 0f00 	cmp.w	r9, #0
   84aec:	dd0b      	ble.n	84b06 <_svfprintf_r+0xb0e>
   84aee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84af0:	444c      	add	r4, r9
   84af2:	3301      	adds	r3, #1
   84af4:	2b07      	cmp	r3, #7
   84af6:	e9c8 5900 	strd	r5, r9, [r8]
   84afa:	942a      	str	r4, [sp, #168]	; 0xa8
   84afc:	9329      	str	r3, [sp, #164]	; 0xa4
   84afe:	f300 851d 	bgt.w	8553c <_svfprintf_r+0x1544>
   84b02:	f108 0808 	add.w	r8, r8, #8
   84b06:	9e10      	ldr	r6, [sp, #64]	; 0x40
   84b08:	f1b9 0f00 	cmp.w	r9, #0
   84b0c:	bfa8      	it	ge
   84b0e:	eba6 0609 	subge.w	r6, r6, r9
   84b12:	2e00      	cmp	r6, #0
   84b14:	f300 8225 	bgt.w	84f62 <_svfprintf_r+0xf6a>
   84b18:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   84b1c:	0578      	lsls	r0, r7, #21
   84b1e:	44ab      	add	fp, r5
   84b20:	f100 825f 	bmi.w	84fe2 <_svfprintf_r+0xfea>
   84b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
   84b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84b28:	4293      	cmp	r3, r2
   84b2a:	db02      	blt.n	84b32 <_svfprintf_r+0xb3a>
   84b2c:	07f9      	lsls	r1, r7, #31
   84b2e:	f140 8476 	bpl.w	8541e <_svfprintf_r+0x1426>
   84b32:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84b34:	9917      	ldr	r1, [sp, #92]	; 0x5c
   84b36:	4414      	add	r4, r2
   84b38:	e9c8 1200 	strd	r1, r2, [r8]
   84b3c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   84b3e:	942a      	str	r4, [sp, #168]	; 0xa8
   84b40:	3201      	adds	r2, #1
   84b42:	2a07      	cmp	r2, #7
   84b44:	9229      	str	r2, [sp, #164]	; 0xa4
   84b46:	f300 8513 	bgt.w	85570 <_svfprintf_r+0x1578>
   84b4a:	f108 0808 	add.w	r8, r8, #8
   84b4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84b50:	18ae      	adds	r6, r5, r2
   84b52:	eba6 060b 	sub.w	r6, r6, fp
   84b56:	1ad5      	subs	r5, r2, r3
   84b58:	42ae      	cmp	r6, r5
   84b5a:	bfa8      	it	ge
   84b5c:	462e      	movge	r6, r5
   84b5e:	2e00      	cmp	r6, #0
   84b60:	dd0d      	ble.n	84b7e <_svfprintf_r+0xb86>
   84b62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84b64:	4434      	add	r4, r6
   84b66:	3301      	adds	r3, #1
   84b68:	2b07      	cmp	r3, #7
   84b6a:	f8c8 b000 	str.w	fp, [r8]
   84b6e:	f8c8 6004 	str.w	r6, [r8, #4]
   84b72:	942a      	str	r4, [sp, #168]	; 0xa8
   84b74:	9329      	str	r3, [sp, #164]	; 0xa4
   84b76:	f300 8571 	bgt.w	8565c <_svfprintf_r+0x1664>
   84b7a:	f108 0808 	add.w	r8, r8, #8
   84b7e:	2e00      	cmp	r6, #0
   84b80:	bfa8      	it	ge
   84b82:	1bad      	subge	r5, r5, r6
   84b84:	2d00      	cmp	r5, #0
   84b86:	f77f ac11 	ble.w	843ac <_svfprintf_r+0x3b4>
   84b8a:	2d10      	cmp	r5, #16
   84b8c:	f340 873c 	ble.w	85a08 <_svfprintf_r+0x1a10>
   84b90:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 84d60 <_svfprintf_r+0xd68>
   84b94:	4622      	mov	r2, r4
   84b96:	4649      	mov	r1, r9
   84b98:	2610      	movs	r6, #16
   84b9a:	46b9      	mov	r9, r7
   84b9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84b9e:	460f      	mov	r7, r1
   84ba0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   84ba4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84ba6:	e005      	b.n	84bb4 <_svfprintf_r+0xbbc>
   84ba8:	f108 0808 	add.w	r8, r8, #8
   84bac:	3d10      	subs	r5, #16
   84bae:	2d10      	cmp	r5, #16
   84bb0:	f340 8353 	ble.w	8525a <_svfprintf_r+0x1262>
   84bb4:	3301      	adds	r3, #1
   84bb6:	3210      	adds	r2, #16
   84bb8:	2b07      	cmp	r3, #7
   84bba:	e9c8 7600 	strd	r7, r6, [r8]
   84bbe:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   84bc2:	ddf1      	ble.n	84ba8 <_svfprintf_r+0xbb0>
   84bc4:	4621      	mov	r1, r4
   84bc6:	4658      	mov	r0, fp
   84bc8:	aa28      	add	r2, sp, #160	; 0xa0
   84bca:	f004 fe73 	bl	898b4 <__ssprint_r>
   84bce:	2800      	cmp	r0, #0
   84bd0:	f47f ab75 	bne.w	842be <_svfprintf_r+0x2c6>
   84bd4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   84bd8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84bdc:	e7e6      	b.n	84bac <_svfprintf_r+0xbb4>
   84bde:	9b07      	ldr	r3, [sp, #28]
   84be0:	2b00      	cmp	r3, #0
   84be2:	f47f aafc 	bne.w	841de <_svfprintf_r+0x1e6>
   84be6:	465f      	mov	r7, fp
   84be8:	2300      	movs	r3, #0
   84bea:	ad54      	add	r5, sp, #336	; 0x150
   84bec:	9307      	str	r3, [sp, #28]
   84bee:	930b      	str	r3, [sp, #44]	; 0x2c
   84bf0:	f7ff bafd 	b.w	841ee <_svfprintf_r+0x1f6>
   84bf4:	07fa      	lsls	r2, r7, #31
   84bf6:	f53f ae7f 	bmi.w	848f8 <_svfprintf_r+0x900>
   84bfa:	2301      	movs	r3, #1
   84bfc:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   84bfe:	3401      	adds	r4, #1
   84c00:	441e      	add	r6, r3
   84c02:	2e07      	cmp	r6, #7
   84c04:	f8c8 5000 	str.w	r5, [r8]
   84c08:	942a      	str	r4, [sp, #168]	; 0xa8
   84c0a:	f8c8 3004 	str.w	r3, [r8, #4]
   84c0e:	9629      	str	r6, [sp, #164]	; 0xa4
   84c10:	f77f aea5 	ble.w	8495e <_svfprintf_r+0x966>
   84c14:	990c      	ldr	r1, [sp, #48]	; 0x30
   84c16:	980a      	ldr	r0, [sp, #40]	; 0x28
   84c18:	aa28      	add	r2, sp, #160	; 0xa0
   84c1a:	f004 fe4b 	bl	898b4 <__ssprint_r>
   84c1e:	2800      	cmp	r0, #0
   84c20:	f47f ab4d 	bne.w	842be <_svfprintf_r+0x2c6>
   84c24:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   84c28:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84c2c:	e699      	b.n	84962 <_svfprintf_r+0x96a>
   84c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84c30:	1e5d      	subs	r5, r3, #1
   84c32:	2d00      	cmp	r5, #0
   84c34:	f77f ae95 	ble.w	84962 <_svfprintf_r+0x96a>
   84c38:	2d10      	cmp	r5, #16
   84c3a:	f340 86df 	ble.w	859fc <_svfprintf_r+0x1a04>
   84c3e:	4622      	mov	r2, r4
   84c40:	9707      	str	r7, [sp, #28]
   84c42:	f04f 0b10 	mov.w	fp, #16
   84c46:	f8df 9118 	ldr.w	r9, [pc, #280]	; 84d60 <_svfprintf_r+0xd68>
   84c4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84c4c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84c4e:	e005      	b.n	84c5c <_svfprintf_r+0xc64>
   84c50:	f108 0808 	add.w	r8, r8, #8
   84c54:	3d10      	subs	r5, #16
   84c56:	2d10      	cmp	r5, #16
   84c58:	f340 837f 	ble.w	8535a <_svfprintf_r+0x1362>
   84c5c:	3601      	adds	r6, #1
   84c5e:	3210      	adds	r2, #16
   84c60:	2e07      	cmp	r6, #7
   84c62:	e9c8 9b00 	strd	r9, fp, [r8]
   84c66:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   84c6a:	ddf1      	ble.n	84c50 <_svfprintf_r+0xc58>
   84c6c:	4639      	mov	r1, r7
   84c6e:	4620      	mov	r0, r4
   84c70:	aa28      	add	r2, sp, #160	; 0xa0
   84c72:	f004 fe1f 	bl	898b4 <__ssprint_r>
   84c76:	2800      	cmp	r0, #0
   84c78:	f47f ab21 	bne.w	842be <_svfprintf_r+0x2c6>
   84c7c:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   84c80:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84c84:	e7e6      	b.n	84c54 <_svfprintf_r+0xc5c>
   84c86:	990c      	ldr	r1, [sp, #48]	; 0x30
   84c88:	980a      	ldr	r0, [sp, #40]	; 0x28
   84c8a:	aa28      	add	r2, sp, #160	; 0xa0
   84c8c:	f004 fe12 	bl	898b4 <__ssprint_r>
   84c90:	2800      	cmp	r0, #0
   84c92:	f47f ab14 	bne.w	842be <_svfprintf_r+0x2c6>
   84c96:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   84c98:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84c9c:	f7ff bb74 	b.w	84388 <_svfprintf_r+0x390>
   84ca0:	f01b 0310 	ands.w	r3, fp, #16
   84ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84ca6:	d13a      	bne.n	84d1e <_svfprintf_r+0xd26>
   84ca8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   84cac:	d033      	beq.n	84d16 <_svfprintf_r+0xd1e>
   84cae:	f852 4b04 	ldr.w	r4, [r2], #4
   84cb2:	4699      	mov	r9, r3
   84cb4:	920e      	str	r2, [sp, #56]	; 0x38
   84cb6:	2301      	movs	r3, #1
   84cb8:	b2a4      	uxth	r4, r4
   84cba:	f7ff babd 	b.w	84238 <_svfprintf_r+0x240>
   84cbe:	232d      	movs	r3, #45	; 0x2d
   84cc0:	4264      	negs	r4, r4
   84cc2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   84cc6:	46bb      	mov	fp, r7
   84cc8:	f04f 0301 	mov.w	r3, #1
   84ccc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   84cd0:	f7ff bab5 	b.w	8423e <_svfprintf_r+0x246>
   84cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
   84cd6:	980a      	ldr	r0, [sp, #40]	; 0x28
   84cd8:	aa28      	add	r2, sp, #160	; 0xa0
   84cda:	f004 fdeb 	bl	898b4 <__ssprint_r>
   84cde:	2800      	cmp	r0, #0
   84ce0:	f47f aaed 	bne.w	842be <_svfprintf_r+0x2c6>
   84ce4:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   84ce8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84cec:	e613      	b.n	84916 <_svfprintf_r+0x91e>
   84cee:	990c      	ldr	r1, [sp, #48]	; 0x30
   84cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
   84cf2:	aa28      	add	r2, sp, #160	; 0xa0
   84cf4:	f004 fdde 	bl	898b4 <__ssprint_r>
   84cf8:	2800      	cmp	r0, #0
   84cfa:	f47f aae0 	bne.w	842be <_svfprintf_r+0x2c6>
   84cfe:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   84d02:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84d06:	e613      	b.n	84930 <_svfprintf_r+0x938>
   84d08:	07fd      	lsls	r5, r7, #31
   84d0a:	f57f ab4f 	bpl.w	843ac <_svfprintf_r+0x3b4>
   84d0e:	e524      	b.n	8475a <_svfprintf_r+0x762>
   84d10:	ad54      	add	r5, sp, #336	; 0x150
   84d12:	f7ff ba6c 	b.w	841ee <_svfprintf_r+0x1f6>
   84d16:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   84d1a:	f040 838a 	bne.w	85432 <_svfprintf_r+0x143a>
   84d1e:	f852 4b04 	ldr.w	r4, [r2], #4
   84d22:	2301      	movs	r3, #1
   84d24:	920e      	str	r2, [sp, #56]	; 0x38
   84d26:	f7ff ba87 	b.w	84238 <_svfprintf_r+0x240>
   84d2a:	05b8      	lsls	r0, r7, #22
   84d2c:	f100 839b 	bmi.w	85466 <_svfprintf_r+0x146e>
   84d30:	ea4f 79e4 	mov.w	r9, r4, asr #31
   84d34:	464b      	mov	r3, r9
   84d36:	f7ff ba40 	b.w	841ba <_svfprintf_r+0x1c2>
   84d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d3c:	9808      	ldr	r0, [sp, #32]
   84d3e:	f853 1b04 	ldr.w	r1, [r3], #4
   84d42:	17c2      	asrs	r2, r0, #31
   84d44:	4655      	mov	r5, sl
   84d46:	e9c1 0200 	strd	r0, r2, [r1]
   84d4a:	930e      	str	r3, [sp, #56]	; 0x38
   84d4c:	f7ff bb4c 	b.w	843e8 <_svfprintf_r+0x3f0>
   84d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d52:	f853 4b04 	ldr.w	r4, [r3], #4
   84d56:	930e      	str	r3, [sp, #56]	; 0x38
   84d58:	f7ff ba6b 	b.w	84232 <_svfprintf_r+0x23a>
   84d5c:	0008ac20 	.word	0x0008ac20
   84d60:	0008ac30 	.word	0x0008ac30
   84d64:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   84d68:	4602      	mov	r2, r0
   84d6a:	460b      	mov	r3, r1
   84d6c:	f005 fce2 	bl	8a734 <__aeabi_dcmpun>
   84d70:	2800      	cmp	r0, #0
   84d72:	f040 85e9 	bne.w	85948 <_svfprintf_r+0x1950>
   84d76:	2e61      	cmp	r6, #97	; 0x61
   84d78:	f000 857d 	beq.w	85876 <_svfprintf_r+0x187e>
   84d7c:	2e41      	cmp	r6, #65	; 0x41
   84d7e:	f000 848b 	beq.w	85698 <_svfprintf_r+0x16a0>
   84d82:	9b07      	ldr	r3, [sp, #28]
   84d84:	3301      	adds	r3, #1
   84d86:	f000 838f 	beq.w	854a8 <_svfprintf_r+0x14b0>
   84d8a:	f026 0320 	bic.w	r3, r6, #32
   84d8e:	2b47      	cmp	r3, #71	; 0x47
   84d90:	9306      	str	r3, [sp, #24]
   84d92:	f000 858f 	beq.w	858b4 <_svfprintf_r+0x18bc>
   84d96:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   84d9a:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   84d9e:	930f      	str	r3, [sp, #60]	; 0x3c
   84da0:	4613      	mov	r3, r2
   84da2:	2b00      	cmp	r3, #0
   84da4:	f2c0 85b0 	blt.w	85908 <_svfprintf_r+0x1910>
   84da8:	930b      	str	r3, [sp, #44]	; 0x2c
   84daa:	2300      	movs	r3, #0
   84dac:	468b      	mov	fp, r1
   84dae:	931d      	str	r3, [sp, #116]	; 0x74
   84db0:	930d      	str	r3, [sp, #52]	; 0x34
   84db2:	9b06      	ldr	r3, [sp, #24]
   84db4:	2b46      	cmp	r3, #70	; 0x46
   84db6:	f000 83e9 	beq.w	8558c <_svfprintf_r+0x1594>
   84dba:	2b45      	cmp	r3, #69	; 0x45
   84dbc:	f000 8546 	beq.w	8584c <_svfprintf_r+0x1854>
   84dc0:	9907      	ldr	r1, [sp, #28]
   84dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84dc4:	9101      	str	r1, [sp, #4]
   84dc6:	2102      	movs	r1, #2
   84dc8:	9100      	str	r1, [sp, #0]
   84dca:	a926      	add	r1, sp, #152	; 0x98
   84dcc:	9104      	str	r1, [sp, #16]
   84dce:	a923      	add	r1, sp, #140	; 0x8c
   84dd0:	9103      	str	r1, [sp, #12]
   84dd2:	a922      	add	r1, sp, #136	; 0x88
   84dd4:	465a      	mov	r2, fp
   84dd6:	980a      	ldr	r0, [sp, #40]	; 0x28
   84dd8:	9102      	str	r1, [sp, #8]
   84dda:	f001 feb9 	bl	86b50 <_dtoa_r>
   84dde:	9b06      	ldr	r3, [sp, #24]
   84de0:	4605      	mov	r5, r0
   84de2:	2b47      	cmp	r3, #71	; 0x47
   84de4:	f040 863a 	bne.w	85a5c <_svfprintf_r+0x1a64>
   84de8:	f017 0f01 	tst.w	r7, #1
   84dec:	46b9      	mov	r9, r7
   84dee:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   84df0:	f040 84fe 	bne.w	857f0 <_svfprintf_r+0x17f8>
   84df4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84df6:	1b5b      	subs	r3, r3, r5
   84df8:	9312      	str	r3, [sp, #72]	; 0x48
   84dfa:	9b06      	ldr	r3, [sp, #24]
   84dfc:	2b47      	cmp	r3, #71	; 0x47
   84dfe:	f000 836e 	beq.w	854de <_svfprintf_r+0x14e6>
   84e02:	9b06      	ldr	r3, [sp, #24]
   84e04:	2b46      	cmp	r3, #70	; 0x46
   84e06:	f000 83f0 	beq.w	855ea <_svfprintf_r+0x15f2>
   84e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   84e0c:	9310      	str	r3, [sp, #64]	; 0x40
   84e0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84e10:	9a06      	ldr	r2, [sp, #24]
   84e12:	3b01      	subs	r3, #1
   84e14:	2a41      	cmp	r2, #65	; 0x41
   84e16:	9322      	str	r3, [sp, #136]	; 0x88
   84e18:	f000 85bb 	beq.w	85992 <_svfprintf_r+0x199a>
   84e1c:	2100      	movs	r1, #0
   84e1e:	b2f2      	uxtb	r2, r6
   84e20:	2b00      	cmp	r3, #0
   84e22:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   84e26:	bfb6      	itet	lt
   84e28:	222d      	movlt	r2, #45	; 0x2d
   84e2a:	222b      	movge	r2, #43	; 0x2b
   84e2c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   84e2e:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   84e32:	bfb8      	it	lt
   84e34:	f1c3 0301 	rsblt	r3, r3, #1
   84e38:	2b09      	cmp	r3, #9
   84e3a:	f340 859b 	ble.w	85974 <_svfprintf_r+0x197c>
   84e3e:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   84e42:	4662      	mov	r2, ip
   84e44:	4fb6      	ldr	r7, [pc, #728]	; (85120 <_svfprintf_r+0x1128>)
   84e46:	461c      	mov	r4, r3
   84e48:	4610      	mov	r0, r2
   84e4a:	fb87 1203 	smull	r1, r2, r7, r3
   84e4e:	17d9      	asrs	r1, r3, #31
   84e50:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   84e54:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   84e58:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   84e5c:	3230      	adds	r2, #48	; 0x30
   84e5e:	2c63      	cmp	r4, #99	; 0x63
   84e60:	f800 2c01 	strb.w	r2, [r0, #-1]
   84e64:	460b      	mov	r3, r1
   84e66:	f100 32ff 	add.w	r2, r0, #4294967295
   84e6a:	dcec      	bgt.n	84e46 <_svfprintf_r+0xe4e>
   84e6c:	3330      	adds	r3, #48	; 0x30
   84e6e:	1e81      	subs	r1, r0, #2
   84e70:	b2db      	uxtb	r3, r3
   84e72:	458c      	cmp	ip, r1
   84e74:	f802 3c01 	strb.w	r3, [r2, #-1]
   84e78:	f240 85f9 	bls.w	85a6e <_svfprintf_r+0x1a76>
   84e7c:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   84e80:	e001      	b.n	84e86 <_svfprintf_r+0xe8e>
   84e82:	f812 3b01 	ldrb.w	r3, [r2], #1
   84e86:	4594      	cmp	ip, r2
   84e88:	f801 3b01 	strb.w	r3, [r1], #1
   84e8c:	d1f9      	bne.n	84e82 <_svfprintf_r+0xe8a>
   84e8e:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   84e92:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   84e96:	1a1b      	subs	r3, r3, r0
   84e98:	4413      	add	r3, r2
   84e9a:	aa24      	add	r2, sp, #144	; 0x90
   84e9c:	1a9b      	subs	r3, r3, r2
   84e9e:	931a      	str	r3, [sp, #104]	; 0x68
   84ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84ea2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   84ea4:	2b01      	cmp	r3, #1
   84ea6:	441a      	add	r2, r3
   84ea8:	920b      	str	r2, [sp, #44]	; 0x2c
   84eaa:	f340 8581 	ble.w	859b0 <_svfprintf_r+0x19b8>
   84eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84eb0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84eb2:	4413      	add	r3, r2
   84eb4:	930b      	str	r3, [sp, #44]	; 0x2c
   84eb6:	2300      	movs	r3, #0
   84eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84eba:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   84ebe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   84ec2:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   84ec6:	930f      	str	r3, [sp, #60]	; 0x3c
   84ec8:	9206      	str	r2, [sp, #24]
   84eca:	9313      	str	r3, [sp, #76]	; 0x4c
   84ecc:	9310      	str	r3, [sp, #64]	; 0x40
   84ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   84ed0:	2b00      	cmp	r3, #0
   84ed2:	f040 832c 	bne.w	8552e <_svfprintf_r+0x1536>
   84ed6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   84eda:	9307      	str	r3, [sp, #28]
   84edc:	f7ff b994 	b.w	84208 <_svfprintf_r+0x210>
   84ee0:	46bb      	mov	fp, r7
   84ee2:	f7ff bb2f 	b.w	84544 <_svfprintf_r+0x54c>
   84ee6:	4b8f      	ldr	r3, [pc, #572]	; (85124 <_svfprintf_r+0x112c>)
   84ee8:	9318      	str	r3, [sp, #96]	; 0x60
   84eea:	f017 0920 	ands.w	r9, r7, #32
   84eee:	f000 80f5 	beq.w	850dc <_svfprintf_r+0x10e4>
   84ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84ef4:	3307      	adds	r3, #7
   84ef6:	f023 0307 	bic.w	r3, r3, #7
   84efa:	f8d3 9004 	ldr.w	r9, [r3, #4]
   84efe:	f853 4b08 	ldr.w	r4, [r3], #8
   84f02:	930e      	str	r3, [sp, #56]	; 0x38
   84f04:	07f8      	lsls	r0, r7, #31
   84f06:	d509      	bpl.n	84f1c <_svfprintf_r+0xf24>
   84f08:	ea54 0309 	orrs.w	r3, r4, r9
   84f0c:	d006      	beq.n	84f1c <_svfprintf_r+0xf24>
   84f0e:	2330      	movs	r3, #48	; 0x30
   84f10:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   84f14:	f047 0702 	orr.w	r7, r7, #2
   84f18:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   84f1c:	2302      	movs	r3, #2
   84f1e:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   84f22:	f7ff b989 	b.w	84238 <_svfprintf_r+0x240>
   84f26:	4b80      	ldr	r3, [pc, #512]	; (85128 <_svfprintf_r+0x1130>)
   84f28:	9318      	str	r3, [sp, #96]	; 0x60
   84f2a:	e7de      	b.n	84eea <_svfprintf_r+0xef2>
   84f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   84f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   84f30:	aa28      	add	r2, sp, #160	; 0xa0
   84f32:	f004 fcbf 	bl	898b4 <__ssprint_r>
   84f36:	2800      	cmp	r0, #0
   84f38:	f47f a9c1 	bne.w	842be <_svfprintf_r+0x2c6>
   84f3c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   84f3e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   84f42:	e418      	b.n	84776 <_svfprintf_r+0x77e>
   84f44:	2140      	movs	r1, #64	; 0x40
   84f46:	980a      	ldr	r0, [sp, #40]	; 0x28
   84f48:	f003 fb00 	bl	8854c <_malloc_r>
   84f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84f4e:	6018      	str	r0, [r3, #0]
   84f50:	6118      	str	r0, [r3, #16]
   84f52:	2800      	cmp	r0, #0
   84f54:	f000 8597 	beq.w	85a86 <_svfprintf_r+0x1a8e>
   84f58:	2340      	movs	r3, #64	; 0x40
   84f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84f5c:	6153      	str	r3, [r2, #20]
   84f5e:	f7ff b862 	b.w	84026 <_svfprintf_r+0x2e>
   84f62:	2e10      	cmp	r6, #16
   84f64:	f340 8576 	ble.w	85a54 <_svfprintf_r+0x1a5c>
   84f68:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8512c <_svfprintf_r+0x1134>
   84f6c:	4642      	mov	r2, r8
   84f6e:	4648      	mov	r0, r9
   84f70:	4621      	mov	r1, r4
   84f72:	46a8      	mov	r8, r5
   84f74:	46b9      	mov	r9, r7
   84f76:	f04f 0b10 	mov.w	fp, #16
   84f7a:	4607      	mov	r7, r0
   84f7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84f7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   84f82:	e004      	b.n	84f8e <_svfprintf_r+0xf96>
   84f84:	3208      	adds	r2, #8
   84f86:	3e10      	subs	r6, #16
   84f88:	2e10      	cmp	r6, #16
   84f8a:	f340 8213 	ble.w	853b4 <_svfprintf_r+0x13bc>
   84f8e:	3301      	adds	r3, #1
   84f90:	3110      	adds	r1, #16
   84f92:	2b07      	cmp	r3, #7
   84f94:	e9c2 7b00 	strd	r7, fp, [r2]
   84f98:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   84f9c:	ddf2      	ble.n	84f84 <_svfprintf_r+0xf8c>
   84f9e:	4629      	mov	r1, r5
   84fa0:	4620      	mov	r0, r4
   84fa2:	aa28      	add	r2, sp, #160	; 0xa0
   84fa4:	f004 fc86 	bl	898b4 <__ssprint_r>
   84fa8:	2800      	cmp	r0, #0
   84faa:	f47f a988 	bne.w	842be <_svfprintf_r+0x2c6>
   84fae:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   84fb2:	aa2b      	add	r2, sp, #172	; 0xac
   84fb4:	e7e7      	b.n	84f86 <_svfprintf_r+0xf8e>
   84fb6:	4628      	mov	r0, r5
   84fb8:	f8cd 901c 	str.w	r9, [sp, #28]
   84fbc:	940e      	str	r4, [sp, #56]	; 0x38
   84fbe:	f7fe ffb9 	bl	83f34 <strlen>
   84fc2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   84fc6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   84fca:	900b      	str	r0, [sp, #44]	; 0x2c
   84fcc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   84fd0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   84fd4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   84fd8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   84fdc:	9306      	str	r3, [sp, #24]
   84fde:	f7ff b913 	b.w	84208 <_svfprintf_r+0x210>
   84fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84fe4:	4642      	mov	r2, r8
   84fe6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   84fea:	18eb      	adds	r3, r5, r3
   84fec:	465e      	mov	r6, fp
   84fee:	9307      	str	r3, [sp, #28]
   84ff0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   84ff4:	9710      	str	r7, [sp, #64]	; 0x40
   84ff6:	4621      	mov	r1, r4
   84ff8:	9f19      	ldr	r7, [sp, #100]	; 0x64
   84ffa:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   84ffe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   85002:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85008:	9513      	str	r5, [sp, #76]	; 0x4c
   8500a:	f1b8 0f00 	cmp.w	r8, #0
   8500e:	d02e      	beq.n	8506e <_svfprintf_r+0x1076>
   85010:	bb83      	cbnz	r3, 85074 <_svfprintf_r+0x107c>
   85012:	3f01      	subs	r7, #1
   85014:	f108 38ff 	add.w	r8, r8, #4294967295
   85018:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   8501a:	4449      	add	r1, r9
   8501c:	e9c2 3900 	strd	r3, r9, [r2]
   85020:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85022:	912a      	str	r1, [sp, #168]	; 0xa8
   85024:	3301      	adds	r3, #1
   85026:	2b07      	cmp	r3, #7
   85028:	9329      	str	r3, [sp, #164]	; 0xa4
   8502a:	dc60      	bgt.n	850ee <_svfprintf_r+0x10f6>
   8502c:	3208      	adds	r2, #8
   8502e:	9b07      	ldr	r3, [sp, #28]
   85030:	7838      	ldrb	r0, [r7, #0]
   85032:	1b9b      	subs	r3, r3, r6
   85034:	4283      	cmp	r3, r0
   85036:	bfa8      	it	ge
   85038:	4603      	movge	r3, r0
   8503a:	2b00      	cmp	r3, #0
   8503c:	461c      	mov	r4, r3
   8503e:	dd0b      	ble.n	85058 <_svfprintf_r+0x1060>
   85040:	9829      	ldr	r0, [sp, #164]	; 0xa4
   85042:	4419      	add	r1, r3
   85044:	3001      	adds	r0, #1
   85046:	2807      	cmp	r0, #7
   85048:	e9c2 6300 	strd	r6, r3, [r2]
   8504c:	912a      	str	r1, [sp, #168]	; 0xa8
   8504e:	9029      	str	r0, [sp, #164]	; 0xa4
   85050:	f300 8114 	bgt.w	8527c <_svfprintf_r+0x1284>
   85054:	7838      	ldrb	r0, [r7, #0]
   85056:	3208      	adds	r2, #8
   85058:	2c00      	cmp	r4, #0
   8505a:	bfb4      	ite	lt
   8505c:	4605      	movlt	r5, r0
   8505e:	1b05      	subge	r5, r0, r4
   85060:	2d00      	cmp	r5, #0
   85062:	dc0b      	bgt.n	8507c <_svfprintf_r+0x1084>
   85064:	4406      	add	r6, r0
   85066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85068:	f1b8 0f00 	cmp.w	r8, #0
   8506c:	d1d0      	bne.n	85010 <_svfprintf_r+0x1018>
   8506e:	2b00      	cmp	r3, #0
   85070:	f000 8226 	beq.w	854c0 <_svfprintf_r+0x14c8>
   85074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85076:	3b01      	subs	r3, #1
   85078:	930f      	str	r3, [sp, #60]	; 0x3c
   8507a:	e7cd      	b.n	85018 <_svfprintf_r+0x1020>
   8507c:	2d10      	cmp	r5, #16
   8507e:	f340 849d 	ble.w	859bc <_svfprintf_r+0x19c4>
   85082:	2410      	movs	r4, #16
   85084:	9829      	ldr	r0, [sp, #164]	; 0xa4
   85086:	e004      	b.n	85092 <_svfprintf_r+0x109a>
   85088:	3d10      	subs	r5, #16
   8508a:	2d10      	cmp	r5, #16
   8508c:	f102 0208 	add.w	r2, r2, #8
   85090:	dd16      	ble.n	850c0 <_svfprintf_r+0x10c8>
   85092:	3001      	adds	r0, #1
   85094:	4b25      	ldr	r3, [pc, #148]	; (8512c <_svfprintf_r+0x1134>)
   85096:	3110      	adds	r1, #16
   85098:	2807      	cmp	r0, #7
   8509a:	e9c2 3400 	strd	r3, r4, [r2]
   8509e:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   850a2:	ddf1      	ble.n	85088 <_svfprintf_r+0x1090>
   850a4:	4659      	mov	r1, fp
   850a6:	4650      	mov	r0, sl
   850a8:	aa28      	add	r2, sp, #160	; 0xa0
   850aa:	f004 fc03 	bl	898b4 <__ssprint_r>
   850ae:	2800      	cmp	r0, #0
   850b0:	f47f a905 	bne.w	842be <_svfprintf_r+0x2c6>
   850b4:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   850b8:	3d10      	subs	r5, #16
   850ba:	2d10      	cmp	r5, #16
   850bc:	aa2b      	add	r2, sp, #172	; 0xac
   850be:	dce8      	bgt.n	85092 <_svfprintf_r+0x109a>
   850c0:	3001      	adds	r0, #1
   850c2:	4b1a      	ldr	r3, [pc, #104]	; (8512c <_svfprintf_r+0x1134>)
   850c4:	4429      	add	r1, r5
   850c6:	2807      	cmp	r0, #7
   850c8:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   850cc:	6055      	str	r5, [r2, #4]
   850ce:	6013      	str	r3, [r2, #0]
   850d0:	f300 8241 	bgt.w	85556 <_svfprintf_r+0x155e>
   850d4:	7838      	ldrb	r0, [r7, #0]
   850d6:	3208      	adds	r2, #8
   850d8:	4406      	add	r6, r0
   850da:	e7c4      	b.n	85066 <_svfprintf_r+0x106e>
   850dc:	f017 0310 	ands.w	r3, r7, #16
   850e0:	f000 80a0 	beq.w	85224 <_svfprintf_r+0x122c>
   850e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   850e6:	f853 4b04 	ldr.w	r4, [r3], #4
   850ea:	930e      	str	r3, [sp, #56]	; 0x38
   850ec:	e70a      	b.n	84f04 <_svfprintf_r+0xf0c>
   850ee:	4659      	mov	r1, fp
   850f0:	4650      	mov	r0, sl
   850f2:	aa28      	add	r2, sp, #160	; 0xa0
   850f4:	f004 fbde 	bl	898b4 <__ssprint_r>
   850f8:	2800      	cmp	r0, #0
   850fa:	f47f a8e0 	bne.w	842be <_svfprintf_r+0x2c6>
   850fe:	992a      	ldr	r1, [sp, #168]	; 0xa8
   85100:	aa2b      	add	r2, sp, #172	; 0xac
   85102:	e794      	b.n	8502e <_svfprintf_r+0x1036>
   85104:	2300      	movs	r3, #0
   85106:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   8510a:	9606      	str	r6, [sp, #24]
   8510c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   85110:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   85114:	4692      	mov	sl, r2
   85116:	461e      	mov	r6, r3
   85118:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   8511c:	af54      	add	r7, sp, #336	; 0x150
   8511e:	e014      	b.n	8514a <_svfprintf_r+0x1152>
   85120:	66666667 	.word	0x66666667
   85124:	0008abec 	.word	0x0008abec
   85128:	0008ac00 	.word	0x0008ac00
   8512c:	0008ac30 	.word	0x0008ac30
   85130:	2300      	movs	r3, #0
   85132:	4620      	mov	r0, r4
   85134:	4649      	mov	r1, r9
   85136:	220a      	movs	r2, #10
   85138:	f005 fb3a 	bl	8a7b0 <__aeabi_uldivmod>
   8513c:	2c0a      	cmp	r4, #10
   8513e:	f179 0300 	sbcs.w	r3, r9, #0
   85142:	d31b      	bcc.n	8517c <_svfprintf_r+0x1184>
   85144:	4604      	mov	r4, r0
   85146:	4689      	mov	r9, r1
   85148:	462f      	mov	r7, r5
   8514a:	4620      	mov	r0, r4
   8514c:	220a      	movs	r2, #10
   8514e:	2300      	movs	r3, #0
   85150:	4649      	mov	r1, r9
   85152:	f005 fb2d 	bl	8a7b0 <__aeabi_uldivmod>
   85156:	3230      	adds	r2, #48	; 0x30
   85158:	1e7d      	subs	r5, r7, #1
   8515a:	3601      	adds	r6, #1
   8515c:	f807 2c01 	strb.w	r2, [r7, #-1]
   85160:	f1ba 0f00 	cmp.w	sl, #0
   85164:	d0e4      	beq.n	85130 <_svfprintf_r+0x1138>
   85166:	f898 3000 	ldrb.w	r3, [r8]
   8516a:	429e      	cmp	r6, r3
   8516c:	d1e0      	bne.n	85130 <_svfprintf_r+0x1138>
   8516e:	2eff      	cmp	r6, #255	; 0xff
   85170:	d0de      	beq.n	85130 <_svfprintf_r+0x1138>
   85172:	2c0a      	cmp	r4, #10
   85174:	f179 0300 	sbcs.w	r3, r9, #0
   85178:	f080 8130 	bcs.w	853dc <_svfprintf_r+0x13e4>
   8517c:	ab54      	add	r3, sp, #336	; 0x150
   8517e:	1b5b      	subs	r3, r3, r5
   85180:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   85184:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   85188:	9612      	str	r6, [sp, #72]	; 0x48
   8518a:	465f      	mov	r7, fp
   8518c:	9e06      	ldr	r6, [sp, #24]
   8518e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   85192:	930b      	str	r3, [sp, #44]	; 0x2c
   85194:	f7ff b82b 	b.w	841ee <_svfprintf_r+0x1f6>
   85198:	990c      	ldr	r1, [sp, #48]	; 0x30
   8519a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8519c:	aa28      	add	r2, sp, #160	; 0xa0
   8519e:	931d      	str	r3, [sp, #116]	; 0x74
   851a0:	f004 fb88 	bl	898b4 <__ssprint_r>
   851a4:	2800      	cmp	r0, #0
   851a6:	f47f a88a 	bne.w	842be <_svfprintf_r+0x2c6>
   851aa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   851ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   851b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   851b2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   851b6:	f7ff b8b8 	b.w	8432a <_svfprintf_r+0x332>
   851ba:	2301      	movs	r3, #1
   851bc:	f8c8 3004 	str.w	r3, [r8, #4]
   851c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   851c2:	4abc      	ldr	r2, [pc, #752]	; (854b4 <_svfprintf_r+0x14bc>)
   851c4:	3301      	adds	r3, #1
   851c6:	3401      	adds	r4, #1
   851c8:	2b07      	cmp	r3, #7
   851ca:	942a      	str	r4, [sp, #168]	; 0xa8
   851cc:	9329      	str	r3, [sp, #164]	; 0xa4
   851ce:	f8c8 2000 	str.w	r2, [r8]
   851d2:	f300 8117 	bgt.w	85404 <_svfprintf_r+0x140c>
   851d6:	f108 0808 	add.w	r8, r8, #8
   851da:	2900      	cmp	r1, #0
   851dc:	f040 8086 	bne.w	852ec <_svfprintf_r+0x12f4>
   851e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   851e2:	f007 0301 	and.w	r3, r7, #1
   851e6:	4313      	orrs	r3, r2
   851e8:	f43f a8e0 	beq.w	843ac <_svfprintf_r+0x3b4>
   851ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   851ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
   851f0:	191a      	adds	r2, r3, r4
   851f2:	e9c8 1300 	strd	r1, r3, [r8]
   851f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   851f8:	922a      	str	r2, [sp, #168]	; 0xa8
   851fa:	3301      	adds	r3, #1
   851fc:	2b07      	cmp	r3, #7
   851fe:	9329      	str	r3, [sp, #164]	; 0xa4
   85200:	f300 8137 	bgt.w	85472 <_svfprintf_r+0x147a>
   85204:	f108 0808 	add.w	r8, r8, #8
   85208:	9912      	ldr	r1, [sp, #72]	; 0x48
   8520a:	3301      	adds	r3, #1
   8520c:	188c      	adds	r4, r1, r2
   8520e:	2b07      	cmp	r3, #7
   85210:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   85214:	f8c8 5000 	str.w	r5, [r8]
   85218:	f8c8 1004 	str.w	r1, [r8, #4]
   8521c:	f77f a8c4 	ble.w	843a8 <_svfprintf_r+0x3b0>
   85220:	f7ff bbac 	b.w	8497c <_svfprintf_r+0x984>
   85224:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   85228:	f000 80a5 	beq.w	85376 <_svfprintf_r+0x137e>
   8522c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8522e:	4699      	mov	r9, r3
   85230:	f852 4b04 	ldr.w	r4, [r2], #4
   85234:	920e      	str	r2, [sp, #56]	; 0x38
   85236:	b2a4      	uxth	r4, r4
   85238:	e664      	b.n	84f04 <_svfprintf_r+0xf0c>
   8523a:	46bb      	mov	fp, r7
   8523c:	f7fe bfca 	b.w	841d4 <_svfprintf_r+0x1dc>
   85240:	990c      	ldr	r1, [sp, #48]	; 0x30
   85242:	980a      	ldr	r0, [sp, #40]	; 0x28
   85244:	aa28      	add	r2, sp, #160	; 0xa0
   85246:	f004 fb35 	bl	898b4 <__ssprint_r>
   8524a:	2800      	cmp	r0, #0
   8524c:	f47f a837 	bne.w	842be <_svfprintf_r+0x2c6>
   85250:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85252:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85256:	f7ff ba7b 	b.w	84750 <_svfprintf_r+0x758>
   8525a:	4614      	mov	r4, r2
   8525c:	463a      	mov	r2, r7
   8525e:	464f      	mov	r7, r9
   85260:	4691      	mov	r9, r2
   85262:	3301      	adds	r3, #1
   85264:	442c      	add	r4, r5
   85266:	2b07      	cmp	r3, #7
   85268:	f8c8 9000 	str.w	r9, [r8]
   8526c:	f8c8 5004 	str.w	r5, [r8, #4]
   85270:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   85274:	f77f a898 	ble.w	843a8 <_svfprintf_r+0x3b0>
   85278:	f7ff bb80 	b.w	8497c <_svfprintf_r+0x984>
   8527c:	4659      	mov	r1, fp
   8527e:	4650      	mov	r0, sl
   85280:	aa28      	add	r2, sp, #160	; 0xa0
   85282:	f004 fb17 	bl	898b4 <__ssprint_r>
   85286:	2800      	cmp	r0, #0
   85288:	f47f a819 	bne.w	842be <_svfprintf_r+0x2c6>
   8528c:	7838      	ldrb	r0, [r7, #0]
   8528e:	992a      	ldr	r1, [sp, #168]	; 0xa8
   85290:	aa2b      	add	r2, sp, #172	; 0xac
   85292:	e6e1      	b.n	85058 <_svfprintf_r+0x1060>
   85294:	990c      	ldr	r1, [sp, #48]	; 0x30
   85296:	980a      	ldr	r0, [sp, #40]	; 0x28
   85298:	aa28      	add	r2, sp, #160	; 0xa0
   8529a:	f004 fb0b 	bl	898b4 <__ssprint_r>
   8529e:	2800      	cmp	r0, #0
   852a0:	f47f a80d 	bne.w	842be <_svfprintf_r+0x2c6>
   852a4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   852a6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   852aa:	f7ff b865 	b.w	84378 <_svfprintf_r+0x380>
   852ae:	2b01      	cmp	r3, #1
   852b0:	46bb      	mov	fp, r7
   852b2:	f47f a9f5 	bne.w	846a0 <_svfprintf_r+0x6a8>
   852b6:	f7fe bf92 	b.w	841de <_svfprintf_r+0x1e6>
   852ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   852bc:	9908      	ldr	r1, [sp, #32]
   852be:	f853 2b04 	ldr.w	r2, [r3], #4
   852c2:	4655      	mov	r5, sl
   852c4:	6011      	str	r1, [r2, #0]
   852c6:	930e      	str	r3, [sp, #56]	; 0x38
   852c8:	f7ff b88e 	b.w	843e8 <_svfprintf_r+0x3f0>
   852cc:	2b06      	cmp	r3, #6
   852ce:	4629      	mov	r1, r5
   852d0:	bf28      	it	cs
   852d2:	2306      	movcs	r3, #6
   852d4:	462a      	mov	r2, r5
   852d6:	9507      	str	r5, [sp, #28]
   852d8:	950d      	str	r5, [sp, #52]	; 0x34
   852da:	9306      	str	r3, [sp, #24]
   852dc:	4d76      	ldr	r5, [pc, #472]	; (854b8 <_svfprintf_r+0x14c0>)
   852de:	940e      	str	r4, [sp, #56]	; 0x38
   852e0:	930b      	str	r3, [sp, #44]	; 0x2c
   852e2:	910f      	str	r1, [sp, #60]	; 0x3c
   852e4:	9113      	str	r1, [sp, #76]	; 0x4c
   852e6:	9110      	str	r1, [sp, #64]	; 0x40
   852e8:	f7fe bf8e 	b.w	84208 <_svfprintf_r+0x210>
   852ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   852ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
   852f0:	191a      	adds	r2, r3, r4
   852f2:	e9c8 0300 	strd	r0, r3, [r8]
   852f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   852f8:	922a      	str	r2, [sp, #168]	; 0xa8
   852fa:	3301      	adds	r3, #1
   852fc:	2b07      	cmp	r3, #7
   852fe:	9329      	str	r3, [sp, #164]	; 0xa4
   85300:	f300 80b7 	bgt.w	85472 <_svfprintf_r+0x147a>
   85304:	f108 0808 	add.w	r8, r8, #8
   85308:	2900      	cmp	r1, #0
   8530a:	f6bf af7d 	bge.w	85208 <_svfprintf_r+0x1210>
   8530e:	424e      	negs	r6, r1
   85310:	3110      	adds	r1, #16
   85312:	f280 83a9 	bge.w	85a68 <_svfprintf_r+0x1a70>
   85316:	4641      	mov	r1, r8
   85318:	2410      	movs	r4, #16
   8531a:	46a8      	mov	r8, r5
   8531c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 854bc <_svfprintf_r+0x14c4>
   85320:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   85324:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85326:	e004      	b.n	85332 <_svfprintf_r+0x133a>
   85328:	3108      	adds	r1, #8
   8532a:	3e10      	subs	r6, #16
   8532c:	2e10      	cmp	r6, #16
   8532e:	f340 82a7 	ble.w	85880 <_svfprintf_r+0x1888>
   85332:	3301      	adds	r3, #1
   85334:	3210      	adds	r2, #16
   85336:	2b07      	cmp	r3, #7
   85338:	e9c1 9400 	strd	r9, r4, [r1]
   8533c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   85340:	ddf2      	ble.n	85328 <_svfprintf_r+0x1330>
   85342:	4629      	mov	r1, r5
   85344:	4658      	mov	r0, fp
   85346:	aa28      	add	r2, sp, #160	; 0xa0
   85348:	f004 fab4 	bl	898b4 <__ssprint_r>
   8534c:	2800      	cmp	r0, #0
   8534e:	f47e afb6 	bne.w	842be <_svfprintf_r+0x2c6>
   85352:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   85356:	a92b      	add	r1, sp, #172	; 0xac
   85358:	e7e7      	b.n	8532a <_svfprintf_r+0x1332>
   8535a:	4614      	mov	r4, r2
   8535c:	9f07      	ldr	r7, [sp, #28]
   8535e:	3601      	adds	r6, #1
   85360:	442c      	add	r4, r5
   85362:	2e07      	cmp	r6, #7
   85364:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   85368:	f8c8 9000 	str.w	r9, [r8]
   8536c:	f8c8 5004 	str.w	r5, [r8, #4]
   85370:	f77f aaf5 	ble.w	8495e <_svfprintf_r+0x966>
   85374:	e44e      	b.n	84c14 <_svfprintf_r+0xc1c>
   85376:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   8537a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8537c:	d066      	beq.n	8544c <_svfprintf_r+0x1454>
   8537e:	f853 4b04 	ldr.w	r4, [r3], #4
   85382:	4691      	mov	r9, r2
   85384:	930e      	str	r3, [sp, #56]	; 0x38
   85386:	b2e4      	uxtb	r4, r4
   85388:	e5bc      	b.n	84f04 <_svfprintf_r+0xf0c>
   8538a:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   8538e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85390:	d057      	beq.n	85442 <_svfprintf_r+0x144a>
   85392:	f853 4b04 	ldr.w	r4, [r3], #4
   85396:	4691      	mov	r9, r2
   85398:	930e      	str	r3, [sp, #56]	; 0x38
   8539a:	b2e4      	uxtb	r4, r4
   8539c:	f7fe bf49 	b.w	84232 <_svfprintf_r+0x23a>
   853a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   853a2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 854bc <_svfprintf_r+0x14c4>
   853a6:	f7ff ba95 	b.w	848d4 <_svfprintf_r+0x8dc>
   853aa:	222d      	movs	r2, #45	; 0x2d
   853ac:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   853b0:	f7ff b857 	b.w	84462 <_svfprintf_r+0x46a>
   853b4:	4645      	mov	r5, r8
   853b6:	4690      	mov	r8, r2
   853b8:	463a      	mov	r2, r7
   853ba:	460c      	mov	r4, r1
   853bc:	464f      	mov	r7, r9
   853be:	4691      	mov	r9, r2
   853c0:	3301      	adds	r3, #1
   853c2:	4434      	add	r4, r6
   853c4:	2b07      	cmp	r3, #7
   853c6:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   853ca:	f8c8 9000 	str.w	r9, [r8]
   853ce:	f8c8 6004 	str.w	r6, [r8, #4]
   853d2:	dc5c      	bgt.n	8548e <_svfprintf_r+0x1496>
   853d4:	f108 0808 	add.w	r8, r8, #8
   853d8:	f7ff bb9e 	b.w	84b18 <_svfprintf_r+0xb20>
   853dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   853de:	991b      	ldr	r1, [sp, #108]	; 0x6c
   853e0:	1aed      	subs	r5, r5, r3
   853e2:	461a      	mov	r2, r3
   853e4:	4628      	mov	r0, r5
   853e6:	f7fe fdd3 	bl	83f90 <strncpy>
   853ea:	f898 3001 	ldrb.w	r3, [r8, #1]
   853ee:	b10b      	cbz	r3, 853f4 <_svfprintf_r+0x13fc>
   853f0:	f108 0801 	add.w	r8, r8, #1
   853f4:	4620      	mov	r0, r4
   853f6:	4649      	mov	r1, r9
   853f8:	220a      	movs	r2, #10
   853fa:	2300      	movs	r3, #0
   853fc:	2600      	movs	r6, #0
   853fe:	f005 f9d7 	bl	8a7b0 <__aeabi_uldivmod>
   85402:	e69f      	b.n	85144 <_svfprintf_r+0x114c>
   85404:	990c      	ldr	r1, [sp, #48]	; 0x30
   85406:	980a      	ldr	r0, [sp, #40]	; 0x28
   85408:	aa28      	add	r2, sp, #160	; 0xa0
   8540a:	f004 fa53 	bl	898b4 <__ssprint_r>
   8540e:	2800      	cmp	r0, #0
   85410:	f47e af55 	bne.w	842be <_svfprintf_r+0x2c6>
   85414:	9922      	ldr	r1, [sp, #136]	; 0x88
   85416:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85418:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8541c:	e6dd      	b.n	851da <_svfprintf_r+0x11e2>
   8541e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85420:	18ae      	adds	r6, r5, r2
   85422:	eba6 060b 	sub.w	r6, r6, fp
   85426:	1ad5      	subs	r5, r2, r3
   85428:	42ae      	cmp	r6, r5
   8542a:	bfa8      	it	ge
   8542c:	462e      	movge	r6, r5
   8542e:	f7ff bba6 	b.w	84b7e <_svfprintf_r+0xb86>
   85432:	f852 4b04 	ldr.w	r4, [r2], #4
   85436:	4689      	mov	r9, r1
   85438:	2301      	movs	r3, #1
   8543a:	920e      	str	r2, [sp, #56]	; 0x38
   8543c:	b2e4      	uxtb	r4, r4
   8543e:	f7fe befb 	b.w	84238 <_svfprintf_r+0x240>
   85442:	f853 4b04 	ldr.w	r4, [r3], #4
   85446:	930e      	str	r3, [sp, #56]	; 0x38
   85448:	f7fe bef3 	b.w	84232 <_svfprintf_r+0x23a>
   8544c:	f853 4b04 	ldr.w	r4, [r3], #4
   85450:	930e      	str	r3, [sp, #56]	; 0x38
   85452:	e557      	b.n	84f04 <_svfprintf_r+0xf0c>
   85454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85456:	9908      	ldr	r1, [sp, #32]
   85458:	f853 2b04 	ldr.w	r2, [r3], #4
   8545c:	4655      	mov	r5, sl
   8545e:	8011      	strh	r1, [r2, #0]
   85460:	930e      	str	r3, [sp, #56]	; 0x38
   85462:	f7fe bfc1 	b.w	843e8 <_svfprintf_r+0x3f0>
   85466:	f344 19c0 	sbfx	r9, r4, #7, #1
   8546a:	464b      	mov	r3, r9
   8546c:	b264      	sxtb	r4, r4
   8546e:	f7fe bea4 	b.w	841ba <_svfprintf_r+0x1c2>
   85472:	990c      	ldr	r1, [sp, #48]	; 0x30
   85474:	980a      	ldr	r0, [sp, #40]	; 0x28
   85476:	aa28      	add	r2, sp, #160	; 0xa0
   85478:	f004 fa1c 	bl	898b4 <__ssprint_r>
   8547c:	2800      	cmp	r0, #0
   8547e:	f47e af1e 	bne.w	842be <_svfprintf_r+0x2c6>
   85482:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   85486:	9922      	ldr	r1, [sp, #136]	; 0x88
   85488:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8548c:	e73c      	b.n	85308 <_svfprintf_r+0x1310>
   8548e:	990c      	ldr	r1, [sp, #48]	; 0x30
   85490:	980a      	ldr	r0, [sp, #40]	; 0x28
   85492:	aa28      	add	r2, sp, #160	; 0xa0
   85494:	f004 fa0e 	bl	898b4 <__ssprint_r>
   85498:	2800      	cmp	r0, #0
   8549a:	f47e af10 	bne.w	842be <_svfprintf_r+0x2c6>
   8549e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   854a0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   854a4:	f7ff bb38 	b.w	84b18 <_svfprintf_r+0xb20>
   854a8:	2306      	movs	r3, #6
   854aa:	9307      	str	r3, [sp, #28]
   854ac:	f026 0320 	bic.w	r3, r6, #32
   854b0:	9306      	str	r3, [sp, #24]
   854b2:	e470      	b.n	84d96 <_svfprintf_r+0xd9e>
   854b4:	0008ac1c 	.word	0x0008ac1c
   854b8:	0008ac14 	.word	0x0008ac14
   854bc:	0008ac30 	.word	0x0008ac30
   854c0:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   854c4:	18eb      	adds	r3, r5, r3
   854c6:	429e      	cmp	r6, r3
   854c8:	46b3      	mov	fp, r6
   854ca:	9719      	str	r7, [sp, #100]	; 0x64
   854cc:	4690      	mov	r8, r2
   854ce:	460c      	mov	r4, r1
   854d0:	bf28      	it	cs
   854d2:	469b      	movcs	fp, r3
   854d4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   854d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   854da:	f7ff bb23 	b.w	84b24 <_svfprintf_r+0xb2c>
   854de:	9b22      	ldr	r3, [sp, #136]	; 0x88
   854e0:	1cda      	adds	r2, r3, #3
   854e2:	9310      	str	r3, [sp, #64]	; 0x40
   854e4:	db02      	blt.n	854ec <_svfprintf_r+0x14f4>
   854e6:	9a07      	ldr	r2, [sp, #28]
   854e8:	4293      	cmp	r3, r2
   854ea:	dd04      	ble.n	854f6 <_svfprintf_r+0x14fe>
   854ec:	3e02      	subs	r6, #2
   854ee:	f026 0320 	bic.w	r3, r6, #32
   854f2:	9306      	str	r3, [sp, #24]
   854f4:	e48b      	b.n	84e0e <_svfprintf_r+0xe16>
   854f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   854f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   854fa:	4293      	cmp	r3, r2
   854fc:	f2c0 80c2 	blt.w	85684 <_svfprintf_r+0x168c>
   85500:	f019 0f01 	tst.w	r9, #1
   85504:	f000 821d 	beq.w	85942 <_svfprintf_r+0x194a>
   85508:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8550a:	4413      	add	r3, r2
   8550c:	930b      	str	r3, [sp, #44]	; 0x2c
   8550e:	f419 6f80 	tst.w	r9, #1024	; 0x400
   85512:	f000 8214 	beq.w	8593e <_svfprintf_r+0x1946>
   85516:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85518:	2667      	movs	r6, #103	; 0x67
   8551a:	2b00      	cmp	r3, #0
   8551c:	dc76      	bgt.n	8560c <_svfprintf_r+0x1614>
   8551e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85520:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85524:	9306      	str	r3, [sp, #24]
   85526:	2300      	movs	r3, #0
   85528:	930f      	str	r3, [sp, #60]	; 0x3c
   8552a:	9313      	str	r3, [sp, #76]	; 0x4c
   8552c:	e4cf      	b.n	84ece <_svfprintf_r+0xed6>
   8552e:	222d      	movs	r2, #45	; 0x2d
   85530:	2300      	movs	r3, #0
   85532:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   85536:	9307      	str	r3, [sp, #28]
   85538:	f7fe be68 	b.w	8420c <_svfprintf_r+0x214>
   8553c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8553e:	980a      	ldr	r0, [sp, #40]	; 0x28
   85540:	aa28      	add	r2, sp, #160	; 0xa0
   85542:	f004 f9b7 	bl	898b4 <__ssprint_r>
   85546:	2800      	cmp	r0, #0
   85548:	f47e aeb9 	bne.w	842be <_svfprintf_r+0x2c6>
   8554c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8554e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85552:	f7ff bad8 	b.w	84b06 <_svfprintf_r+0xb0e>
   85556:	4659      	mov	r1, fp
   85558:	4650      	mov	r0, sl
   8555a:	aa28      	add	r2, sp, #160	; 0xa0
   8555c:	f004 f9aa 	bl	898b4 <__ssprint_r>
   85560:	2800      	cmp	r0, #0
   85562:	f47e aeac 	bne.w	842be <_svfprintf_r+0x2c6>
   85566:	7838      	ldrb	r0, [r7, #0]
   85568:	992a      	ldr	r1, [sp, #168]	; 0xa8
   8556a:	aa2b      	add	r2, sp, #172	; 0xac
   8556c:	4406      	add	r6, r0
   8556e:	e57a      	b.n	85066 <_svfprintf_r+0x106e>
   85570:	990c      	ldr	r1, [sp, #48]	; 0x30
   85572:	980a      	ldr	r0, [sp, #40]	; 0x28
   85574:	aa28      	add	r2, sp, #160	; 0xa0
   85576:	f004 f99d 	bl	898b4 <__ssprint_r>
   8557a:	2800      	cmp	r0, #0
   8557c:	f47e ae9f 	bne.w	842be <_svfprintf_r+0x2c6>
   85580:	9b22      	ldr	r3, [sp, #136]	; 0x88
   85582:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85584:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85588:	f7ff bae1 	b.w	84b4e <_svfprintf_r+0xb56>
   8558c:	9907      	ldr	r1, [sp, #28]
   8558e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85590:	9101      	str	r1, [sp, #4]
   85592:	2103      	movs	r1, #3
   85594:	9100      	str	r1, [sp, #0]
   85596:	a926      	add	r1, sp, #152	; 0x98
   85598:	9104      	str	r1, [sp, #16]
   8559a:	a923      	add	r1, sp, #140	; 0x8c
   8559c:	9103      	str	r1, [sp, #12]
   8559e:	a922      	add	r1, sp, #136	; 0x88
   855a0:	465a      	mov	r2, fp
   855a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   855a4:	9102      	str	r1, [sp, #8]
   855a6:	f001 fad3 	bl	86b50 <_dtoa_r>
   855aa:	7803      	ldrb	r3, [r0, #0]
   855ac:	4605      	mov	r5, r0
   855ae:	2b30      	cmp	r3, #48	; 0x30
   855b0:	f000 8216 	beq.w	859e0 <_svfprintf_r+0x19e8>
   855b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   855b6:	9a07      	ldr	r2, [sp, #28]
   855b8:	46b9      	mov	r9, r7
   855ba:	4413      	add	r3, r2
   855bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   855be:	18ec      	adds	r4, r5, r3
   855c0:	4658      	mov	r0, fp
   855c2:	2200      	movs	r2, #0
   855c4:	2300      	movs	r3, #0
   855c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   855c8:	f005 f882 	bl	8a6d0 <__aeabi_dcmpeq>
   855cc:	b108      	cbz	r0, 855d2 <_svfprintf_r+0x15da>
   855ce:	4623      	mov	r3, r4
   855d0:	e411      	b.n	84df6 <_svfprintf_r+0xdfe>
   855d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   855d4:	42a3      	cmp	r3, r4
   855d6:	f4bf ac0e 	bcs.w	84df6 <_svfprintf_r+0xdfe>
   855da:	2130      	movs	r1, #48	; 0x30
   855dc:	1c5a      	adds	r2, r3, #1
   855de:	9226      	str	r2, [sp, #152]	; 0x98
   855e0:	7019      	strb	r1, [r3, #0]
   855e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   855e4:	429c      	cmp	r4, r3
   855e6:	d8f9      	bhi.n	855dc <_svfprintf_r+0x15e4>
   855e8:	e405      	b.n	84df6 <_svfprintf_r+0xdfe>
   855ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
   855ec:	2a00      	cmp	r2, #0
   855ee:	9210      	str	r2, [sp, #64]	; 0x40
   855f0:	f340 820e 	ble.w	85a10 <_svfprintf_r+0x1a18>
   855f4:	9907      	ldr	r1, [sp, #28]
   855f6:	f009 0301 	and.w	r3, r9, #1
   855fa:	430b      	orrs	r3, r1
   855fc:	f040 817e 	bne.w	858fc <_svfprintf_r+0x1904>
   85600:	2666      	movs	r6, #102	; 0x66
   85602:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85604:	930b      	str	r3, [sp, #44]	; 0x2c
   85606:	f419 6f80 	tst.w	r9, #1024	; 0x400
   8560a:	d088      	beq.n	8551e <_svfprintf_r+0x1526>
   8560c:	9919      	ldr	r1, [sp, #100]	; 0x64
   8560e:	780b      	ldrb	r3, [r1, #0]
   85610:	2bff      	cmp	r3, #255	; 0xff
   85612:	f000 8225 	beq.w	85a60 <_svfprintf_r+0x1a68>
   85616:	2400      	movs	r4, #0
   85618:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8561a:	4620      	mov	r0, r4
   8561c:	e004      	b.n	85628 <_svfprintf_r+0x1630>
   8561e:	3001      	adds	r0, #1
   85620:	3101      	adds	r1, #1
   85622:	2bff      	cmp	r3, #255	; 0xff
   85624:	f000 8159 	beq.w	858da <_svfprintf_r+0x18e2>
   85628:	4293      	cmp	r3, r2
   8562a:	f280 8156 	bge.w	858da <_svfprintf_r+0x18e2>
   8562e:	1ad2      	subs	r2, r2, r3
   85630:	784b      	ldrb	r3, [r1, #1]
   85632:	2b00      	cmp	r3, #0
   85634:	d1f3      	bne.n	8561e <_svfprintf_r+0x1626>
   85636:	780b      	ldrb	r3, [r1, #0]
   85638:	3401      	adds	r4, #1
   8563a:	e7f2      	b.n	85622 <_svfprintf_r+0x162a>
   8563c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   85640:	f7ff b9da 	b.w	849f8 <_svfprintf_r+0xa00>
   85644:	9b07      	ldr	r3, [sp, #28]
   85646:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8564a:	940e      	str	r4, [sp, #56]	; 0x38
   8564c:	9306      	str	r3, [sp, #24]
   8564e:	930b      	str	r3, [sp, #44]	; 0x2c
   85650:	9007      	str	r0, [sp, #28]
   85652:	900f      	str	r0, [sp, #60]	; 0x3c
   85654:	9013      	str	r0, [sp, #76]	; 0x4c
   85656:	9010      	str	r0, [sp, #64]	; 0x40
   85658:	f7fe bdd6 	b.w	84208 <_svfprintf_r+0x210>
   8565c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8565e:	980a      	ldr	r0, [sp, #40]	; 0x28
   85660:	aa28      	add	r2, sp, #160	; 0xa0
   85662:	f004 f927 	bl	898b4 <__ssprint_r>
   85666:	2800      	cmp	r0, #0
   85668:	f47e ae29 	bne.w	842be <_svfprintf_r+0x2c6>
   8566c:	9d22      	ldr	r5, [sp, #136]	; 0x88
   8566e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85670:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85672:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85676:	1b5d      	subs	r5, r3, r5
   85678:	f7ff ba81 	b.w	84b7e <_svfprintf_r+0xb86>
   8567c:	2300      	movs	r3, #0
   8567e:	9307      	str	r3, [sp, #28]
   85680:	f7fe bd0b 	b.w	8409a <_svfprintf_r+0xa2>
   85684:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85686:	9a16      	ldr	r2, [sp, #88]	; 0x58
   85688:	189a      	adds	r2, r3, r2
   8568a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8568c:	920b      	str	r2, [sp, #44]	; 0x2c
   8568e:	2b00      	cmp	r3, #0
   85690:	f340 8185 	ble.w	8599e <_svfprintf_r+0x19a6>
   85694:	2667      	movs	r6, #103	; 0x67
   85696:	e7b6      	b.n	85606 <_svfprintf_r+0x160e>
   85698:	2330      	movs	r3, #48	; 0x30
   8569a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8569e:	2358      	movs	r3, #88	; 0x58
   856a0:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   856a4:	9b07      	ldr	r3, [sp, #28]
   856a6:	f047 0402 	orr.w	r4, r7, #2
   856aa:	2b63      	cmp	r3, #99	; 0x63
   856ac:	f300 80c4 	bgt.w	85838 <_svfprintf_r+0x1840>
   856b0:	2300      	movs	r3, #0
   856b2:	ad3b      	add	r5, sp, #236	; 0xec
   856b4:	930d      	str	r3, [sp, #52]	; 0x34
   856b6:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   856ba:	930f      	str	r3, [sp, #60]	; 0x3c
   856bc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   856c0:	4613      	mov	r3, r2
   856c2:	2b00      	cmp	r3, #0
   856c4:	4627      	mov	r7, r4
   856c6:	f2c0 8084 	blt.w	857d2 <_svfprintf_r+0x17da>
   856ca:	930b      	str	r3, [sp, #44]	; 0x2c
   856cc:	2300      	movs	r3, #0
   856ce:	468b      	mov	fp, r1
   856d0:	931d      	str	r3, [sp, #116]	; 0x74
   856d2:	f026 0320 	bic.w	r3, r6, #32
   856d6:	9306      	str	r3, [sp, #24]
   856d8:	2e61      	cmp	r6, #97	; 0x61
   856da:	f000 8118 	beq.w	8590e <_svfprintf_r+0x1916>
   856de:	2e41      	cmp	r6, #65	; 0x41
   856e0:	f47f ab67 	bne.w	84db2 <_svfprintf_r+0xdba>
   856e4:	aa22      	add	r2, sp, #136	; 0x88
   856e6:	4658      	mov	r0, fp
   856e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   856ea:	f004 f853 	bl	89794 <frexp>
   856ee:	2200      	movs	r2, #0
   856f0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   856f4:	f004 fd84 	bl	8a200 <__aeabi_dmul>
   856f8:	4602      	mov	r2, r0
   856fa:	460b      	mov	r3, r1
   856fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   85700:	2200      	movs	r2, #0
   85702:	2300      	movs	r3, #0
   85704:	f004 ffe4 	bl	8a6d0 <__aeabi_dcmpeq>
   85708:	b108      	cbz	r0, 8570e <_svfprintf_r+0x1716>
   8570a:	2301      	movs	r3, #1
   8570c:	9322      	str	r3, [sp, #136]	; 0x88
   8570e:	4bad      	ldr	r3, [pc, #692]	; (859c4 <_svfprintf_r+0x19cc>)
   85710:	930b      	str	r3, [sp, #44]	; 0x2c
   85712:	9b07      	ldr	r3, [sp, #28]
   85714:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   85718:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   8571c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   85720:	46ab      	mov	fp, r5
   85722:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   85726:	f103 39ff 	add.w	r9, r3, #4294967295
   8572a:	9510      	str	r5, [sp, #64]	; 0x40
   8572c:	e006      	b.n	8573c <_svfprintf_r+0x1744>
   8572e:	2200      	movs	r2, #0
   85730:	2300      	movs	r3, #0
   85732:	f109 39ff 	add.w	r9, r9, #4294967295
   85736:	f004 ffcb 	bl	8a6d0 <__aeabi_dcmpeq>
   8573a:	b9e8      	cbnz	r0, 85778 <_svfprintf_r+0x1780>
   8573c:	2200      	movs	r2, #0
   8573e:	4ba2      	ldr	r3, [pc, #648]	; (859c8 <_svfprintf_r+0x19d0>)
   85740:	4630      	mov	r0, r6
   85742:	4639      	mov	r1, r7
   85744:	f004 fd5c 	bl	8a200 <__aeabi_dmul>
   85748:	460f      	mov	r7, r1
   8574a:	4606      	mov	r6, r0
   8574c:	f005 f808 	bl	8a760 <__aeabi_d2iz>
   85750:	4604      	mov	r4, r0
   85752:	f004 fceb 	bl	8a12c <__aeabi_i2d>
   85756:	460b      	mov	r3, r1
   85758:	4602      	mov	r2, r0
   8575a:	4639      	mov	r1, r7
   8575c:	4630      	mov	r0, r6
   8575e:	f004 fb97 	bl	89e90 <__aeabi_dsub>
   85762:	f81a 3004 	ldrb.w	r3, [sl, r4]
   85766:	f1b9 3fff 	cmp.w	r9, #4294967295
   8576a:	46d8      	mov	r8, fp
   8576c:	464d      	mov	r5, r9
   8576e:	4606      	mov	r6, r0
   85770:	460f      	mov	r7, r1
   85772:	f80b 3b01 	strb.w	r3, [fp], #1
   85776:	d1da      	bne.n	8572e <_svfprintf_r+0x1736>
   85778:	4630      	mov	r0, r6
   8577a:	4639      	mov	r1, r7
   8577c:	2200      	movs	r2, #0
   8577e:	4b93      	ldr	r3, [pc, #588]	; (859cc <_svfprintf_r+0x19d4>)
   85780:	46a9      	mov	r9, r5
   85782:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   85786:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85788:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   8578c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   85790:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   85794:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   85796:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   85798:	f004 ffc2 	bl	8a720 <__aeabi_dcmpgt>
   8579c:	bb80      	cbnz	r0, 85800 <_svfprintf_r+0x1808>
   8579e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   857a2:	2200      	movs	r2, #0
   857a4:	4b89      	ldr	r3, [pc, #548]	; (859cc <_svfprintf_r+0x19d4>)
   857a6:	f004 ff93 	bl	8a6d0 <__aeabi_dcmpeq>
   857aa:	b108      	cbz	r0, 857b0 <_svfprintf_r+0x17b8>
   857ac:	07e1      	lsls	r1, r4, #31
   857ae:	d427      	bmi.n	85800 <_svfprintf_r+0x1808>
   857b0:	464b      	mov	r3, r9
   857b2:	2b00      	cmp	r3, #0
   857b4:	db06      	blt.n	857c4 <_svfprintf_r+0x17cc>
   857b6:	2230      	movs	r2, #48	; 0x30
   857b8:	3301      	adds	r3, #1
   857ba:	445b      	add	r3, fp
   857bc:	f80b 2b01 	strb.w	r2, [fp], #1
   857c0:	455b      	cmp	r3, fp
   857c2:	d1fb      	bne.n	857bc <_svfprintf_r+0x17c4>
   857c4:	ebab 0305 	sub.w	r3, fp, r5
   857c8:	46b9      	mov	r9, r7
   857ca:	9312      	str	r3, [sp, #72]	; 0x48
   857cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   857ce:	f7ff bb14 	b.w	84dfa <_svfprintf_r+0xe02>
   857d2:	f026 0320 	bic.w	r3, r6, #32
   857d6:	9306      	str	r3, [sp, #24]
   857d8:	222d      	movs	r2, #45	; 0x2d
   857da:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   857de:	469b      	mov	fp, r3
   857e0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   857e4:	921d      	str	r2, [sp, #116]	; 0x74
   857e6:	930b      	str	r3, [sp, #44]	; 0x2c
   857e8:	e776      	b.n	856d8 <_svfprintf_r+0x16e0>
   857ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   857ec:	f7ff b95c 	b.w	84aa8 <_svfprintf_r+0xab0>
   857f0:	9b07      	ldr	r3, [sp, #28]
   857f2:	18ec      	adds	r4, r5, r3
   857f4:	e6e4      	b.n	855c0 <_svfprintf_r+0x15c8>
   857f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   857f8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 859d0 <_svfprintf_r+0x19d8>
   857fc:	f7ff b827 	b.w	8484e <_svfprintf_r+0x856>
   85800:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85802:	9326      	str	r3, [sp, #152]	; 0x98
   85804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85806:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   8580a:	7bd9      	ldrb	r1, [r3, #15]
   8580c:	465b      	mov	r3, fp
   8580e:	428a      	cmp	r2, r1
   85810:	d109      	bne.n	85826 <_svfprintf_r+0x182e>
   85812:	2030      	movs	r0, #48	; 0x30
   85814:	f803 0c01 	strb.w	r0, [r3, #-1]
   85818:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8581a:	1e5a      	subs	r2, r3, #1
   8581c:	9226      	str	r2, [sp, #152]	; 0x98
   8581e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   85822:	4291      	cmp	r1, r2
   85824:	d0f6      	beq.n	85814 <_svfprintf_r+0x181c>
   85826:	2a39      	cmp	r2, #57	; 0x39
   85828:	bf0b      	itete	eq
   8582a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   8582c:	3201      	addne	r2, #1
   8582e:	7a92      	ldrbeq	r2, [r2, #10]
   85830:	b2d2      	uxtbne	r2, r2
   85832:	f803 2c01 	strb.w	r2, [r3, #-1]
   85836:	e7c5      	b.n	857c4 <_svfprintf_r+0x17cc>
   85838:	980a      	ldr	r0, [sp, #40]	; 0x28
   8583a:	1c59      	adds	r1, r3, #1
   8583c:	f002 fe86 	bl	8854c <_malloc_r>
   85840:	4605      	mov	r5, r0
   85842:	2800      	cmp	r0, #0
   85844:	f000 8117 	beq.w	85a76 <_svfprintf_r+0x1a7e>
   85848:	900d      	str	r0, [sp, #52]	; 0x34
   8584a:	e734      	b.n	856b6 <_svfprintf_r+0x16be>
   8584c:	2102      	movs	r1, #2
   8584e:	9100      	str	r1, [sp, #0]
   85850:	9907      	ldr	r1, [sp, #28]
   85852:	465a      	mov	r2, fp
   85854:	1c4c      	adds	r4, r1, #1
   85856:	a926      	add	r1, sp, #152	; 0x98
   85858:	9104      	str	r1, [sp, #16]
   8585a:	a923      	add	r1, sp, #140	; 0x8c
   8585c:	9103      	str	r1, [sp, #12]
   8585e:	a922      	add	r1, sp, #136	; 0x88
   85860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85862:	980a      	ldr	r0, [sp, #40]	; 0x28
   85864:	9401      	str	r4, [sp, #4]
   85866:	9102      	str	r1, [sp, #8]
   85868:	f001 f972 	bl	86b50 <_dtoa_r>
   8586c:	4605      	mov	r5, r0
   8586e:	46b9      	mov	r9, r7
   85870:	442c      	add	r4, r5
   85872:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   85874:	e6a4      	b.n	855c0 <_svfprintf_r+0x15c8>
   85876:	2330      	movs	r3, #48	; 0x30
   85878:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8587c:	2378      	movs	r3, #120	; 0x78
   8587e:	e70f      	b.n	856a0 <_svfprintf_r+0x16a8>
   85880:	4645      	mov	r5, r8
   85882:	4688      	mov	r8, r1
   85884:	3301      	adds	r3, #1
   85886:	4432      	add	r2, r6
   85888:	2b07      	cmp	r3, #7
   8588a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   8588e:	f8c8 9000 	str.w	r9, [r8]
   85892:	f8c8 6004 	str.w	r6, [r8, #4]
   85896:	f77f acb5 	ble.w	85204 <_svfprintf_r+0x120c>
   8589a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8589c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8589e:	aa28      	add	r2, sp, #160	; 0xa0
   858a0:	f004 f808 	bl	898b4 <__ssprint_r>
   858a4:	2800      	cmp	r0, #0
   858a6:	f47e ad0a 	bne.w	842be <_svfprintf_r+0x2c6>
   858aa:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   858ae:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   858b2:	e4a9      	b.n	85208 <_svfprintf_r+0x1210>
   858b4:	9b07      	ldr	r3, [sp, #28]
   858b6:	2b00      	cmp	r3, #0
   858b8:	bf08      	it	eq
   858ba:	2301      	moveq	r3, #1
   858bc:	9307      	str	r3, [sp, #28]
   858be:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   858c2:	930f      	str	r3, [sp, #60]	; 0x3c
   858c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   858c6:	2b00      	cmp	r3, #0
   858c8:	f2c0 80b6 	blt.w	85a38 <_svfprintf_r+0x1a40>
   858cc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   858d0:	900d      	str	r0, [sp, #52]	; 0x34
   858d2:	930b      	str	r3, [sp, #44]	; 0x2c
   858d4:	901d      	str	r0, [sp, #116]	; 0x74
   858d6:	f7ff ba73 	b.w	84dc0 <_svfprintf_r+0xdc8>
   858da:	9119      	str	r1, [sp, #100]	; 0x64
   858dc:	9210      	str	r2, [sp, #64]	; 0x40
   858de:	9013      	str	r0, [sp, #76]	; 0x4c
   858e0:	940f      	str	r4, [sp, #60]	; 0x3c
   858e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   858e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   858e6:	991c      	ldr	r1, [sp, #112]	; 0x70
   858e8:	4413      	add	r3, r2
   858ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   858ec:	fb01 2303 	mla	r3, r1, r3, r2
   858f0:	930b      	str	r3, [sp, #44]	; 0x2c
   858f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   858f6:	9306      	str	r3, [sp, #24]
   858f8:	f7ff bae9 	b.w	84ece <_svfprintf_r+0xed6>
   858fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   858fe:	2666      	movs	r6, #102	; 0x66
   85900:	18d3      	adds	r3, r2, r3
   85902:	4419      	add	r1, r3
   85904:	910b      	str	r1, [sp, #44]	; 0x2c
   85906:	e67e      	b.n	85606 <_svfprintf_r+0x160e>
   85908:	2300      	movs	r3, #0
   8590a:	930d      	str	r3, [sp, #52]	; 0x34
   8590c:	e764      	b.n	857d8 <_svfprintf_r+0x17e0>
   8590e:	aa22      	add	r2, sp, #136	; 0x88
   85910:	4658      	mov	r0, fp
   85912:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85914:	f003 ff3e 	bl	89794 <frexp>
   85918:	2200      	movs	r2, #0
   8591a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   8591e:	f004 fc6f 	bl	8a200 <__aeabi_dmul>
   85922:	4602      	mov	r2, r0
   85924:	460b      	mov	r3, r1
   85926:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8592a:	2200      	movs	r2, #0
   8592c:	2300      	movs	r3, #0
   8592e:	f004 fecf 	bl	8a6d0 <__aeabi_dcmpeq>
   85932:	b108      	cbz	r0, 85938 <_svfprintf_r+0x1940>
   85934:	2301      	movs	r3, #1
   85936:	9322      	str	r3, [sp, #136]	; 0x88
   85938:	4b26      	ldr	r3, [pc, #152]	; (859d4 <_svfprintf_r+0x19dc>)
   8593a:	930b      	str	r3, [sp, #44]	; 0x2c
   8593c:	e6e9      	b.n	85712 <_svfprintf_r+0x171a>
   8593e:	2667      	movs	r6, #103	; 0x67
   85940:	e5ed      	b.n	8551e <_svfprintf_r+0x1526>
   85942:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85944:	930b      	str	r3, [sp, #44]	; 0x2c
   85946:	e5e2      	b.n	8550e <_svfprintf_r+0x1516>
   85948:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8594a:	2003      	movs	r0, #3
   8594c:	2b00      	cmp	r3, #0
   8594e:	bfb8      	it	lt
   85950:	222d      	movlt	r2, #45	; 0x2d
   85952:	f04f 0300 	mov.w	r3, #0
   85956:	bfa8      	it	ge
   85958:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   8595c:	4619      	mov	r1, r3
   8595e:	930d      	str	r3, [sp, #52]	; 0x34
   85960:	4d1d      	ldr	r5, [pc, #116]	; (859d8 <_svfprintf_r+0x19e0>)
   85962:	4b1e      	ldr	r3, [pc, #120]	; (859dc <_svfprintf_r+0x19e4>)
   85964:	bfb8      	it	lt
   85966:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   8596a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8596e:	9006      	str	r0, [sp, #24]
   85970:	f7fe bd7f 	b.w	84472 <_svfprintf_r+0x47a>
   85974:	2900      	cmp	r1, #0
   85976:	d144      	bne.n	85a02 <_svfprintf_r+0x1a0a>
   85978:	2230      	movs	r2, #48	; 0x30
   8597a:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   8597e:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   85982:	3330      	adds	r3, #48	; 0x30
   85984:	f802 3b01 	strb.w	r3, [r2], #1
   85988:	ab24      	add	r3, sp, #144	; 0x90
   8598a:	1ad3      	subs	r3, r2, r3
   8598c:	931a      	str	r3, [sp, #104]	; 0x68
   8598e:	f7ff ba87 	b.w	84ea0 <_svfprintf_r+0xea8>
   85992:	f106 020f 	add.w	r2, r6, #15
   85996:	2101      	movs	r1, #1
   85998:	b2d2      	uxtb	r2, r2
   8599a:	f7ff ba41 	b.w	84e20 <_svfprintf_r+0xe28>
   8599e:	f1c3 0301 	rsb	r3, r3, #1
   859a2:	441a      	add	r2, r3
   859a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   859a8:	2667      	movs	r6, #103	; 0x67
   859aa:	920b      	str	r2, [sp, #44]	; 0x2c
   859ac:	9306      	str	r3, [sp, #24]
   859ae:	e5ba      	b.n	85526 <_svfprintf_r+0x152e>
   859b0:	f019 0f01 	tst.w	r9, #1
   859b4:	f43f aa7f 	beq.w	84eb6 <_svfprintf_r+0xebe>
   859b8:	f7ff ba79 	b.w	84eae <_svfprintf_r+0xeb6>
   859bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
   859be:	f7ff bb7f 	b.w	850c0 <_svfprintf_r+0x10c8>
   859c2:	bf00      	nop
   859c4:	0008ac00 	.word	0x0008ac00
   859c8:	40300000 	.word	0x40300000
   859cc:	3fe00000 	.word	0x3fe00000
   859d0:	0008ac30 	.word	0x0008ac30
   859d4:	0008abec 	.word	0x0008abec
   859d8:	0008abe4 	.word	0x0008abe4
   859dc:	0008abe8 	.word	0x0008abe8
   859e0:	4658      	mov	r0, fp
   859e2:	2200      	movs	r2, #0
   859e4:	2300      	movs	r3, #0
   859e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   859e8:	f004 fe72 	bl	8a6d0 <__aeabi_dcmpeq>
   859ec:	2800      	cmp	r0, #0
   859ee:	f47f ade1 	bne.w	855b4 <_svfprintf_r+0x15bc>
   859f2:	9b07      	ldr	r3, [sp, #28]
   859f4:	f1c3 0301 	rsb	r3, r3, #1
   859f8:	9322      	str	r3, [sp, #136]	; 0x88
   859fa:	e5dc      	b.n	855b6 <_svfprintf_r+0x15be>
   859fc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85a98 <_svfprintf_r+0x1aa0>
   85a00:	e4ad      	b.n	8535e <_svfprintf_r+0x1366>
   85a02:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   85a06:	e7bc      	b.n	85982 <_svfprintf_r+0x198a>
   85a08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85a0a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 85a98 <_svfprintf_r+0x1aa0>
   85a0e:	e428      	b.n	85262 <_svfprintf_r+0x126a>
   85a10:	9a07      	ldr	r2, [sp, #28]
   85a12:	f009 0901 	and.w	r9, r9, #1
   85a16:	ea59 0302 	orrs.w	r3, r9, r2
   85a1a:	d104      	bne.n	85a26 <_svfprintf_r+0x1a2e>
   85a1c:	2301      	movs	r3, #1
   85a1e:	2666      	movs	r6, #102	; 0x66
   85a20:	9306      	str	r3, [sp, #24]
   85a22:	930b      	str	r3, [sp, #44]	; 0x2c
   85a24:	e57f      	b.n	85526 <_svfprintf_r+0x152e>
   85a26:	9b16      	ldr	r3, [sp, #88]	; 0x58
   85a28:	2666      	movs	r6, #102	; 0x66
   85a2a:	3301      	adds	r3, #1
   85a2c:	441a      	add	r2, r3
   85a2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   85a32:	920b      	str	r2, [sp, #44]	; 0x2c
   85a34:	9306      	str	r3, [sp, #24]
   85a36:	e576      	b.n	85526 <_svfprintf_r+0x152e>
   85a38:	900d      	str	r0, [sp, #52]	; 0x34
   85a3a:	e6cd      	b.n	857d8 <_svfprintf_r+0x17e0>
   85a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85a3e:	f89a 6001 	ldrb.w	r6, [sl, #1]
   85a42:	4692      	mov	sl, r2
   85a44:	f853 2b04 	ldr.w	r2, [r3], #4
   85a48:	930e      	str	r3, [sp, #56]	; 0x38
   85a4a:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   85a4e:	9307      	str	r3, [sp, #28]
   85a50:	f7fe bb21 	b.w	84096 <_svfprintf_r+0x9e>
   85a54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85a56:	f8df 9040 	ldr.w	r9, [pc, #64]	; 85a98 <_svfprintf_r+0x1aa0>
   85a5a:	e4b1      	b.n	853c0 <_svfprintf_r+0x13c8>
   85a5c:	9c07      	ldr	r4, [sp, #28]
   85a5e:	e706      	b.n	8586e <_svfprintf_r+0x1876>
   85a60:	2300      	movs	r3, #0
   85a62:	930f      	str	r3, [sp, #60]	; 0x3c
   85a64:	9313      	str	r3, [sp, #76]	; 0x4c
   85a66:	e73c      	b.n	858e2 <_svfprintf_r+0x18ea>
   85a68:	f8df 902c 	ldr.w	r9, [pc, #44]	; 85a98 <_svfprintf_r+0x1aa0>
   85a6c:	e70a      	b.n	85884 <_svfprintf_r+0x188c>
   85a6e:	2302      	movs	r3, #2
   85a70:	931a      	str	r3, [sp, #104]	; 0x68
   85a72:	f7ff ba15 	b.w	84ea0 <_svfprintf_r+0xea8>
   85a76:	990c      	ldr	r1, [sp, #48]	; 0x30
   85a78:	898b      	ldrh	r3, [r1, #12]
   85a7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   85a7e:	4613      	mov	r3, r2
   85a80:	818a      	strh	r2, [r1, #12]
   85a82:	f7fe bc24 	b.w	842ce <_svfprintf_r+0x2d6>
   85a86:	f04f 32ff 	mov.w	r2, #4294967295
   85a8a:	230c      	movs	r3, #12
   85a8c:	9208      	str	r2, [sp, #32]
   85a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85a90:	6013      	str	r3, [r2, #0]
   85a92:	f7fe bc23 	b.w	842dc <_svfprintf_r+0x2e4>
   85a96:	bf00      	nop
   85a98:	0008ac30 	.word	0x0008ac30

00085a9c <__sprint_r.part.0>:
   85a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85aa0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85aa2:	4690      	mov	r8, r2
   85aa4:	049c      	lsls	r4, r3, #18
   85aa6:	d52d      	bpl.n	85b04 <__sprint_r.part.0+0x68>
   85aa8:	6893      	ldr	r3, [r2, #8]
   85aaa:	6812      	ldr	r2, [r2, #0]
   85aac:	b343      	cbz	r3, 85b00 <__sprint_r.part.0+0x64>
   85aae:	468b      	mov	fp, r1
   85ab0:	4606      	mov	r6, r0
   85ab2:	f102 0908 	add.w	r9, r2, #8
   85ab6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   85aba:	ea5f 079a 	movs.w	r7, sl, lsr #2
   85abe:	d015      	beq.n	85aec <__sprint_r.part.0+0x50>
   85ac0:	2400      	movs	r4, #0
   85ac2:	3d04      	subs	r5, #4
   85ac4:	e001      	b.n	85aca <__sprint_r.part.0+0x2e>
   85ac6:	42a7      	cmp	r7, r4
   85ac8:	d00e      	beq.n	85ae8 <__sprint_r.part.0+0x4c>
   85aca:	465a      	mov	r2, fp
   85acc:	4630      	mov	r0, r6
   85ace:	f855 1f04 	ldr.w	r1, [r5, #4]!
   85ad2:	f002 f961 	bl	87d98 <_fputwc_r>
   85ad6:	1c43      	adds	r3, r0, #1
   85ad8:	f104 0401 	add.w	r4, r4, #1
   85adc:	d1f3      	bne.n	85ac6 <__sprint_r.part.0+0x2a>
   85ade:	2300      	movs	r3, #0
   85ae0:	e9c8 3301 	strd	r3, r3, [r8, #4]
   85ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ae8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   85aec:	f02a 0a03 	bic.w	sl, sl, #3
   85af0:	eba3 030a 	sub.w	r3, r3, sl
   85af4:	f8c8 3008 	str.w	r3, [r8, #8]
   85af8:	f109 0908 	add.w	r9, r9, #8
   85afc:	2b00      	cmp	r3, #0
   85afe:	d1da      	bne.n	85ab6 <__sprint_r.part.0+0x1a>
   85b00:	2000      	movs	r0, #0
   85b02:	e7ec      	b.n	85ade <__sprint_r.part.0+0x42>
   85b04:	f002 facc 	bl	880a0 <__sfvwrite_r>
   85b08:	2300      	movs	r3, #0
   85b0a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   85b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85b12:	bf00      	nop

00085b14 <_vfiprintf_r>:
   85b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85b18:	b0bd      	sub	sp, #244	; 0xf4
   85b1a:	461c      	mov	r4, r3
   85b1c:	4617      	mov	r7, r2
   85b1e:	e9cd 3005 	strd	r3, r0, [sp, #20]
   85b22:	9102      	str	r1, [sp, #8]
   85b24:	b118      	cbz	r0, 85b2e <_vfiprintf_r+0x1a>
   85b26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85b28:	2b00      	cmp	r3, #0
   85b2a:	f000 8277 	beq.w	8601c <_vfiprintf_r+0x508>
   85b2e:	9a02      	ldr	r2, [sp, #8]
   85b30:	6e53      	ldr	r3, [r2, #100]	; 0x64
   85b32:	07de      	lsls	r6, r3, #31
   85b34:	f140 8184 	bpl.w	85e40 <_vfiprintf_r+0x32c>
   85b38:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   85b3c:	b28a      	uxth	r2, r1
   85b3e:	0490      	lsls	r0, r2, #18
   85b40:	d408      	bmi.n	85b54 <_vfiprintf_r+0x40>
   85b42:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   85b46:	9902      	ldr	r1, [sp, #8]
   85b48:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85b4a:	818a      	strh	r2, [r1, #12]
   85b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   85b50:	b292      	uxth	r2, r2
   85b52:	664b      	str	r3, [r1, #100]	; 0x64
   85b54:	0711      	lsls	r1, r2, #28
   85b56:	f140 80ec 	bpl.w	85d32 <_vfiprintf_r+0x21e>
   85b5a:	9b02      	ldr	r3, [sp, #8]
   85b5c:	691b      	ldr	r3, [r3, #16]
   85b5e:	2b00      	cmp	r3, #0
   85b60:	f000 80e7 	beq.w	85d32 <_vfiprintf_r+0x21e>
   85b64:	f002 031a 	and.w	r3, r2, #26
   85b68:	2b0a      	cmp	r3, #10
   85b6a:	f000 80f0 	beq.w	85d4e <_vfiprintf_r+0x23a>
   85b6e:	ab13      	add	r3, sp, #76	; 0x4c
   85b70:	9310      	str	r3, [sp, #64]	; 0x40
   85b72:	2300      	movs	r3, #0
   85b74:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   85b78:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   85b7c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   85b80:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   85b84:	9304      	str	r3, [sp, #16]
   85b86:	783b      	ldrb	r3, [r7, #0]
   85b88:	2b00      	cmp	r3, #0
   85b8a:	f000 8146 	beq.w	85e1a <_vfiprintf_r+0x306>
   85b8e:	463c      	mov	r4, r7
   85b90:	e004      	b.n	85b9c <_vfiprintf_r+0x88>
   85b92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85b96:	2b00      	cmp	r3, #0
   85b98:	f000 8121 	beq.w	85dde <_vfiprintf_r+0x2ca>
   85b9c:	2b25      	cmp	r3, #37	; 0x25
   85b9e:	d1f8      	bne.n	85b92 <_vfiprintf_r+0x7e>
   85ba0:	1be5      	subs	r5, r4, r7
   85ba2:	f040 811e 	bne.w	85de2 <_vfiprintf_r+0x2ce>
   85ba6:	7823      	ldrb	r3, [r4, #0]
   85ba8:	2b00      	cmp	r3, #0
   85baa:	f000 8136 	beq.w	85e1a <_vfiprintf_r+0x306>
   85bae:	f04f 0300 	mov.w	r3, #0
   85bb2:	2500      	movs	r5, #0
   85bb4:	f04f 3bff 	mov.w	fp, #4294967295
   85bb8:	f04f 082b 	mov.w	r8, #43	; 0x2b
   85bbc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   85bc0:	7863      	ldrb	r3, [r4, #1]
   85bc2:	9503      	str	r5, [sp, #12]
   85bc4:	1c67      	adds	r7, r4, #1
   85bc6:	3701      	adds	r7, #1
   85bc8:	f1a3 0220 	sub.w	r2, r3, #32
   85bcc:	2a5a      	cmp	r2, #90	; 0x5a
   85bce:	f200 8146 	bhi.w	85e5e <_vfiprintf_r+0x34a>
   85bd2:	e8df f012 	tbh	[pc, r2, lsl #1]
   85bd6:	02a1      	.short	0x02a1
   85bd8:	01440144 	.word	0x01440144
   85bdc:	0144029d 	.word	0x0144029d
   85be0:	01440144 	.word	0x01440144
   85be4:	0144027c 	.word	0x0144027c
   85be8:	006a0144 	.word	0x006a0144
   85bec:	01440253 	.word	0x01440253
   85bf0:	02af0229 	.word	0x02af0229
   85bf4:	02ab0144 	.word	0x02ab0144
   85bf8:	005b005b 	.word	0x005b005b
   85bfc:	005b005b 	.word	0x005b005b
   85c00:	005b005b 	.word	0x005b005b
   85c04:	005b005b 	.word	0x005b005b
   85c08:	0144005b 	.word	0x0144005b
   85c0c:	01440144 	.word	0x01440144
   85c10:	01440144 	.word	0x01440144
   85c14:	01440144 	.word	0x01440144
   85c18:	01440144 	.word	0x01440144
   85c1c:	00780213 	.word	0x00780213
   85c20:	01440144 	.word	0x01440144
   85c24:	01440144 	.word	0x01440144
   85c28:	01440144 	.word	0x01440144
   85c2c:	01440144 	.word	0x01440144
   85c30:	01440144 	.word	0x01440144
   85c34:	014400d1 	.word	0x014400d1
   85c38:	01440144 	.word	0x01440144
   85c3c:	014401f7 	.word	0x014401f7
   85c40:	01440241 	.word	0x01440241
   85c44:	05210144 	.word	0x05210144
   85c48:	01440144 	.word	0x01440144
   85c4c:	01440144 	.word	0x01440144
   85c50:	01440144 	.word	0x01440144
   85c54:	01440144 	.word	0x01440144
   85c58:	01440144 	.word	0x01440144
   85c5c:	007a0213 	.word	0x007a0213
   85c60:	01440144 	.word	0x01440144
   85c64:	02370144 	.word	0x02370144
   85c68:	0074007a 	.word	0x0074007a
   85c6c:	022d0144 	.word	0x022d0144
   85c70:	02690144 	.word	0x02690144
   85c74:	025700d3 	.word	0x025700d3
   85c78:	01440074 	.word	0x01440074
   85c7c:	007201f7 	.word	0x007201f7
   85c80:	01440541 	.word	0x01440541
   85c84:	05430144 	.word	0x05430144
   85c88:	00720144 	.word	0x00720144
   85c8c:	2100      	movs	r1, #0
   85c8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   85c92:	f817 3b01 	ldrb.w	r3, [r7], #1
   85c96:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85c9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   85c9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   85ca2:	2a09      	cmp	r2, #9
   85ca4:	d9f5      	bls.n	85c92 <_vfiprintf_r+0x17e>
   85ca6:	9103      	str	r1, [sp, #12]
   85ca8:	e78e      	b.n	85bc8 <_vfiprintf_r+0xb4>
   85caa:	9b05      	ldr	r3, [sp, #20]
   85cac:	f853 2b04 	ldr.w	r2, [r3], #4
   85cb0:	2a00      	cmp	r2, #0
   85cb2:	9203      	str	r2, [sp, #12]
   85cb4:	9305      	str	r3, [sp, #20]
   85cb6:	f2c0 81b4 	blt.w	86022 <_vfiprintf_r+0x50e>
   85cba:	783b      	ldrb	r3, [r7, #0]
   85cbc:	e783      	b.n	85bc6 <_vfiprintf_r+0xb2>
   85cbe:	783b      	ldrb	r3, [r7, #0]
   85cc0:	f045 0520 	orr.w	r5, r5, #32
   85cc4:	e77f      	b.n	85bc6 <_vfiprintf_r+0xb2>
   85cc6:	f045 0510 	orr.w	r5, r5, #16
   85cca:	06ac      	lsls	r4, r5, #26
   85ccc:	9e05      	ldr	r6, [sp, #20]
   85cce:	f140 816b 	bpl.w	85fa8 <_vfiprintf_r+0x494>
   85cd2:	3607      	adds	r6, #7
   85cd4:	f026 0607 	bic.w	r6, r6, #7
   85cd8:	4632      	mov	r2, r6
   85cda:	6873      	ldr	r3, [r6, #4]
   85cdc:	f852 6b08 	ldr.w	r6, [r2], #8
   85ce0:	4698      	mov	r8, r3
   85ce2:	9205      	str	r2, [sp, #20]
   85ce4:	2b00      	cmp	r3, #0
   85ce6:	f2c0 8449 	blt.w	8657c <_vfiprintf_r+0xa68>
   85cea:	f1bb 3fff 	cmp.w	fp, #4294967295
   85cee:	f000 8531 	beq.w	86754 <_vfiprintf_r+0xc40>
   85cf2:	ea56 0308 	orrs.w	r3, r6, r8
   85cf6:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   85cfa:	f000 8425 	beq.w	86548 <_vfiprintf_r+0xa34>
   85cfe:	2e0a      	cmp	r6, #10
   85d00:	f178 0300 	sbcs.w	r3, r8, #0
   85d04:	f080 84e1 	bcs.w	866ca <_vfiprintf_r+0xbb6>
   85d08:	2301      	movs	r3, #1
   85d0a:	4655      	mov	r5, sl
   85d0c:	3630      	adds	r6, #48	; 0x30
   85d0e:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   85d12:	9301      	str	r3, [sp, #4]
   85d14:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   85d18:	f8dd 8004 	ldr.w	r8, [sp, #4]
   85d1c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   85d20:	45d8      	cmp	r8, fp
   85d22:	bfb8      	it	lt
   85d24:	46d8      	movlt	r8, fp
   85d26:	2b00      	cmp	r3, #0
   85d28:	f000 80a8 	beq.w	85e7c <_vfiprintf_r+0x368>
   85d2c:	f108 0801 	add.w	r8, r8, #1
   85d30:	e0a4      	b.n	85e7c <_vfiprintf_r+0x368>
   85d32:	9d02      	ldr	r5, [sp, #8]
   85d34:	9806      	ldr	r0, [sp, #24]
   85d36:	4629      	mov	r1, r5
   85d38:	f000 fdfa 	bl	86930 <__swsetup_r>
   85d3c:	2800      	cmp	r0, #0
   85d3e:	f040 8594 	bne.w	8686a <_vfiprintf_r+0xd56>
   85d42:	89aa      	ldrh	r2, [r5, #12]
   85d44:	f002 031a 	and.w	r3, r2, #26
   85d48:	2b0a      	cmp	r3, #10
   85d4a:	f47f af10 	bne.w	85b6e <_vfiprintf_r+0x5a>
   85d4e:	9902      	ldr	r1, [sp, #8]
   85d50:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   85d54:	2b00      	cmp	r3, #0
   85d56:	f6ff af0a 	blt.w	85b6e <_vfiprintf_r+0x5a>
   85d5a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85d5c:	07de      	lsls	r6, r3, #31
   85d5e:	d402      	bmi.n	85d66 <_vfiprintf_r+0x252>
   85d60:	0595      	lsls	r5, r2, #22
   85d62:	f140 8562 	bpl.w	8682a <_vfiprintf_r+0xd16>
   85d66:	4623      	mov	r3, r4
   85d68:	463a      	mov	r2, r7
   85d6a:	9902      	ldr	r1, [sp, #8]
   85d6c:	9806      	ldr	r0, [sp, #24]
   85d6e:	b03d      	add	sp, #244	; 0xf4
   85d70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d74:	f000 bd9a 	b.w	868ac <__sbprintf>
   85d78:	f045 0510 	orr.w	r5, r5, #16
   85d7c:	f015 0820 	ands.w	r8, r5, #32
   85d80:	f000 8103 	beq.w	85f8a <_vfiprintf_r+0x476>
   85d84:	9e05      	ldr	r6, [sp, #20]
   85d86:	3607      	adds	r6, #7
   85d88:	f026 0607 	bic.w	r6, r6, #7
   85d8c:	4633      	mov	r3, r6
   85d8e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   85d92:	f853 6b08 	ldr.w	r6, [r3], #8
   85d96:	9305      	str	r3, [sp, #20]
   85d98:	2300      	movs	r3, #0
   85d9a:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   85d9e:	f04f 0200 	mov.w	r2, #0
   85da2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   85da6:	f1bb 3fff 	cmp.w	fp, #4294967295
   85daa:	f000 81dd 	beq.w	86168 <_vfiprintf_r+0x654>
   85dae:	ea56 0208 	orrs.w	r2, r6, r8
   85db2:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   85db6:	f040 81d6 	bne.w	86166 <_vfiprintf_r+0x652>
   85dba:	f1bb 0f00 	cmp.w	fp, #0
   85dbe:	f040 84cc 	bne.w	8675a <_vfiprintf_r+0xc46>
   85dc2:	2b00      	cmp	r3, #0
   85dc4:	f040 83c5 	bne.w	86552 <_vfiprintf_r+0xa3e>
   85dc8:	f01a 0301 	ands.w	r3, sl, #1
   85dcc:	9301      	str	r3, [sp, #4]
   85dce:	f000 83ec 	beq.w	865aa <_vfiprintf_r+0xa96>
   85dd2:	2330      	movs	r3, #48	; 0x30
   85dd4:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   85dd8:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   85ddc:	e79c      	b.n	85d18 <_vfiprintf_r+0x204>
   85dde:	1be5      	subs	r5, r4, r7
   85de0:	d01b      	beq.n	85e1a <_vfiprintf_r+0x306>
   85de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85de6:	3301      	adds	r3, #1
   85de8:	442a      	add	r2, r5
   85dea:	2b07      	cmp	r3, #7
   85dec:	e9c9 7500 	strd	r7, r5, [r9]
   85df0:	9212      	str	r2, [sp, #72]	; 0x48
   85df2:	9311      	str	r3, [sp, #68]	; 0x44
   85df4:	dc05      	bgt.n	85e02 <_vfiprintf_r+0x2ee>
   85df6:	f109 0908 	add.w	r9, r9, #8
   85dfa:	9b04      	ldr	r3, [sp, #16]
   85dfc:	442b      	add	r3, r5
   85dfe:	9304      	str	r3, [sp, #16]
   85e00:	e6d1      	b.n	85ba6 <_vfiprintf_r+0x92>
   85e02:	2a00      	cmp	r2, #0
   85e04:	f000 839c 	beq.w	86540 <_vfiprintf_r+0xa2c>
   85e08:	9902      	ldr	r1, [sp, #8]
   85e0a:	9806      	ldr	r0, [sp, #24]
   85e0c:	aa10      	add	r2, sp, #64	; 0x40
   85e0e:	f7ff fe45 	bl	85a9c <__sprint_r.part.0>
   85e12:	b940      	cbnz	r0, 85e26 <_vfiprintf_r+0x312>
   85e14:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   85e18:	e7ef      	b.n	85dfa <_vfiprintf_r+0x2e6>
   85e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85e1c:	2b00      	cmp	r3, #0
   85e1e:	f040 8515 	bne.w	8684c <_vfiprintf_r+0xd38>
   85e22:	2300      	movs	r3, #0
   85e24:	9311      	str	r3, [sp, #68]	; 0x44
   85e26:	9a02      	ldr	r2, [sp, #8]
   85e28:	6e53      	ldr	r3, [r2, #100]	; 0x64
   85e2a:	07d9      	lsls	r1, r3, #31
   85e2c:	f140 80a2 	bpl.w	85f74 <_vfiprintf_r+0x460>
   85e30:	8993      	ldrh	r3, [r2, #12]
   85e32:	065b      	lsls	r3, r3, #25
   85e34:	f100 8525 	bmi.w	86882 <_vfiprintf_r+0xd6e>
   85e38:	9804      	ldr	r0, [sp, #16]
   85e3a:	b03d      	add	sp, #244	; 0xf4
   85e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e40:	9b02      	ldr	r3, [sp, #8]
   85e42:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   85e46:	058d      	lsls	r5, r1, #22
   85e48:	b28a      	uxth	r2, r1
   85e4a:	f53f ae78 	bmi.w	85b3e <_vfiprintf_r+0x2a>
   85e4e:	461d      	mov	r5, r3
   85e50:	6d98      	ldr	r0, [r3, #88]	; 0x58
   85e52:	f002 facf 	bl	883f4 <__retarget_lock_acquire_recursive>
   85e56:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   85e5a:	b28a      	uxth	r2, r1
   85e5c:	e66f      	b.n	85b3e <_vfiprintf_r+0x2a>
   85e5e:	2b00      	cmp	r3, #0
   85e60:	d0db      	beq.n	85e1a <_vfiprintf_r+0x306>
   85e62:	f04f 0801 	mov.w	r8, #1
   85e66:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   85e6a:	f04f 0300 	mov.w	r3, #0
   85e6e:	ac23      	add	r4, sp, #140	; 0x8c
   85e70:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   85e74:	f8cd 8004 	str.w	r8, [sp, #4]
   85e78:	f04f 0b00 	mov.w	fp, #0
   85e7c:	f015 0302 	ands.w	r3, r5, #2
   85e80:	9307      	str	r3, [sp, #28]
   85e82:	bf18      	it	ne
   85e84:	f108 0802 	addne.w	r8, r8, #2
   85e88:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   85e8c:	9308      	str	r3, [sp, #32]
   85e8e:	d105      	bne.n	85e9c <_vfiprintf_r+0x388>
   85e90:	9b03      	ldr	r3, [sp, #12]
   85e92:	eba3 0608 	sub.w	r6, r3, r8
   85e96:	2e00      	cmp	r6, #0
   85e98:	f300 828a 	bgt.w	863b0 <_vfiprintf_r+0x89c>
   85e9c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   85ea0:	1c48      	adds	r0, r1, #1
   85ea2:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   85ea6:	b176      	cbz	r6, 85ec6 <_vfiprintf_r+0x3b2>
   85ea8:	2101      	movs	r1, #1
   85eaa:	3201      	adds	r2, #1
   85eac:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   85eb0:	2807      	cmp	r0, #7
   85eb2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   85eb6:	e9c9 6100 	strd	r6, r1, [r9]
   85eba:	f300 8258 	bgt.w	8636e <_vfiprintf_r+0x85a>
   85ebe:	4601      	mov	r1, r0
   85ec0:	f109 0908 	add.w	r9, r9, #8
   85ec4:	3001      	adds	r0, #1
   85ec6:	9b07      	ldr	r3, [sp, #28]
   85ec8:	b1d3      	cbz	r3, 85f00 <_vfiprintf_r+0x3ec>
   85eca:	2302      	movs	r3, #2
   85ecc:	3202      	adds	r2, #2
   85ece:	f8c9 3004 	str.w	r3, [r9, #4]
   85ed2:	2807      	cmp	r0, #7
   85ed4:	ab0f      	add	r3, sp, #60	; 0x3c
   85ed6:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   85eda:	f8c9 3000 	str.w	r3, [r9]
   85ede:	f340 8262 	ble.w	863a6 <_vfiprintf_r+0x892>
   85ee2:	2a00      	cmp	r2, #0
   85ee4:	f000 8327 	beq.w	86536 <_vfiprintf_r+0xa22>
   85ee8:	9902      	ldr	r1, [sp, #8]
   85eea:	9806      	ldr	r0, [sp, #24]
   85eec:	aa10      	add	r2, sp, #64	; 0x40
   85eee:	f7ff fdd5 	bl	85a9c <__sprint_r.part.0>
   85ef2:	2800      	cmp	r0, #0
   85ef4:	d197      	bne.n	85e26 <_vfiprintf_r+0x312>
   85ef6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   85efa:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   85efe:	1c48      	adds	r0, r1, #1
   85f00:	9b08      	ldr	r3, [sp, #32]
   85f02:	2b80      	cmp	r3, #128	; 0x80
   85f04:	f000 8171 	beq.w	861ea <_vfiprintf_r+0x6d6>
   85f08:	9b01      	ldr	r3, [sp, #4]
   85f0a:	ebab 0603 	sub.w	r6, fp, r3
   85f0e:	2e00      	cmp	r6, #0
   85f10:	f300 81cf 	bgt.w	862b2 <_vfiprintf_r+0x79e>
   85f14:	9b01      	ldr	r3, [sp, #4]
   85f16:	2807      	cmp	r0, #7
   85f18:	441a      	add	r2, r3
   85f1a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   85f1e:	f8c9 4000 	str.w	r4, [r9]
   85f22:	f8c9 3004 	str.w	r3, [r9, #4]
   85f26:	f340 815d 	ble.w	861e4 <_vfiprintf_r+0x6d0>
   85f2a:	2a00      	cmp	r2, #0
   85f2c:	f000 8293 	beq.w	86456 <_vfiprintf_r+0x942>
   85f30:	9902      	ldr	r1, [sp, #8]
   85f32:	9806      	ldr	r0, [sp, #24]
   85f34:	aa10      	add	r2, sp, #64	; 0x40
   85f36:	f7ff fdb1 	bl	85a9c <__sprint_r.part.0>
   85f3a:	2800      	cmp	r0, #0
   85f3c:	f47f af73 	bne.w	85e26 <_vfiprintf_r+0x312>
   85f40:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85f42:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   85f46:	0768      	lsls	r0, r5, #29
   85f48:	d505      	bpl.n	85f56 <_vfiprintf_r+0x442>
   85f4a:	9b03      	ldr	r3, [sp, #12]
   85f4c:	eba3 0408 	sub.w	r4, r3, r8
   85f50:	2c00      	cmp	r4, #0
   85f52:	f300 828a 	bgt.w	8646a <_vfiprintf_r+0x956>
   85f56:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   85f5a:	4541      	cmp	r1, r8
   85f5c:	bfac      	ite	ge
   85f5e:	185b      	addge	r3, r3, r1
   85f60:	4443      	addlt	r3, r8
   85f62:	9304      	str	r3, [sp, #16]
   85f64:	2a00      	cmp	r2, #0
   85f66:	f040 81f3 	bne.w	86350 <_vfiprintf_r+0x83c>
   85f6a:	2300      	movs	r3, #0
   85f6c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   85f70:	9311      	str	r3, [sp, #68]	; 0x44
   85f72:	e608      	b.n	85b86 <_vfiprintf_r+0x72>
   85f74:	9b02      	ldr	r3, [sp, #8]
   85f76:	899b      	ldrh	r3, [r3, #12]
   85f78:	059a      	lsls	r2, r3, #22
   85f7a:	f53f af5a 	bmi.w	85e32 <_vfiprintf_r+0x31e>
   85f7e:	9c02      	ldr	r4, [sp, #8]
   85f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85f82:	f002 fa39 	bl	883f8 <__retarget_lock_release_recursive>
   85f86:	89a3      	ldrh	r3, [r4, #12]
   85f88:	e753      	b.n	85e32 <_vfiprintf_r+0x31e>
   85f8a:	f015 0310 	ands.w	r3, r5, #16
   85f8e:	f040 8318 	bne.w	865c2 <_vfiprintf_r+0xaae>
   85f92:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   85f96:	f000 8310 	beq.w	865ba <_vfiprintf_r+0xaa6>
   85f9a:	9e05      	ldr	r6, [sp, #20]
   85f9c:	4698      	mov	r8, r3
   85f9e:	f856 3b04 	ldr.w	r3, [r6], #4
   85fa2:	9605      	str	r6, [sp, #20]
   85fa4:	b29e      	uxth	r6, r3
   85fa6:	e6f7      	b.n	85d98 <_vfiprintf_r+0x284>
   85fa8:	f856 3b04 	ldr.w	r3, [r6], #4
   85fac:	06e8      	lsls	r0, r5, #27
   85fae:	9605      	str	r6, [sp, #20]
   85fb0:	f100 8310 	bmi.w	865d4 <_vfiprintf_r+0xac0>
   85fb4:	0669      	lsls	r1, r5, #25
   85fb6:	f140 830a 	bpl.w	865ce <_vfiprintf_r+0xaba>
   85fba:	f343 38c0 	sbfx	r8, r3, #15, #1
   85fbe:	b21e      	sxth	r6, r3
   85fc0:	4643      	mov	r3, r8
   85fc2:	e68f      	b.n	85ce4 <_vfiprintf_r+0x1d0>
   85fc4:	f04f 0300 	mov.w	r3, #0
   85fc8:	9e05      	ldr	r6, [sp, #20]
   85fca:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   85fce:	f856 4b04 	ldr.w	r4, [r6], #4
   85fd2:	2c00      	cmp	r4, #0
   85fd4:	f000 83cf 	beq.w	86776 <_vfiprintf_r+0xc62>
   85fd8:	f1bb 3fff 	cmp.w	fp, #4294967295
   85fdc:	f000 8341 	beq.w	86662 <_vfiprintf_r+0xb4e>
   85fe0:	465a      	mov	r2, fp
   85fe2:	2100      	movs	r1, #0
   85fe4:	4620      	mov	r0, r4
   85fe6:	f002 fd73 	bl	88ad0 <memchr>
   85fea:	2800      	cmp	r0, #0
   85fec:	f000 8422 	beq.w	86834 <_vfiprintf_r+0xd20>
   85ff0:	1b03      	subs	r3, r0, r4
   85ff2:	f04f 0b00 	mov.w	fp, #0
   85ff6:	9605      	str	r6, [sp, #20]
   85ff8:	9301      	str	r3, [sp, #4]
   85ffa:	e68d      	b.n	85d18 <_vfiprintf_r+0x204>
   85ffc:	f04f 0300 	mov.w	r3, #0
   86000:	f04f 0801 	mov.w	r8, #1
   86004:	9e05      	ldr	r6, [sp, #20]
   86006:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8600a:	f856 3b04 	ldr.w	r3, [r6], #4
   8600e:	ac23      	add	r4, sp, #140	; 0x8c
   86010:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86014:	9605      	str	r6, [sp, #20]
   86016:	f8cd 8004 	str.w	r8, [sp, #4]
   8601a:	e72d      	b.n	85e78 <_vfiprintf_r+0x364>
   8601c:	f001 fdc4 	bl	87ba8 <__sinit>
   86020:	e585      	b.n	85b2e <_vfiprintf_r+0x1a>
   86022:	9b03      	ldr	r3, [sp, #12]
   86024:	425b      	negs	r3, r3
   86026:	9303      	str	r3, [sp, #12]
   86028:	783b      	ldrb	r3, [r7, #0]
   8602a:	f045 0504 	orr.w	r5, r5, #4
   8602e:	e5ca      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86030:	783b      	ldrb	r3, [r7, #0]
   86032:	2b6c      	cmp	r3, #108	; 0x6c
   86034:	bf03      	ittte	eq
   86036:	787b      	ldrbeq	r3, [r7, #1]
   86038:	f045 0520 	orreq.w	r5, r5, #32
   8603c:	3701      	addeq	r7, #1
   8603e:	f045 0510 	orrne.w	r5, r5, #16
   86042:	e5c0      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86044:	783b      	ldrb	r3, [r7, #0]
   86046:	2b68      	cmp	r3, #104	; 0x68
   86048:	bf03      	ittte	eq
   8604a:	787b      	ldrbeq	r3, [r7, #1]
   8604c:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   86050:	3701      	addeq	r7, #1
   86052:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   86056:	e5b6      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86058:	f045 0a10 	orr.w	sl, r5, #16
   8605c:	f01a 0820 	ands.w	r8, sl, #32
   86060:	f000 827e 	beq.w	86560 <_vfiprintf_r+0xa4c>
   86064:	9e05      	ldr	r6, [sp, #20]
   86066:	2301      	movs	r3, #1
   86068:	3607      	adds	r6, #7
   8606a:	f026 0607 	bic.w	r6, r6, #7
   8606e:	4632      	mov	r2, r6
   86070:	f8d6 8004 	ldr.w	r8, [r6, #4]
   86074:	f852 6b08 	ldr.w	r6, [r2], #8
   86078:	9205      	str	r2, [sp, #20]
   8607a:	e690      	b.n	85d9e <_vfiprintf_r+0x28a>
   8607c:	783b      	ldrb	r3, [r7, #0]
   8607e:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   86082:	e5a0      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86084:	2230      	movs	r2, #48	; 0x30
   86086:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   8608a:	2278      	movs	r2, #120	; 0x78
   8608c:	9b05      	ldr	r3, [sp, #20]
   8608e:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   86092:	f853 6b04 	ldr.w	r6, [r3], #4
   86096:	4abe      	ldr	r2, [pc, #760]	; (86390 <_vfiprintf_r+0x87c>)
   86098:	9305      	str	r3, [sp, #20]
   8609a:	f04f 0800 	mov.w	r8, #0
   8609e:	2302      	movs	r3, #2
   860a0:	f045 0a02 	orr.w	sl, r5, #2
   860a4:	9209      	str	r2, [sp, #36]	; 0x24
   860a6:	e67a      	b.n	85d9e <_vfiprintf_r+0x28a>
   860a8:	06ae      	lsls	r6, r5, #26
   860aa:	f100 82a4 	bmi.w	865f6 <_vfiprintf_r+0xae2>
   860ae:	06ec      	lsls	r4, r5, #27
   860b0:	f100 8359 	bmi.w	86766 <_vfiprintf_r+0xc52>
   860b4:	0668      	lsls	r0, r5, #25
   860b6:	f100 83b0 	bmi.w	8681a <_vfiprintf_r+0xd06>
   860ba:	05a9      	lsls	r1, r5, #22
   860bc:	f140 8353 	bpl.w	86766 <_vfiprintf_r+0xc52>
   860c0:	9e05      	ldr	r6, [sp, #20]
   860c2:	9a04      	ldr	r2, [sp, #16]
   860c4:	f856 3b04 	ldr.w	r3, [r6], #4
   860c8:	701a      	strb	r2, [r3, #0]
   860ca:	9605      	str	r6, [sp, #20]
   860cc:	e55b      	b.n	85b86 <_vfiprintf_r+0x72>
   860ce:	9c06      	ldr	r4, [sp, #24]
   860d0:	4620      	mov	r0, r4
   860d2:	f002 f987 	bl	883e4 <_localeconv_r>
   860d6:	6843      	ldr	r3, [r0, #4]
   860d8:	4618      	mov	r0, r3
   860da:	930b      	str	r3, [sp, #44]	; 0x2c
   860dc:	f7fd ff2a 	bl	83f34 <strlen>
   860e0:	4603      	mov	r3, r0
   860e2:	4620      	mov	r0, r4
   860e4:	930c      	str	r3, [sp, #48]	; 0x30
   860e6:	461c      	mov	r4, r3
   860e8:	f002 f97c 	bl	883e4 <_localeconv_r>
   860ec:	6883      	ldr	r3, [r0, #8]
   860ee:	930a      	str	r3, [sp, #40]	; 0x28
   860f0:	2c00      	cmp	r4, #0
   860f2:	f43f ade2 	beq.w	85cba <_vfiprintf_r+0x1a6>
   860f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   860f8:	2b00      	cmp	r3, #0
   860fa:	f43f adde 	beq.w	85cba <_vfiprintf_r+0x1a6>
   860fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86100:	781b      	ldrb	r3, [r3, #0]
   86102:	2b00      	cmp	r3, #0
   86104:	f43f add9 	beq.w	85cba <_vfiprintf_r+0x1a6>
   86108:	783b      	ldrb	r3, [r7, #0]
   8610a:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   8610e:	e55a      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86110:	783b      	ldrb	r3, [r7, #0]
   86112:	f045 0501 	orr.w	r5, r5, #1
   86116:	e556      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86118:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8611c:	2b00      	cmp	r3, #0
   8611e:	f47f adcc 	bne.w	85cba <_vfiprintf_r+0x1a6>
   86122:	2320      	movs	r3, #32
   86124:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   86128:	783b      	ldrb	r3, [r7, #0]
   8612a:	e54c      	b.n	85bc6 <_vfiprintf_r+0xb2>
   8612c:	783b      	ldrb	r3, [r7, #0]
   8612e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   86132:	e548      	b.n	85bc6 <_vfiprintf_r+0xb2>
   86134:	4639      	mov	r1, r7
   86136:	f811 3b01 	ldrb.w	r3, [r1], #1
   8613a:	2b2a      	cmp	r3, #42	; 0x2a
   8613c:	f000 83a6 	beq.w	8688c <_vfiprintf_r+0xd78>
   86140:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   86144:	2a09      	cmp	r2, #9
   86146:	460f      	mov	r7, r1
   86148:	f04f 0b00 	mov.w	fp, #0
   8614c:	f63f ad3c 	bhi.w	85bc8 <_vfiprintf_r+0xb4>
   86150:	f817 3b01 	ldrb.w	r3, [r7], #1
   86154:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   86158:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   8615c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   86160:	2a09      	cmp	r2, #9
   86162:	d9f5      	bls.n	86150 <_vfiprintf_r+0x63c>
   86164:	e530      	b.n	85bc8 <_vfiprintf_r+0xb4>
   86166:	46aa      	mov	sl, r5
   86168:	2b01      	cmp	r3, #1
   8616a:	f43f adc8 	beq.w	85cfe <_vfiprintf_r+0x1ea>
   8616e:	2b02      	cmp	r3, #2
   86170:	ac3c      	add	r4, sp, #240	; 0xf0
   86172:	d112      	bne.n	8619a <_vfiprintf_r+0x686>
   86174:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86176:	f006 030f 	and.w	r3, r6, #15
   8617a:	5cd3      	ldrb	r3, [r2, r3]
   8617c:	0936      	lsrs	r6, r6, #4
   8617e:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   86182:	ea4f 1818 	mov.w	r8, r8, lsr #4
   86186:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8618a:	ea56 0308 	orrs.w	r3, r6, r8
   8618e:	d1f2      	bne.n	86176 <_vfiprintf_r+0x662>
   86190:	ab3c      	add	r3, sp, #240	; 0xf0
   86192:	1b1b      	subs	r3, r3, r4
   86194:	4655      	mov	r5, sl
   86196:	9301      	str	r3, [sp, #4]
   86198:	e5be      	b.n	85d18 <_vfiprintf_r+0x204>
   8619a:	f006 0307 	and.w	r3, r6, #7
   8619e:	08f6      	lsrs	r6, r6, #3
   861a0:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   861a4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   861a8:	3330      	adds	r3, #48	; 0x30
   861aa:	ea56 0108 	orrs.w	r1, r6, r8
   861ae:	4622      	mov	r2, r4
   861b0:	f804 3d01 	strb.w	r3, [r4, #-1]!
   861b4:	d1f1      	bne.n	8619a <_vfiprintf_r+0x686>
   861b6:	f01a 0f01 	tst.w	sl, #1
   861ba:	d0e9      	beq.n	86190 <_vfiprintf_r+0x67c>
   861bc:	2b30      	cmp	r3, #48	; 0x30
   861be:	d0e7      	beq.n	86190 <_vfiprintf_r+0x67c>
   861c0:	2330      	movs	r3, #48	; 0x30
   861c2:	3a02      	subs	r2, #2
   861c4:	f804 3c01 	strb.w	r3, [r4, #-1]
   861c8:	ab3c      	add	r3, sp, #240	; 0xf0
   861ca:	1a9b      	subs	r3, r3, r2
   861cc:	4655      	mov	r5, sl
   861ce:	4614      	mov	r4, r2
   861d0:	9301      	str	r3, [sp, #4]
   861d2:	e5a1      	b.n	85d18 <_vfiprintf_r+0x204>
   861d4:	2301      	movs	r3, #1
   861d6:	9a01      	ldr	r2, [sp, #4]
   861d8:	9413      	str	r4, [sp, #76]	; 0x4c
   861da:	9311      	str	r3, [sp, #68]	; 0x44
   861dc:	9214      	str	r2, [sp, #80]	; 0x50
   861de:	9212      	str	r2, [sp, #72]	; 0x48
   861e0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   861e4:	f109 0908 	add.w	r9, r9, #8
   861e8:	e6ad      	b.n	85f46 <_vfiprintf_r+0x432>
   861ea:	9b03      	ldr	r3, [sp, #12]
   861ec:	eba3 0608 	sub.w	r6, r3, r8
   861f0:	2e00      	cmp	r6, #0
   861f2:	f77f ae89 	ble.w	85f08 <_vfiprintf_r+0x3f4>
   861f6:	2e10      	cmp	r6, #16
   861f8:	f8df a198 	ldr.w	sl, [pc, #408]	; 86394 <_vfiprintf_r+0x880>
   861fc:	dd38      	ble.n	86270 <_vfiprintf_r+0x75c>
   861fe:	4653      	mov	r3, sl
   86200:	46cc      	mov	ip, r9
   86202:	46ba      	mov	sl, r7
   86204:	46c1      	mov	r9, r8
   86206:	9407      	str	r4, [sp, #28]
   86208:	46a8      	mov	r8, r5
   8620a:	461f      	mov	r7, r3
   8620c:	9c06      	ldr	r4, [sp, #24]
   8620e:	9d02      	ldr	r5, [sp, #8]
   86210:	e007      	b.n	86222 <_vfiprintf_r+0x70e>
   86212:	f101 0e02 	add.w	lr, r1, #2
   86216:	4601      	mov	r1, r0
   86218:	f10c 0c08 	add.w	ip, ip, #8
   8621c:	3e10      	subs	r6, #16
   8621e:	2e10      	cmp	r6, #16
   86220:	dd1e      	ble.n	86260 <_vfiprintf_r+0x74c>
   86222:	2310      	movs	r3, #16
   86224:	1c48      	adds	r0, r1, #1
   86226:	3210      	adds	r2, #16
   86228:	2807      	cmp	r0, #7
   8622a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8622e:	f8cc 7000 	str.w	r7, [ip]
   86232:	f8cc 3004 	str.w	r3, [ip, #4]
   86236:	ddec      	ble.n	86212 <_vfiprintf_r+0x6fe>
   86238:	2a00      	cmp	r2, #0
   8623a:	f000 8092 	beq.w	86362 <_vfiprintf_r+0x84e>
   8623e:	4629      	mov	r1, r5
   86240:	4620      	mov	r0, r4
   86242:	aa10      	add	r2, sp, #64	; 0x40
   86244:	f7ff fc2a 	bl	85a9c <__sprint_r.part.0>
   86248:	2800      	cmp	r0, #0
   8624a:	f47f adec 	bne.w	85e26 <_vfiprintf_r+0x312>
   8624e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   86252:	3e10      	subs	r6, #16
   86254:	2e10      	cmp	r6, #16
   86256:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8625a:	f101 0e01 	add.w	lr, r1, #1
   8625e:	dce0      	bgt.n	86222 <_vfiprintf_r+0x70e>
   86260:	463b      	mov	r3, r7
   86262:	4645      	mov	r5, r8
   86264:	4657      	mov	r7, sl
   86266:	46c8      	mov	r8, r9
   86268:	4670      	mov	r0, lr
   8626a:	46e1      	mov	r9, ip
   8626c:	469a      	mov	sl, r3
   8626e:	9c07      	ldr	r4, [sp, #28]
   86270:	4432      	add	r2, r6
   86272:	2807      	cmp	r0, #7
   86274:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   86278:	f8c9 a000 	str.w	sl, [r9]
   8627c:	f8c9 6004 	str.w	r6, [r9, #4]
   86280:	f340 8196 	ble.w	865b0 <_vfiprintf_r+0xa9c>
   86284:	2a00      	cmp	r2, #0
   86286:	f000 829a 	beq.w	867be <_vfiprintf_r+0xcaa>
   8628a:	9902      	ldr	r1, [sp, #8]
   8628c:	9806      	ldr	r0, [sp, #24]
   8628e:	aa10      	add	r2, sp, #64	; 0x40
   86290:	f7ff fc04 	bl	85a9c <__sprint_r.part.0>
   86294:	2800      	cmp	r0, #0
   86296:	f47f adc6 	bne.w	85e26 <_vfiprintf_r+0x312>
   8629a:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8629e:	9b01      	ldr	r3, [sp, #4]
   862a0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   862a4:	ebab 0603 	sub.w	r6, fp, r3
   862a8:	2e00      	cmp	r6, #0
   862aa:	f101 0001 	add.w	r0, r1, #1
   862ae:	f77f ae31 	ble.w	85f14 <_vfiprintf_r+0x400>
   862b2:	2e10      	cmp	r6, #16
   862b4:	f340 826b 	ble.w	8678e <_vfiprintf_r+0xc7a>
   862b8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 86394 <_vfiprintf_r+0x880>
   862bc:	46cc      	mov	ip, r9
   862be:	4653      	mov	r3, sl
   862c0:	46c1      	mov	r9, r8
   862c2:	46ba      	mov	sl, r7
   862c4:	46a8      	mov	r8, r5
   862c6:	9407      	str	r4, [sp, #28]
   862c8:	f04f 0b10 	mov.w	fp, #16
   862cc:	461f      	mov	r7, r3
   862ce:	9c06      	ldr	r4, [sp, #24]
   862d0:	9d02      	ldr	r5, [sp, #8]
   862d2:	e007      	b.n	862e4 <_vfiprintf_r+0x7d0>
   862d4:	f101 0e02 	add.w	lr, r1, #2
   862d8:	4601      	mov	r1, r0
   862da:	f10c 0c08 	add.w	ip, ip, #8
   862de:	3e10      	subs	r6, #16
   862e0:	2e10      	cmp	r6, #16
   862e2:	dd19      	ble.n	86318 <_vfiprintf_r+0x804>
   862e4:	1c48      	adds	r0, r1, #1
   862e6:	3210      	adds	r2, #16
   862e8:	2807      	cmp	r0, #7
   862ea:	e9cc 7b00 	strd	r7, fp, [ip]
   862ee:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   862f2:	ddef      	ble.n	862d4 <_vfiprintf_r+0x7c0>
   862f4:	b332      	cbz	r2, 86344 <_vfiprintf_r+0x830>
   862f6:	4629      	mov	r1, r5
   862f8:	4620      	mov	r0, r4
   862fa:	aa10      	add	r2, sp, #64	; 0x40
   862fc:	f7ff fbce 	bl	85a9c <__sprint_r.part.0>
   86300:	2800      	cmp	r0, #0
   86302:	f47f ad90 	bne.w	85e26 <_vfiprintf_r+0x312>
   86306:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8630a:	3e10      	subs	r6, #16
   8630c:	2e10      	cmp	r6, #16
   8630e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   86312:	f101 0e01 	add.w	lr, r1, #1
   86316:	dce5      	bgt.n	862e4 <_vfiprintf_r+0x7d0>
   86318:	463b      	mov	r3, r7
   8631a:	4645      	mov	r5, r8
   8631c:	4657      	mov	r7, sl
   8631e:	46c8      	mov	r8, r9
   86320:	4670      	mov	r0, lr
   86322:	46e1      	mov	r9, ip
   86324:	469a      	mov	sl, r3
   86326:	9c07      	ldr	r4, [sp, #28]
   86328:	4432      	add	r2, r6
   8632a:	2807      	cmp	r0, #7
   8632c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   86330:	f8c9 a000 	str.w	sl, [r9]
   86334:	f8c9 6004 	str.w	r6, [r9, #4]
   86338:	f300 80e9 	bgt.w	8650e <_vfiprintf_r+0x9fa>
   8633c:	f109 0908 	add.w	r9, r9, #8
   86340:	3001      	adds	r0, #1
   86342:	e5e7      	b.n	85f14 <_vfiprintf_r+0x400>
   86344:	f04f 0e01 	mov.w	lr, #1
   86348:	4611      	mov	r1, r2
   8634a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8634e:	e7c6      	b.n	862de <_vfiprintf_r+0x7ca>
   86350:	9902      	ldr	r1, [sp, #8]
   86352:	9806      	ldr	r0, [sp, #24]
   86354:	aa10      	add	r2, sp, #64	; 0x40
   86356:	f7ff fba1 	bl	85a9c <__sprint_r.part.0>
   8635a:	2800      	cmp	r0, #0
   8635c:	f43f ae05 	beq.w	85f6a <_vfiprintf_r+0x456>
   86360:	e561      	b.n	85e26 <_vfiprintf_r+0x312>
   86362:	f04f 0e01 	mov.w	lr, #1
   86366:	4611      	mov	r1, r2
   86368:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8636c:	e756      	b.n	8621c <_vfiprintf_r+0x708>
   8636e:	2a00      	cmp	r2, #0
   86370:	f000 80de 	beq.w	86530 <_vfiprintf_r+0xa1c>
   86374:	9902      	ldr	r1, [sp, #8]
   86376:	9806      	ldr	r0, [sp, #24]
   86378:	aa10      	add	r2, sp, #64	; 0x40
   8637a:	f7ff fb8f 	bl	85a9c <__sprint_r.part.0>
   8637e:	2800      	cmp	r0, #0
   86380:	f47f ad51 	bne.w	85e26 <_vfiprintf_r+0x312>
   86384:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   86388:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8638c:	1c48      	adds	r0, r1, #1
   8638e:	e59a      	b.n	85ec6 <_vfiprintf_r+0x3b2>
   86390:	0008abec 	.word	0x0008abec
   86394:	0008ac50 	.word	0x0008ac50
   86398:	2202      	movs	r2, #2
   8639a:	2001      	movs	r0, #1
   8639c:	ab0f      	add	r3, sp, #60	; 0x3c
   8639e:	9313      	str	r3, [sp, #76]	; 0x4c
   863a0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   863a4:	9214      	str	r2, [sp, #80]	; 0x50
   863a6:	4601      	mov	r1, r0
   863a8:	f109 0908 	add.w	r9, r9, #8
   863ac:	1c48      	adds	r0, r1, #1
   863ae:	e5a7      	b.n	85f00 <_vfiprintf_r+0x3ec>
   863b0:	2e10      	cmp	r6, #16
   863b2:	f340 8245 	ble.w	86840 <_vfiprintf_r+0xd2c>
   863b6:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   863ba:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 866ac <_vfiprintf_r+0xb98>
   863be:	4619      	mov	r1, r3
   863c0:	4653      	mov	r3, sl
   863c2:	46cc      	mov	ip, r9
   863c4:	46ba      	mov	sl, r7
   863c6:	46c1      	mov	r9, r8
   863c8:	940d      	str	r4, [sp, #52]	; 0x34
   863ca:	46a8      	mov	r8, r5
   863cc:	461f      	mov	r7, r3
   863ce:	9c06      	ldr	r4, [sp, #24]
   863d0:	9d02      	ldr	r5, [sp, #8]
   863d2:	e007      	b.n	863e4 <_vfiprintf_r+0x8d0>
   863d4:	f101 0e02 	add.w	lr, r1, #2
   863d8:	4601      	mov	r1, r0
   863da:	f10c 0c08 	add.w	ip, ip, #8
   863de:	3e10      	subs	r6, #16
   863e0:	2e10      	cmp	r6, #16
   863e2:	dd1c      	ble.n	8641e <_vfiprintf_r+0x90a>
   863e4:	2310      	movs	r3, #16
   863e6:	1c48      	adds	r0, r1, #1
   863e8:	3210      	adds	r2, #16
   863ea:	2807      	cmp	r0, #7
   863ec:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   863f0:	f8cc 7000 	str.w	r7, [ip]
   863f4:	f8cc 3004 	str.w	r3, [ip, #4]
   863f8:	ddec      	ble.n	863d4 <_vfiprintf_r+0x8c0>
   863fa:	b332      	cbz	r2, 8644a <_vfiprintf_r+0x936>
   863fc:	4629      	mov	r1, r5
   863fe:	4620      	mov	r0, r4
   86400:	aa10      	add	r2, sp, #64	; 0x40
   86402:	f7ff fb4b 	bl	85a9c <__sprint_r.part.0>
   86406:	2800      	cmp	r0, #0
   86408:	f47f ad0d 	bne.w	85e26 <_vfiprintf_r+0x312>
   8640c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   86410:	3e10      	subs	r6, #16
   86412:	2e10      	cmp	r6, #16
   86414:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   86418:	f101 0e01 	add.w	lr, r1, #1
   8641c:	dce2      	bgt.n	863e4 <_vfiprintf_r+0x8d0>
   8641e:	463b      	mov	r3, r7
   86420:	4645      	mov	r5, r8
   86422:	4657      	mov	r7, sl
   86424:	46c8      	mov	r8, r9
   86426:	4671      	mov	r1, lr
   86428:	46e1      	mov	r9, ip
   8642a:	469a      	mov	sl, r3
   8642c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8642e:	4432      	add	r2, r6
   86430:	2907      	cmp	r1, #7
   86432:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   86436:	f8c9 a000 	str.w	sl, [r9]
   8643a:	f8c9 6004 	str.w	r6, [r9, #4]
   8643e:	f300 80a7 	bgt.w	86590 <_vfiprintf_r+0xa7c>
   86442:	f109 0908 	add.w	r9, r9, #8
   86446:	1c48      	adds	r0, r1, #1
   86448:	e52b      	b.n	85ea2 <_vfiprintf_r+0x38e>
   8644a:	4611      	mov	r1, r2
   8644c:	f04f 0e01 	mov.w	lr, #1
   86450:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   86454:	e7c3      	b.n	863de <_vfiprintf_r+0x8ca>
   86456:	076c      	lsls	r4, r5, #29
   86458:	9211      	str	r2, [sp, #68]	; 0x44
   8645a:	d550      	bpl.n	864fe <_vfiprintf_r+0x9ea>
   8645c:	9b03      	ldr	r3, [sp, #12]
   8645e:	eba3 0408 	sub.w	r4, r3, r8
   86462:	2c00      	cmp	r4, #0
   86464:	dd4b      	ble.n	864fe <_vfiprintf_r+0x9ea>
   86466:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8646a:	2c10      	cmp	r4, #16
   8646c:	f340 81f8 	ble.w	86860 <_vfiprintf_r+0xd4c>
   86470:	f8df a238 	ldr.w	sl, [pc, #568]	; 866ac <_vfiprintf_r+0xb98>
   86474:	2510      	movs	r5, #16
   86476:	4653      	mov	r3, sl
   86478:	9911      	ldr	r1, [sp, #68]	; 0x44
   8647a:	46ba      	mov	sl, r7
   8647c:	9e06      	ldr	r6, [sp, #24]
   8647e:	461f      	mov	r7, r3
   86480:	f8dd b008 	ldr.w	fp, [sp, #8]
   86484:	e006      	b.n	86494 <_vfiprintf_r+0x980>
   86486:	1c88      	adds	r0, r1, #2
   86488:	4619      	mov	r1, r3
   8648a:	f109 0908 	add.w	r9, r9, #8
   8648e:	3c10      	subs	r4, #16
   86490:	2c10      	cmp	r4, #16
   86492:	dd19      	ble.n	864c8 <_vfiprintf_r+0x9b4>
   86494:	1c4b      	adds	r3, r1, #1
   86496:	3210      	adds	r2, #16
   86498:	2b07      	cmp	r3, #7
   8649a:	e9c9 7500 	strd	r7, r5, [r9]
   8649e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   864a2:	ddf0      	ble.n	86486 <_vfiprintf_r+0x972>
   864a4:	b332      	cbz	r2, 864f4 <_vfiprintf_r+0x9e0>
   864a6:	4659      	mov	r1, fp
   864a8:	4630      	mov	r0, r6
   864aa:	aa10      	add	r2, sp, #64	; 0x40
   864ac:	f7ff faf6 	bl	85a9c <__sprint_r.part.0>
   864b0:	2800      	cmp	r0, #0
   864b2:	f47f acb8 	bne.w	85e26 <_vfiprintf_r+0x312>
   864b6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   864ba:	3c10      	subs	r4, #16
   864bc:	2c10      	cmp	r4, #16
   864be:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   864c2:	f101 0001 	add.w	r0, r1, #1
   864c6:	dce5      	bgt.n	86494 <_vfiprintf_r+0x980>
   864c8:	463b      	mov	r3, r7
   864ca:	4657      	mov	r7, sl
   864cc:	469a      	mov	sl, r3
   864ce:	4422      	add	r2, r4
   864d0:	2807      	cmp	r0, #7
   864d2:	e9c9 a400 	strd	sl, r4, [r9]
   864d6:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   864da:	f77f ad3c 	ble.w	85f56 <_vfiprintf_r+0x442>
   864de:	b172      	cbz	r2, 864fe <_vfiprintf_r+0x9ea>
   864e0:	9902      	ldr	r1, [sp, #8]
   864e2:	9806      	ldr	r0, [sp, #24]
   864e4:	aa10      	add	r2, sp, #64	; 0x40
   864e6:	f7ff fad9 	bl	85a9c <__sprint_r.part.0>
   864ea:	2800      	cmp	r0, #0
   864ec:	f47f ac9b 	bne.w	85e26 <_vfiprintf_r+0x312>
   864f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   864f2:	e530      	b.n	85f56 <_vfiprintf_r+0x442>
   864f4:	2001      	movs	r0, #1
   864f6:	4611      	mov	r1, r2
   864f8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   864fc:	e7c7      	b.n	8648e <_vfiprintf_r+0x97a>
   864fe:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   86502:	4542      	cmp	r2, r8
   86504:	bfac      	ite	ge
   86506:	189b      	addge	r3, r3, r2
   86508:	4443      	addlt	r3, r8
   8650a:	9304      	str	r3, [sp, #16]
   8650c:	e52d      	b.n	85f6a <_vfiprintf_r+0x456>
   8650e:	2a00      	cmp	r2, #0
   86510:	f43f ae60 	beq.w	861d4 <_vfiprintf_r+0x6c0>
   86514:	9902      	ldr	r1, [sp, #8]
   86516:	9806      	ldr	r0, [sp, #24]
   86518:	aa10      	add	r2, sp, #64	; 0x40
   8651a:	f7ff fabf 	bl	85a9c <__sprint_r.part.0>
   8651e:	2800      	cmp	r0, #0
   86520:	f47f ac81 	bne.w	85e26 <_vfiprintf_r+0x312>
   86524:	9811      	ldr	r0, [sp, #68]	; 0x44
   86526:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86528:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8652c:	3001      	adds	r0, #1
   8652e:	e4f1      	b.n	85f14 <_vfiprintf_r+0x400>
   86530:	9b07      	ldr	r3, [sp, #28]
   86532:	2b00      	cmp	r3, #0
   86534:	d169      	bne.n	8660a <_vfiprintf_r+0xaf6>
   86536:	2001      	movs	r0, #1
   86538:	4611      	mov	r1, r2
   8653a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8653e:	e4df      	b.n	85f00 <_vfiprintf_r+0x3ec>
   86540:	9211      	str	r2, [sp, #68]	; 0x44
   86542:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   86546:	e458      	b.n	85dfa <_vfiprintf_r+0x2e6>
   86548:	f1bb 0f00 	cmp.w	fp, #0
   8654c:	f47f abdc 	bne.w	85d08 <_vfiprintf_r+0x1f4>
   86550:	4655      	mov	r5, sl
   86552:	f04f 0b00 	mov.w	fp, #0
   86556:	ac3c      	add	r4, sp, #240	; 0xf0
   86558:	f8cd b004 	str.w	fp, [sp, #4]
   8655c:	f7ff bbdc 	b.w	85d18 <_vfiprintf_r+0x204>
   86560:	f01a 0310 	ands.w	r3, sl, #16
   86564:	d140      	bne.n	865e8 <_vfiprintf_r+0xad4>
   86566:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   8656a:	d039      	beq.n	865e0 <_vfiprintf_r+0xacc>
   8656c:	9e05      	ldr	r6, [sp, #20]
   8656e:	4698      	mov	r8, r3
   86570:	f856 2b04 	ldr.w	r2, [r6], #4
   86574:	2301      	movs	r3, #1
   86576:	9605      	str	r6, [sp, #20]
   86578:	b296      	uxth	r6, r2
   8657a:	e410      	b.n	85d9e <_vfiprintf_r+0x28a>
   8657c:	232d      	movs	r3, #45	; 0x2d
   8657e:	4276      	negs	r6, r6
   86580:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   86584:	46aa      	mov	sl, r5
   86586:	f04f 0301 	mov.w	r3, #1
   8658a:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   8658e:	e40a      	b.n	85da6 <_vfiprintf_r+0x292>
   86590:	2a00      	cmp	r2, #0
   86592:	d06f      	beq.n	86674 <_vfiprintf_r+0xb60>
   86594:	9902      	ldr	r1, [sp, #8]
   86596:	9806      	ldr	r0, [sp, #24]
   86598:	aa10      	add	r2, sp, #64	; 0x40
   8659a:	f7ff fa7f 	bl	85a9c <__sprint_r.part.0>
   8659e:	2800      	cmp	r0, #0
   865a0:	f47f ac41 	bne.w	85e26 <_vfiprintf_r+0x312>
   865a4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   865a8:	e478      	b.n	85e9c <_vfiprintf_r+0x388>
   865aa:	ac3c      	add	r4, sp, #240	; 0xf0
   865ac:	f7ff bbb4 	b.w	85d18 <_vfiprintf_r+0x204>
   865b0:	4601      	mov	r1, r0
   865b2:	f109 0908 	add.w	r9, r9, #8
   865b6:	3001      	adds	r0, #1
   865b8:	e4a6      	b.n	85f08 <_vfiprintf_r+0x3f4>
   865ba:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   865be:	f040 811d 	bne.w	867fc <_vfiprintf_r+0xce8>
   865c2:	9b05      	ldr	r3, [sp, #20]
   865c4:	f853 6b04 	ldr.w	r6, [r3], #4
   865c8:	9305      	str	r3, [sp, #20]
   865ca:	f7ff bbe5 	b.w	85d98 <_vfiprintf_r+0x284>
   865ce:	05aa      	lsls	r2, r5, #22
   865d0:	f100 810e 	bmi.w	867f0 <_vfiprintf_r+0xcdc>
   865d4:	ea4f 78e3 	mov.w	r8, r3, asr #31
   865d8:	461e      	mov	r6, r3
   865da:	4643      	mov	r3, r8
   865dc:	f7ff bb82 	b.w	85ce4 <_vfiprintf_r+0x1d0>
   865e0:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   865e4:	f040 80fb 	bne.w	867de <_vfiprintf_r+0xcca>
   865e8:	9a05      	ldr	r2, [sp, #20]
   865ea:	2301      	movs	r3, #1
   865ec:	f852 6b04 	ldr.w	r6, [r2], #4
   865f0:	9205      	str	r2, [sp, #20]
   865f2:	f7ff bbd4 	b.w	85d9e <_vfiprintf_r+0x28a>
   865f6:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   865fa:	f856 2b04 	ldr.w	r2, [r6], #4
   865fe:	17cb      	asrs	r3, r1, #31
   86600:	e9c2 1300 	strd	r1, r3, [r2]
   86604:	9605      	str	r6, [sp, #20]
   86606:	f7ff babe 	b.w	85b86 <_vfiprintf_r+0x72>
   8660a:	2202      	movs	r2, #2
   8660c:	ab0f      	add	r3, sp, #60	; 0x3c
   8660e:	9313      	str	r3, [sp, #76]	; 0x4c
   86610:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   86614:	9214      	str	r2, [sp, #80]	; 0x50
   86616:	e6c7      	b.n	863a8 <_vfiprintf_r+0x894>
   86618:	4a25      	ldr	r2, [pc, #148]	; (866b0 <_vfiprintf_r+0xb9c>)
   8661a:	9209      	str	r2, [sp, #36]	; 0x24
   8661c:	f015 0820 	ands.w	r8, r5, #32
   86620:	d036      	beq.n	86690 <_vfiprintf_r+0xb7c>
   86622:	9e05      	ldr	r6, [sp, #20]
   86624:	3607      	adds	r6, #7
   86626:	f026 0607 	bic.w	r6, r6, #7
   8662a:	4632      	mov	r2, r6
   8662c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   86630:	f852 6b08 	ldr.w	r6, [r2], #8
   86634:	9205      	str	r2, [sp, #20]
   86636:	07ea      	lsls	r2, r5, #31
   86638:	d509      	bpl.n	8664e <_vfiprintf_r+0xb3a>
   8663a:	ea56 0208 	orrs.w	r2, r6, r8
   8663e:	d006      	beq.n	8664e <_vfiprintf_r+0xb3a>
   86640:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   86644:	2330      	movs	r3, #48	; 0x30
   86646:	f045 0502 	orr.w	r5, r5, #2
   8664a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   8664e:	2302      	movs	r3, #2
   86650:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   86654:	f7ff bba3 	b.w	85d9e <_vfiprintf_r+0x28a>
   86658:	46aa      	mov	sl, r5
   8665a:	e4ff      	b.n	8605c <_vfiprintf_r+0x548>
   8665c:	4a15      	ldr	r2, [pc, #84]	; (866b4 <_vfiprintf_r+0xba0>)
   8665e:	9209      	str	r2, [sp, #36]	; 0x24
   86660:	e7dc      	b.n	8661c <_vfiprintf_r+0xb08>
   86662:	4620      	mov	r0, r4
   86664:	9605      	str	r6, [sp, #20]
   86666:	f7fd fc65 	bl	83f34 <strlen>
   8666a:	f04f 0b00 	mov.w	fp, #0
   8666e:	9001      	str	r0, [sp, #4]
   86670:	f7ff bb52 	b.w	85d18 <_vfiprintf_r+0x204>
   86674:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   86678:	2900      	cmp	r1, #0
   8667a:	f000 80a6 	beq.w	867ca <_vfiprintf_r+0xcb6>
   8667e:	2001      	movs	r0, #1
   86680:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   86684:	9213      	str	r2, [sp, #76]	; 0x4c
   86686:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8668a:	4602      	mov	r2, r0
   8668c:	9014      	str	r0, [sp, #80]	; 0x50
   8668e:	e416      	b.n	85ebe <_vfiprintf_r+0x3aa>
   86690:	f015 0210 	ands.w	r2, r5, #16
   86694:	d114      	bne.n	866c0 <_vfiprintf_r+0xbac>
   86696:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   8669a:	d00d      	beq.n	866b8 <_vfiprintf_r+0xba4>
   8669c:	9e05      	ldr	r6, [sp, #20]
   8669e:	4690      	mov	r8, r2
   866a0:	f856 2b04 	ldr.w	r2, [r6], #4
   866a4:	9605      	str	r6, [sp, #20]
   866a6:	b296      	uxth	r6, r2
   866a8:	e7c5      	b.n	86636 <_vfiprintf_r+0xb22>
   866aa:	bf00      	nop
   866ac:	0008ac40 	.word	0x0008ac40
   866b0:	0008ac00 	.word	0x0008ac00
   866b4:	0008abec 	.word	0x0008abec
   866b8:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   866bc:	f040 80a6 	bne.w	8680c <_vfiprintf_r+0xcf8>
   866c0:	9a05      	ldr	r2, [sp, #20]
   866c2:	f852 6b04 	ldr.w	r6, [r2], #4
   866c6:	9205      	str	r2, [sp, #20]
   866c8:	e7b5      	b.n	86636 <_vfiprintf_r+0xb22>
   866ca:	2300      	movs	r3, #0
   866cc:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   866d0:	f8cd b004 	str.w	fp, [sp, #4]
   866d4:	f8cd a01c 	str.w	sl, [sp, #28]
   866d8:	46bb      	mov	fp, r7
   866da:	f8cd 9020 	str.w	r9, [sp, #32]
   866de:	469a      	mov	sl, r3
   866e0:	4617      	mov	r7, r2
   866e2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   866e6:	ad3c      	add	r5, sp, #240	; 0xf0
   866e8:	e00c      	b.n	86704 <_vfiprintf_r+0xbf0>
   866ea:	2300      	movs	r3, #0
   866ec:	4630      	mov	r0, r6
   866ee:	4641      	mov	r1, r8
   866f0:	220a      	movs	r2, #10
   866f2:	f004 f85d 	bl	8a7b0 <__aeabi_uldivmod>
   866f6:	2e0a      	cmp	r6, #10
   866f8:	f178 0300 	sbcs.w	r3, r8, #0
   866fc:	d31b      	bcc.n	86736 <_vfiprintf_r+0xc22>
   866fe:	4606      	mov	r6, r0
   86700:	4688      	mov	r8, r1
   86702:	4625      	mov	r5, r4
   86704:	4630      	mov	r0, r6
   86706:	4641      	mov	r1, r8
   86708:	220a      	movs	r2, #10
   8670a:	2300      	movs	r3, #0
   8670c:	f004 f850 	bl	8a7b0 <__aeabi_uldivmod>
   86710:	3230      	adds	r2, #48	; 0x30
   86712:	1e6c      	subs	r4, r5, #1
   86714:	f10a 0a01 	add.w	sl, sl, #1
   86718:	f805 2c01 	strb.w	r2, [r5, #-1]
   8671c:	2f00      	cmp	r7, #0
   8671e:	d0e4      	beq.n	866ea <_vfiprintf_r+0xbd6>
   86720:	f899 3000 	ldrb.w	r3, [r9]
   86724:	4553      	cmp	r3, sl
   86726:	d1e0      	bne.n	866ea <_vfiprintf_r+0xbd6>
   86728:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   8672c:	d0dd      	beq.n	866ea <_vfiprintf_r+0xbd6>
   8672e:	2e0a      	cmp	r6, #10
   86730:	f178 0300 	sbcs.w	r3, r8, #0
   86734:	d22e      	bcs.n	86794 <_vfiprintf_r+0xc80>
   86736:	f8dd a01c 	ldr.w	sl, [sp, #28]
   8673a:	ab3c      	add	r3, sp, #240	; 0xf0
   8673c:	1b1b      	subs	r3, r3, r4
   8673e:	465f      	mov	r7, fp
   86740:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   86744:	f8dd b004 	ldr.w	fp, [sp, #4]
   86748:	4655      	mov	r5, sl
   8674a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8674e:	9301      	str	r3, [sp, #4]
   86750:	f7ff bae2 	b.w	85d18 <_vfiprintf_r+0x204>
   86754:	46aa      	mov	sl, r5
   86756:	f7ff bad2 	b.w	85cfe <_vfiprintf_r+0x1ea>
   8675a:	2b01      	cmp	r3, #1
   8675c:	46aa      	mov	sl, r5
   8675e:	f47f ad06 	bne.w	8616e <_vfiprintf_r+0x65a>
   86762:	f7ff bad1 	b.w	85d08 <_vfiprintf_r+0x1f4>
   86766:	9e05      	ldr	r6, [sp, #20]
   86768:	9a04      	ldr	r2, [sp, #16]
   8676a:	f856 3b04 	ldr.w	r3, [r6], #4
   8676e:	601a      	str	r2, [r3, #0]
   86770:	9605      	str	r6, [sp, #20]
   86772:	f7ff ba08 	b.w	85b86 <_vfiprintf_r+0x72>
   86776:	f1bb 0f06 	cmp.w	fp, #6
   8677a:	46d8      	mov	r8, fp
   8677c:	bf28      	it	cs
   8677e:	f04f 0806 	movcs.w	r8, #6
   86782:	4c47      	ldr	r4, [pc, #284]	; (868a0 <_vfiprintf_r+0xd8c>)
   86784:	f8cd 8004 	str.w	r8, [sp, #4]
   86788:	9605      	str	r6, [sp, #20]
   8678a:	f7ff bb75 	b.w	85e78 <_vfiprintf_r+0x364>
   8678e:	f8df a114 	ldr.w	sl, [pc, #276]	; 868a4 <_vfiprintf_r+0xd90>
   86792:	e5c9      	b.n	86328 <_vfiprintf_r+0x814>
   86794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86796:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86798:	1ae4      	subs	r4, r4, r3
   8679a:	461a      	mov	r2, r3
   8679c:	4620      	mov	r0, r4
   8679e:	f7fd fbf7 	bl	83f90 <strncpy>
   867a2:	f899 3001 	ldrb.w	r3, [r9, #1]
   867a6:	b10b      	cbz	r3, 867ac <_vfiprintf_r+0xc98>
   867a8:	f109 0901 	add.w	r9, r9, #1
   867ac:	4630      	mov	r0, r6
   867ae:	4641      	mov	r1, r8
   867b0:	220a      	movs	r2, #10
   867b2:	2300      	movs	r3, #0
   867b4:	f04f 0a00 	mov.w	sl, #0
   867b8:	f003 fffa 	bl	8a7b0 <__aeabi_uldivmod>
   867bc:	e79f      	b.n	866fe <_vfiprintf_r+0xbea>
   867be:	2001      	movs	r0, #1
   867c0:	4611      	mov	r1, r2
   867c2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   867c6:	f7ff bb9f 	b.w	85f08 <_vfiprintf_r+0x3f4>
   867ca:	9b07      	ldr	r3, [sp, #28]
   867cc:	2b00      	cmp	r3, #0
   867ce:	f47f ade3 	bne.w	86398 <_vfiprintf_r+0x884>
   867d2:	4611      	mov	r1, r2
   867d4:	2001      	movs	r0, #1
   867d6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   867da:	f7ff bb95 	b.w	85f08 <_vfiprintf_r+0x3f4>
   867de:	9e05      	ldr	r6, [sp, #20]
   867e0:	4690      	mov	r8, r2
   867e2:	f856 2b04 	ldr.w	r2, [r6], #4
   867e6:	2301      	movs	r3, #1
   867e8:	9605      	str	r6, [sp, #20]
   867ea:	b2d6      	uxtb	r6, r2
   867ec:	f7ff bad7 	b.w	85d9e <_vfiprintf_r+0x28a>
   867f0:	f343 18c0 	sbfx	r8, r3, #7, #1
   867f4:	b25e      	sxtb	r6, r3
   867f6:	4643      	mov	r3, r8
   867f8:	f7ff ba74 	b.w	85ce4 <_vfiprintf_r+0x1d0>
   867fc:	9e05      	ldr	r6, [sp, #20]
   867fe:	4690      	mov	r8, r2
   86800:	f856 3b04 	ldr.w	r3, [r6], #4
   86804:	9605      	str	r6, [sp, #20]
   86806:	b2de      	uxtb	r6, r3
   86808:	f7ff bac6 	b.w	85d98 <_vfiprintf_r+0x284>
   8680c:	9e05      	ldr	r6, [sp, #20]
   8680e:	4688      	mov	r8, r1
   86810:	f856 2b04 	ldr.w	r2, [r6], #4
   86814:	9605      	str	r6, [sp, #20]
   86816:	b2d6      	uxtb	r6, r2
   86818:	e70d      	b.n	86636 <_vfiprintf_r+0xb22>
   8681a:	9e05      	ldr	r6, [sp, #20]
   8681c:	9a04      	ldr	r2, [sp, #16]
   8681e:	f856 3b04 	ldr.w	r3, [r6], #4
   86822:	801a      	strh	r2, [r3, #0]
   86824:	9605      	str	r6, [sp, #20]
   86826:	f7ff b9ae 	b.w	85b86 <_vfiprintf_r+0x72>
   8682a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   8682c:	f001 fde4 	bl	883f8 <__retarget_lock_release_recursive>
   86830:	f7ff ba99 	b.w	85d66 <_vfiprintf_r+0x252>
   86834:	f8cd b004 	str.w	fp, [sp, #4]
   86838:	9605      	str	r6, [sp, #20]
   8683a:	4683      	mov	fp, r0
   8683c:	f7ff ba6c 	b.w	85d18 <_vfiprintf_r+0x204>
   86840:	9911      	ldr	r1, [sp, #68]	; 0x44
   86842:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86844:	f8df a060 	ldr.w	sl, [pc, #96]	; 868a8 <_vfiprintf_r+0xd94>
   86848:	3101      	adds	r1, #1
   8684a:	e5f0      	b.n	8642e <_vfiprintf_r+0x91a>
   8684c:	9902      	ldr	r1, [sp, #8]
   8684e:	9806      	ldr	r0, [sp, #24]
   86850:	aa10      	add	r2, sp, #64	; 0x40
   86852:	f7ff f923 	bl	85a9c <__sprint_r.part.0>
   86856:	2800      	cmp	r0, #0
   86858:	f43f aae3 	beq.w	85e22 <_vfiprintf_r+0x30e>
   8685c:	f7ff bae3 	b.w	85e26 <_vfiprintf_r+0x312>
   86860:	9811      	ldr	r0, [sp, #68]	; 0x44
   86862:	f8df a044 	ldr.w	sl, [pc, #68]	; 868a8 <_vfiprintf_r+0xd94>
   86866:	3001      	adds	r0, #1
   86868:	e631      	b.n	864ce <_vfiprintf_r+0x9ba>
   8686a:	9b02      	ldr	r3, [sp, #8]
   8686c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8686e:	07db      	lsls	r3, r3, #31
   86870:	d407      	bmi.n	86882 <_vfiprintf_r+0xd6e>
   86872:	9b02      	ldr	r3, [sp, #8]
   86874:	899b      	ldrh	r3, [r3, #12]
   86876:	059f      	lsls	r7, r3, #22
   86878:	d403      	bmi.n	86882 <_vfiprintf_r+0xd6e>
   8687a:	9b02      	ldr	r3, [sp, #8]
   8687c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8687e:	f001 fdbb 	bl	883f8 <__retarget_lock_release_recursive>
   86882:	f04f 33ff 	mov.w	r3, #4294967295
   86886:	9304      	str	r3, [sp, #16]
   86888:	f7ff bad6 	b.w	85e38 <_vfiprintf_r+0x324>
   8688c:	9a05      	ldr	r2, [sp, #20]
   8688e:	787b      	ldrb	r3, [r7, #1]
   86890:	460f      	mov	r7, r1
   86892:	f852 1b04 	ldr.w	r1, [r2], #4
   86896:	9205      	str	r2, [sp, #20]
   86898:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   8689c:	f7ff b993 	b.w	85bc6 <_vfiprintf_r+0xb2>
   868a0:	0008ac14 	.word	0x0008ac14
   868a4:	0008ac50 	.word	0x0008ac50
   868a8:	0008ac40 	.word	0x0008ac40

000868ac <__sbprintf>:
   868ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   868ae:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   868b2:	4615      	mov	r5, r2
   868b4:	2400      	movs	r4, #0
   868b6:	4606      	mov	r6, r0
   868b8:	461f      	mov	r7, r3
   868ba:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   868be:	ab1a      	add	r3, sp, #104	; 0x68
   868c0:	9300      	str	r3, [sp, #0]
   868c2:	9304      	str	r3, [sp, #16]
   868c4:	898b      	ldrh	r3, [r1, #12]
   868c6:	a816      	add	r0, sp, #88	; 0x58
   868c8:	f023 0302 	bic.w	r3, r3, #2
   868cc:	f8ad 300c 	strh.w	r3, [sp, #12]
   868d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   868d2:	9406      	str	r4, [sp, #24]
   868d4:	9319      	str	r3, [sp, #100]	; 0x64
   868d6:	89cb      	ldrh	r3, [r1, #14]
   868d8:	460c      	mov	r4, r1
   868da:	f8ad 300e 	strh.w	r3, [sp, #14]
   868de:	69cb      	ldr	r3, [r1, #28]
   868e0:	f8cd c008 	str.w	ip, [sp, #8]
   868e4:	9307      	str	r3, [sp, #28]
   868e6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   868e8:	f8cd c014 	str.w	ip, [sp, #20]
   868ec:	9309      	str	r3, [sp, #36]	; 0x24
   868ee:	f001 fd7d 	bl	883ec <__retarget_lock_init_recursive>
   868f2:	462a      	mov	r2, r5
   868f4:	463b      	mov	r3, r7
   868f6:	4669      	mov	r1, sp
   868f8:	4630      	mov	r0, r6
   868fa:	f7ff f90b 	bl	85b14 <_vfiprintf_r>
   868fe:	1e05      	subs	r5, r0, #0
   86900:	db07      	blt.n	86912 <__sbprintf+0x66>
   86902:	4669      	mov	r1, sp
   86904:	4630      	mov	r0, r6
   86906:	f001 f91b 	bl	87b40 <_fflush_r>
   8690a:	2800      	cmp	r0, #0
   8690c:	bf18      	it	ne
   8690e:	f04f 35ff 	movne.w	r5, #4294967295
   86912:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   86916:	065b      	lsls	r3, r3, #25
   86918:	d503      	bpl.n	86922 <__sbprintf+0x76>
   8691a:	89a3      	ldrh	r3, [r4, #12]
   8691c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86920:	81a3      	strh	r3, [r4, #12]
   86922:	9816      	ldr	r0, [sp, #88]	; 0x58
   86924:	f001 fd64 	bl	883f0 <__retarget_lock_close_recursive>
   86928:	4628      	mov	r0, r5
   8692a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8692e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00086930 <__swsetup_r>:
   86930:	b538      	push	{r3, r4, r5, lr}
   86932:	4b33      	ldr	r3, [pc, #204]	; (86a00 <__swsetup_r+0xd0>)
   86934:	4605      	mov	r5, r0
   86936:	681b      	ldr	r3, [r3, #0]
   86938:	460c      	mov	r4, r1
   8693a:	b10b      	cbz	r3, 86940 <__swsetup_r+0x10>
   8693c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8693e:	b312      	cbz	r2, 86986 <__swsetup_r+0x56>
   86940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86944:	0718      	lsls	r0, r3, #28
   86946:	b29a      	uxth	r2, r3
   86948:	d525      	bpl.n	86996 <__swsetup_r+0x66>
   8694a:	6921      	ldr	r1, [r4, #16]
   8694c:	2900      	cmp	r1, #0
   8694e:	d02d      	beq.n	869ac <__swsetup_r+0x7c>
   86950:	f012 0001 	ands.w	r0, r2, #1
   86954:	d007      	beq.n	86966 <__swsetup_r+0x36>
   86956:	2500      	movs	r5, #0
   86958:	6960      	ldr	r0, [r4, #20]
   8695a:	60a5      	str	r5, [r4, #8]
   8695c:	4240      	negs	r0, r0
   8695e:	61a0      	str	r0, [r4, #24]
   86960:	b139      	cbz	r1, 86972 <__swsetup_r+0x42>
   86962:	2000      	movs	r0, #0
   86964:	bd38      	pop	{r3, r4, r5, pc}
   86966:	0795      	lsls	r5, r2, #30
   86968:	bf58      	it	pl
   8696a:	6960      	ldrpl	r0, [r4, #20]
   8696c:	60a0      	str	r0, [r4, #8]
   8696e:	2900      	cmp	r1, #0
   86970:	d1f7      	bne.n	86962 <__swsetup_r+0x32>
   86972:	0612      	lsls	r2, r2, #24
   86974:	bf58      	it	pl
   86976:	4608      	movpl	r0, r1
   86978:	d5f4      	bpl.n	86964 <__swsetup_r+0x34>
   8697a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8697e:	f04f 30ff 	mov.w	r0, #4294967295
   86982:	81a3      	strh	r3, [r4, #12]
   86984:	bd38      	pop	{r3, r4, r5, pc}
   86986:	4618      	mov	r0, r3
   86988:	f001 f90e 	bl	87ba8 <__sinit>
   8698c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86990:	0718      	lsls	r0, r3, #28
   86992:	b29a      	uxth	r2, r3
   86994:	d4d9      	bmi.n	8694a <__swsetup_r+0x1a>
   86996:	06d1      	lsls	r1, r2, #27
   86998:	d52a      	bpl.n	869f0 <__swsetup_r+0xc0>
   8699a:	0752      	lsls	r2, r2, #29
   8699c:	d414      	bmi.n	869c8 <__swsetup_r+0x98>
   8699e:	6921      	ldr	r1, [r4, #16]
   869a0:	f043 0308 	orr.w	r3, r3, #8
   869a4:	81a3      	strh	r3, [r4, #12]
   869a6:	b29a      	uxth	r2, r3
   869a8:	2900      	cmp	r1, #0
   869aa:	d1d1      	bne.n	86950 <__swsetup_r+0x20>
   869ac:	f402 7020 	and.w	r0, r2, #640	; 0x280
   869b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   869b4:	d0cc      	beq.n	86950 <__swsetup_r+0x20>
   869b6:	4621      	mov	r1, r4
   869b8:	4628      	mov	r0, r5
   869ba:	f001 fd1f 	bl	883fc <__smakebuf_r>
   869be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   869c2:	6921      	ldr	r1, [r4, #16]
   869c4:	b29a      	uxth	r2, r3
   869c6:	e7c3      	b.n	86950 <__swsetup_r+0x20>
   869c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   869ca:	b151      	cbz	r1, 869e2 <__swsetup_r+0xb2>
   869cc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   869d0:	4291      	cmp	r1, r2
   869d2:	d004      	beq.n	869de <__swsetup_r+0xae>
   869d4:	4628      	mov	r0, r5
   869d6:	f001 fa63 	bl	87ea0 <_free_r>
   869da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   869de:	2200      	movs	r2, #0
   869e0:	6322      	str	r2, [r4, #48]	; 0x30
   869e2:	2200      	movs	r2, #0
   869e4:	6921      	ldr	r1, [r4, #16]
   869e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   869ea:	e9c4 1200 	strd	r1, r2, [r4]
   869ee:	e7d7      	b.n	869a0 <__swsetup_r+0x70>
   869f0:	2209      	movs	r2, #9
   869f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   869f6:	602a      	str	r2, [r5, #0]
   869f8:	f04f 30ff 	mov.w	r0, #4294967295
   869fc:	81a3      	strh	r3, [r4, #12]
   869fe:	bd38      	pop	{r3, r4, r5, pc}
   86a00:	200003fc 	.word	0x200003fc

00086a04 <register_fini>:
   86a04:	4b02      	ldr	r3, [pc, #8]	; (86a10 <register_fini+0xc>)
   86a06:	b113      	cbz	r3, 86a0e <register_fini+0xa>
   86a08:	4802      	ldr	r0, [pc, #8]	; (86a14 <register_fini+0x10>)
   86a0a:	f000 b805 	b.w	86a18 <atexit>
   86a0e:	4770      	bx	lr
   86a10:	00000000 	.word	0x00000000
   86a14:	00087ccd 	.word	0x00087ccd

00086a18 <atexit>:
   86a18:	2300      	movs	r3, #0
   86a1a:	4601      	mov	r1, r0
   86a1c:	461a      	mov	r2, r3
   86a1e:	4618      	mov	r0, r3
   86a20:	f003 b860 	b.w	89ae4 <__register_exitproc>

00086a24 <quorem>:
   86a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a28:	6903      	ldr	r3, [r0, #16]
   86a2a:	690c      	ldr	r4, [r1, #16]
   86a2c:	b085      	sub	sp, #20
   86a2e:	42a3      	cmp	r3, r4
   86a30:	f2c0 8089 	blt.w	86b46 <quorem+0x122>
   86a34:	3c01      	subs	r4, #1
   86a36:	f101 0514 	add.w	r5, r1, #20
   86a3a:	00a3      	lsls	r3, r4, #2
   86a3c:	f100 0814 	add.w	r8, r0, #20
   86a40:	9301      	str	r3, [sp, #4]
   86a42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   86a46:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   86a4a:	3301      	adds	r3, #1
   86a4c:	468a      	mov	sl, r1
   86a4e:	429a      	cmp	r2, r3
   86a50:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   86a54:	4681      	mov	r9, r0
   86a56:	fbb2 f6f3 	udiv	r6, r2, r3
   86a5a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   86a5e:	9102      	str	r1, [sp, #8]
   86a60:	d33a      	bcc.n	86ad8 <quorem+0xb4>
   86a62:	2100      	movs	r1, #0
   86a64:	46ae      	mov	lr, r5
   86a66:	4640      	mov	r0, r8
   86a68:	460a      	mov	r2, r1
   86a6a:	46a3      	mov	fp, r4
   86a6c:	9503      	str	r5, [sp, #12]
   86a6e:	f85e 5b04 	ldr.w	r5, [lr], #4
   86a72:	6804      	ldr	r4, [r0, #0]
   86a74:	b2ab      	uxth	r3, r5
   86a76:	fb06 1303 	mla	r3, r6, r3, r1
   86a7a:	0c2d      	lsrs	r5, r5, #16
   86a7c:	0c19      	lsrs	r1, r3, #16
   86a7e:	fb06 1105 	mla	r1, r6, r5, r1
   86a82:	b29b      	uxth	r3, r3
   86a84:	1ad2      	subs	r2, r2, r3
   86a86:	fa1f fc84 	uxth.w	ip, r4
   86a8a:	4494      	add	ip, r2
   86a8c:	b28a      	uxth	r2, r1
   86a8e:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   86a92:	eb02 422c 	add.w	r2, r2, ip, asr #16
   86a96:	fa1f fc8c 	uxth.w	ip, ip
   86a9a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   86a9e:	4577      	cmp	r7, lr
   86aa0:	f840 3b04 	str.w	r3, [r0], #4
   86aa4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86aa8:	ea4f 4222 	mov.w	r2, r2, asr #16
   86aac:	d2df      	bcs.n	86a6e <quorem+0x4a>
   86aae:	9b01      	ldr	r3, [sp, #4]
   86ab0:	465c      	mov	r4, fp
   86ab2:	f858 3003 	ldr.w	r3, [r8, r3]
   86ab6:	9d03      	ldr	r5, [sp, #12]
   86ab8:	b973      	cbnz	r3, 86ad8 <quorem+0xb4>
   86aba:	9b02      	ldr	r3, [sp, #8]
   86abc:	3b04      	subs	r3, #4
   86abe:	4598      	cmp	r8, r3
   86ac0:	d304      	bcc.n	86acc <quorem+0xa8>
   86ac2:	e007      	b.n	86ad4 <quorem+0xb0>
   86ac4:	4598      	cmp	r8, r3
   86ac6:	f104 34ff 	add.w	r4, r4, #4294967295
   86aca:	d203      	bcs.n	86ad4 <quorem+0xb0>
   86acc:	f853 2904 	ldr.w	r2, [r3], #-4
   86ad0:	2a00      	cmp	r2, #0
   86ad2:	d0f7      	beq.n	86ac4 <quorem+0xa0>
   86ad4:	f8c9 4010 	str.w	r4, [r9, #16]
   86ad8:	4651      	mov	r1, sl
   86ada:	4648      	mov	r0, r9
   86adc:	f002 fb44 	bl	89168 <__mcmp>
   86ae0:	2800      	cmp	r0, #0
   86ae2:	db2c      	blt.n	86b3e <quorem+0x11a>
   86ae4:	4640      	mov	r0, r8
   86ae6:	2300      	movs	r3, #0
   86ae8:	3601      	adds	r6, #1
   86aea:	f855 1b04 	ldr.w	r1, [r5], #4
   86aee:	f8d0 c000 	ldr.w	ip, [r0]
   86af2:	b28a      	uxth	r2, r1
   86af4:	1a9a      	subs	r2, r3, r2
   86af6:	fa1f fe8c 	uxth.w	lr, ip
   86afa:	0c0b      	lsrs	r3, r1, #16
   86afc:	4472      	add	r2, lr
   86afe:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   86b02:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86b06:	b292      	uxth	r2, r2
   86b08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   86b0c:	42af      	cmp	r7, r5
   86b0e:	f840 2b04 	str.w	r2, [r0], #4
   86b12:	ea4f 4323 	mov.w	r3, r3, asr #16
   86b16:	d2e8      	bcs.n	86aea <quorem+0xc6>
   86b18:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   86b1c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   86b20:	b96a      	cbnz	r2, 86b3e <quorem+0x11a>
   86b22:	3b04      	subs	r3, #4
   86b24:	4598      	cmp	r8, r3
   86b26:	d304      	bcc.n	86b32 <quorem+0x10e>
   86b28:	e007      	b.n	86b3a <quorem+0x116>
   86b2a:	4598      	cmp	r8, r3
   86b2c:	f104 34ff 	add.w	r4, r4, #4294967295
   86b30:	d203      	bcs.n	86b3a <quorem+0x116>
   86b32:	f853 2904 	ldr.w	r2, [r3], #-4
   86b36:	2a00      	cmp	r2, #0
   86b38:	d0f7      	beq.n	86b2a <quorem+0x106>
   86b3a:	f8c9 4010 	str.w	r4, [r9, #16]
   86b3e:	4630      	mov	r0, r6
   86b40:	b005      	add	sp, #20
   86b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b46:	2000      	movs	r0, #0
   86b48:	b005      	add	sp, #20
   86b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b4e:	bf00      	nop

00086b50 <_dtoa_r>:
   86b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86b54:	4690      	mov	r8, r2
   86b56:	4699      	mov	r9, r3
   86b58:	6c01      	ldr	r1, [r0, #64]	; 0x40
   86b5a:	b099      	sub	sp, #100	; 0x64
   86b5c:	4604      	mov	r4, r0
   86b5e:	e9cd 8904 	strd	r8, r9, [sp, #16]
   86b62:	9d25      	ldr	r5, [sp, #148]	; 0x94
   86b64:	b141      	cbz	r1, 86b78 <_dtoa_r+0x28>
   86b66:	2301      	movs	r3, #1
   86b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86b6a:	4093      	lsls	r3, r2
   86b6c:	608b      	str	r3, [r1, #8]
   86b6e:	604a      	str	r2, [r1, #4]
   86b70:	f002 f8a4 	bl	88cbc <_Bfree>
   86b74:	2300      	movs	r3, #0
   86b76:	6423      	str	r3, [r4, #64]	; 0x40
   86b78:	f1b9 0a00 	subs.w	sl, r9, #0
   86b7c:	bfb4      	ite	lt
   86b7e:	2301      	movlt	r3, #1
   86b80:	2300      	movge	r3, #0
   86b82:	602b      	str	r3, [r5, #0]
   86b84:	4b76      	ldr	r3, [pc, #472]	; (86d60 <_dtoa_r+0x210>)
   86b86:	bfbc      	itt	lt
   86b88:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   86b8c:	f8cd a014 	strlt.w	sl, [sp, #20]
   86b90:	ea33 030a 	bics.w	r3, r3, sl
   86b94:	f000 80aa 	beq.w	86cec <_dtoa_r+0x19c>
   86b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   86b9c:	4610      	mov	r0, r2
   86b9e:	4619      	mov	r1, r3
   86ba0:	2200      	movs	r2, #0
   86ba2:	2300      	movs	r3, #0
   86ba4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   86ba8:	f003 fd92 	bl	8a6d0 <__aeabi_dcmpeq>
   86bac:	4607      	mov	r7, r0
   86bae:	b170      	cbz	r0, 86bce <_dtoa_r+0x7e>
   86bb0:	2301      	movs	r3, #1
   86bb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86bb4:	6013      	str	r3, [r2, #0]
   86bb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86bb8:	2b00      	cmp	r3, #0
   86bba:	f000 82e6 	beq.w	8718a <_dtoa_r+0x63a>
   86bbe:	4869      	ldr	r0, [pc, #420]	; (86d64 <_dtoa_r+0x214>)
   86bc0:	6018      	str	r0, [r3, #0]
   86bc2:	1e43      	subs	r3, r0, #1
   86bc4:	9303      	str	r3, [sp, #12]
   86bc6:	9803      	ldr	r0, [sp, #12]
   86bc8:	b019      	add	sp, #100	; 0x64
   86bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bce:	ab16      	add	r3, sp, #88	; 0x58
   86bd0:	9301      	str	r3, [sp, #4]
   86bd2:	ab17      	add	r3, sp, #92	; 0x5c
   86bd4:	9300      	str	r3, [sp, #0]
   86bd6:	4620      	mov	r0, r4
   86bd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   86bdc:	f002 fb8a 	bl	892f4 <__d2b>
   86be0:	ea5f 561a 	movs.w	r6, sl, lsr #20
   86be4:	4605      	mov	r5, r0
   86be6:	f040 8097 	bne.w	86d18 <_dtoa_r+0x1c8>
   86bea:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   86bee:	443e      	add	r6, r7
   86bf0:	f206 4032 	addw	r0, r6, #1074	; 0x432
   86bf4:	2820      	cmp	r0, #32
   86bf6:	f340 83b7 	ble.w	87368 <_dtoa_r+0x818>
   86bfa:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   86bfe:	fa0a fa00 	lsl.w	sl, sl, r0
   86c02:	f206 4012 	addw	r0, r6, #1042	; 0x412
   86c06:	fa28 f000 	lsr.w	r0, r8, r0
   86c0a:	ea4a 0000 	orr.w	r0, sl, r0
   86c0e:	f003 fa7d 	bl	8a10c <__aeabi_ui2d>
   86c12:	2301      	movs	r3, #1
   86c14:	3e01      	subs	r6, #1
   86c16:	930f      	str	r3, [sp, #60]	; 0x3c
   86c18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86c1c:	2200      	movs	r2, #0
   86c1e:	4b52      	ldr	r3, [pc, #328]	; (86d68 <_dtoa_r+0x218>)
   86c20:	f003 f936 	bl	89e90 <__aeabi_dsub>
   86c24:	a348      	add	r3, pc, #288	; (adr r3, 86d48 <_dtoa_r+0x1f8>)
   86c26:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c2a:	f003 fae9 	bl	8a200 <__aeabi_dmul>
   86c2e:	a348      	add	r3, pc, #288	; (adr r3, 86d50 <_dtoa_r+0x200>)
   86c30:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c34:	f003 f92e 	bl	89e94 <__adddf3>
   86c38:	4680      	mov	r8, r0
   86c3a:	4630      	mov	r0, r6
   86c3c:	4689      	mov	r9, r1
   86c3e:	f003 fa75 	bl	8a12c <__aeabi_i2d>
   86c42:	a345      	add	r3, pc, #276	; (adr r3, 86d58 <_dtoa_r+0x208>)
   86c44:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c48:	f003 fada 	bl	8a200 <__aeabi_dmul>
   86c4c:	4602      	mov	r2, r0
   86c4e:	460b      	mov	r3, r1
   86c50:	4640      	mov	r0, r8
   86c52:	4649      	mov	r1, r9
   86c54:	f003 f91e 	bl	89e94 <__adddf3>
   86c58:	4680      	mov	r8, r0
   86c5a:	4689      	mov	r9, r1
   86c5c:	f003 fd80 	bl	8a760 <__aeabi_d2iz>
   86c60:	2200      	movs	r2, #0
   86c62:	4683      	mov	fp, r0
   86c64:	2300      	movs	r3, #0
   86c66:	4640      	mov	r0, r8
   86c68:	4649      	mov	r1, r9
   86c6a:	f003 fd3b 	bl	8a6e4 <__aeabi_dcmplt>
   86c6e:	2800      	cmp	r0, #0
   86c70:	f040 827e 	bne.w	87170 <_dtoa_r+0x620>
   86c74:	f1bb 0f16 	cmp.w	fp, #22
   86c78:	f200 826d 	bhi.w	87156 <_dtoa_r+0x606>
   86c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   86c80:	4b3a      	ldr	r3, [pc, #232]	; (86d6c <_dtoa_r+0x21c>)
   86c82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   86c86:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c8a:	f003 fd2b 	bl	8a6e4 <__aeabi_dcmplt>
   86c8e:	2800      	cmp	r0, #0
   86c90:	d072      	beq.n	86d78 <_dtoa_r+0x228>
   86c92:	2300      	movs	r3, #0
   86c94:	1bbe      	subs	r6, r7, r6
   86c96:	930e      	str	r3, [sp, #56]	; 0x38
   86c98:	1e73      	subs	r3, r6, #1
   86c9a:	f10b 3bff 	add.w	fp, fp, #4294967295
   86c9e:	9306      	str	r3, [sp, #24]
   86ca0:	f100 8260 	bmi.w	87164 <_dtoa_r+0x614>
   86ca4:	2300      	movs	r3, #0
   86ca6:	9309      	str	r3, [sp, #36]	; 0x24
   86ca8:	f1bb 0f00 	cmp.w	fp, #0
   86cac:	da6b      	bge.n	86d86 <_dtoa_r+0x236>
   86cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86cb0:	f8cd b01c 	str.w	fp, [sp, #28]
   86cb4:	eba3 030b 	sub.w	r3, r3, fp
   86cb8:	9309      	str	r3, [sp, #36]	; 0x24
   86cba:	f1cb 0300 	rsb	r3, fp, #0
   86cbe:	930d      	str	r3, [sp, #52]	; 0x34
   86cc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86cc2:	f04f 0b00 	mov.w	fp, #0
   86cc6:	2b09      	cmp	r3, #9
   86cc8:	d866      	bhi.n	86d98 <_dtoa_r+0x248>
   86cca:	2b05      	cmp	r3, #5
   86ccc:	f340 834a 	ble.w	87364 <_dtoa_r+0x814>
   86cd0:	2600      	movs	r6, #0
   86cd2:	3b04      	subs	r3, #4
   86cd4:	9322      	str	r3, [sp, #136]	; 0x88
   86cd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86cd8:	3b02      	subs	r3, #2
   86cda:	2b03      	cmp	r3, #3
   86cdc:	f200 866c 	bhi.w	879b8 <_dtoa_r+0xe68>
   86ce0:	e8df f013 	tbh	[pc, r3, lsl #1]
   86ce4:	045e0461 	.word	0x045e0461
   86ce8:	04380455 	.word	0x04380455
   86cec:	f242 730f 	movw	r3, #9999	; 0x270f
   86cf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86cf2:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   86cf6:	6013      	str	r3, [r2, #0]
   86cf8:	ea5a 0308 	orrs.w	r3, sl, r8
   86cfc:	d11a      	bne.n	86d34 <_dtoa_r+0x1e4>
   86cfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d00:	2b00      	cmp	r3, #0
   86d02:	f000 8668 	beq.w	879d6 <_dtoa_r+0xe86>
   86d06:	4b1a      	ldr	r3, [pc, #104]	; (86d70 <_dtoa_r+0x220>)
   86d08:	9303      	str	r3, [sp, #12]
   86d0a:	3308      	adds	r3, #8
   86d0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86d0e:	9803      	ldr	r0, [sp, #12]
   86d10:	6013      	str	r3, [r2, #0]
   86d12:	b019      	add	sp, #100	; 0x64
   86d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d18:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   86d1c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   86d20:	4608      	mov	r0, r1
   86d22:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   86d26:	970f      	str	r7, [sp, #60]	; 0x3c
   86d28:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   86d2c:	9f16      	ldr	r7, [sp, #88]	; 0x58
   86d2e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86d32:	e773      	b.n	86c1c <_dtoa_r+0xcc>
   86d34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d36:	2b00      	cmp	r3, #0
   86d38:	f040 83ef 	bne.w	8751a <_dtoa_r+0x9ca>
   86d3c:	4b0d      	ldr	r3, [pc, #52]	; (86d74 <_dtoa_r+0x224>)
   86d3e:	9303      	str	r3, [sp, #12]
   86d40:	e741      	b.n	86bc6 <_dtoa_r+0x76>
   86d42:	bf00      	nop
   86d44:	f3af 8000 	nop.w
   86d48:	636f4361 	.word	0x636f4361
   86d4c:	3fd287a7 	.word	0x3fd287a7
   86d50:	8b60c8b3 	.word	0x8b60c8b3
   86d54:	3fc68a28 	.word	0x3fc68a28
   86d58:	509f79fb 	.word	0x509f79fb
   86d5c:	3fd34413 	.word	0x3fd34413
   86d60:	7ff00000 	.word	0x7ff00000
   86d64:	0008ac1d 	.word	0x0008ac1d
   86d68:	3ff80000 	.word	0x3ff80000
   86d6c:	0008adc0 	.word	0x0008adc0
   86d70:	0008ac64 	.word	0x0008ac64
   86d74:	0008ac60 	.word	0x0008ac60
   86d78:	1bbe      	subs	r6, r7, r6
   86d7a:	1e73      	subs	r3, r6, #1
   86d7c:	9306      	str	r3, [sp, #24]
   86d7e:	f100 848a 	bmi.w	87696 <_dtoa_r+0xb46>
   86d82:	900e      	str	r0, [sp, #56]	; 0x38
   86d84:	9009      	str	r0, [sp, #36]	; 0x24
   86d86:	9b06      	ldr	r3, [sp, #24]
   86d88:	445b      	add	r3, fp
   86d8a:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   86d8e:	2300      	movs	r3, #0
   86d90:	930d      	str	r3, [sp, #52]	; 0x34
   86d92:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86d94:	2b09      	cmp	r3, #9
   86d96:	d998      	bls.n	86cca <_dtoa_r+0x17a>
   86d98:	2300      	movs	r3, #0
   86d9a:	9322      	str	r3, [sp, #136]	; 0x88
   86d9c:	f04f 33ff 	mov.w	r3, #4294967295
   86da0:	2601      	movs	r6, #1
   86da2:	9308      	str	r3, [sp, #32]
   86da4:	2300      	movs	r3, #0
   86da6:	960c      	str	r6, [sp, #48]	; 0x30
   86da8:	9323      	str	r3, [sp, #140]	; 0x8c
   86daa:	2100      	movs	r1, #0
   86dac:	9b08      	ldr	r3, [sp, #32]
   86dae:	6461      	str	r1, [r4, #68]	; 0x44
   86db0:	9312      	str	r3, [sp, #72]	; 0x48
   86db2:	4620      	mov	r0, r4
   86db4:	f001 ff5c 	bl	88c70 <_Balloc>
   86db8:	9003      	str	r0, [sp, #12]
   86dba:	2800      	cmp	r0, #0
   86dbc:	f000 8604 	beq.w	879c8 <_dtoa_r+0xe78>
   86dc0:	9b03      	ldr	r3, [sp, #12]
   86dc2:	6423      	str	r3, [r4, #64]	; 0x40
   86dc4:	9b08      	ldr	r3, [sp, #32]
   86dc6:	2b0e      	cmp	r3, #14
   86dc8:	f200 8114 	bhi.w	86ff4 <_dtoa_r+0x4a4>
   86dcc:	2e00      	cmp	r6, #0
   86dce:	f000 8111 	beq.w	86ff4 <_dtoa_r+0x4a4>
   86dd2:	9907      	ldr	r1, [sp, #28]
   86dd4:	2900      	cmp	r1, #0
   86dd6:	f340 8460 	ble.w	8769a <_dtoa_r+0xb4a>
   86dda:	4baf      	ldr	r3, [pc, #700]	; (87098 <_dtoa_r+0x548>)
   86ddc:	f001 020f 	and.w	r2, r1, #15
   86de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86de4:	460a      	mov	r2, r1
   86de6:	e9d3 6700 	ldrd	r6, r7, [r3]
   86dea:	ea4f 1821 	mov.w	r8, r1, asr #4
   86dee:	05d1      	lsls	r1, r2, #23
   86df0:	f140 8417 	bpl.w	87622 <_dtoa_r+0xad2>
   86df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   86df8:	4ba8      	ldr	r3, [pc, #672]	; (8709c <_dtoa_r+0x54c>)
   86dfa:	f04f 0a03 	mov.w	sl, #3
   86dfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   86e02:	f003 fb27 	bl	8a454 <__aeabi_ddiv>
   86e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86e0a:	f008 080f 	and.w	r8, r8, #15
   86e0e:	f1b8 0f00 	cmp.w	r8, #0
   86e12:	d013      	beq.n	86e3c <_dtoa_r+0x2ec>
   86e14:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8709c <_dtoa_r+0x54c>
   86e18:	f018 0f01 	tst.w	r8, #1
   86e1c:	d009      	beq.n	86e32 <_dtoa_r+0x2e2>
   86e1e:	e9d9 2300 	ldrd	r2, r3, [r9]
   86e22:	4630      	mov	r0, r6
   86e24:	4639      	mov	r1, r7
   86e26:	f003 f9eb 	bl	8a200 <__aeabi_dmul>
   86e2a:	4606      	mov	r6, r0
   86e2c:	460f      	mov	r7, r1
   86e2e:	f10a 0a01 	add.w	sl, sl, #1
   86e32:	ea5f 0868 	movs.w	r8, r8, asr #1
   86e36:	f109 0908 	add.w	r9, r9, #8
   86e3a:	d1ed      	bne.n	86e18 <_dtoa_r+0x2c8>
   86e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86e40:	4632      	mov	r2, r6
   86e42:	463b      	mov	r3, r7
   86e44:	f003 fb06 	bl	8a454 <__aeabi_ddiv>
   86e48:	4680      	mov	r8, r0
   86e4a:	4689      	mov	r9, r1
   86e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e4e:	b143      	cbz	r3, 86e62 <_dtoa_r+0x312>
   86e50:	2200      	movs	r2, #0
   86e52:	4640      	mov	r0, r8
   86e54:	4649      	mov	r1, r9
   86e56:	4b92      	ldr	r3, [pc, #584]	; (870a0 <_dtoa_r+0x550>)
   86e58:	f003 fc44 	bl	8a6e4 <__aeabi_dcmplt>
   86e5c:	2800      	cmp	r0, #0
   86e5e:	f040 8535 	bne.w	878cc <_dtoa_r+0xd7c>
   86e62:	4650      	mov	r0, sl
   86e64:	f003 f962 	bl	8a12c <__aeabi_i2d>
   86e68:	4642      	mov	r2, r8
   86e6a:	464b      	mov	r3, r9
   86e6c:	f003 f9c8 	bl	8a200 <__aeabi_dmul>
   86e70:	4b8c      	ldr	r3, [pc, #560]	; (870a4 <_dtoa_r+0x554>)
   86e72:	2200      	movs	r2, #0
   86e74:	f003 f80e 	bl	89e94 <__adddf3>
   86e78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   86e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86e80:	9311      	str	r3, [sp, #68]	; 0x44
   86e82:	9b08      	ldr	r3, [sp, #32]
   86e84:	2b00      	cmp	r3, #0
   86e86:	f000 8097 	beq.w	86fb8 <_dtoa_r+0x468>
   86e8a:	9b07      	ldr	r3, [sp, #28]
   86e8c:	9314      	str	r3, [sp, #80]	; 0x50
   86e8e:	9b08      	ldr	r3, [sp, #32]
   86e90:	9313      	str	r3, [sp, #76]	; 0x4c
   86e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86e94:	2b00      	cmp	r3, #0
   86e96:	f000 84a9 	beq.w	877ec <_dtoa_r+0xc9c>
   86e9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86e9c:	4b7e      	ldr	r3, [pc, #504]	; (87098 <_dtoa_r+0x548>)
   86e9e:	2000      	movs	r0, #0
   86ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86ea4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   86ea8:	497f      	ldr	r1, [pc, #508]	; (870a8 <_dtoa_r+0x558>)
   86eaa:	f003 fad3 	bl	8a454 <__aeabi_ddiv>
   86eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   86eb2:	f002 ffed 	bl	89e90 <__aeabi_dsub>
   86eb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86eba:	4649      	mov	r1, r9
   86ebc:	4640      	mov	r0, r8
   86ebe:	f003 fc4f 	bl	8a760 <__aeabi_d2iz>
   86ec2:	4607      	mov	r7, r0
   86ec4:	f003 f932 	bl	8a12c <__aeabi_i2d>
   86ec8:	4602      	mov	r2, r0
   86eca:	460b      	mov	r3, r1
   86ecc:	4640      	mov	r0, r8
   86ece:	4649      	mov	r1, r9
   86ed0:	f002 ffde 	bl	89e90 <__aeabi_dsub>
   86ed4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   86ed8:	9e03      	ldr	r6, [sp, #12]
   86eda:	3730      	adds	r7, #48	; 0x30
   86edc:	f806 7b01 	strb.w	r7, [r6], #1
   86ee0:	4680      	mov	r8, r0
   86ee2:	4689      	mov	r9, r1
   86ee4:	f003 fbfe 	bl	8a6e4 <__aeabi_dcmplt>
   86ee8:	2800      	cmp	r0, #0
   86eea:	f040 852e 	bne.w	8794a <_dtoa_r+0xdfa>
   86eee:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   86ef2:	2700      	movs	r7, #0
   86ef4:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   86ef8:	9510      	str	r5, [sp, #64]	; 0x40
   86efa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   86efc:	9413      	str	r4, [sp, #76]	; 0x4c
   86efe:	e02a      	b.n	86f56 <_dtoa_r+0x406>
   86f00:	3701      	adds	r7, #1
   86f02:	42af      	cmp	r7, r5
   86f04:	f280 852e 	bge.w	87964 <_dtoa_r+0xe14>
   86f08:	4650      	mov	r0, sl
   86f0a:	4659      	mov	r1, fp
   86f0c:	2200      	movs	r2, #0
   86f0e:	4b67      	ldr	r3, [pc, #412]	; (870ac <_dtoa_r+0x55c>)
   86f10:	f003 f976 	bl	8a200 <__aeabi_dmul>
   86f14:	2200      	movs	r2, #0
   86f16:	4b65      	ldr	r3, [pc, #404]	; (870ac <_dtoa_r+0x55c>)
   86f18:	4682      	mov	sl, r0
   86f1a:	468b      	mov	fp, r1
   86f1c:	4640      	mov	r0, r8
   86f1e:	4649      	mov	r1, r9
   86f20:	f003 f96e 	bl	8a200 <__aeabi_dmul>
   86f24:	4689      	mov	r9, r1
   86f26:	4680      	mov	r8, r0
   86f28:	f003 fc1a 	bl	8a760 <__aeabi_d2iz>
   86f2c:	4604      	mov	r4, r0
   86f2e:	f003 f8fd 	bl	8a12c <__aeabi_i2d>
   86f32:	4602      	mov	r2, r0
   86f34:	460b      	mov	r3, r1
   86f36:	4640      	mov	r0, r8
   86f38:	4649      	mov	r1, r9
   86f3a:	f002 ffa9 	bl	89e90 <__aeabi_dsub>
   86f3e:	3430      	adds	r4, #48	; 0x30
   86f40:	4652      	mov	r2, sl
   86f42:	465b      	mov	r3, fp
   86f44:	f806 4b01 	strb.w	r4, [r6], #1
   86f48:	4680      	mov	r8, r0
   86f4a:	4689      	mov	r9, r1
   86f4c:	f003 fbca 	bl	8a6e4 <__aeabi_dcmplt>
   86f50:	2800      	cmp	r0, #0
   86f52:	f040 84f8 	bne.w	87946 <_dtoa_r+0xdf6>
   86f56:	4642      	mov	r2, r8
   86f58:	464b      	mov	r3, r9
   86f5a:	2000      	movs	r0, #0
   86f5c:	4950      	ldr	r1, [pc, #320]	; (870a0 <_dtoa_r+0x550>)
   86f5e:	f002 ff97 	bl	89e90 <__aeabi_dsub>
   86f62:	4652      	mov	r2, sl
   86f64:	465b      	mov	r3, fp
   86f66:	f003 fbbd 	bl	8a6e4 <__aeabi_dcmplt>
   86f6a:	2800      	cmp	r0, #0
   86f6c:	d0c8      	beq.n	86f00 <_dtoa_r+0x3b0>
   86f6e:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   86f72:	9d10      	ldr	r5, [sp, #64]	; 0x40
   86f74:	9a03      	ldr	r2, [sp, #12]
   86f76:	9307      	str	r3, [sp, #28]
   86f78:	e002      	b.n	86f80 <_dtoa_r+0x430>
   86f7a:	4296      	cmp	r6, r2
   86f7c:	f000 84cd 	beq.w	8791a <_dtoa_r+0xdca>
   86f80:	46b2      	mov	sl, r6
   86f82:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   86f86:	2b39      	cmp	r3, #57	; 0x39
   86f88:	d0f7      	beq.n	86f7a <_dtoa_r+0x42a>
   86f8a:	3301      	adds	r3, #1
   86f8c:	b2db      	uxtb	r3, r3
   86f8e:	7033      	strb	r3, [r6, #0]
   86f90:	9b07      	ldr	r3, [sp, #28]
   86f92:	3301      	adds	r3, #1
   86f94:	9307      	str	r3, [sp, #28]
   86f96:	e1c8      	b.n	8732a <_dtoa_r+0x7da>
   86f98:	4650      	mov	r0, sl
   86f9a:	f003 f8c7 	bl	8a12c <__aeabi_i2d>
   86f9e:	4642      	mov	r2, r8
   86fa0:	464b      	mov	r3, r9
   86fa2:	f003 f92d 	bl	8a200 <__aeabi_dmul>
   86fa6:	4b3f      	ldr	r3, [pc, #252]	; (870a4 <_dtoa_r+0x554>)
   86fa8:	2200      	movs	r2, #0
   86faa:	f002 ff73 	bl	89e94 <__adddf3>
   86fae:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   86fb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86fb6:	9311      	str	r3, [sp, #68]	; 0x44
   86fb8:	4640      	mov	r0, r8
   86fba:	4649      	mov	r1, r9
   86fbc:	2200      	movs	r2, #0
   86fbe:	4b3c      	ldr	r3, [pc, #240]	; (870b0 <_dtoa_r+0x560>)
   86fc0:	f002 ff66 	bl	89e90 <__aeabi_dsub>
   86fc4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   86fc8:	464b      	mov	r3, r9
   86fca:	4642      	mov	r2, r8
   86fcc:	4606      	mov	r6, r0
   86fce:	460f      	mov	r7, r1
   86fd0:	f003 fba6 	bl	8a720 <__aeabi_dcmpgt>
   86fd4:	4681      	mov	r9, r0
   86fd6:	2800      	cmp	r0, #0
   86fd8:	f040 84af 	bne.w	8793a <_dtoa_r+0xdea>
   86fdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86fe0:	4602      	mov	r2, r0
   86fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   86fe6:	4630      	mov	r0, r6
   86fe8:	4639      	mov	r1, r7
   86fea:	f003 fb7b 	bl	8a6e4 <__aeabi_dcmplt>
   86fee:	2800      	cmp	r0, #0
   86ff0:	f040 8348 	bne.w	87684 <_dtoa_r+0xb34>
   86ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86ff6:	2b00      	cmp	r3, #0
   86ff8:	f2c0 808c 	blt.w	87114 <_dtoa_r+0x5c4>
   86ffc:	9a07      	ldr	r2, [sp, #28]
   86ffe:	2a0e      	cmp	r2, #14
   87000:	f300 8088 	bgt.w	87114 <_dtoa_r+0x5c4>
   87004:	4b24      	ldr	r3, [pc, #144]	; (87098 <_dtoa_r+0x548>)
   87006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8700a:	e9d3 ab00 	ldrd	sl, fp, [r3]
   8700e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87010:	2b00      	cmp	r3, #0
   87012:	da1b      	bge.n	8704c <_dtoa_r+0x4fc>
   87014:	9b08      	ldr	r3, [sp, #32]
   87016:	2b00      	cmp	r3, #0
   87018:	dc18      	bgt.n	8704c <_dtoa_r+0x4fc>
   8701a:	f040 8331 	bne.w	87680 <_dtoa_r+0xb30>
   8701e:	2200      	movs	r2, #0
   87020:	4b23      	ldr	r3, [pc, #140]	; (870b0 <_dtoa_r+0x560>)
   87022:	4650      	mov	r0, sl
   87024:	4659      	mov	r1, fp
   87026:	f003 f8eb 	bl	8a200 <__aeabi_dmul>
   8702a:	4602      	mov	r2, r0
   8702c:	460b      	mov	r3, r1
   8702e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87032:	f003 fb61 	bl	8a6f8 <__aeabi_dcmple>
   87036:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8703a:	464e      	mov	r6, r9
   8703c:	2800      	cmp	r0, #0
   8703e:	f000 82ca 	beq.w	875d6 <_dtoa_r+0xa86>
   87042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87044:	f8dd 800c 	ldr.w	r8, [sp, #12]
   87048:	43df      	mvns	r7, r3
   8704a:	e2cc      	b.n	875e6 <_dtoa_r+0xa96>
   8704c:	4652      	mov	r2, sl
   8704e:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   87052:	465b      	mov	r3, fp
   87054:	4638      	mov	r0, r7
   87056:	4641      	mov	r1, r8
   87058:	f003 f9fc 	bl	8a454 <__aeabi_ddiv>
   8705c:	f003 fb80 	bl	8a760 <__aeabi_d2iz>
   87060:	4681      	mov	r9, r0
   87062:	9009      	str	r0, [sp, #36]	; 0x24
   87064:	f003 f862 	bl	8a12c <__aeabi_i2d>
   87068:	4652      	mov	r2, sl
   8706a:	465b      	mov	r3, fp
   8706c:	f003 f8c8 	bl	8a200 <__aeabi_dmul>
   87070:	9e03      	ldr	r6, [sp, #12]
   87072:	460b      	mov	r3, r1
   87074:	4602      	mov	r2, r0
   87076:	4641      	mov	r1, r8
   87078:	4638      	mov	r0, r7
   8707a:	f002 ff09 	bl	89e90 <__aeabi_dsub>
   8707e:	f109 0330 	add.w	r3, r9, #48	; 0x30
   87082:	f806 3b01 	strb.w	r3, [r6], #1
   87086:	9b08      	ldr	r3, [sp, #32]
   87088:	2b01      	cmp	r3, #1
   8708a:	f000 835f 	beq.w	8774c <_dtoa_r+0xbfc>
   8708e:	9406      	str	r4, [sp, #24]
   87090:	2701      	movs	r7, #1
   87092:	461c      	mov	r4, r3
   87094:	9504      	str	r5, [sp, #16]
   87096:	e02a      	b.n	870ee <_dtoa_r+0x59e>
   87098:	0008adc0 	.word	0x0008adc0
   8709c:	0008ad98 	.word	0x0008ad98
   870a0:	3ff00000 	.word	0x3ff00000
   870a4:	401c0000 	.word	0x401c0000
   870a8:	3fe00000 	.word	0x3fe00000
   870ac:	40240000 	.word	0x40240000
   870b0:	40140000 	.word	0x40140000
   870b4:	4652      	mov	r2, sl
   870b6:	465b      	mov	r3, fp
   870b8:	4640      	mov	r0, r8
   870ba:	4649      	mov	r1, r9
   870bc:	f003 f9ca 	bl	8a454 <__aeabi_ddiv>
   870c0:	f003 fb4e 	bl	8a760 <__aeabi_d2iz>
   870c4:	4605      	mov	r5, r0
   870c6:	f003 f831 	bl	8a12c <__aeabi_i2d>
   870ca:	4652      	mov	r2, sl
   870cc:	465b      	mov	r3, fp
   870ce:	f003 f897 	bl	8a200 <__aeabi_dmul>
   870d2:	3701      	adds	r7, #1
   870d4:	460b      	mov	r3, r1
   870d6:	4602      	mov	r2, r0
   870d8:	4649      	mov	r1, r9
   870da:	4640      	mov	r0, r8
   870dc:	f002 fed8 	bl	89e90 <__aeabi_dsub>
   870e0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   870e4:	42a7      	cmp	r7, r4
   870e6:	f806 3b01 	strb.w	r3, [r6], #1
   870ea:	f000 832c 	beq.w	87746 <_dtoa_r+0xbf6>
   870ee:	2200      	movs	r2, #0
   870f0:	4bab      	ldr	r3, [pc, #684]	; (873a0 <_dtoa_r+0x850>)
   870f2:	f003 f885 	bl	8a200 <__aeabi_dmul>
   870f6:	2200      	movs	r2, #0
   870f8:	2300      	movs	r3, #0
   870fa:	4680      	mov	r8, r0
   870fc:	4689      	mov	r9, r1
   870fe:	f003 fae7 	bl	8a6d0 <__aeabi_dcmpeq>
   87102:	2800      	cmp	r0, #0
   87104:	d0d6      	beq.n	870b4 <_dtoa_r+0x564>
   87106:	9d04      	ldr	r5, [sp, #16]
   87108:	9c06      	ldr	r4, [sp, #24]
   8710a:	9b07      	ldr	r3, [sp, #28]
   8710c:	46b2      	mov	sl, r6
   8710e:	3301      	adds	r3, #1
   87110:	9307      	str	r3, [sp, #28]
   87112:	e10a      	b.n	8732a <_dtoa_r+0x7da>
   87114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87116:	2a00      	cmp	r2, #0
   87118:	d03d      	beq.n	87196 <_dtoa_r+0x646>
   8711a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8711c:	2a01      	cmp	r2, #1
   8711e:	f340 829f 	ble.w	87660 <_dtoa_r+0xb10>
   87122:	9b08      	ldr	r3, [sp, #32]
   87124:	f103 38ff 	add.w	r8, r3, #4294967295
   87128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8712a:	4543      	cmp	r3, r8
   8712c:	f2c0 8270 	blt.w	87610 <_dtoa_r+0xac0>
   87130:	eba3 0808 	sub.w	r8, r3, r8
   87134:	9b08      	ldr	r3, [sp, #32]
   87136:	2b00      	cmp	r3, #0
   87138:	f2c0 8340 	blt.w	877bc <_dtoa_r+0xc6c>
   8713c:	9a06      	ldr	r2, [sp, #24]
   8713e:	441a      	add	r2, r3
   87140:	9206      	str	r2, [sp, #24]
   87142:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87144:	4617      	mov	r7, r2
   87146:	441a      	add	r2, r3
   87148:	9209      	str	r2, [sp, #36]	; 0x24
   8714a:	2101      	movs	r1, #1
   8714c:	4620      	mov	r0, r4
   8714e:	f001 fe5d 	bl	88e0c <__i2b>
   87152:	4606      	mov	r6, r0
   87154:	e023      	b.n	8719e <_dtoa_r+0x64e>
   87156:	2301      	movs	r3, #1
   87158:	1bbe      	subs	r6, r7, r6
   8715a:	930e      	str	r3, [sp, #56]	; 0x38
   8715c:	1e73      	subs	r3, r6, #1
   8715e:	9306      	str	r3, [sp, #24]
   87160:	f57f ada0 	bpl.w	86ca4 <_dtoa_r+0x154>
   87164:	f1c6 0301 	rsb	r3, r6, #1
   87168:	9309      	str	r3, [sp, #36]	; 0x24
   8716a:	2300      	movs	r3, #0
   8716c:	9306      	str	r3, [sp, #24]
   8716e:	e59b      	b.n	86ca8 <_dtoa_r+0x158>
   87170:	4658      	mov	r0, fp
   87172:	f002 ffdb 	bl	8a12c <__aeabi_i2d>
   87176:	4642      	mov	r2, r8
   87178:	464b      	mov	r3, r9
   8717a:	f003 faa9 	bl	8a6d0 <__aeabi_dcmpeq>
   8717e:	2800      	cmp	r0, #0
   87180:	f47f ad78 	bne.w	86c74 <_dtoa_r+0x124>
   87184:	f10b 3bff 	add.w	fp, fp, #4294967295
   87188:	e574      	b.n	86c74 <_dtoa_r+0x124>
   8718a:	4b86      	ldr	r3, [pc, #536]	; (873a4 <_dtoa_r+0x854>)
   8718c:	9303      	str	r3, [sp, #12]
   8718e:	9803      	ldr	r0, [sp, #12]
   87190:	b019      	add	sp, #100	; 0x64
   87192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87196:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8719a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8719c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8719e:	2f00      	cmp	r7, #0
   871a0:	dd0c      	ble.n	871bc <_dtoa_r+0x66c>
   871a2:	9906      	ldr	r1, [sp, #24]
   871a4:	2900      	cmp	r1, #0
   871a6:	460b      	mov	r3, r1
   871a8:	dd08      	ble.n	871bc <_dtoa_r+0x66c>
   871aa:	42b9      	cmp	r1, r7
   871ac:	bfa8      	it	ge
   871ae:	463b      	movge	r3, r7
   871b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   871b2:	1aff      	subs	r7, r7, r3
   871b4:	1ad2      	subs	r2, r2, r3
   871b6:	1acb      	subs	r3, r1, r3
   871b8:	9209      	str	r2, [sp, #36]	; 0x24
   871ba:	9306      	str	r3, [sp, #24]
   871bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   871be:	b1e3      	cbz	r3, 871fa <_dtoa_r+0x6aa>
   871c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   871c2:	2b00      	cmp	r3, #0
   871c4:	f000 8260 	beq.w	87688 <_dtoa_r+0xb38>
   871c8:	f1b8 0f00 	cmp.w	r8, #0
   871cc:	dd10      	ble.n	871f0 <_dtoa_r+0x6a0>
   871ce:	4631      	mov	r1, r6
   871d0:	4642      	mov	r2, r8
   871d2:	4620      	mov	r0, r4
   871d4:	f001 fef6 	bl	88fc4 <__pow5mult>
   871d8:	4606      	mov	r6, r0
   871da:	462a      	mov	r2, r5
   871dc:	4631      	mov	r1, r6
   871de:	4620      	mov	r0, r4
   871e0:	f001 fe42 	bl	88e68 <__multiply>
   871e4:	4603      	mov	r3, r0
   871e6:	4629      	mov	r1, r5
   871e8:	4620      	mov	r0, r4
   871ea:	461d      	mov	r5, r3
   871ec:	f001 fd66 	bl	88cbc <_Bfree>
   871f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   871f2:	ebb3 0208 	subs.w	r2, r3, r8
   871f6:	f040 82db 	bne.w	877b0 <_dtoa_r+0xc60>
   871fa:	2101      	movs	r1, #1
   871fc:	4620      	mov	r0, r4
   871fe:	f001 fe05 	bl	88e0c <__i2b>
   87202:	f1bb 0f00 	cmp.w	fp, #0
   87206:	4681      	mov	r9, r0
   87208:	f300 80b3 	bgt.w	87372 <_dtoa_r+0x822>
   8720c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8720e:	2b01      	cmp	r3, #1
   87210:	f340 8188 	ble.w	87524 <_dtoa_r+0x9d4>
   87214:	f04f 0a00 	mov.w	sl, #0
   87218:	2001      	movs	r0, #1
   8721a:	f1bb 0f00 	cmp.w	fp, #0
   8721e:	f040 80b4 	bne.w	8738a <_dtoa_r+0x83a>
   87222:	9a06      	ldr	r2, [sp, #24]
   87224:	4410      	add	r0, r2
   87226:	f010 001f 	ands.w	r0, r0, #31
   8722a:	f000 8092 	beq.w	87352 <_dtoa_r+0x802>
   8722e:	f1c0 0320 	rsb	r3, r0, #32
   87232:	2b04      	cmp	r3, #4
   87234:	f340 83d3 	ble.w	879de <_dtoa_r+0xe8e>
   87238:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8723a:	f1c0 001c 	rsb	r0, r0, #28
   8723e:	4403      	add	r3, r0
   87240:	4402      	add	r2, r0
   87242:	9309      	str	r3, [sp, #36]	; 0x24
   87244:	4407      	add	r7, r0
   87246:	9206      	str	r2, [sp, #24]
   87248:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8724a:	2b00      	cmp	r3, #0
   8724c:	dd05      	ble.n	8725a <_dtoa_r+0x70a>
   8724e:	4629      	mov	r1, r5
   87250:	461a      	mov	r2, r3
   87252:	4620      	mov	r0, r4
   87254:	f001 ff12 	bl	8907c <__lshift>
   87258:	4605      	mov	r5, r0
   8725a:	9b06      	ldr	r3, [sp, #24]
   8725c:	2b00      	cmp	r3, #0
   8725e:	dd05      	ble.n	8726c <_dtoa_r+0x71c>
   87260:	4649      	mov	r1, r9
   87262:	461a      	mov	r2, r3
   87264:	4620      	mov	r0, r4
   87266:	f001 ff09 	bl	8907c <__lshift>
   8726a:	4681      	mov	r9, r0
   8726c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8726e:	2b00      	cmp	r3, #0
   87270:	f040 8138 	bne.w	874e4 <_dtoa_r+0x994>
   87274:	9b08      	ldr	r3, [sp, #32]
   87276:	2b00      	cmp	r3, #0
   87278:	f340 811e 	ble.w	874b8 <_dtoa_r+0x968>
   8727c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8727e:	2b00      	cmp	r3, #0
   87280:	f040 809f 	bne.w	873c2 <_dtoa_r+0x872>
   87284:	9b07      	ldr	r3, [sp, #28]
   87286:	3301      	adds	r3, #1
   87288:	9307      	str	r3, [sp, #28]
   8728a:	2701      	movs	r7, #1
   8728c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   87290:	f8dd a020 	ldr.w	sl, [sp, #32]
   87294:	e007      	b.n	872a6 <_dtoa_r+0x756>
   87296:	4629      	mov	r1, r5
   87298:	2300      	movs	r3, #0
   8729a:	220a      	movs	r2, #10
   8729c:	4620      	mov	r0, r4
   8729e:	f001 fd17 	bl	88cd0 <__multadd>
   872a2:	4605      	mov	r5, r0
   872a4:	3701      	adds	r7, #1
   872a6:	4649      	mov	r1, r9
   872a8:	4628      	mov	r0, r5
   872aa:	f7ff fbbb 	bl	86a24 <quorem>
   872ae:	4557      	cmp	r7, sl
   872b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   872b4:	f808 3b01 	strb.w	r3, [r8], #1
   872b8:	dbed      	blt.n	87296 <_dtoa_r+0x746>
   872ba:	9a08      	ldr	r2, [sp, #32]
   872bc:	2700      	movs	r7, #0
   872be:	2a00      	cmp	r2, #0
   872c0:	bfcc      	ite	gt
   872c2:	4693      	movgt	fp, r2
   872c4:	f04f 0b01 	movle.w	fp, #1
   872c8:	9a03      	ldr	r2, [sp, #12]
   872ca:	4493      	add	fp, r2
   872cc:	4629      	mov	r1, r5
   872ce:	2201      	movs	r2, #1
   872d0:	4620      	mov	r0, r4
   872d2:	9304      	str	r3, [sp, #16]
   872d4:	f001 fed2 	bl	8907c <__lshift>
   872d8:	4649      	mov	r1, r9
   872da:	4605      	mov	r5, r0
   872dc:	f001 ff44 	bl	89168 <__mcmp>
   872e0:	2800      	cmp	r0, #0
   872e2:	f340 81ab 	ble.w	8763c <_dtoa_r+0xaec>
   872e6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   872ea:	9a03      	ldr	r2, [sp, #12]
   872ec:	f10b 3bff 	add.w	fp, fp, #4294967295
   872f0:	e004      	b.n	872fc <_dtoa_r+0x7ac>
   872f2:	455a      	cmp	r2, fp
   872f4:	f000 81ad 	beq.w	87652 <_dtoa_r+0xb02>
   872f8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   872fc:	2b39      	cmp	r3, #57	; 0x39
   872fe:	f10b 0a01 	add.w	sl, fp, #1
   87302:	d0f6      	beq.n	872f2 <_dtoa_r+0x7a2>
   87304:	3301      	adds	r3, #1
   87306:	f88b 3000 	strb.w	r3, [fp]
   8730a:	4649      	mov	r1, r9
   8730c:	4620      	mov	r0, r4
   8730e:	f001 fcd5 	bl	88cbc <_Bfree>
   87312:	b156      	cbz	r6, 8732a <_dtoa_r+0x7da>
   87314:	b12f      	cbz	r7, 87322 <_dtoa_r+0x7d2>
   87316:	42b7      	cmp	r7, r6
   87318:	d003      	beq.n	87322 <_dtoa_r+0x7d2>
   8731a:	4639      	mov	r1, r7
   8731c:	4620      	mov	r0, r4
   8731e:	f001 fccd 	bl	88cbc <_Bfree>
   87322:	4631      	mov	r1, r6
   87324:	4620      	mov	r0, r4
   87326:	f001 fcc9 	bl	88cbc <_Bfree>
   8732a:	4629      	mov	r1, r5
   8732c:	4620      	mov	r0, r4
   8732e:	f001 fcc5 	bl	88cbc <_Bfree>
   87332:	2300      	movs	r3, #0
   87334:	9a07      	ldr	r2, [sp, #28]
   87336:	f88a 3000 	strb.w	r3, [sl]
   8733a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8733c:	601a      	str	r2, [r3, #0]
   8733e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87340:	2b00      	cmp	r3, #0
   87342:	f43f ac40 	beq.w	86bc6 <_dtoa_r+0x76>
   87346:	9803      	ldr	r0, [sp, #12]
   87348:	f8c3 a000 	str.w	sl, [r3]
   8734c:	b019      	add	sp, #100	; 0x64
   8734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87352:	201c      	movs	r0, #28
   87354:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87356:	4407      	add	r7, r0
   87358:	4403      	add	r3, r0
   8735a:	9309      	str	r3, [sp, #36]	; 0x24
   8735c:	9b06      	ldr	r3, [sp, #24]
   8735e:	4403      	add	r3, r0
   87360:	9306      	str	r3, [sp, #24]
   87362:	e771      	b.n	87248 <_dtoa_r+0x6f8>
   87364:	2601      	movs	r6, #1
   87366:	e4b6      	b.n	86cd6 <_dtoa_r+0x186>
   87368:	f1c0 0020 	rsb	r0, r0, #32
   8736c:	fa08 f000 	lsl.w	r0, r8, r0
   87370:	e44d      	b.n	86c0e <_dtoa_r+0xbe>
   87372:	4601      	mov	r1, r0
   87374:	465a      	mov	r2, fp
   87376:	4620      	mov	r0, r4
   87378:	f001 fe24 	bl	88fc4 <__pow5mult>
   8737c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8737e:	4681      	mov	r9, r0
   87380:	2b01      	cmp	r3, #1
   87382:	f340 81b6 	ble.w	876f2 <_dtoa_r+0xba2>
   87386:	f04f 0a00 	mov.w	sl, #0
   8738a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8738e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   87392:	6918      	ldr	r0, [r3, #16]
   87394:	f001 fcee 	bl	88d74 <__hi0bits>
   87398:	f1c0 0020 	rsb	r0, r0, #32
   8739c:	e741      	b.n	87222 <_dtoa_r+0x6d2>
   8739e:	bf00      	nop
   873a0:	40240000 	.word	0x40240000
   873a4:	0008ac1c 	.word	0x0008ac1c
   873a8:	4631      	mov	r1, r6
   873aa:	2300      	movs	r3, #0
   873ac:	220a      	movs	r2, #10
   873ae:	4620      	mov	r0, r4
   873b0:	f001 fc8e 	bl	88cd0 <__multadd>
   873b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   873b6:	4606      	mov	r6, r0
   873b8:	2b00      	cmp	r3, #0
   873ba:	f340 82e9 	ble.w	87990 <_dtoa_r+0xe40>
   873be:	e9cd 8307 	strd	r8, r3, [sp, #28]
   873c2:	2f00      	cmp	r7, #0
   873c4:	f300 811d 	bgt.w	87602 <_dtoa_r+0xab2>
   873c8:	f1ba 0f00 	cmp.w	sl, #0
   873cc:	f040 81d9 	bne.w	87782 <_dtoa_r+0xc32>
   873d0:	46b0      	mov	r8, r6
   873d2:	9b04      	ldr	r3, [sp, #16]
   873d4:	9908      	ldr	r1, [sp, #32]
   873d6:	f003 0201 	and.w	r2, r3, #1
   873da:	9b03      	ldr	r3, [sp, #12]
   873dc:	920a      	str	r2, [sp, #40]	; 0x28
   873de:	461f      	mov	r7, r3
   873e0:	3b01      	subs	r3, #1
   873e2:	4419      	add	r1, r3
   873e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   873e6:	9108      	str	r1, [sp, #32]
   873e8:	4313      	orrs	r3, r2
   873ea:	9309      	str	r3, [sp, #36]	; 0x24
   873ec:	4649      	mov	r1, r9
   873ee:	4628      	mov	r0, r5
   873f0:	f7ff fb18 	bl	86a24 <quorem>
   873f4:	4631      	mov	r1, r6
   873f6:	4683      	mov	fp, r0
   873f8:	4628      	mov	r0, r5
   873fa:	f001 feb5 	bl	89168 <__mcmp>
   873fe:	4642      	mov	r2, r8
   87400:	4649      	mov	r1, r9
   87402:	4682      	mov	sl, r0
   87404:	4620      	mov	r0, r4
   87406:	f001 fecf 	bl	891a8 <__mdiff>
   8740a:	68c2      	ldr	r2, [r0, #12]
   8740c:	4601      	mov	r1, r0
   8740e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   87412:	2a00      	cmp	r2, #0
   87414:	d143      	bne.n	8749e <_dtoa_r+0x94e>
   87416:	9004      	str	r0, [sp, #16]
   87418:	4628      	mov	r0, r5
   8741a:	9306      	str	r3, [sp, #24]
   8741c:	f001 fea4 	bl	89168 <__mcmp>
   87420:	4602      	mov	r2, r0
   87422:	9904      	ldr	r1, [sp, #16]
   87424:	4620      	mov	r0, r4
   87426:	9204      	str	r2, [sp, #16]
   87428:	f001 fc48 	bl	88cbc <_Bfree>
   8742c:	9a04      	ldr	r2, [sp, #16]
   8742e:	9b06      	ldr	r3, [sp, #24]
   87430:	b91a      	cbnz	r2, 8743a <_dtoa_r+0x8ea>
   87432:	9909      	ldr	r1, [sp, #36]	; 0x24
   87434:	2900      	cmp	r1, #0
   87436:	f000 829b 	beq.w	87970 <_dtoa_r+0xe20>
   8743a:	f1ba 0f00 	cmp.w	sl, #0
   8743e:	f2c0 8164 	blt.w	8770a <_dtoa_r+0xbba>
   87442:	9922      	ldr	r1, [sp, #136]	; 0x88
   87444:	ea4a 0a01 	orr.w	sl, sl, r1
   87448:	990a      	ldr	r1, [sp, #40]	; 0x28
   8744a:	ea51 010a 	orrs.w	r1, r1, sl
   8744e:	f000 815c 	beq.w	8770a <_dtoa_r+0xbba>
   87452:	2a00      	cmp	r2, #0
   87454:	f300 81b6 	bgt.w	877c4 <_dtoa_r+0xc74>
   87458:	9a08      	ldr	r2, [sp, #32]
   8745a:	f107 0a01 	add.w	sl, r7, #1
   8745e:	4297      	cmp	r7, r2
   87460:	46d3      	mov	fp, sl
   87462:	703b      	strb	r3, [r7, #0]
   87464:	f000 81b4 	beq.w	877d0 <_dtoa_r+0xc80>
   87468:	4629      	mov	r1, r5
   8746a:	2300      	movs	r3, #0
   8746c:	220a      	movs	r2, #10
   8746e:	4620      	mov	r0, r4
   87470:	f001 fc2e 	bl	88cd0 <__multadd>
   87474:	4546      	cmp	r6, r8
   87476:	4605      	mov	r5, r0
   87478:	4631      	mov	r1, r6
   8747a:	f04f 0300 	mov.w	r3, #0
   8747e:	f04f 020a 	mov.w	r2, #10
   87482:	4620      	mov	r0, r4
   87484:	d012      	beq.n	874ac <_dtoa_r+0x95c>
   87486:	f001 fc23 	bl	88cd0 <__multadd>
   8748a:	4641      	mov	r1, r8
   8748c:	4606      	mov	r6, r0
   8748e:	2300      	movs	r3, #0
   87490:	220a      	movs	r2, #10
   87492:	4620      	mov	r0, r4
   87494:	f001 fc1c 	bl	88cd0 <__multadd>
   87498:	4657      	mov	r7, sl
   8749a:	4680      	mov	r8, r0
   8749c:	e7a6      	b.n	873ec <_dtoa_r+0x89c>
   8749e:	4620      	mov	r0, r4
   874a0:	9304      	str	r3, [sp, #16]
   874a2:	f001 fc0b 	bl	88cbc <_Bfree>
   874a6:	2201      	movs	r2, #1
   874a8:	9b04      	ldr	r3, [sp, #16]
   874aa:	e7c6      	b.n	8743a <_dtoa_r+0x8ea>
   874ac:	f001 fc10 	bl	88cd0 <__multadd>
   874b0:	4657      	mov	r7, sl
   874b2:	4606      	mov	r6, r0
   874b4:	4680      	mov	r8, r0
   874b6:	e799      	b.n	873ec <_dtoa_r+0x89c>
   874b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   874ba:	2b02      	cmp	r3, #2
   874bc:	dc7a      	bgt.n	875b4 <_dtoa_r+0xa64>
   874be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   874c0:	2b00      	cmp	r3, #0
   874c2:	f47f af7e 	bne.w	873c2 <_dtoa_r+0x872>
   874c6:	9b07      	ldr	r3, [sp, #28]
   874c8:	4649      	mov	r1, r9
   874ca:	3301      	adds	r3, #1
   874cc:	4628      	mov	r0, r5
   874ce:	9307      	str	r3, [sp, #28]
   874d0:	f7ff faa8 	bl	86a24 <quorem>
   874d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   874d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   874dc:	2700      	movs	r7, #0
   874de:	f80b 3b01 	strb.w	r3, [fp], #1
   874e2:	e6f3      	b.n	872cc <_dtoa_r+0x77c>
   874e4:	4649      	mov	r1, r9
   874e6:	4628      	mov	r0, r5
   874e8:	f001 fe3e 	bl	89168 <__mcmp>
   874ec:	2800      	cmp	r0, #0
   874ee:	f6bf aec1 	bge.w	87274 <_dtoa_r+0x724>
   874f2:	4629      	mov	r1, r5
   874f4:	2300      	movs	r3, #0
   874f6:	220a      	movs	r2, #10
   874f8:	4620      	mov	r0, r4
   874fa:	f001 fbe9 	bl	88cd0 <__multadd>
   874fe:	9b07      	ldr	r3, [sp, #28]
   87500:	4605      	mov	r5, r0
   87502:	f103 38ff 	add.w	r8, r3, #4294967295
   87506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87508:	2b00      	cmp	r3, #0
   8750a:	f47f af4d 	bne.w	873a8 <_dtoa_r+0x858>
   8750e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87510:	2b00      	cmp	r3, #0
   87512:	f340 8234 	ble.w	8797e <_dtoa_r+0xe2e>
   87516:	9308      	str	r3, [sp, #32]
   87518:	e6b7      	b.n	8728a <_dtoa_r+0x73a>
   8751a:	4bb0      	ldr	r3, [pc, #704]	; (877dc <_dtoa_r+0xc8c>)
   8751c:	9303      	str	r3, [sp, #12]
   8751e:	3303      	adds	r3, #3
   87520:	f7ff bbf4 	b.w	86d0c <_dtoa_r+0x1bc>
   87524:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   87528:	2900      	cmp	r1, #0
   8752a:	f47f ae73 	bne.w	87214 <_dtoa_r+0x6c4>
   8752e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87532:	2b00      	cmp	r3, #0
   87534:	f47f ae6e 	bne.w	87214 <_dtoa_r+0x6c4>
   87538:	4ba9      	ldr	r3, [pc, #676]	; (877e0 <_dtoa_r+0xc90>)
   8753a:	4013      	ands	r3, r2
   8753c:	2b00      	cmp	r3, #0
   8753e:	f000 8200 	beq.w	87942 <_dtoa_r+0xdf2>
   87542:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87544:	f04f 0a01 	mov.w	sl, #1
   87548:	3301      	adds	r3, #1
   8754a:	9309      	str	r3, [sp, #36]	; 0x24
   8754c:	9b06      	ldr	r3, [sp, #24]
   8754e:	3301      	adds	r3, #1
   87550:	9306      	str	r3, [sp, #24]
   87552:	e661      	b.n	87218 <_dtoa_r+0x6c8>
   87554:	2301      	movs	r3, #1
   87556:	930c      	str	r3, [sp, #48]	; 0x30
   87558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8755a:	9a07      	ldr	r2, [sp, #28]
   8755c:	4413      	add	r3, r2
   8755e:	9312      	str	r3, [sp, #72]	; 0x48
   87560:	3301      	adds	r3, #1
   87562:	2b01      	cmp	r3, #1
   87564:	461f      	mov	r7, r3
   87566:	bfb8      	it	lt
   87568:	2701      	movlt	r7, #1
   8756a:	9308      	str	r3, [sp, #32]
   8756c:	2100      	movs	r1, #0
   8756e:	2f17      	cmp	r7, #23
   87570:	6461      	str	r1, [r4, #68]	; 0x44
   87572:	f77f ac1e 	ble.w	86db2 <_dtoa_r+0x262>
   87576:	2201      	movs	r2, #1
   87578:	2304      	movs	r3, #4
   8757a:	005b      	lsls	r3, r3, #1
   8757c:	f103 0014 	add.w	r0, r3, #20
   87580:	42b8      	cmp	r0, r7
   87582:	4611      	mov	r1, r2
   87584:	f102 0201 	add.w	r2, r2, #1
   87588:	d9f7      	bls.n	8757a <_dtoa_r+0xa2a>
   8758a:	6461      	str	r1, [r4, #68]	; 0x44
   8758c:	e411      	b.n	86db2 <_dtoa_r+0x262>
   8758e:	2301      	movs	r3, #1
   87590:	930c      	str	r3, [sp, #48]	; 0x30
   87592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87594:	2b00      	cmp	r3, #0
   87596:	dd4c      	ble.n	87632 <_dtoa_r+0xae2>
   87598:	461f      	mov	r7, r3
   8759a:	9312      	str	r3, [sp, #72]	; 0x48
   8759c:	9308      	str	r3, [sp, #32]
   8759e:	e7e5      	b.n	8756c <_dtoa_r+0xa1c>
   875a0:	2300      	movs	r3, #0
   875a2:	930c      	str	r3, [sp, #48]	; 0x30
   875a4:	e7d8      	b.n	87558 <_dtoa_r+0xa08>
   875a6:	2300      	movs	r3, #0
   875a8:	930c      	str	r3, [sp, #48]	; 0x30
   875aa:	e7f2      	b.n	87592 <_dtoa_r+0xa42>
   875ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   875ae:	f8cd 801c 	str.w	r8, [sp, #28]
   875b2:	9308      	str	r3, [sp, #32]
   875b4:	9b08      	ldr	r3, [sp, #32]
   875b6:	2b00      	cmp	r3, #0
   875b8:	f47f ad43 	bne.w	87042 <_dtoa_r+0x4f2>
   875bc:	4649      	mov	r1, r9
   875be:	2205      	movs	r2, #5
   875c0:	4620      	mov	r0, r4
   875c2:	f001 fb85 	bl	88cd0 <__multadd>
   875c6:	4681      	mov	r9, r0
   875c8:	4628      	mov	r0, r5
   875ca:	4649      	mov	r1, r9
   875cc:	f001 fdcc 	bl	89168 <__mcmp>
   875d0:	2800      	cmp	r0, #0
   875d2:	f77f ad36 	ble.w	87042 <_dtoa_r+0x4f2>
   875d6:	2331      	movs	r3, #49	; 0x31
   875d8:	9803      	ldr	r0, [sp, #12]
   875da:	9f07      	ldr	r7, [sp, #28]
   875dc:	4680      	mov	r8, r0
   875de:	f800 3b01 	strb.w	r3, [r0], #1
   875e2:	3701      	adds	r7, #1
   875e4:	9003      	str	r0, [sp, #12]
   875e6:	4649      	mov	r1, r9
   875e8:	4620      	mov	r0, r4
   875ea:	f001 fb67 	bl	88cbc <_Bfree>
   875ee:	1c7b      	adds	r3, r7, #1
   875f0:	f8dd a00c 	ldr.w	sl, [sp, #12]
   875f4:	9307      	str	r3, [sp, #28]
   875f6:	f8cd 800c 	str.w	r8, [sp, #12]
   875fa:	2e00      	cmp	r6, #0
   875fc:	f47f ae91 	bne.w	87322 <_dtoa_r+0x7d2>
   87600:	e693      	b.n	8732a <_dtoa_r+0x7da>
   87602:	4631      	mov	r1, r6
   87604:	463a      	mov	r2, r7
   87606:	4620      	mov	r0, r4
   87608:	f001 fd38 	bl	8907c <__lshift>
   8760c:	4606      	mov	r6, r0
   8760e:	e6db      	b.n	873c8 <_dtoa_r+0x878>
   87610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87612:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   87616:	eba8 0303 	sub.w	r3, r8, r3
   8761a:	449b      	add	fp, r3
   8761c:	f04f 0800 	mov.w	r8, #0
   87620:	e588      	b.n	87134 <_dtoa_r+0x5e4>
   87622:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   87626:	f04f 0a02 	mov.w	sl, #2
   8762a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8762e:	f7ff bbee 	b.w	86e0e <_dtoa_r+0x2be>
   87632:	2301      	movs	r3, #1
   87634:	9323      	str	r3, [sp, #140]	; 0x8c
   87636:	9308      	str	r3, [sp, #32]
   87638:	f7ff bbb7 	b.w	86daa <_dtoa_r+0x25a>
   8763c:	d103      	bne.n	87646 <_dtoa_r+0xaf6>
   8763e:	9b04      	ldr	r3, [sp, #16]
   87640:	07d8      	lsls	r0, r3, #31
   87642:	f53f ae50 	bmi.w	872e6 <_dtoa_r+0x796>
   87646:	46da      	mov	sl, fp
   87648:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8764c:	2b30      	cmp	r3, #48	; 0x30
   8764e:	d0fa      	beq.n	87646 <_dtoa_r+0xaf6>
   87650:	e65b      	b.n	8730a <_dtoa_r+0x7ba>
   87652:	9b07      	ldr	r3, [sp, #28]
   87654:	9a03      	ldr	r2, [sp, #12]
   87656:	3301      	adds	r3, #1
   87658:	9307      	str	r3, [sp, #28]
   8765a:	2331      	movs	r3, #49	; 0x31
   8765c:	7013      	strb	r3, [r2, #0]
   8765e:	e654      	b.n	8730a <_dtoa_r+0x7ba>
   87660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87662:	2a00      	cmp	r2, #0
   87664:	f000 8128 	beq.w	878b8 <_dtoa_r+0xd68>
   87668:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8766c:	9a06      	ldr	r2, [sp, #24]
   8766e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   87672:	441a      	add	r2, r3
   87674:	9206      	str	r2, [sp, #24]
   87676:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87678:	4617      	mov	r7, r2
   8767a:	441a      	add	r2, r3
   8767c:	9209      	str	r2, [sp, #36]	; 0x24
   8767e:	e564      	b.n	8714a <_dtoa_r+0x5fa>
   87680:	f04f 0900 	mov.w	r9, #0
   87684:	464e      	mov	r6, r9
   87686:	e4dc      	b.n	87042 <_dtoa_r+0x4f2>
   87688:	4629      	mov	r1, r5
   8768a:	4620      	mov	r0, r4
   8768c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8768e:	f001 fc99 	bl	88fc4 <__pow5mult>
   87692:	4605      	mov	r5, r0
   87694:	e5b1      	b.n	871fa <_dtoa_r+0x6aa>
   87696:	900e      	str	r0, [sp, #56]	; 0x38
   87698:	e564      	b.n	87164 <_dtoa_r+0x614>
   8769a:	f000 8111 	beq.w	878c0 <_dtoa_r+0xd70>
   8769e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   876a2:	9a07      	ldr	r2, [sp, #28]
   876a4:	4b4f      	ldr	r3, [pc, #316]	; (877e4 <_dtoa_r+0xc94>)
   876a6:	4256      	negs	r6, r2
   876a8:	f006 020f 	and.w	r2, r6, #15
   876ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   876b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   876b4:	f002 fda4 	bl	8a200 <__aeabi_dmul>
   876b8:	1136      	asrs	r6, r6, #4
   876ba:	4680      	mov	r8, r0
   876bc:	4689      	mov	r9, r1
   876be:	f000 8170 	beq.w	879a2 <_dtoa_r+0xe52>
   876c2:	2300      	movs	r3, #0
   876c4:	f04f 0a02 	mov.w	sl, #2
   876c8:	4f47      	ldr	r7, [pc, #284]	; (877e8 <_dtoa_r+0xc98>)
   876ca:	07f2      	lsls	r2, r6, #31
   876cc:	d506      	bpl.n	876dc <_dtoa_r+0xb8c>
   876ce:	e9d7 2300 	ldrd	r2, r3, [r7]
   876d2:	f002 fd95 	bl	8a200 <__aeabi_dmul>
   876d6:	2301      	movs	r3, #1
   876d8:	f10a 0a01 	add.w	sl, sl, #1
   876dc:	1076      	asrs	r6, r6, #1
   876de:	f107 0708 	add.w	r7, r7, #8
   876e2:	d1f2      	bne.n	876ca <_dtoa_r+0xb7a>
   876e4:	2b00      	cmp	r3, #0
   876e6:	f43f abb1 	beq.w	86e4c <_dtoa_r+0x2fc>
   876ea:	4680      	mov	r8, r0
   876ec:	4689      	mov	r9, r1
   876ee:	f7ff bbad 	b.w	86e4c <_dtoa_r+0x2fc>
   876f2:	9b04      	ldr	r3, [sp, #16]
   876f4:	2b00      	cmp	r3, #0
   876f6:	f47f ae46 	bne.w	87386 <_dtoa_r+0x836>
   876fa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   876fe:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87702:	2b00      	cmp	r3, #0
   87704:	f43f af18 	beq.w	87538 <_dtoa_r+0x9e8>
   87708:	e63d      	b.n	87386 <_dtoa_r+0x836>
   8770a:	2a00      	cmp	r2, #0
   8770c:	dd12      	ble.n	87734 <_dtoa_r+0xbe4>
   8770e:	4629      	mov	r1, r5
   87710:	2201      	movs	r2, #1
   87712:	4620      	mov	r0, r4
   87714:	9304      	str	r3, [sp, #16]
   87716:	f001 fcb1 	bl	8907c <__lshift>
   8771a:	4649      	mov	r1, r9
   8771c:	4605      	mov	r5, r0
   8771e:	f001 fd23 	bl	89168 <__mcmp>
   87722:	2800      	cmp	r0, #0
   87724:	9b04      	ldr	r3, [sp, #16]
   87726:	f340 8117 	ble.w	87958 <_dtoa_r+0xe08>
   8772a:	2b39      	cmp	r3, #57	; 0x39
   8772c:	f000 80fb 	beq.w	87926 <_dtoa_r+0xdd6>
   87730:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   87734:	46ba      	mov	sl, r7
   87736:	9a07      	ldr	r2, [sp, #28]
   87738:	4637      	mov	r7, r6
   8773a:	3201      	adds	r2, #1
   8773c:	4646      	mov	r6, r8
   8773e:	9207      	str	r2, [sp, #28]
   87740:	f80a 3b01 	strb.w	r3, [sl], #1
   87744:	e5e1      	b.n	8730a <_dtoa_r+0x7ba>
   87746:	9509      	str	r5, [sp, #36]	; 0x24
   87748:	9c06      	ldr	r4, [sp, #24]
   8774a:	9d04      	ldr	r5, [sp, #16]
   8774c:	4602      	mov	r2, r0
   8774e:	460b      	mov	r3, r1
   87750:	f002 fba0 	bl	89e94 <__adddf3>
   87754:	4652      	mov	r2, sl
   87756:	465b      	mov	r3, fp
   87758:	4680      	mov	r8, r0
   8775a:	4689      	mov	r9, r1
   8775c:	f002 ffe0 	bl	8a720 <__aeabi_dcmpgt>
   87760:	b960      	cbnz	r0, 8777c <_dtoa_r+0xc2c>
   87762:	4652      	mov	r2, sl
   87764:	465b      	mov	r3, fp
   87766:	4640      	mov	r0, r8
   87768:	4649      	mov	r1, r9
   8776a:	f002 ffb1 	bl	8a6d0 <__aeabi_dcmpeq>
   8776e:	2800      	cmp	r0, #0
   87770:	f43f accb 	beq.w	8710a <_dtoa_r+0x5ba>
   87774:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87776:	07d9      	lsls	r1, r3, #31
   87778:	f57f acc7 	bpl.w	8710a <_dtoa_r+0x5ba>
   8777c:	9a03      	ldr	r2, [sp, #12]
   8777e:	f7ff bbff 	b.w	86f80 <_dtoa_r+0x430>
   87782:	4620      	mov	r0, r4
   87784:	6871      	ldr	r1, [r6, #4]
   87786:	f001 fa73 	bl	88c70 <_Balloc>
   8778a:	4607      	mov	r7, r0
   8778c:	2800      	cmp	r0, #0
   8778e:	f000 810c 	beq.w	879aa <_dtoa_r+0xe5a>
   87792:	6933      	ldr	r3, [r6, #16]
   87794:	f106 010c 	add.w	r1, r6, #12
   87798:	3302      	adds	r3, #2
   8779a:	009a      	lsls	r2, r3, #2
   8779c:	300c      	adds	r0, #12
   8779e:	f7fc f9ff 	bl	83ba0 <memcpy>
   877a2:	4639      	mov	r1, r7
   877a4:	2201      	movs	r2, #1
   877a6:	4620      	mov	r0, r4
   877a8:	f001 fc68 	bl	8907c <__lshift>
   877ac:	4680      	mov	r8, r0
   877ae:	e610      	b.n	873d2 <_dtoa_r+0x882>
   877b0:	4629      	mov	r1, r5
   877b2:	4620      	mov	r0, r4
   877b4:	f001 fc06 	bl	88fc4 <__pow5mult>
   877b8:	4605      	mov	r5, r0
   877ba:	e51e      	b.n	871fa <_dtoa_r+0x6aa>
   877bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   877c0:	1a9f      	subs	r7, r3, r2
   877c2:	e4c2      	b.n	8714a <_dtoa_r+0x5fa>
   877c4:	2b39      	cmp	r3, #57	; 0x39
   877c6:	f000 80ae 	beq.w	87926 <_dtoa_r+0xdd6>
   877ca:	46ba      	mov	sl, r7
   877cc:	3301      	adds	r3, #1
   877ce:	e7b2      	b.n	87736 <_dtoa_r+0xbe6>
   877d0:	9a07      	ldr	r2, [sp, #28]
   877d2:	4637      	mov	r7, r6
   877d4:	3201      	adds	r2, #1
   877d6:	4646      	mov	r6, r8
   877d8:	9207      	str	r2, [sp, #28]
   877da:	e577      	b.n	872cc <_dtoa_r+0x77c>
   877dc:	0008ac60 	.word	0x0008ac60
   877e0:	7ff00000 	.word	0x7ff00000
   877e4:	0008adc0 	.word	0x0008adc0
   877e8:	0008ad98 	.word	0x0008ad98
   877ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   877f0:	4983      	ldr	r1, [pc, #524]	; (87a00 <_dtoa_r+0xeb0>)
   877f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   877f6:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   877fa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   877fe:	f002 fcff 	bl	8a200 <__aeabi_dmul>
   87802:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87806:	4649      	mov	r1, r9
   87808:	4640      	mov	r0, r8
   8780a:	f002 ffa9 	bl	8a760 <__aeabi_d2iz>
   8780e:	4606      	mov	r6, r0
   87810:	f002 fc8c 	bl	8a12c <__aeabi_i2d>
   87814:	460b      	mov	r3, r1
   87816:	4602      	mov	r2, r0
   87818:	4649      	mov	r1, r9
   8781a:	4640      	mov	r0, r8
   8781c:	f002 fb38 	bl	89e90 <__aeabi_dsub>
   87820:	4653      	mov	r3, sl
   87822:	9f03      	ldr	r7, [sp, #12]
   87824:	3630      	adds	r6, #48	; 0x30
   87826:	2b01      	cmp	r3, #1
   87828:	4680      	mov	r8, r0
   8782a:	4689      	mov	r9, r1
   8782c:	f807 6b01 	strb.w	r6, [r7], #1
   87830:	f000 80ac 	beq.w	8798c <_dtoa_r+0xe3c>
   87834:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87836:	9b03      	ldr	r3, [sp, #12]
   87838:	441e      	add	r6, r3
   8783a:	2200      	movs	r2, #0
   8783c:	4b71      	ldr	r3, [pc, #452]	; (87a04 <_dtoa_r+0xeb4>)
   8783e:	4640      	mov	r0, r8
   87840:	4649      	mov	r1, r9
   87842:	f002 fcdd 	bl	8a200 <__aeabi_dmul>
   87846:	4689      	mov	r9, r1
   87848:	4680      	mov	r8, r0
   8784a:	f002 ff89 	bl	8a760 <__aeabi_d2iz>
   8784e:	4682      	mov	sl, r0
   87850:	f002 fc6c 	bl	8a12c <__aeabi_i2d>
   87854:	4602      	mov	r2, r0
   87856:	460b      	mov	r3, r1
   87858:	4640      	mov	r0, r8
   8785a:	4649      	mov	r1, r9
   8785c:	f002 fb18 	bl	89e90 <__aeabi_dsub>
   87860:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   87864:	f807 ab01 	strb.w	sl, [r7], #1
   87868:	42b7      	cmp	r7, r6
   8786a:	4680      	mov	r8, r0
   8786c:	4689      	mov	r9, r1
   8786e:	d1e4      	bne.n	8783a <_dtoa_r+0xcea>
   87870:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87874:	2200      	movs	r2, #0
   87876:	4b64      	ldr	r3, [pc, #400]	; (87a08 <_dtoa_r+0xeb8>)
   87878:	f002 fb0c 	bl	89e94 <__adddf3>
   8787c:	4642      	mov	r2, r8
   8787e:	464b      	mov	r3, r9
   87880:	f002 ff30 	bl	8a6e4 <__aeabi_dcmplt>
   87884:	2800      	cmp	r0, #0
   87886:	d162      	bne.n	8794e <_dtoa_r+0xdfe>
   87888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8788c:	2000      	movs	r0, #0
   8788e:	495e      	ldr	r1, [pc, #376]	; (87a08 <_dtoa_r+0xeb8>)
   87890:	f002 fafe 	bl	89e90 <__aeabi_dsub>
   87894:	4642      	mov	r2, r8
   87896:	464b      	mov	r3, r9
   87898:	f002 ff42 	bl	8a720 <__aeabi_dcmpgt>
   8789c:	2800      	cmp	r0, #0
   8789e:	f43f aba9 	beq.w	86ff4 <_dtoa_r+0x4a4>
   878a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   878a6:	46b2      	mov	sl, r6
   878a8:	2b30      	cmp	r3, #48	; 0x30
   878aa:	f106 36ff 	add.w	r6, r6, #4294967295
   878ae:	d0f8      	beq.n	878a2 <_dtoa_r+0xd52>
   878b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   878b2:	3301      	adds	r3, #1
   878b4:	9307      	str	r3, [sp, #28]
   878b6:	e538      	b.n	8732a <_dtoa_r+0x7da>
   878b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   878ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   878be:	e6d5      	b.n	8766c <_dtoa_r+0xb1c>
   878c0:	f04f 0a02 	mov.w	sl, #2
   878c4:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   878c8:	f7ff bac0 	b.w	86e4c <_dtoa_r+0x2fc>
   878cc:	9b08      	ldr	r3, [sp, #32]
   878ce:	2b00      	cmp	r3, #0
   878d0:	f43f ab62 	beq.w	86f98 <_dtoa_r+0x448>
   878d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   878d6:	2b00      	cmp	r3, #0
   878d8:	f77f ab8c 	ble.w	86ff4 <_dtoa_r+0x4a4>
   878dc:	9313      	str	r3, [sp, #76]	; 0x4c
   878de:	9b07      	ldr	r3, [sp, #28]
   878e0:	2200      	movs	r2, #0
   878e2:	3b01      	subs	r3, #1
   878e4:	4640      	mov	r0, r8
   878e6:	4649      	mov	r1, r9
   878e8:	9314      	str	r3, [sp, #80]	; 0x50
   878ea:	4b46      	ldr	r3, [pc, #280]	; (87a04 <_dtoa_r+0xeb4>)
   878ec:	f002 fc88 	bl	8a200 <__aeabi_dmul>
   878f0:	4680      	mov	r8, r0
   878f2:	4689      	mov	r9, r1
   878f4:	f10a 0001 	add.w	r0, sl, #1
   878f8:	f002 fc18 	bl	8a12c <__aeabi_i2d>
   878fc:	4642      	mov	r2, r8
   878fe:	464b      	mov	r3, r9
   87900:	f002 fc7e 	bl	8a200 <__aeabi_dmul>
   87904:	4b41      	ldr	r3, [pc, #260]	; (87a0c <_dtoa_r+0xebc>)
   87906:	2200      	movs	r2, #0
   87908:	f002 fac4 	bl	89e94 <__adddf3>
   8790c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87910:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87914:	9311      	str	r3, [sp, #68]	; 0x44
   87916:	f7ff babc 	b.w	86e92 <_dtoa_r+0x342>
   8791a:	9b07      	ldr	r3, [sp, #28]
   8791c:	3301      	adds	r3, #1
   8791e:	9307      	str	r3, [sp, #28]
   87920:	2331      	movs	r3, #49	; 0x31
   87922:	f7ff bb34 	b.w	86f8e <_dtoa_r+0x43e>
   87926:	9b07      	ldr	r3, [sp, #28]
   87928:	46bb      	mov	fp, r7
   8792a:	3301      	adds	r3, #1
   8792c:	9307      	str	r3, [sp, #28]
   8792e:	2339      	movs	r3, #57	; 0x39
   87930:	4637      	mov	r7, r6
   87932:	f80b 3b01 	strb.w	r3, [fp], #1
   87936:	4646      	mov	r6, r8
   87938:	e4d7      	b.n	872ea <_dtoa_r+0x79a>
   8793a:	f04f 0900 	mov.w	r9, #0
   8793e:	464e      	mov	r6, r9
   87940:	e649      	b.n	875d6 <_dtoa_r+0xa86>
   87942:	469a      	mov	sl, r3
   87944:	e468      	b.n	87218 <_dtoa_r+0x6c8>
   87946:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87948:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8794a:	46b2      	mov	sl, r6
   8794c:	e7b0      	b.n	878b0 <_dtoa_r+0xd60>
   8794e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   87950:	9a03      	ldr	r2, [sp, #12]
   87952:	9307      	str	r3, [sp, #28]
   87954:	f7ff bb14 	b.w	86f80 <_dtoa_r+0x430>
   87958:	f47f aeec 	bne.w	87734 <_dtoa_r+0xbe4>
   8795c:	07da      	lsls	r2, r3, #31
   8795e:	f57f aee9 	bpl.w	87734 <_dtoa_r+0xbe4>
   87962:	e6e2      	b.n	8772a <_dtoa_r+0xbda>
   87964:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   87968:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8796a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8796c:	f7ff bb42 	b.w	86ff4 <_dtoa_r+0x4a4>
   87970:	2b39      	cmp	r3, #57	; 0x39
   87972:	d0d8      	beq.n	87926 <_dtoa_r+0xdd6>
   87974:	f1ba 0f00 	cmp.w	sl, #0
   87978:	f73f aeda 	bgt.w	87730 <_dtoa_r+0xbe0>
   8797c:	e6da      	b.n	87734 <_dtoa_r+0xbe4>
   8797e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87980:	2b02      	cmp	r3, #2
   87982:	f73f ae13 	bgt.w	875ac <_dtoa_r+0xa5c>
   87986:	f8cd 801c 	str.w	r8, [sp, #28]
   8798a:	e59c      	b.n	874c6 <_dtoa_r+0x976>
   8798c:	463e      	mov	r6, r7
   8798e:	e76f      	b.n	87870 <_dtoa_r+0xd20>
   87990:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87992:	2b02      	cmp	r3, #2
   87994:	f73f ae0a 	bgt.w	875ac <_dtoa_r+0xa5c>
   87998:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8799a:	f8cd 801c 	str.w	r8, [sp, #28]
   8799e:	9308      	str	r3, [sp, #32]
   879a0:	e50f      	b.n	873c2 <_dtoa_r+0x872>
   879a2:	f04f 0a02 	mov.w	sl, #2
   879a6:	f7ff ba51 	b.w	86e4c <_dtoa_r+0x2fc>
   879aa:	4602      	mov	r2, r0
   879ac:	f240 21ea 	movw	r1, #746	; 0x2ea
   879b0:	4b17      	ldr	r3, [pc, #92]	; (87a10 <_dtoa_r+0xec0>)
   879b2:	4818      	ldr	r0, [pc, #96]	; (87a14 <_dtoa_r+0xec4>)
   879b4:	f002 f8dc 	bl	89b70 <__assert_func>
   879b8:	2600      	movs	r6, #0
   879ba:	4620      	mov	r0, r4
   879bc:	4631      	mov	r1, r6
   879be:	6466      	str	r6, [r4, #68]	; 0x44
   879c0:	f001 f956 	bl	88c70 <_Balloc>
   879c4:	9003      	str	r0, [sp, #12]
   879c6:	b978      	cbnz	r0, 879e8 <_dtoa_r+0xe98>
   879c8:	2200      	movs	r2, #0
   879ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   879ce:	4b10      	ldr	r3, [pc, #64]	; (87a10 <_dtoa_r+0xec0>)
   879d0:	4810      	ldr	r0, [pc, #64]	; (87a14 <_dtoa_r+0xec4>)
   879d2:	f002 f8cd 	bl	89b70 <__assert_func>
   879d6:	4b10      	ldr	r3, [pc, #64]	; (87a18 <_dtoa_r+0xec8>)
   879d8:	9303      	str	r3, [sp, #12]
   879da:	f7ff b8f4 	b.w	86bc6 <_dtoa_r+0x76>
   879de:	f43f ac33 	beq.w	87248 <_dtoa_r+0x6f8>
   879e2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   879e6:	e4b5      	b.n	87354 <_dtoa_r+0x804>
   879e8:	9b03      	ldr	r3, [sp, #12]
   879ea:	2201      	movs	r2, #1
   879ec:	6423      	str	r3, [r4, #64]	; 0x40
   879ee:	f04f 33ff 	mov.w	r3, #4294967295
   879f2:	9623      	str	r6, [sp, #140]	; 0x8c
   879f4:	9312      	str	r3, [sp, #72]	; 0x48
   879f6:	920c      	str	r2, [sp, #48]	; 0x30
   879f8:	9308      	str	r3, [sp, #32]
   879fa:	f7ff bafb 	b.w	86ff4 <_dtoa_r+0x4a4>
   879fe:	bf00      	nop
   87a00:	0008adc0 	.word	0x0008adc0
   87a04:	40240000 	.word	0x40240000
   87a08:	3fe00000 	.word	0x3fe00000
   87a0c:	401c0000 	.word	0x401c0000
   87a10:	0008ac70 	.word	0x0008ac70
   87a14:	0008ac84 	.word	0x0008ac84
   87a18:	0008ac64 	.word	0x0008ac64

00087a1c <__sflush_r>:
   87a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   87a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87a22:	460c      	mov	r4, r1
   87a24:	0711      	lsls	r1, r2, #28
   87a26:	4607      	mov	r7, r0
   87a28:	d443      	bmi.n	87ab2 <__sflush_r+0x96>
   87a2a:	6863      	ldr	r3, [r4, #4]
   87a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   87a30:	2b00      	cmp	r3, #0
   87a32:	81a2      	strh	r2, [r4, #12]
   87a34:	dd5b      	ble.n	87aee <__sflush_r+0xd2>
   87a36:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   87a38:	2d00      	cmp	r5, #0
   87a3a:	d056      	beq.n	87aea <__sflush_r+0xce>
   87a3c:	2300      	movs	r3, #0
   87a3e:	683e      	ldr	r6, [r7, #0]
   87a40:	603b      	str	r3, [r7, #0]
   87a42:	b293      	uxth	r3, r2
   87a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   87a48:	d155      	bne.n	87af6 <__sflush_r+0xda>
   87a4a:	2301      	movs	r3, #1
   87a4c:	4638      	mov	r0, r7
   87a4e:	69e1      	ldr	r1, [r4, #28]
   87a50:	47a8      	blx	r5
   87a52:	1c42      	adds	r2, r0, #1
   87a54:	d065      	beq.n	87b22 <__sflush_r+0x106>
   87a56:	89a3      	ldrh	r3, [r4, #12]
   87a58:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   87a5a:	075b      	lsls	r3, r3, #29
   87a5c:	d505      	bpl.n	87a6a <__sflush_r+0x4e>
   87a5e:	6863      	ldr	r3, [r4, #4]
   87a60:	1ac0      	subs	r0, r0, r3
   87a62:	6b23      	ldr	r3, [r4, #48]	; 0x30
   87a64:	b10b      	cbz	r3, 87a6a <__sflush_r+0x4e>
   87a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   87a68:	1ac0      	subs	r0, r0, r3
   87a6a:	4602      	mov	r2, r0
   87a6c:	69e1      	ldr	r1, [r4, #28]
   87a6e:	2300      	movs	r3, #0
   87a70:	4638      	mov	r0, r7
   87a72:	47a8      	blx	r5
   87a74:	1c41      	adds	r1, r0, #1
   87a76:	d140      	bne.n	87afa <__sflush_r+0xde>
   87a78:	683b      	ldr	r3, [r7, #0]
   87a7a:	2b00      	cmp	r3, #0
   87a7c:	d03d      	beq.n	87afa <__sflush_r+0xde>
   87a7e:	2b1d      	cmp	r3, #29
   87a80:	d001      	beq.n	87a86 <__sflush_r+0x6a>
   87a82:	2b16      	cmp	r3, #22
   87a84:	d154      	bne.n	87b30 <__sflush_r+0x114>
   87a86:	2200      	movs	r2, #0
   87a88:	89a3      	ldrh	r3, [r4, #12]
   87a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   87a8e:	81a3      	strh	r3, [r4, #12]
   87a90:	6923      	ldr	r3, [r4, #16]
   87a92:	e9c4 3200 	strd	r3, r2, [r4]
   87a96:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87a98:	603e      	str	r6, [r7, #0]
   87a9a:	b331      	cbz	r1, 87aea <__sflush_r+0xce>
   87a9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87aa0:	4299      	cmp	r1, r3
   87aa2:	d002      	beq.n	87aaa <__sflush_r+0x8e>
   87aa4:	4638      	mov	r0, r7
   87aa6:	f000 f9fb 	bl	87ea0 <_free_r>
   87aaa:	2300      	movs	r3, #0
   87aac:	4618      	mov	r0, r3
   87aae:	6323      	str	r3, [r4, #48]	; 0x30
   87ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87ab2:	6926      	ldr	r6, [r4, #16]
   87ab4:	b1ce      	cbz	r6, 87aea <__sflush_r+0xce>
   87ab6:	b293      	uxth	r3, r2
   87ab8:	079a      	lsls	r2, r3, #30
   87aba:	bf18      	it	ne
   87abc:	2300      	movne	r3, #0
   87abe:	6825      	ldr	r5, [r4, #0]
   87ac0:	bf08      	it	eq
   87ac2:	6963      	ldreq	r3, [r4, #20]
   87ac4:	6026      	str	r6, [r4, #0]
   87ac6:	1bad      	subs	r5, r5, r6
   87ac8:	60a3      	str	r3, [r4, #8]
   87aca:	e00c      	b.n	87ae6 <__sflush_r+0xca>
   87acc:	462b      	mov	r3, r5
   87ace:	4632      	mov	r2, r6
   87ad0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   87ad4:	4638      	mov	r0, r7
   87ad6:	69e1      	ldr	r1, [r4, #28]
   87ad8:	47e0      	blx	ip
   87ada:	f1b0 0c00 	subs.w	ip, r0, #0
   87ade:	eba5 050c 	sub.w	r5, r5, ip
   87ae2:	4466      	add	r6, ip
   87ae4:	dd16      	ble.n	87b14 <__sflush_r+0xf8>
   87ae6:	2d00      	cmp	r5, #0
   87ae8:	dcf0      	bgt.n	87acc <__sflush_r+0xb0>
   87aea:	2000      	movs	r0, #0
   87aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   87af0:	2b00      	cmp	r3, #0
   87af2:	dca0      	bgt.n	87a36 <__sflush_r+0x1a>
   87af4:	e7f9      	b.n	87aea <__sflush_r+0xce>
   87af6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   87af8:	e7af      	b.n	87a5a <__sflush_r+0x3e>
   87afa:	2200      	movs	r2, #0
   87afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87b00:	6062      	str	r2, [r4, #4]
   87b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   87b06:	6922      	ldr	r2, [r4, #16]
   87b08:	81a3      	strh	r3, [r4, #12]
   87b0a:	04db      	lsls	r3, r3, #19
   87b0c:	6022      	str	r2, [r4, #0]
   87b0e:	d5c2      	bpl.n	87a96 <__sflush_r+0x7a>
   87b10:	6520      	str	r0, [r4, #80]	; 0x50
   87b12:	e7c0      	b.n	87a96 <__sflush_r+0x7a>
   87b14:	89a3      	ldrh	r3, [r4, #12]
   87b16:	f04f 30ff 	mov.w	r0, #4294967295
   87b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87b1e:	81a3      	strh	r3, [r4, #12]
   87b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87b22:	683b      	ldr	r3, [r7, #0]
   87b24:	2b00      	cmp	r3, #0
   87b26:	d096      	beq.n	87a56 <__sflush_r+0x3a>
   87b28:	2b1d      	cmp	r3, #29
   87b2a:	d006      	beq.n	87b3a <__sflush_r+0x11e>
   87b2c:	2b16      	cmp	r3, #22
   87b2e:	d004      	beq.n	87b3a <__sflush_r+0x11e>
   87b30:	89a3      	ldrh	r3, [r4, #12]
   87b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87b36:	81a3      	strh	r3, [r4, #12]
   87b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87b3a:	2000      	movs	r0, #0
   87b3c:	603e      	str	r6, [r7, #0]
   87b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00087b40 <_fflush_r>:
   87b40:	b538      	push	{r3, r4, r5, lr}
   87b42:	4605      	mov	r5, r0
   87b44:	460c      	mov	r4, r1
   87b46:	b108      	cbz	r0, 87b4c <_fflush_r+0xc>
   87b48:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87b4a:	b1a3      	cbz	r3, 87b76 <_fflush_r+0x36>
   87b4c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   87b50:	b1b8      	cbz	r0, 87b82 <_fflush_r+0x42>
   87b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87b54:	07db      	lsls	r3, r3, #31
   87b56:	d401      	bmi.n	87b5c <_fflush_r+0x1c>
   87b58:	0581      	lsls	r1, r0, #22
   87b5a:	d515      	bpl.n	87b88 <_fflush_r+0x48>
   87b5c:	4628      	mov	r0, r5
   87b5e:	4621      	mov	r1, r4
   87b60:	f7ff ff5c 	bl	87a1c <__sflush_r>
   87b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87b66:	4605      	mov	r5, r0
   87b68:	07da      	lsls	r2, r3, #31
   87b6a:	d402      	bmi.n	87b72 <_fflush_r+0x32>
   87b6c:	89a3      	ldrh	r3, [r4, #12]
   87b6e:	059b      	lsls	r3, r3, #22
   87b70:	d50e      	bpl.n	87b90 <_fflush_r+0x50>
   87b72:	4628      	mov	r0, r5
   87b74:	bd38      	pop	{r3, r4, r5, pc}
   87b76:	f000 f817 	bl	87ba8 <__sinit>
   87b7a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   87b7e:	2800      	cmp	r0, #0
   87b80:	d1e7      	bne.n	87b52 <_fflush_r+0x12>
   87b82:	4605      	mov	r5, r0
   87b84:	4628      	mov	r0, r5
   87b86:	bd38      	pop	{r3, r4, r5, pc}
   87b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87b8a:	f000 fc33 	bl	883f4 <__retarget_lock_acquire_recursive>
   87b8e:	e7e5      	b.n	87b5c <_fflush_r+0x1c>
   87b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87b92:	f000 fc31 	bl	883f8 <__retarget_lock_release_recursive>
   87b96:	4628      	mov	r0, r5
   87b98:	bd38      	pop	{r3, r4, r5, pc}
   87b9a:	bf00      	nop

00087b9c <_cleanup_r>:
   87b9c:	4901      	ldr	r1, [pc, #4]	; (87ba4 <_cleanup_r+0x8>)
   87b9e:	f000 bbf7 	b.w	88390 <_fwalk_reent>
   87ba2:	bf00      	nop
   87ba4:	00089c59 	.word	0x00089c59

00087ba8 <__sinit>:
   87ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87bac:	4682      	mov	sl, r0
   87bae:	4839      	ldr	r0, [pc, #228]	; (87c94 <__sinit+0xec>)
   87bb0:	f000 fc20 	bl	883f4 <__retarget_lock_acquire_recursive>
   87bb4:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   87bb8:	2c00      	cmp	r4, #0
   87bba:	d166      	bne.n	87c8a <__sinit+0xe2>
   87bbc:	2304      	movs	r3, #4
   87bbe:	2203      	movs	r2, #3
   87bc0:	4935      	ldr	r1, [pc, #212]	; (87c98 <__sinit+0xf0>)
   87bc2:	f8da 5004 	ldr.w	r5, [sl, #4]
   87bc6:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   87bca:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 87c9c <__sinit+0xf4>
   87bce:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 87ca0 <__sinit+0xf8>
   87bd2:	4f34      	ldr	r7, [pc, #208]	; (87ca4 <__sinit+0xfc>)
   87bd4:	4e34      	ldr	r6, [pc, #208]	; (87ca8 <__sinit+0x100>)
   87bd6:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   87bda:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   87bde:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   87be2:	4621      	mov	r1, r4
   87be4:	60eb      	str	r3, [r5, #12]
   87be6:	2208      	movs	r2, #8
   87be8:	e9c5 4400 	strd	r4, r4, [r5]
   87bec:	e9c5 4404 	strd	r4, r4, [r5, #16]
   87bf0:	666c      	str	r4, [r5, #100]	; 0x64
   87bf2:	60ac      	str	r4, [r5, #8]
   87bf4:	61ac      	str	r4, [r5, #24]
   87bf6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87bfa:	f7fc f847 	bl	83c8c <memset>
   87bfe:	e9c5 5907 	strd	r5, r9, [r5, #28]
   87c02:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   87c06:	62ee      	str	r6, [r5, #44]	; 0x2c
   87c08:	f105 0058 	add.w	r0, r5, #88	; 0x58
   87c0c:	f000 fbee 	bl	883ec <__retarget_lock_init_recursive>
   87c10:	f8da 5008 	ldr.w	r5, [sl, #8]
   87c14:	4b25      	ldr	r3, [pc, #148]	; (87cac <__sinit+0x104>)
   87c16:	4621      	mov	r1, r4
   87c18:	60eb      	str	r3, [r5, #12]
   87c1a:	2208      	movs	r2, #8
   87c1c:	e9c5 4400 	strd	r4, r4, [r5]
   87c20:	e9c5 4404 	strd	r4, r4, [r5, #16]
   87c24:	666c      	str	r4, [r5, #100]	; 0x64
   87c26:	60ac      	str	r4, [r5, #8]
   87c28:	61ac      	str	r4, [r5, #24]
   87c2a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87c2e:	f7fc f82d 	bl	83c8c <memset>
   87c32:	e9c5 5907 	strd	r5, r9, [r5, #28]
   87c36:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   87c3a:	62ee      	str	r6, [r5, #44]	; 0x2c
   87c3c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   87c40:	f000 fbd4 	bl	883ec <__retarget_lock_init_recursive>
   87c44:	f8da 500c 	ldr.w	r5, [sl, #12]
   87c48:	4b19      	ldr	r3, [pc, #100]	; (87cb0 <__sinit+0x108>)
   87c4a:	4621      	mov	r1, r4
   87c4c:	60eb      	str	r3, [r5, #12]
   87c4e:	2208      	movs	r2, #8
   87c50:	e9c5 4400 	strd	r4, r4, [r5]
   87c54:	e9c5 4404 	strd	r4, r4, [r5, #16]
   87c58:	666c      	str	r4, [r5, #100]	; 0x64
   87c5a:	60ac      	str	r4, [r5, #8]
   87c5c:	61ac      	str	r4, [r5, #24]
   87c5e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87c62:	f7fc f813 	bl	83c8c <memset>
   87c66:	f105 0058 	add.w	r0, r5, #88	; 0x58
   87c6a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   87c6e:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   87c72:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   87c76:	f000 fbb9 	bl	883ec <__retarget_lock_init_recursive>
   87c7a:	2301      	movs	r3, #1
   87c7c:	4805      	ldr	r0, [pc, #20]	; (87c94 <__sinit+0xec>)
   87c7e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   87c82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87c86:	f000 bbb7 	b.w	883f8 <__retarget_lock_release_recursive>
   87c8a:	4802      	ldr	r0, [pc, #8]	; (87c94 <__sinit+0xec>)
   87c8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87c90:	f000 bbb2 	b.w	883f8 <__retarget_lock_release_recursive>
   87c94:	2000372c 	.word	0x2000372c
   87c98:	00087b9d 	.word	0x00087b9d
   87c9c:	00089829 	.word	0x00089829
   87ca0:	0008984d 	.word	0x0008984d
   87ca4:	0008988d 	.word	0x0008988d
   87ca8:	000898ad 	.word	0x000898ad
   87cac:	00010009 	.word	0x00010009
   87cb0:	00020012 	.word	0x00020012

00087cb4 <__sfp_lock_acquire>:
   87cb4:	4801      	ldr	r0, [pc, #4]	; (87cbc <__sfp_lock_acquire+0x8>)
   87cb6:	f000 bb9d 	b.w	883f4 <__retarget_lock_acquire_recursive>
   87cba:	bf00      	nop
   87cbc:	20003728 	.word	0x20003728

00087cc0 <__sfp_lock_release>:
   87cc0:	4801      	ldr	r0, [pc, #4]	; (87cc8 <__sfp_lock_release+0x8>)
   87cc2:	f000 bb99 	b.w	883f8 <__retarget_lock_release_recursive>
   87cc6:	bf00      	nop
   87cc8:	20003728 	.word	0x20003728

00087ccc <__libc_fini_array>:
   87ccc:	b538      	push	{r3, r4, r5, lr}
   87cce:	4b08      	ldr	r3, [pc, #32]	; (87cf0 <__libc_fini_array+0x24>)
   87cd0:	4d08      	ldr	r5, [pc, #32]	; (87cf4 <__libc_fini_array+0x28>)
   87cd2:	1b5b      	subs	r3, r3, r5
   87cd4:	109c      	asrs	r4, r3, #2
   87cd6:	d007      	beq.n	87ce8 <__libc_fini_array+0x1c>
   87cd8:	3b04      	subs	r3, #4
   87cda:	441d      	add	r5, r3
   87cdc:	3c01      	subs	r4, #1
   87cde:	f855 3904 	ldr.w	r3, [r5], #-4
   87ce2:	4798      	blx	r3
   87ce4:	2c00      	cmp	r4, #0
   87ce6:	d1f9      	bne.n	87cdc <__libc_fini_array+0x10>
   87ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87cec:	f003 b97e 	b.w	8afec <_fini>
   87cf0:	0008affc 	.word	0x0008affc
   87cf4:	0008aff8 	.word	0x0008aff8

00087cf8 <__fputwc>:
   87cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87cfc:	b083      	sub	sp, #12
   87cfe:	4607      	mov	r7, r0
   87d00:	4688      	mov	r8, r1
   87d02:	4614      	mov	r4, r2
   87d04:	f000 fb68 	bl	883d8 <__locale_mb_cur_max>
   87d08:	2801      	cmp	r0, #1
   87d0a:	d103      	bne.n	87d14 <__fputwc+0x1c>
   87d0c:	f108 33ff 	add.w	r3, r8, #4294967295
   87d10:	2bfe      	cmp	r3, #254	; 0xfe
   87d12:	d933      	bls.n	87d7c <__fputwc+0x84>
   87d14:	4642      	mov	r2, r8
   87d16:	4638      	mov	r0, r7
   87d18:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   87d1c:	a901      	add	r1, sp, #4
   87d1e:	f001 fe9f 	bl	89a60 <_wcrtomb_r>
   87d22:	1c42      	adds	r2, r0, #1
   87d24:	4606      	mov	r6, r0
   87d26:	d02f      	beq.n	87d88 <__fputwc+0x90>
   87d28:	b318      	cbz	r0, 87d72 <__fputwc+0x7a>
   87d2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   87d2e:	2500      	movs	r5, #0
   87d30:	f10d 0905 	add.w	r9, sp, #5
   87d34:	e008      	b.n	87d48 <__fputwc+0x50>
   87d36:	6823      	ldr	r3, [r4, #0]
   87d38:	1c5a      	adds	r2, r3, #1
   87d3a:	6022      	str	r2, [r4, #0]
   87d3c:	7019      	strb	r1, [r3, #0]
   87d3e:	3501      	adds	r5, #1
   87d40:	42b5      	cmp	r5, r6
   87d42:	d216      	bcs.n	87d72 <__fputwc+0x7a>
   87d44:	f819 1b01 	ldrb.w	r1, [r9], #1
   87d48:	68a3      	ldr	r3, [r4, #8]
   87d4a:	3b01      	subs	r3, #1
   87d4c:	2b00      	cmp	r3, #0
   87d4e:	60a3      	str	r3, [r4, #8]
   87d50:	daf1      	bge.n	87d36 <__fputwc+0x3e>
   87d52:	69a2      	ldr	r2, [r4, #24]
   87d54:	4293      	cmp	r3, r2
   87d56:	db01      	blt.n	87d5c <__fputwc+0x64>
   87d58:	290a      	cmp	r1, #10
   87d5a:	d1ec      	bne.n	87d36 <__fputwc+0x3e>
   87d5c:	4622      	mov	r2, r4
   87d5e:	4638      	mov	r0, r7
   87d60:	f001 fe26 	bl	899b0 <__swbuf_r>
   87d64:	1c43      	adds	r3, r0, #1
   87d66:	d1ea      	bne.n	87d3e <__fputwc+0x46>
   87d68:	4606      	mov	r6, r0
   87d6a:	4630      	mov	r0, r6
   87d6c:	b003      	add	sp, #12
   87d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87d72:	4646      	mov	r6, r8
   87d74:	4630      	mov	r0, r6
   87d76:	b003      	add	sp, #12
   87d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87d7c:	fa5f f188 	uxtb.w	r1, r8
   87d80:	4606      	mov	r6, r0
   87d82:	f88d 1004 	strb.w	r1, [sp, #4]
   87d86:	e7d2      	b.n	87d2e <__fputwc+0x36>
   87d88:	4630      	mov	r0, r6
   87d8a:	89a3      	ldrh	r3, [r4, #12]
   87d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87d90:	81a3      	strh	r3, [r4, #12]
   87d92:	b003      	add	sp, #12
   87d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00087d98 <_fputwc_r>:
   87d98:	b530      	push	{r4, r5, lr}
   87d9a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   87d9c:	4614      	mov	r4, r2
   87d9e:	f013 0f01 	tst.w	r3, #1
   87da2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   87da6:	4605      	mov	r5, r0
   87da8:	b083      	sub	sp, #12
   87daa:	b29a      	uxth	r2, r3
   87dac:	d101      	bne.n	87db2 <_fputwc_r+0x1a>
   87dae:	0598      	lsls	r0, r3, #22
   87db0:	d51c      	bpl.n	87dec <_fputwc_r+0x54>
   87db2:	0490      	lsls	r0, r2, #18
   87db4:	d406      	bmi.n	87dc4 <_fputwc_r+0x2c>
   87db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   87db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   87dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   87dc0:	81a3      	strh	r3, [r4, #12]
   87dc2:	6662      	str	r2, [r4, #100]	; 0x64
   87dc4:	4622      	mov	r2, r4
   87dc6:	4628      	mov	r0, r5
   87dc8:	f7ff ff96 	bl	87cf8 <__fputwc>
   87dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87dce:	4605      	mov	r5, r0
   87dd0:	07da      	lsls	r2, r3, #31
   87dd2:	d402      	bmi.n	87dda <_fputwc_r+0x42>
   87dd4:	89a3      	ldrh	r3, [r4, #12]
   87dd6:	059b      	lsls	r3, r3, #22
   87dd8:	d502      	bpl.n	87de0 <_fputwc_r+0x48>
   87dda:	4628      	mov	r0, r5
   87ddc:	b003      	add	sp, #12
   87dde:	bd30      	pop	{r4, r5, pc}
   87de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87de2:	f000 fb09 	bl	883f8 <__retarget_lock_release_recursive>
   87de6:	4628      	mov	r0, r5
   87de8:	b003      	add	sp, #12
   87dea:	bd30      	pop	{r4, r5, pc}
   87dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87dee:	9101      	str	r1, [sp, #4]
   87df0:	f000 fb00 	bl	883f4 <__retarget_lock_acquire_recursive>
   87df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87df8:	9901      	ldr	r1, [sp, #4]
   87dfa:	b29a      	uxth	r2, r3
   87dfc:	e7d9      	b.n	87db2 <_fputwc_r+0x1a>
   87dfe:	bf00      	nop

00087e00 <_malloc_trim_r>:
   87e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87e02:	460c      	mov	r4, r1
   87e04:	4f23      	ldr	r7, [pc, #140]	; (87e94 <_malloc_trim_r+0x94>)
   87e06:	4606      	mov	r6, r0
   87e08:	f000 ff26 	bl	88c58 <__malloc_lock>
   87e0c:	68bb      	ldr	r3, [r7, #8]
   87e0e:	685d      	ldr	r5, [r3, #4]
   87e10:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   87e14:	f025 0503 	bic.w	r5, r5, #3
   87e18:	330f      	adds	r3, #15
   87e1a:	442b      	add	r3, r5
   87e1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   87e20:	f023 030f 	bic.w	r3, r3, #15
   87e24:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   87e28:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   87e2c:	db07      	blt.n	87e3e <_malloc_trim_r+0x3e>
   87e2e:	2100      	movs	r1, #0
   87e30:	4630      	mov	r0, r6
   87e32:	f001 fce7 	bl	89804 <_sbrk_r>
   87e36:	68bb      	ldr	r3, [r7, #8]
   87e38:	442b      	add	r3, r5
   87e3a:	4298      	cmp	r0, r3
   87e3c:	d004      	beq.n	87e48 <_malloc_trim_r+0x48>
   87e3e:	4630      	mov	r0, r6
   87e40:	f000 ff10 	bl	88c64 <__malloc_unlock>
   87e44:	2000      	movs	r0, #0
   87e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87e48:	4630      	mov	r0, r6
   87e4a:	4261      	negs	r1, r4
   87e4c:	f001 fcda 	bl	89804 <_sbrk_r>
   87e50:	3001      	adds	r0, #1
   87e52:	d00d      	beq.n	87e70 <_malloc_trim_r+0x70>
   87e54:	4a10      	ldr	r2, [pc, #64]	; (87e98 <_malloc_trim_r+0x98>)
   87e56:	68bb      	ldr	r3, [r7, #8]
   87e58:	1b2d      	subs	r5, r5, r4
   87e5a:	f045 0501 	orr.w	r5, r5, #1
   87e5e:	605d      	str	r5, [r3, #4]
   87e60:	6813      	ldr	r3, [r2, #0]
   87e62:	4630      	mov	r0, r6
   87e64:	1b1b      	subs	r3, r3, r4
   87e66:	6013      	str	r3, [r2, #0]
   87e68:	f000 fefc 	bl	88c64 <__malloc_unlock>
   87e6c:	2001      	movs	r0, #1
   87e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87e70:	2100      	movs	r1, #0
   87e72:	4630      	mov	r0, r6
   87e74:	f001 fcc6 	bl	89804 <_sbrk_r>
   87e78:	68ba      	ldr	r2, [r7, #8]
   87e7a:	1a83      	subs	r3, r0, r2
   87e7c:	2b0f      	cmp	r3, #15
   87e7e:	ddde      	ble.n	87e3e <_malloc_trim_r+0x3e>
   87e80:	f043 0301 	orr.w	r3, r3, #1
   87e84:	6053      	str	r3, [r2, #4]
   87e86:	4b05      	ldr	r3, [pc, #20]	; (87e9c <_malloc_trim_r+0x9c>)
   87e88:	4903      	ldr	r1, [pc, #12]	; (87e98 <_malloc_trim_r+0x98>)
   87e8a:	681b      	ldr	r3, [r3, #0]
   87e8c:	1ac0      	subs	r0, r0, r3
   87e8e:	6008      	str	r0, [r1, #0]
   87e90:	e7d5      	b.n	87e3e <_malloc_trim_r+0x3e>
   87e92:	bf00      	nop
   87e94:	20000998 	.word	0x20000998
   87e98:	20003730 	.word	0x20003730
   87e9c:	20000da0 	.word	0x20000da0

00087ea0 <_free_r>:
   87ea0:	2900      	cmp	r1, #0
   87ea2:	d05e      	beq.n	87f62 <_free_r+0xc2>
   87ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87ea6:	460c      	mov	r4, r1
   87ea8:	4606      	mov	r6, r0
   87eaa:	f000 fed5 	bl	88c58 <__malloc_lock>
   87eae:	f854 2c04 	ldr.w	r2, [r4, #-4]
   87eb2:	4f78      	ldr	r7, [pc, #480]	; (88094 <_free_r+0x1f4>)
   87eb4:	f1a4 0508 	sub.w	r5, r4, #8
   87eb8:	f022 0101 	bic.w	r1, r2, #1
   87ebc:	1868      	adds	r0, r5, r1
   87ebe:	f8d7 c008 	ldr.w	ip, [r7, #8]
   87ec2:	6843      	ldr	r3, [r0, #4]
   87ec4:	4584      	cmp	ip, r0
   87ec6:	f023 0303 	bic.w	r3, r3, #3
   87eca:	f000 8087 	beq.w	87fdc <_free_r+0x13c>
   87ece:	07d2      	lsls	r2, r2, #31
   87ed0:	6043      	str	r3, [r0, #4]
   87ed2:	d434      	bmi.n	87f3e <_free_r+0x9e>
   87ed4:	f854 2c08 	ldr.w	r2, [r4, #-8]
   87ed8:	f107 0408 	add.w	r4, r7, #8
   87edc:	1aad      	subs	r5, r5, r2
   87ede:	4411      	add	r1, r2
   87ee0:	68aa      	ldr	r2, [r5, #8]
   87ee2:	42a2      	cmp	r2, r4
   87ee4:	d068      	beq.n	87fb8 <_free_r+0x118>
   87ee6:	eb00 0c03 	add.w	ip, r0, r3
   87eea:	f8dc e004 	ldr.w	lr, [ip, #4]
   87eee:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   87ef2:	f01e 0f01 	tst.w	lr, #1
   87ef6:	f8c2 c00c 	str.w	ip, [r2, #12]
   87efa:	f8cc 2008 	str.w	r2, [ip, #8]
   87efe:	f000 8091 	beq.w	88024 <_free_r+0x184>
   87f02:	f041 0301 	orr.w	r3, r1, #1
   87f06:	606b      	str	r3, [r5, #4]
   87f08:	6001      	str	r1, [r0, #0]
   87f0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   87f0e:	d231      	bcs.n	87f74 <_free_r+0xd4>
   87f10:	094a      	lsrs	r2, r1, #5
   87f12:	08cb      	lsrs	r3, r1, #3
   87f14:	2101      	movs	r1, #1
   87f16:	4091      	lsls	r1, r2
   87f18:	687a      	ldr	r2, [r7, #4]
   87f1a:	3301      	adds	r3, #1
   87f1c:	4311      	orrs	r1, r2
   87f1e:	6079      	str	r1, [r7, #4]
   87f20:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   87f24:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   87f28:	3a08      	subs	r2, #8
   87f2a:	e9c5 1202 	strd	r1, r2, [r5, #8]
   87f2e:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   87f32:	60cd      	str	r5, [r1, #12]
   87f34:	4630      	mov	r0, r6
   87f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   87f3a:	f000 be93 	b.w	88c64 <__malloc_unlock>
   87f3e:	18c2      	adds	r2, r0, r3
   87f40:	6852      	ldr	r2, [r2, #4]
   87f42:	07d2      	lsls	r2, r2, #31
   87f44:	d40e      	bmi.n	87f64 <_free_r+0xc4>
   87f46:	4419      	add	r1, r3
   87f48:	f107 0408 	add.w	r4, r7, #8
   87f4c:	6883      	ldr	r3, [r0, #8]
   87f4e:	42a3      	cmp	r3, r4
   87f50:	d070      	beq.n	88034 <_free_r+0x194>
   87f52:	68c2      	ldr	r2, [r0, #12]
   87f54:	60da      	str	r2, [r3, #12]
   87f56:	6093      	str	r3, [r2, #8]
   87f58:	f041 0301 	orr.w	r3, r1, #1
   87f5c:	606b      	str	r3, [r5, #4]
   87f5e:	5069      	str	r1, [r5, r1]
   87f60:	e7d3      	b.n	87f0a <_free_r+0x6a>
   87f62:	4770      	bx	lr
   87f64:	f041 0301 	orr.w	r3, r1, #1
   87f68:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   87f6c:	f844 3c04 	str.w	r3, [r4, #-4]
   87f70:	6001      	str	r1, [r0, #0]
   87f72:	d3cd      	bcc.n	87f10 <_free_r+0x70>
   87f74:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   87f78:	ea4f 2351 	mov.w	r3, r1, lsr #9
   87f7c:	d247      	bcs.n	8800e <_free_r+0x16e>
   87f7e:	098b      	lsrs	r3, r1, #6
   87f80:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87f84:	f103 0238 	add.w	r2, r3, #56	; 0x38
   87f88:	00c3      	lsls	r3, r0, #3
   87f8a:	18f8      	adds	r0, r7, r3
   87f8c:	58fb      	ldr	r3, [r7, r3]
   87f8e:	3808      	subs	r0, #8
   87f90:	4298      	cmp	r0, r3
   87f92:	d058      	beq.n	88046 <_free_r+0x1a6>
   87f94:	685a      	ldr	r2, [r3, #4]
   87f96:	f022 0203 	bic.w	r2, r2, #3
   87f9a:	428a      	cmp	r2, r1
   87f9c:	d902      	bls.n	87fa4 <_free_r+0x104>
   87f9e:	689b      	ldr	r3, [r3, #8]
   87fa0:	4298      	cmp	r0, r3
   87fa2:	d1f7      	bne.n	87f94 <_free_r+0xf4>
   87fa4:	68d8      	ldr	r0, [r3, #12]
   87fa6:	e9c5 3002 	strd	r3, r0, [r5, #8]
   87faa:	6085      	str	r5, [r0, #8]
   87fac:	4630      	mov	r0, r6
   87fae:	60dd      	str	r5, [r3, #12]
   87fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   87fb4:	f000 be56 	b.w	88c64 <__malloc_unlock>
   87fb8:	18c2      	adds	r2, r0, r3
   87fba:	6852      	ldr	r2, [r2, #4]
   87fbc:	07d2      	lsls	r2, r2, #31
   87fbe:	d463      	bmi.n	88088 <_free_r+0x1e8>
   87fc0:	440b      	add	r3, r1
   87fc2:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   87fc6:	60ca      	str	r2, [r1, #12]
   87fc8:	6091      	str	r1, [r2, #8]
   87fca:	f043 0201 	orr.w	r2, r3, #1
   87fce:	606a      	str	r2, [r5, #4]
   87fd0:	4630      	mov	r0, r6
   87fd2:	50eb      	str	r3, [r5, r3]
   87fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   87fd8:	f000 be44 	b.w	88c64 <__malloc_unlock>
   87fdc:	440b      	add	r3, r1
   87fde:	07d1      	lsls	r1, r2, #31
   87fe0:	d407      	bmi.n	87ff2 <_free_r+0x152>
   87fe2:	f854 2c08 	ldr.w	r2, [r4, #-8]
   87fe6:	1aad      	subs	r5, r5, r2
   87fe8:	4413      	add	r3, r2
   87fea:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   87fee:	60ca      	str	r2, [r1, #12]
   87ff0:	6091      	str	r1, [r2, #8]
   87ff2:	f043 0201 	orr.w	r2, r3, #1
   87ff6:	606a      	str	r2, [r5, #4]
   87ff8:	4a27      	ldr	r2, [pc, #156]	; (88098 <_free_r+0x1f8>)
   87ffa:	60bd      	str	r5, [r7, #8]
   87ffc:	6812      	ldr	r2, [r2, #0]
   87ffe:	429a      	cmp	r2, r3
   88000:	d898      	bhi.n	87f34 <_free_r+0x94>
   88002:	4b26      	ldr	r3, [pc, #152]	; (8809c <_free_r+0x1fc>)
   88004:	4630      	mov	r0, r6
   88006:	6819      	ldr	r1, [r3, #0]
   88008:	f7ff fefa 	bl	87e00 <_malloc_trim_r>
   8800c:	e792      	b.n	87f34 <_free_r+0x94>
   8800e:	2b14      	cmp	r3, #20
   88010:	d90a      	bls.n	88028 <_free_r+0x188>
   88012:	2b54      	cmp	r3, #84	; 0x54
   88014:	d81f      	bhi.n	88056 <_free_r+0x1b6>
   88016:	0b0b      	lsrs	r3, r1, #12
   88018:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8801c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   88020:	00c3      	lsls	r3, r0, #3
   88022:	e7b2      	b.n	87f8a <_free_r+0xea>
   88024:	4419      	add	r1, r3
   88026:	e791      	b.n	87f4c <_free_r+0xac>
   88028:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8802c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   88030:	00c3      	lsls	r3, r0, #3
   88032:	e7aa      	b.n	87f8a <_free_r+0xea>
   88034:	f041 0301 	orr.w	r3, r1, #1
   88038:	e9c7 5504 	strd	r5, r5, [r7, #16]
   8803c:	e9c5 4402 	strd	r4, r4, [r5, #8]
   88040:	606b      	str	r3, [r5, #4]
   88042:	5069      	str	r1, [r5, r1]
   88044:	e776      	b.n	87f34 <_free_r+0x94>
   88046:	2101      	movs	r1, #1
   88048:	1092      	asrs	r2, r2, #2
   8804a:	fa01 f202 	lsl.w	r2, r1, r2
   8804e:	6879      	ldr	r1, [r7, #4]
   88050:	430a      	orrs	r2, r1
   88052:	607a      	str	r2, [r7, #4]
   88054:	e7a7      	b.n	87fa6 <_free_r+0x106>
   88056:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8805a:	d806      	bhi.n	8806a <_free_r+0x1ca>
   8805c:	0bcb      	lsrs	r3, r1, #15
   8805e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88062:	f103 0277 	add.w	r2, r3, #119	; 0x77
   88066:	00c3      	lsls	r3, r0, #3
   88068:	e78f      	b.n	87f8a <_free_r+0xea>
   8806a:	f240 5254 	movw	r2, #1364	; 0x554
   8806e:	4293      	cmp	r3, r2
   88070:	d806      	bhi.n	88080 <_free_r+0x1e0>
   88072:	0c8b      	lsrs	r3, r1, #18
   88074:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88078:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8807c:	00c3      	lsls	r3, r0, #3
   8807e:	e784      	b.n	87f8a <_free_r+0xea>
   88080:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   88084:	227e      	movs	r2, #126	; 0x7e
   88086:	e780      	b.n	87f8a <_free_r+0xea>
   88088:	f041 0301 	orr.w	r3, r1, #1
   8808c:	606b      	str	r3, [r5, #4]
   8808e:	6001      	str	r1, [r0, #0]
   88090:	e750      	b.n	87f34 <_free_r+0x94>
   88092:	bf00      	nop
   88094:	20000998 	.word	0x20000998
   88098:	20000da4 	.word	0x20000da4
   8809c:	20003760 	.word	0x20003760

000880a0 <__sfvwrite_r>:
   880a0:	6893      	ldr	r3, [r2, #8]
   880a2:	2b00      	cmp	r3, #0
   880a4:	f000 80b7 	beq.w	88216 <__sfvwrite_r+0x176>
   880a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   880ac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   880b0:	460c      	mov	r4, r1
   880b2:	0719      	lsls	r1, r3, #28
   880b4:	4680      	mov	r8, r0
   880b6:	4617      	mov	r7, r2
   880b8:	b083      	sub	sp, #12
   880ba:	b298      	uxth	r0, r3
   880bc:	d525      	bpl.n	8810a <__sfvwrite_r+0x6a>
   880be:	6923      	ldr	r3, [r4, #16]
   880c0:	b31b      	cbz	r3, 8810a <__sfvwrite_r+0x6a>
   880c2:	f010 0302 	ands.w	r3, r0, #2
   880c6:	683d      	ldr	r5, [r7, #0]
   880c8:	d02d      	beq.n	88126 <__sfvwrite_r+0x86>
   880ca:	f04f 0b00 	mov.w	fp, #0
   880ce:	465e      	mov	r6, fp
   880d0:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8838c <__sfvwrite_r+0x2ec>
   880d4:	2e00      	cmp	r6, #0
   880d6:	f000 808b 	beq.w	881f0 <__sfvwrite_r+0x150>
   880da:	4556      	cmp	r6, sl
   880dc:	4633      	mov	r3, r6
   880de:	465a      	mov	r2, fp
   880e0:	bf28      	it	cs
   880e2:	4653      	movcs	r3, sl
   880e4:	4640      	mov	r0, r8
   880e6:	69e1      	ldr	r1, [r4, #28]
   880e8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   880ec:	47e0      	blx	ip
   880ee:	2800      	cmp	r0, #0
   880f0:	f340 8087 	ble.w	88202 <__sfvwrite_r+0x162>
   880f4:	68bb      	ldr	r3, [r7, #8]
   880f6:	4483      	add	fp, r0
   880f8:	1a1b      	subs	r3, r3, r0
   880fa:	1a36      	subs	r6, r6, r0
   880fc:	60bb      	str	r3, [r7, #8]
   880fe:	2b00      	cmp	r3, #0
   88100:	d1e8      	bne.n	880d4 <__sfvwrite_r+0x34>
   88102:	2000      	movs	r0, #0
   88104:	b003      	add	sp, #12
   88106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8810a:	4621      	mov	r1, r4
   8810c:	4640      	mov	r0, r8
   8810e:	f7fe fc0f 	bl	86930 <__swsetup_r>
   88112:	2800      	cmp	r0, #0
   88114:	f040 8136 	bne.w	88384 <__sfvwrite_r+0x2e4>
   88118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8811c:	683d      	ldr	r5, [r7, #0]
   8811e:	b298      	uxth	r0, r3
   88120:	f010 0302 	ands.w	r3, r0, #2
   88124:	d1d1      	bne.n	880ca <__sfvwrite_r+0x2a>
   88126:	f010 0901 	ands.w	r9, r0, #1
   8812a:	d176      	bne.n	8821a <__sfvwrite_r+0x17a>
   8812c:	464e      	mov	r6, r9
   8812e:	2e00      	cmp	r6, #0
   88130:	d05a      	beq.n	881e8 <__sfvwrite_r+0x148>
   88132:	0582      	lsls	r2, r0, #22
   88134:	f8d4 b008 	ldr.w	fp, [r4, #8]
   88138:	f140 80b5 	bpl.w	882a6 <__sfvwrite_r+0x206>
   8813c:	45b3      	cmp	fp, r6
   8813e:	465a      	mov	r2, fp
   88140:	f200 80cd 	bhi.w	882de <__sfvwrite_r+0x23e>
   88144:	f410 6f90 	tst.w	r0, #1152	; 0x480
   88148:	f000 80cb 	beq.w	882e2 <__sfvwrite_r+0x242>
   8814c:	6823      	ldr	r3, [r4, #0]
   8814e:	6921      	ldr	r1, [r4, #16]
   88150:	eba3 0b01 	sub.w	fp, r3, r1
   88154:	6963      	ldr	r3, [r4, #20]
   88156:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8815a:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8815e:	f10b 0301 	add.w	r3, fp, #1
   88162:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   88166:	4433      	add	r3, r6
   88168:	4553      	cmp	r3, sl
   8816a:	4652      	mov	r2, sl
   8816c:	bf84      	itt	hi
   8816e:	469a      	movhi	sl, r3
   88170:	4652      	movhi	r2, sl
   88172:	0543      	lsls	r3, r0, #21
   88174:	f140 80ea 	bpl.w	8834c <__sfvwrite_r+0x2ac>
   88178:	4611      	mov	r1, r2
   8817a:	4640      	mov	r0, r8
   8817c:	f000 f9e6 	bl	8854c <_malloc_r>
   88180:	2800      	cmp	r0, #0
   88182:	f000 80f9 	beq.w	88378 <__sfvwrite_r+0x2d8>
   88186:	465a      	mov	r2, fp
   88188:	6921      	ldr	r1, [r4, #16]
   8818a:	9001      	str	r0, [sp, #4]
   8818c:	f7fb fd08 	bl	83ba0 <memcpy>
   88190:	89a2      	ldrh	r2, [r4, #12]
   88192:	9b01      	ldr	r3, [sp, #4]
   88194:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8819c:	81a2      	strh	r2, [r4, #12]
   8819e:	eb03 000b 	add.w	r0, r3, fp
   881a2:	6123      	str	r3, [r4, #16]
   881a4:	4632      	mov	r2, r6
   881a6:	ebaa 030b 	sub.w	r3, sl, fp
   881aa:	46b3      	mov	fp, r6
   881ac:	f8c4 a014 	str.w	sl, [r4, #20]
   881b0:	60a3      	str	r3, [r4, #8]
   881b2:	6020      	str	r0, [r4, #0]
   881b4:	46b2      	mov	sl, r6
   881b6:	2600      	movs	r6, #0
   881b8:	4649      	mov	r1, r9
   881ba:	9201      	str	r2, [sp, #4]
   881bc:	f000 fcd0 	bl	88b60 <memmove>
   881c0:	68a3      	ldr	r3, [r4, #8]
   881c2:	6821      	ldr	r1, [r4, #0]
   881c4:	9a01      	ldr	r2, [sp, #4]
   881c6:	eba3 030b 	sub.w	r3, r3, fp
   881ca:	440a      	add	r2, r1
   881cc:	60a3      	str	r3, [r4, #8]
   881ce:	6022      	str	r2, [r4, #0]
   881d0:	68b8      	ldr	r0, [r7, #8]
   881d2:	44d1      	add	r9, sl
   881d4:	eba0 000a 	sub.w	r0, r0, sl
   881d8:	60b8      	str	r0, [r7, #8]
   881da:	2800      	cmp	r0, #0
   881dc:	d091      	beq.n	88102 <__sfvwrite_r+0x62>
   881de:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   881e2:	b280      	uxth	r0, r0
   881e4:	2e00      	cmp	r6, #0
   881e6:	d1a4      	bne.n	88132 <__sfvwrite_r+0x92>
   881e8:	e9d5 9600 	ldrd	r9, r6, [r5]
   881ec:	3508      	adds	r5, #8
   881ee:	e79e      	b.n	8812e <__sfvwrite_r+0x8e>
   881f0:	e9d5 b600 	ldrd	fp, r6, [r5]
   881f4:	3508      	adds	r5, #8
   881f6:	e76d      	b.n	880d4 <__sfvwrite_r+0x34>
   881f8:	4621      	mov	r1, r4
   881fa:	4640      	mov	r0, r8
   881fc:	f7ff fca0 	bl	87b40 <_fflush_r>
   88200:	b380      	cbz	r0, 88264 <__sfvwrite_r+0x1c4>
   88202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88206:	f04f 30ff 	mov.w	r0, #4294967295
   8820a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8820e:	81a3      	strh	r3, [r4, #12]
   88210:	b003      	add	sp, #12
   88212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88216:	2000      	movs	r0, #0
   88218:	4770      	bx	lr
   8821a:	461e      	mov	r6, r3
   8821c:	46aa      	mov	sl, r5
   8821e:	4699      	mov	r9, r3
   88220:	4618      	mov	r0, r3
   88222:	461d      	mov	r5, r3
   88224:	b356      	cbz	r6, 8827c <__sfvwrite_r+0x1dc>
   88226:	2800      	cmp	r0, #0
   88228:	d032      	beq.n	88290 <__sfvwrite_r+0x1f0>
   8822a:	464a      	mov	r2, r9
   8822c:	6820      	ldr	r0, [r4, #0]
   8822e:	6921      	ldr	r1, [r4, #16]
   88230:	42b2      	cmp	r2, r6
   88232:	bf28      	it	cs
   88234:	4632      	movcs	r2, r6
   88236:	4288      	cmp	r0, r1
   88238:	6963      	ldr	r3, [r4, #20]
   8823a:	d904      	bls.n	88246 <__sfvwrite_r+0x1a6>
   8823c:	68a1      	ldr	r1, [r4, #8]
   8823e:	eb03 0b01 	add.w	fp, r3, r1
   88242:	455a      	cmp	r2, fp
   88244:	dc74      	bgt.n	88330 <__sfvwrite_r+0x290>
   88246:	4293      	cmp	r3, r2
   88248:	dc65      	bgt.n	88316 <__sfvwrite_r+0x276>
   8824a:	462a      	mov	r2, r5
   8824c:	4640      	mov	r0, r8
   8824e:	69e1      	ldr	r1, [r4, #28]
   88250:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   88254:	47e0      	blx	ip
   88256:	f1b0 0b00 	subs.w	fp, r0, #0
   8825a:	ddd2      	ble.n	88202 <__sfvwrite_r+0x162>
   8825c:	ebb9 090b 	subs.w	r9, r9, fp
   88260:	d0ca      	beq.n	881f8 <__sfvwrite_r+0x158>
   88262:	2001      	movs	r0, #1
   88264:	68bb      	ldr	r3, [r7, #8]
   88266:	445d      	add	r5, fp
   88268:	eba3 030b 	sub.w	r3, r3, fp
   8826c:	eba6 060b 	sub.w	r6, r6, fp
   88270:	60bb      	str	r3, [r7, #8]
   88272:	2b00      	cmp	r3, #0
   88274:	f43f af45 	beq.w	88102 <__sfvwrite_r+0x62>
   88278:	2e00      	cmp	r6, #0
   8827a:	d1d4      	bne.n	88226 <__sfvwrite_r+0x186>
   8827c:	f10a 0308 	add.w	r3, sl, #8
   88280:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88284:	469a      	mov	sl, r3
   88286:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8828a:	3308      	adds	r3, #8
   8828c:	2e00      	cmp	r6, #0
   8828e:	d0f7      	beq.n	88280 <__sfvwrite_r+0x1e0>
   88290:	4632      	mov	r2, r6
   88292:	210a      	movs	r1, #10
   88294:	4628      	mov	r0, r5
   88296:	f000 fc1b 	bl	88ad0 <memchr>
   8829a:	2800      	cmp	r0, #0
   8829c:	d069      	beq.n	88372 <__sfvwrite_r+0x2d2>
   8829e:	3001      	adds	r0, #1
   882a0:	eba0 0905 	sub.w	r9, r0, r5
   882a4:	e7c1      	b.n	8822a <__sfvwrite_r+0x18a>
   882a6:	6820      	ldr	r0, [r4, #0]
   882a8:	6923      	ldr	r3, [r4, #16]
   882aa:	4298      	cmp	r0, r3
   882ac:	d81b      	bhi.n	882e6 <__sfvwrite_r+0x246>
   882ae:	6963      	ldr	r3, [r4, #20]
   882b0:	42b3      	cmp	r3, r6
   882b2:	d818      	bhi.n	882e6 <__sfvwrite_r+0x246>
   882b4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   882b8:	45b4      	cmp	ip, r6
   882ba:	bf28      	it	cs
   882bc:	46b4      	movcs	ip, r6
   882be:	fb9c fcf3 	sdiv	ip, ip, r3
   882c2:	464a      	mov	r2, r9
   882c4:	fb03 f30c 	mul.w	r3, r3, ip
   882c8:	4640      	mov	r0, r8
   882ca:	69e1      	ldr	r1, [r4, #28]
   882cc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   882d0:	47e0      	blx	ip
   882d2:	f1b0 0a00 	subs.w	sl, r0, #0
   882d6:	dd94      	ble.n	88202 <__sfvwrite_r+0x162>
   882d8:	eba6 060a 	sub.w	r6, r6, sl
   882dc:	e778      	b.n	881d0 <__sfvwrite_r+0x130>
   882de:	46b3      	mov	fp, r6
   882e0:	4632      	mov	r2, r6
   882e2:	6820      	ldr	r0, [r4, #0]
   882e4:	e766      	b.n	881b4 <__sfvwrite_r+0x114>
   882e6:	45b3      	cmp	fp, r6
   882e8:	46da      	mov	sl, fp
   882ea:	bf28      	it	cs
   882ec:	46b2      	movcs	sl, r6
   882ee:	4649      	mov	r1, r9
   882f0:	4652      	mov	r2, sl
   882f2:	f000 fc35 	bl	88b60 <memmove>
   882f6:	68a3      	ldr	r3, [r4, #8]
   882f8:	6822      	ldr	r2, [r4, #0]
   882fa:	eba3 030a 	sub.w	r3, r3, sl
   882fe:	4452      	add	r2, sl
   88300:	60a3      	str	r3, [r4, #8]
   88302:	6022      	str	r2, [r4, #0]
   88304:	2b00      	cmp	r3, #0
   88306:	d1e7      	bne.n	882d8 <__sfvwrite_r+0x238>
   88308:	4621      	mov	r1, r4
   8830a:	4640      	mov	r0, r8
   8830c:	f7ff fc18 	bl	87b40 <_fflush_r>
   88310:	2800      	cmp	r0, #0
   88312:	d0e1      	beq.n	882d8 <__sfvwrite_r+0x238>
   88314:	e775      	b.n	88202 <__sfvwrite_r+0x162>
   88316:	4629      	mov	r1, r5
   88318:	4693      	mov	fp, r2
   8831a:	9201      	str	r2, [sp, #4]
   8831c:	f000 fc20 	bl	88b60 <memmove>
   88320:	68a3      	ldr	r3, [r4, #8]
   88322:	9a01      	ldr	r2, [sp, #4]
   88324:	1a9b      	subs	r3, r3, r2
   88326:	60a3      	str	r3, [r4, #8]
   88328:	6823      	ldr	r3, [r4, #0]
   8832a:	441a      	add	r2, r3
   8832c:	6022      	str	r2, [r4, #0]
   8832e:	e795      	b.n	8825c <__sfvwrite_r+0x1bc>
   88330:	4629      	mov	r1, r5
   88332:	465a      	mov	r2, fp
   88334:	f000 fc14 	bl	88b60 <memmove>
   88338:	6823      	ldr	r3, [r4, #0]
   8833a:	4621      	mov	r1, r4
   8833c:	445b      	add	r3, fp
   8833e:	4640      	mov	r0, r8
   88340:	6023      	str	r3, [r4, #0]
   88342:	f7ff fbfd 	bl	87b40 <_fflush_r>
   88346:	2800      	cmp	r0, #0
   88348:	d088      	beq.n	8825c <__sfvwrite_r+0x1bc>
   8834a:	e75a      	b.n	88202 <__sfvwrite_r+0x162>
   8834c:	4640      	mov	r0, r8
   8834e:	f001 f833 	bl	893b8 <_realloc_r>
   88352:	4603      	mov	r3, r0
   88354:	2800      	cmp	r0, #0
   88356:	f47f af22 	bne.w	8819e <__sfvwrite_r+0xfe>
   8835a:	4640      	mov	r0, r8
   8835c:	6921      	ldr	r1, [r4, #16]
   8835e:	f7ff fd9f 	bl	87ea0 <_free_r>
   88362:	220c      	movs	r2, #12
   88364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88368:	f8c8 2000 	str.w	r2, [r8]
   8836c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   88370:	e749      	b.n	88206 <__sfvwrite_r+0x166>
   88372:	1c72      	adds	r2, r6, #1
   88374:	4691      	mov	r9, r2
   88376:	e759      	b.n	8822c <__sfvwrite_r+0x18c>
   88378:	220c      	movs	r2, #12
   8837a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8837e:	f8c8 2000 	str.w	r2, [r8]
   88382:	e740      	b.n	88206 <__sfvwrite_r+0x166>
   88384:	f04f 30ff 	mov.w	r0, #4294967295
   88388:	e6bc      	b.n	88104 <__sfvwrite_r+0x64>
   8838a:	bf00      	nop
   8838c:	7ffffc00 	.word	0x7ffffc00

00088390 <_fwalk_reent>:
   88390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88394:	f04f 0900 	mov.w	r9, #0
   88398:	4607      	mov	r7, r0
   8839a:	4688      	mov	r8, r1
   8839c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   883a0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   883a4:	3d01      	subs	r5, #1
   883a6:	d410      	bmi.n	883ca <_fwalk_reent+0x3a>
   883a8:	89a3      	ldrh	r3, [r4, #12]
   883aa:	3d01      	subs	r5, #1
   883ac:	2b01      	cmp	r3, #1
   883ae:	d908      	bls.n	883c2 <_fwalk_reent+0x32>
   883b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   883b4:	3301      	adds	r3, #1
   883b6:	d004      	beq.n	883c2 <_fwalk_reent+0x32>
   883b8:	4621      	mov	r1, r4
   883ba:	4638      	mov	r0, r7
   883bc:	47c0      	blx	r8
   883be:	ea49 0900 	orr.w	r9, r9, r0
   883c2:	1c6b      	adds	r3, r5, #1
   883c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   883c8:	d1ee      	bne.n	883a8 <_fwalk_reent+0x18>
   883ca:	6836      	ldr	r6, [r6, #0]
   883cc:	2e00      	cmp	r6, #0
   883ce:	d1e7      	bne.n	883a0 <_fwalk_reent+0x10>
   883d0:	4648      	mov	r0, r9
   883d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   883d6:	bf00      	nop

000883d8 <__locale_mb_cur_max>:
   883d8:	4b01      	ldr	r3, [pc, #4]	; (883e0 <__locale_mb_cur_max+0x8>)
   883da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   883de:	4770      	bx	lr
   883e0:	2000082c 	.word	0x2000082c

000883e4 <_localeconv_r>:
   883e4:	4800      	ldr	r0, [pc, #0]	; (883e8 <_localeconv_r+0x4>)
   883e6:	4770      	bx	lr
   883e8:	2000091c 	.word	0x2000091c

000883ec <__retarget_lock_init_recursive>:
   883ec:	4770      	bx	lr
   883ee:	bf00      	nop

000883f0 <__retarget_lock_close_recursive>:
   883f0:	4770      	bx	lr
   883f2:	bf00      	nop

000883f4 <__retarget_lock_acquire_recursive>:
   883f4:	4770      	bx	lr
   883f6:	bf00      	nop

000883f8 <__retarget_lock_release_recursive>:
   883f8:	4770      	bx	lr
   883fa:	bf00      	nop

000883fc <__smakebuf_r>:
   883fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88400:	898b      	ldrh	r3, [r1, #12]
   88402:	460c      	mov	r4, r1
   88404:	0799      	lsls	r1, r3, #30
   88406:	b096      	sub	sp, #88	; 0x58
   88408:	d508      	bpl.n	8841c <__smakebuf_r+0x20>
   8840a:	2201      	movs	r2, #1
   8840c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   88410:	e9c4 3204 	strd	r3, r2, [r4, #16]
   88414:	6023      	str	r3, [r4, #0]
   88416:	b016      	add	sp, #88	; 0x58
   88418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8841c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88420:	4606      	mov	r6, r0
   88422:	2900      	cmp	r1, #0
   88424:	db27      	blt.n	88476 <__smakebuf_r+0x7a>
   88426:	466a      	mov	r2, sp
   88428:	f001 fc90 	bl	89d4c <_fstat_r>
   8842c:	2800      	cmp	r0, #0
   8842e:	db21      	blt.n	88474 <__smakebuf_r+0x78>
   88430:	9d01      	ldr	r5, [sp, #4]
   88432:	f44f 6880 	mov.w	r8, #1024	; 0x400
   88436:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8843a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8843e:	fab5 f585 	clz	r5, r5
   88442:	f44f 6700 	mov.w	r7, #2048	; 0x800
   88446:	096d      	lsrs	r5, r5, #5
   88448:	4641      	mov	r1, r8
   8844a:	4630      	mov	r0, r6
   8844c:	f000 f87e 	bl	8854c <_malloc_r>
   88450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88454:	b1f0      	cbz	r0, 88494 <__smakebuf_r+0x98>
   88456:	4a20      	ldr	r2, [pc, #128]	; (884d8 <__smakebuf_r+0xdc>)
   88458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8845c:	63f2      	str	r2, [r6, #60]	; 0x3c
   8845e:	f8c4 8014 	str.w	r8, [r4, #20]
   88462:	81a3      	strh	r3, [r4, #12]
   88464:	6020      	str	r0, [r4, #0]
   88466:	6120      	str	r0, [r4, #16]
   88468:	bb35      	cbnz	r5, 884b8 <__smakebuf_r+0xbc>
   8846a:	433b      	orrs	r3, r7
   8846c:	81a3      	strh	r3, [r4, #12]
   8846e:	b016      	add	sp, #88	; 0x58
   88470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88474:	89a3      	ldrh	r3, [r4, #12]
   88476:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8847a:	d019      	beq.n	884b0 <__smakebuf_r+0xb4>
   8847c:	f04f 0840 	mov.w	r8, #64	; 0x40
   88480:	4630      	mov	r0, r6
   88482:	4641      	mov	r1, r8
   88484:	2500      	movs	r5, #0
   88486:	f000 f861 	bl	8854c <_malloc_r>
   8848a:	462f      	mov	r7, r5
   8848c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88490:	2800      	cmp	r0, #0
   88492:	d1e0      	bne.n	88456 <__smakebuf_r+0x5a>
   88494:	059a      	lsls	r2, r3, #22
   88496:	d4be      	bmi.n	88416 <__smakebuf_r+0x1a>
   88498:	2101      	movs	r1, #1
   8849a:	f023 0303 	bic.w	r3, r3, #3
   8849e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   884a2:	f043 0302 	orr.w	r3, r3, #2
   884a6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   884aa:	81a3      	strh	r3, [r4, #12]
   884ac:	6022      	str	r2, [r4, #0]
   884ae:	e7b2      	b.n	88416 <__smakebuf_r+0x1a>
   884b0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   884b4:	462f      	mov	r7, r5
   884b6:	e7c7      	b.n	88448 <__smakebuf_r+0x4c>
   884b8:	4630      	mov	r0, r6
   884ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   884be:	f001 fc59 	bl	89d74 <_isatty_r>
   884c2:	b910      	cbnz	r0, 884ca <__smakebuf_r+0xce>
   884c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   884c8:	e7cf      	b.n	8846a <__smakebuf_r+0x6e>
   884ca:	89a3      	ldrh	r3, [r4, #12]
   884cc:	f023 0303 	bic.w	r3, r3, #3
   884d0:	f043 0301 	orr.w	r3, r3, #1
   884d4:	b21b      	sxth	r3, r3
   884d6:	e7c8      	b.n	8846a <__smakebuf_r+0x6e>
   884d8:	00087b9d 	.word	0x00087b9d

000884dc <__swhatbuf_r>:
   884dc:	b570      	push	{r4, r5, r6, lr}
   884de:	460c      	mov	r4, r1
   884e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   884e4:	4615      	mov	r5, r2
   884e6:	2900      	cmp	r1, #0
   884e8:	461e      	mov	r6, r3
   884ea:	b096      	sub	sp, #88	; 0x58
   884ec:	db14      	blt.n	88518 <__swhatbuf_r+0x3c>
   884ee:	466a      	mov	r2, sp
   884f0:	f001 fc2c 	bl	89d4c <_fstat_r>
   884f4:	2800      	cmp	r0, #0
   884f6:	db0f      	blt.n	88518 <__swhatbuf_r+0x3c>
   884f8:	9a01      	ldr	r2, [sp, #4]
   884fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   884fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   88502:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   88506:	fab2 f282 	clz	r2, r2
   8850a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8850e:	0952      	lsrs	r2, r2, #5
   88510:	6032      	str	r2, [r6, #0]
   88512:	602b      	str	r3, [r5, #0]
   88514:	b016      	add	sp, #88	; 0x58
   88516:	bd70      	pop	{r4, r5, r6, pc}
   88518:	2300      	movs	r3, #0
   8851a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8851e:	6033      	str	r3, [r6, #0]
   88520:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   88524:	d004      	beq.n	88530 <__swhatbuf_r+0x54>
   88526:	2240      	movs	r2, #64	; 0x40
   88528:	4618      	mov	r0, r3
   8852a:	602a      	str	r2, [r5, #0]
   8852c:	b016      	add	sp, #88	; 0x58
   8852e:	bd70      	pop	{r4, r5, r6, pc}
   88530:	f44f 6380 	mov.w	r3, #1024	; 0x400
   88534:	602b      	str	r3, [r5, #0]
   88536:	b016      	add	sp, #88	; 0x58
   88538:	bd70      	pop	{r4, r5, r6, pc}
   8853a:	bf00      	nop

0008853c <malloc>:
   8853c:	4b02      	ldr	r3, [pc, #8]	; (88548 <malloc+0xc>)
   8853e:	4601      	mov	r1, r0
   88540:	6818      	ldr	r0, [r3, #0]
   88542:	f000 b803 	b.w	8854c <_malloc_r>
   88546:	bf00      	nop
   88548:	200003fc 	.word	0x200003fc

0008854c <_malloc_r>:
   8854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88550:	f101 050b 	add.w	r5, r1, #11
   88554:	2d16      	cmp	r5, #22
   88556:	4606      	mov	r6, r0
   88558:	b083      	sub	sp, #12
   8855a:	d825      	bhi.n	885a8 <_malloc_r+0x5c>
   8855c:	2910      	cmp	r1, #16
   8855e:	f200 80b8 	bhi.w	886d2 <_malloc_r+0x186>
   88562:	f000 fb79 	bl	88c58 <__malloc_lock>
   88566:	2510      	movs	r5, #16
   88568:	2218      	movs	r2, #24
   8856a:	f04f 0c02 	mov.w	ip, #2
   8856e:	4fb5      	ldr	r7, [pc, #724]	; (88844 <_malloc_r+0x2f8>)
   88570:	443a      	add	r2, r7
   88572:	6853      	ldr	r3, [r2, #4]
   88574:	f1a2 0108 	sub.w	r1, r2, #8
   88578:	428b      	cmp	r3, r1
   8857a:	f000 80b7 	beq.w	886ec <_malloc_r+0x1a0>
   8857e:	685a      	ldr	r2, [r3, #4]
   88580:	68d9      	ldr	r1, [r3, #12]
   88582:	f022 0203 	bic.w	r2, r2, #3
   88586:	441a      	add	r2, r3
   88588:	689c      	ldr	r4, [r3, #8]
   8858a:	4630      	mov	r0, r6
   8858c:	60e1      	str	r1, [r4, #12]
   8858e:	608c      	str	r4, [r1, #8]
   88590:	6851      	ldr	r1, [r2, #4]
   88592:	f103 0408 	add.w	r4, r3, #8
   88596:	f041 0101 	orr.w	r1, r1, #1
   8859a:	6051      	str	r1, [r2, #4]
   8859c:	f000 fb62 	bl	88c64 <__malloc_unlock>
   885a0:	4620      	mov	r0, r4
   885a2:	b003      	add	sp, #12
   885a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   885a8:	f035 0507 	bics.w	r5, r5, #7
   885ac:	f100 8091 	bmi.w	886d2 <_malloc_r+0x186>
   885b0:	42a9      	cmp	r1, r5
   885b2:	f200 808e 	bhi.w	886d2 <_malloc_r+0x186>
   885b6:	f000 fb4f 	bl	88c58 <__malloc_lock>
   885ba:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   885be:	f0c0 8194 	bcc.w	888ea <_malloc_r+0x39e>
   885c2:	0a6b      	lsrs	r3, r5, #9
   885c4:	f000 808c 	beq.w	886e0 <_malloc_r+0x194>
   885c8:	2b04      	cmp	r3, #4
   885ca:	f200 816a 	bhi.w	888a2 <_malloc_r+0x356>
   885ce:	09ab      	lsrs	r3, r5, #6
   885d0:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   885d4:	f103 0438 	add.w	r4, r3, #56	; 0x38
   885d8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   885dc:	4f99      	ldr	r7, [pc, #612]	; (88844 <_malloc_r+0x2f8>)
   885de:	4438      	add	r0, r7
   885e0:	6843      	ldr	r3, [r0, #4]
   885e2:	3808      	subs	r0, #8
   885e4:	4298      	cmp	r0, r3
   885e6:	d106      	bne.n	885f6 <_malloc_r+0xaa>
   885e8:	e00c      	b.n	88604 <_malloc_r+0xb8>
   885ea:	2900      	cmp	r1, #0
   885ec:	f280 8126 	bge.w	8883c <_malloc_r+0x2f0>
   885f0:	68db      	ldr	r3, [r3, #12]
   885f2:	4298      	cmp	r0, r3
   885f4:	d006      	beq.n	88604 <_malloc_r+0xb8>
   885f6:	685a      	ldr	r2, [r3, #4]
   885f8:	f022 0203 	bic.w	r2, r2, #3
   885fc:	1b51      	subs	r1, r2, r5
   885fe:	290f      	cmp	r1, #15
   88600:	ddf3      	ble.n	885ea <_malloc_r+0x9e>
   88602:	46a4      	mov	ip, r4
   88604:	693c      	ldr	r4, [r7, #16]
   88606:	f8df e240 	ldr.w	lr, [pc, #576]	; 88848 <_malloc_r+0x2fc>
   8860a:	4574      	cmp	r4, lr
   8860c:	d07a      	beq.n	88704 <_malloc_r+0x1b8>
   8860e:	6862      	ldr	r2, [r4, #4]
   88610:	f022 0203 	bic.w	r2, r2, #3
   88614:	1b53      	subs	r3, r2, r5
   88616:	2b0f      	cmp	r3, #15
   88618:	f300 8176 	bgt.w	88908 <_malloc_r+0x3bc>
   8861c:	2b00      	cmp	r3, #0
   8861e:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   88622:	f280 8167 	bge.w	888f4 <_malloc_r+0x3a8>
   88626:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8862a:	f080 8119 	bcs.w	88860 <_malloc_r+0x314>
   8862e:	2101      	movs	r1, #1
   88630:	08d3      	lsrs	r3, r2, #3
   88632:	0952      	lsrs	r2, r2, #5
   88634:	440b      	add	r3, r1
   88636:	4091      	lsls	r1, r2
   88638:	687a      	ldr	r2, [r7, #4]
   8863a:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   8863e:	430a      	orrs	r2, r1
   88640:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   88644:	3908      	subs	r1, #8
   88646:	60a0      	str	r0, [r4, #8]
   88648:	60e1      	str	r1, [r4, #12]
   8864a:	607a      	str	r2, [r7, #4]
   8864c:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88650:	60c4      	str	r4, [r0, #12]
   88652:	2101      	movs	r1, #1
   88654:	ea4f 03ac 	mov.w	r3, ip, asr #2
   88658:	4099      	lsls	r1, r3
   8865a:	4291      	cmp	r1, r2
   8865c:	d859      	bhi.n	88712 <_malloc_r+0x1c6>
   8865e:	4211      	tst	r1, r2
   88660:	d106      	bne.n	88670 <_malloc_r+0x124>
   88662:	f02c 0c03 	bic.w	ip, ip, #3
   88666:	0049      	lsls	r1, r1, #1
   88668:	4211      	tst	r1, r2
   8866a:	f10c 0c04 	add.w	ip, ip, #4
   8866e:	d0fa      	beq.n	88666 <_malloc_r+0x11a>
   88670:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   88674:	4648      	mov	r0, r9
   88676:	4664      	mov	r4, ip
   88678:	f8d0 800c 	ldr.w	r8, [r0, #12]
   8867c:	4540      	cmp	r0, r8
   8867e:	d108      	bne.n	88692 <_malloc_r+0x146>
   88680:	e11c      	b.n	888bc <_malloc_r+0x370>
   88682:	2b00      	cmp	r3, #0
   88684:	f280 8121 	bge.w	888ca <_malloc_r+0x37e>
   88688:	f8d8 800c 	ldr.w	r8, [r8, #12]
   8868c:	4540      	cmp	r0, r8
   8868e:	f000 8115 	beq.w	888bc <_malloc_r+0x370>
   88692:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88696:	f022 0203 	bic.w	r2, r2, #3
   8869a:	1b53      	subs	r3, r2, r5
   8869c:	2b0f      	cmp	r3, #15
   8869e:	ddf0      	ble.n	88682 <_malloc_r+0x136>
   886a0:	eb08 0105 	add.w	r1, r8, r5
   886a4:	f045 0501 	orr.w	r5, r5, #1
   886a8:	f8c8 5004 	str.w	r5, [r8, #4]
   886ac:	4630      	mov	r0, r6
   886ae:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   886b2:	60f4      	str	r4, [r6, #12]
   886b4:	60a6      	str	r6, [r4, #8]
   886b6:	f043 0401 	orr.w	r4, r3, #1
   886ba:	e9c7 1104 	strd	r1, r1, [r7, #16]
   886be:	604c      	str	r4, [r1, #4]
   886c0:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   886c4:	f848 3002 	str.w	r3, [r8, r2]
   886c8:	f000 facc 	bl	88c64 <__malloc_unlock>
   886cc:	f108 0408 	add.w	r4, r8, #8
   886d0:	e002      	b.n	886d8 <_malloc_r+0x18c>
   886d2:	230c      	movs	r3, #12
   886d4:	2400      	movs	r4, #0
   886d6:	6033      	str	r3, [r6, #0]
   886d8:	4620      	mov	r0, r4
   886da:	b003      	add	sp, #12
   886dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   886e0:	f44f 7000 	mov.w	r0, #512	; 0x200
   886e4:	f04f 0c40 	mov.w	ip, #64	; 0x40
   886e8:	243f      	movs	r4, #63	; 0x3f
   886ea:	e777      	b.n	885dc <_malloc_r+0x90>
   886ec:	68d3      	ldr	r3, [r2, #12]
   886ee:	429a      	cmp	r2, r3
   886f0:	bf08      	it	eq
   886f2:	f10c 0c02 	addeq.w	ip, ip, #2
   886f6:	f47f af42 	bne.w	8857e <_malloc_r+0x32>
   886fa:	693c      	ldr	r4, [r7, #16]
   886fc:	f8df e148 	ldr.w	lr, [pc, #328]	; 88848 <_malloc_r+0x2fc>
   88700:	4574      	cmp	r4, lr
   88702:	d184      	bne.n	8860e <_malloc_r+0xc2>
   88704:	2101      	movs	r1, #1
   88706:	687a      	ldr	r2, [r7, #4]
   88708:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8870c:	4099      	lsls	r1, r3
   8870e:	4291      	cmp	r1, r2
   88710:	d9a5      	bls.n	8865e <_malloc_r+0x112>
   88712:	68bc      	ldr	r4, [r7, #8]
   88714:	6863      	ldr	r3, [r4, #4]
   88716:	f023 0903 	bic.w	r9, r3, #3
   8871a:	454d      	cmp	r5, r9
   8871c:	d803      	bhi.n	88726 <_malloc_r+0x1da>
   8871e:	eba9 0305 	sub.w	r3, r9, r5
   88722:	2b0f      	cmp	r3, #15
   88724:	dc7a      	bgt.n	8881c <_malloc_r+0x2d0>
   88726:	f8df b124 	ldr.w	fp, [pc, #292]	; 8884c <_malloc_r+0x300>
   8872a:	4b49      	ldr	r3, [pc, #292]	; (88850 <_malloc_r+0x304>)
   8872c:	f8db 2000 	ldr.w	r2, [fp]
   88730:	681b      	ldr	r3, [r3, #0]
   88732:	3201      	adds	r2, #1
   88734:	442b      	add	r3, r5
   88736:	eb04 0a09 	add.w	sl, r4, r9
   8873a:	f000 812f 	beq.w	8899c <_malloc_r+0x450>
   8873e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   88742:	330f      	adds	r3, #15
   88744:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   88748:	f028 080f 	bic.w	r8, r8, #15
   8874c:	4641      	mov	r1, r8
   8874e:	4630      	mov	r0, r6
   88750:	f001 f858 	bl	89804 <_sbrk_r>
   88754:	1c41      	adds	r1, r0, #1
   88756:	4602      	mov	r2, r0
   88758:	f000 80ef 	beq.w	8893a <_malloc_r+0x3ee>
   8875c:	4582      	cmp	sl, r0
   8875e:	f200 80ea 	bhi.w	88936 <_malloc_r+0x3ea>
   88762:	4b3c      	ldr	r3, [pc, #240]	; (88854 <_malloc_r+0x308>)
   88764:	6819      	ldr	r1, [r3, #0]
   88766:	4441      	add	r1, r8
   88768:	4608      	mov	r0, r1
   8876a:	6019      	str	r1, [r3, #0]
   8876c:	f000 8149 	beq.w	88a02 <_malloc_r+0x4b6>
   88770:	f8db 1000 	ldr.w	r1, [fp]
   88774:	9301      	str	r3, [sp, #4]
   88776:	3101      	adds	r1, #1
   88778:	bf1b      	ittet	ne
   8877a:	eba2 0a0a 	subne.w	sl, r2, sl
   8877e:	4450      	addne	r0, sl
   88780:	f8cb 2000 	streq.w	r2, [fp]
   88784:	6018      	strne	r0, [r3, #0]
   88786:	f012 0b07 	ands.w	fp, r2, #7
   8878a:	f000 8111 	beq.w	889b0 <_malloc_r+0x464>
   8878e:	f1cb 0108 	rsb	r1, fp, #8
   88792:	440a      	add	r2, r1
   88794:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   88798:	4490      	add	r8, r2
   8879a:	3108      	adds	r1, #8
   8879c:	eba1 0108 	sub.w	r1, r1, r8
   887a0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   887a4:	4651      	mov	r1, sl
   887a6:	4630      	mov	r0, r6
   887a8:	9200      	str	r2, [sp, #0]
   887aa:	f001 f82b 	bl	89804 <_sbrk_r>
   887ae:	1c42      	adds	r2, r0, #1
   887b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   887b4:	f000 814b 	beq.w	88a4e <_malloc_r+0x502>
   887b8:	1a80      	subs	r0, r0, r2
   887ba:	eb00 080a 	add.w	r8, r0, sl
   887be:	6819      	ldr	r1, [r3, #0]
   887c0:	f048 0001 	orr.w	r0, r8, #1
   887c4:	4451      	add	r1, sl
   887c6:	42bc      	cmp	r4, r7
   887c8:	60ba      	str	r2, [r7, #8]
   887ca:	6019      	str	r1, [r3, #0]
   887cc:	6050      	str	r0, [r2, #4]
   887ce:	f000 8124 	beq.w	88a1a <_malloc_r+0x4ce>
   887d2:	f1b9 0f0f 	cmp.w	r9, #15
   887d6:	f240 8122 	bls.w	88a1e <_malloc_r+0x4d2>
   887da:	f04f 0e05 	mov.w	lr, #5
   887de:	6860      	ldr	r0, [r4, #4]
   887e0:	f1a9 0c0c 	sub.w	ip, r9, #12
   887e4:	f02c 0c07 	bic.w	ip, ip, #7
   887e8:	f000 0001 	and.w	r0, r0, #1
   887ec:	ea40 000c 	orr.w	r0, r0, ip
   887f0:	6060      	str	r0, [r4, #4]
   887f2:	f1bc 0f0f 	cmp.w	ip, #15
   887f6:	eb04 000c 	add.w	r0, r4, ip
   887fa:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   887fe:	f200 812e 	bhi.w	88a5e <_malloc_r+0x512>
   88802:	4614      	mov	r4, r2
   88804:	6850      	ldr	r0, [r2, #4]
   88806:	4b14      	ldr	r3, [pc, #80]	; (88858 <_malloc_r+0x30c>)
   88808:	681a      	ldr	r2, [r3, #0]
   8880a:	428a      	cmp	r2, r1
   8880c:	bf38      	it	cc
   8880e:	6019      	strcc	r1, [r3, #0]
   88810:	4b12      	ldr	r3, [pc, #72]	; (8885c <_malloc_r+0x310>)
   88812:	681a      	ldr	r2, [r3, #0]
   88814:	428a      	cmp	r2, r1
   88816:	bf38      	it	cc
   88818:	6019      	strcc	r1, [r3, #0]
   8881a:	e090      	b.n	8893e <_malloc_r+0x3f2>
   8881c:	1962      	adds	r2, r4, r5
   8881e:	f043 0301 	orr.w	r3, r3, #1
   88822:	f045 0501 	orr.w	r5, r5, #1
   88826:	6065      	str	r5, [r4, #4]
   88828:	4630      	mov	r0, r6
   8882a:	60ba      	str	r2, [r7, #8]
   8882c:	3408      	adds	r4, #8
   8882e:	6053      	str	r3, [r2, #4]
   88830:	f000 fa18 	bl	88c64 <__malloc_unlock>
   88834:	4620      	mov	r0, r4
   88836:	b003      	add	sp, #12
   88838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8883c:	68d9      	ldr	r1, [r3, #12]
   8883e:	441a      	add	r2, r3
   88840:	e6a2      	b.n	88588 <_malloc_r+0x3c>
   88842:	bf00      	nop
   88844:	20000998 	.word	0x20000998
   88848:	200009a0 	.word	0x200009a0
   8884c:	20000da0 	.word	0x20000da0
   88850:	20003760 	.word	0x20003760
   88854:	20003730 	.word	0x20003730
   88858:	20003758 	.word	0x20003758
   8885c:	2000375c 	.word	0x2000375c
   88860:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   88864:	ea4f 2352 	mov.w	r3, r2, lsr #9
   88868:	d35f      	bcc.n	8892a <_malloc_r+0x3de>
   8886a:	2b14      	cmp	r3, #20
   8886c:	f200 80b1 	bhi.w	889d2 <_malloc_r+0x486>
   88870:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   88874:	00c9      	lsls	r1, r1, #3
   88876:	335b      	adds	r3, #91	; 0x5b
   88878:	1878      	adds	r0, r7, r1
   8887a:	5879      	ldr	r1, [r7, r1]
   8887c:	3808      	subs	r0, #8
   8887e:	4288      	cmp	r0, r1
   88880:	f000 808f 	beq.w	889a2 <_malloc_r+0x456>
   88884:	684b      	ldr	r3, [r1, #4]
   88886:	f023 0303 	bic.w	r3, r3, #3
   8888a:	4293      	cmp	r3, r2
   8888c:	d902      	bls.n	88894 <_malloc_r+0x348>
   8888e:	6889      	ldr	r1, [r1, #8]
   88890:	4288      	cmp	r0, r1
   88892:	d1f7      	bne.n	88884 <_malloc_r+0x338>
   88894:	68c8      	ldr	r0, [r1, #12]
   88896:	687a      	ldr	r2, [r7, #4]
   88898:	e9c4 1002 	strd	r1, r0, [r4, #8]
   8889c:	6084      	str	r4, [r0, #8]
   8889e:	60cc      	str	r4, [r1, #12]
   888a0:	e6d7      	b.n	88652 <_malloc_r+0x106>
   888a2:	2b14      	cmp	r3, #20
   888a4:	d959      	bls.n	8895a <_malloc_r+0x40e>
   888a6:	2b54      	cmp	r3, #84	; 0x54
   888a8:	f200 809b 	bhi.w	889e2 <_malloc_r+0x496>
   888ac:	0b2b      	lsrs	r3, r5, #12
   888ae:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   888b2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   888b6:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   888ba:	e68f      	b.n	885dc <_malloc_r+0x90>
   888bc:	3401      	adds	r4, #1
   888be:	07a3      	lsls	r3, r4, #30
   888c0:	f100 0008 	add.w	r0, r0, #8
   888c4:	f47f aed8 	bne.w	88678 <_malloc_r+0x12c>
   888c8:	e053      	b.n	88972 <_malloc_r+0x426>
   888ca:	4644      	mov	r4, r8
   888cc:	4442      	add	r2, r8
   888ce:	6853      	ldr	r3, [r2, #4]
   888d0:	f8d8 100c 	ldr.w	r1, [r8, #12]
   888d4:	f043 0301 	orr.w	r3, r3, #1
   888d8:	6053      	str	r3, [r2, #4]
   888da:	f854 3f08 	ldr.w	r3, [r4, #8]!
   888de:	4630      	mov	r0, r6
   888e0:	60d9      	str	r1, [r3, #12]
   888e2:	608b      	str	r3, [r1, #8]
   888e4:	f000 f9be 	bl	88c64 <__malloc_unlock>
   888e8:	e6f6      	b.n	886d8 <_malloc_r+0x18c>
   888ea:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   888ee:	f105 0208 	add.w	r2, r5, #8
   888f2:	e63c      	b.n	8856e <_malloc_r+0x22>
   888f4:	4422      	add	r2, r4
   888f6:	6853      	ldr	r3, [r2, #4]
   888f8:	4630      	mov	r0, r6
   888fa:	f043 0301 	orr.w	r3, r3, #1
   888fe:	6053      	str	r3, [r2, #4]
   88900:	f000 f9b0 	bl	88c64 <__malloc_unlock>
   88904:	3408      	adds	r4, #8
   88906:	e6e7      	b.n	886d8 <_malloc_r+0x18c>
   88908:	1961      	adds	r1, r4, r5
   8890a:	f045 0501 	orr.w	r5, r5, #1
   8890e:	6065      	str	r5, [r4, #4]
   88910:	f043 0501 	orr.w	r5, r3, #1
   88914:	e9c7 1104 	strd	r1, r1, [r7, #16]
   88918:	4630      	mov	r0, r6
   8891a:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8891e:	604d      	str	r5, [r1, #4]
   88920:	50a3      	str	r3, [r4, r2]
   88922:	f000 f99f 	bl	88c64 <__malloc_unlock>
   88926:	3408      	adds	r4, #8
   88928:	e6d6      	b.n	886d8 <_malloc_r+0x18c>
   8892a:	0993      	lsrs	r3, r2, #6
   8892c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   88930:	00c9      	lsls	r1, r1, #3
   88932:	3338      	adds	r3, #56	; 0x38
   88934:	e7a0      	b.n	88878 <_malloc_r+0x32c>
   88936:	42bc      	cmp	r4, r7
   88938:	d05e      	beq.n	889f8 <_malloc_r+0x4ac>
   8893a:	68bc      	ldr	r4, [r7, #8]
   8893c:	6860      	ldr	r0, [r4, #4]
   8893e:	f020 0803 	bic.w	r8, r0, #3
   88942:	4545      	cmp	r5, r8
   88944:	eba8 0305 	sub.w	r3, r8, r5
   88948:	d802      	bhi.n	88950 <_malloc_r+0x404>
   8894a:	2b0f      	cmp	r3, #15
   8894c:	f73f af66 	bgt.w	8881c <_malloc_r+0x2d0>
   88950:	4630      	mov	r0, r6
   88952:	f000 f987 	bl	88c64 <__malloc_unlock>
   88956:	2400      	movs	r4, #0
   88958:	e6be      	b.n	886d8 <_malloc_r+0x18c>
   8895a:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   8895e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   88962:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   88966:	e639      	b.n	885dc <_malloc_r+0x90>
   88968:	f859 3908 	ldr.w	r3, [r9], #-8
   8896c:	454b      	cmp	r3, r9
   8896e:	f040 8095 	bne.w	88a9c <_malloc_r+0x550>
   88972:	f01c 0f03 	tst.w	ip, #3
   88976:	f10c 3cff 	add.w	ip, ip, #4294967295
   8897a:	d1f5      	bne.n	88968 <_malloc_r+0x41c>
   8897c:	687b      	ldr	r3, [r7, #4]
   8897e:	ea23 0301 	bic.w	r3, r3, r1
   88982:	607b      	str	r3, [r7, #4]
   88984:	0049      	lsls	r1, r1, #1
   88986:	4299      	cmp	r1, r3
   88988:	f63f aec3 	bhi.w	88712 <_malloc_r+0x1c6>
   8898c:	b911      	cbnz	r1, 88994 <_malloc_r+0x448>
   8898e:	e6c0      	b.n	88712 <_malloc_r+0x1c6>
   88990:	0049      	lsls	r1, r1, #1
   88992:	3404      	adds	r4, #4
   88994:	4219      	tst	r1, r3
   88996:	d0fb      	beq.n	88990 <_malloc_r+0x444>
   88998:	46a4      	mov	ip, r4
   8899a:	e669      	b.n	88670 <_malloc_r+0x124>
   8899c:	f103 0810 	add.w	r8, r3, #16
   889a0:	e6d4      	b.n	8874c <_malloc_r+0x200>
   889a2:	2201      	movs	r2, #1
   889a4:	109b      	asrs	r3, r3, #2
   889a6:	409a      	lsls	r2, r3
   889a8:	687b      	ldr	r3, [r7, #4]
   889aa:	431a      	orrs	r2, r3
   889ac:	607a      	str	r2, [r7, #4]
   889ae:	e773      	b.n	88898 <_malloc_r+0x34c>
   889b0:	eb02 0108 	add.w	r1, r2, r8
   889b4:	4249      	negs	r1, r1
   889b6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   889ba:	4651      	mov	r1, sl
   889bc:	4630      	mov	r0, r6
   889be:	9200      	str	r2, [sp, #0]
   889c0:	f000 ff20 	bl	89804 <_sbrk_r>
   889c4:	1c43      	adds	r3, r0, #1
   889c6:	e9dd 2300 	ldrd	r2, r3, [sp]
   889ca:	f47f aef5 	bne.w	887b8 <_malloc_r+0x26c>
   889ce:	46da      	mov	sl, fp
   889d0:	e6f5      	b.n	887be <_malloc_r+0x272>
   889d2:	2b54      	cmp	r3, #84	; 0x54
   889d4:	d826      	bhi.n	88a24 <_malloc_r+0x4d8>
   889d6:	0b13      	lsrs	r3, r2, #12
   889d8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   889dc:	00c9      	lsls	r1, r1, #3
   889de:	336e      	adds	r3, #110	; 0x6e
   889e0:	e74a      	b.n	88878 <_malloc_r+0x32c>
   889e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   889e6:	d826      	bhi.n	88a36 <_malloc_r+0x4ea>
   889e8:	0beb      	lsrs	r3, r5, #15
   889ea:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   889ee:	f103 0477 	add.w	r4, r3, #119	; 0x77
   889f2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   889f6:	e5f1      	b.n	885dc <_malloc_r+0x90>
   889f8:	4b29      	ldr	r3, [pc, #164]	; (88aa0 <_malloc_r+0x554>)
   889fa:	6818      	ldr	r0, [r3, #0]
   889fc:	4440      	add	r0, r8
   889fe:	6018      	str	r0, [r3, #0]
   88a00:	e6b6      	b.n	88770 <_malloc_r+0x224>
   88a02:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   88a06:	f1bc 0f00 	cmp.w	ip, #0
   88a0a:	f47f aeb1 	bne.w	88770 <_malloc_r+0x224>
   88a0e:	68bc      	ldr	r4, [r7, #8]
   88a10:	44c8      	add	r8, r9
   88a12:	f048 0001 	orr.w	r0, r8, #1
   88a16:	6060      	str	r0, [r4, #4]
   88a18:	e6f5      	b.n	88806 <_malloc_r+0x2ba>
   88a1a:	4614      	mov	r4, r2
   88a1c:	e6f3      	b.n	88806 <_malloc_r+0x2ba>
   88a1e:	2301      	movs	r3, #1
   88a20:	6053      	str	r3, [r2, #4]
   88a22:	e795      	b.n	88950 <_malloc_r+0x404>
   88a24:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88a28:	d824      	bhi.n	88a74 <_malloc_r+0x528>
   88a2a:	0bd3      	lsrs	r3, r2, #15
   88a2c:	f103 0178 	add.w	r1, r3, #120	; 0x78
   88a30:	00c9      	lsls	r1, r1, #3
   88a32:	3377      	adds	r3, #119	; 0x77
   88a34:	e720      	b.n	88878 <_malloc_r+0x32c>
   88a36:	f240 5254 	movw	r2, #1364	; 0x554
   88a3a:	4293      	cmp	r3, r2
   88a3c:	d824      	bhi.n	88a88 <_malloc_r+0x53c>
   88a3e:	0cab      	lsrs	r3, r5, #18
   88a40:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   88a44:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   88a48:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   88a4c:	e5c6      	b.n	885dc <_malloc_r+0x90>
   88a4e:	f1ab 0b08 	sub.w	fp, fp, #8
   88a52:	44d8      	add	r8, fp
   88a54:	f04f 0a00 	mov.w	sl, #0
   88a58:	eba8 0802 	sub.w	r8, r8, r2
   88a5c:	e6af      	b.n	887be <_malloc_r+0x272>
   88a5e:	f104 0108 	add.w	r1, r4, #8
   88a62:	4630      	mov	r0, r6
   88a64:	9300      	str	r3, [sp, #0]
   88a66:	f7ff fa1b 	bl	87ea0 <_free_r>
   88a6a:	68bc      	ldr	r4, [r7, #8]
   88a6c:	9b00      	ldr	r3, [sp, #0]
   88a6e:	6860      	ldr	r0, [r4, #4]
   88a70:	6819      	ldr	r1, [r3, #0]
   88a72:	e6c8      	b.n	88806 <_malloc_r+0x2ba>
   88a74:	f240 5154 	movw	r1, #1364	; 0x554
   88a78:	428b      	cmp	r3, r1
   88a7a:	d80b      	bhi.n	88a94 <_malloc_r+0x548>
   88a7c:	0c93      	lsrs	r3, r2, #18
   88a7e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   88a82:	00c9      	lsls	r1, r1, #3
   88a84:	337c      	adds	r3, #124	; 0x7c
   88a86:	e6f7      	b.n	88878 <_malloc_r+0x32c>
   88a88:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   88a8c:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   88a90:	247e      	movs	r4, #126	; 0x7e
   88a92:	e5a3      	b.n	885dc <_malloc_r+0x90>
   88a94:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88a98:	237e      	movs	r3, #126	; 0x7e
   88a9a:	e6ed      	b.n	88878 <_malloc_r+0x32c>
   88a9c:	687b      	ldr	r3, [r7, #4]
   88a9e:	e771      	b.n	88984 <_malloc_r+0x438>
   88aa0:	20003730 	.word	0x20003730

00088aa4 <__ascii_mbtowc>:
   88aa4:	b082      	sub	sp, #8
   88aa6:	b149      	cbz	r1, 88abc <__ascii_mbtowc+0x18>
   88aa8:	b15a      	cbz	r2, 88ac2 <__ascii_mbtowc+0x1e>
   88aaa:	b16b      	cbz	r3, 88ac8 <__ascii_mbtowc+0x24>
   88aac:	7813      	ldrb	r3, [r2, #0]
   88aae:	600b      	str	r3, [r1, #0]
   88ab0:	7812      	ldrb	r2, [r2, #0]
   88ab2:	1e10      	subs	r0, r2, #0
   88ab4:	bf18      	it	ne
   88ab6:	2001      	movne	r0, #1
   88ab8:	b002      	add	sp, #8
   88aba:	4770      	bx	lr
   88abc:	a901      	add	r1, sp, #4
   88abe:	2a00      	cmp	r2, #0
   88ac0:	d1f3      	bne.n	88aaa <__ascii_mbtowc+0x6>
   88ac2:	4610      	mov	r0, r2
   88ac4:	b002      	add	sp, #8
   88ac6:	4770      	bx	lr
   88ac8:	f06f 0001 	mvn.w	r0, #1
   88acc:	e7f4      	b.n	88ab8 <__ascii_mbtowc+0x14>
   88ace:	bf00      	nop

00088ad0 <memchr>:
   88ad0:	fa5f fc81 	uxtb.w	ip, r1
   88ad4:	0781      	lsls	r1, r0, #30
   88ad6:	d010      	beq.n	88afa <memchr+0x2a>
   88ad8:	4603      	mov	r3, r0
   88ada:	1e51      	subs	r1, r2, #1
   88adc:	b92a      	cbnz	r2, 88aea <memchr+0x1a>
   88ade:	e00a      	b.n	88af6 <memchr+0x26>
   88ae0:	079a      	lsls	r2, r3, #30
   88ae2:	4618      	mov	r0, r3
   88ae4:	d00a      	beq.n	88afc <memchr+0x2c>
   88ae6:	3901      	subs	r1, #1
   88ae8:	d305      	bcc.n	88af6 <memchr+0x26>
   88aea:	4618      	mov	r0, r3
   88aec:	f813 2b01 	ldrb.w	r2, [r3], #1
   88af0:	4562      	cmp	r2, ip
   88af2:	d1f5      	bne.n	88ae0 <memchr+0x10>
   88af4:	4770      	bx	lr
   88af6:	2000      	movs	r0, #0
   88af8:	4770      	bx	lr
   88afa:	4611      	mov	r1, r2
   88afc:	2903      	cmp	r1, #3
   88afe:	d80c      	bhi.n	88b1a <memchr+0x4a>
   88b00:	2900      	cmp	r1, #0
   88b02:	d0f8      	beq.n	88af6 <memchr+0x26>
   88b04:	4603      	mov	r3, r0
   88b06:	4401      	add	r1, r0
   88b08:	e001      	b.n	88b0e <memchr+0x3e>
   88b0a:	428b      	cmp	r3, r1
   88b0c:	d0f3      	beq.n	88af6 <memchr+0x26>
   88b0e:	4618      	mov	r0, r3
   88b10:	f813 2b01 	ldrb.w	r2, [r3], #1
   88b14:	4562      	cmp	r2, ip
   88b16:	d1f8      	bne.n	88b0a <memchr+0x3a>
   88b18:	e7ec      	b.n	88af4 <memchr+0x24>
   88b1a:	4602      	mov	r2, r0
   88b1c:	b510      	push	{r4, lr}
   88b1e:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   88b22:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   88b26:	4610      	mov	r0, r2
   88b28:	6803      	ldr	r3, [r0, #0]
   88b2a:	3204      	adds	r2, #4
   88b2c:	4063      	eors	r3, r4
   88b2e:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   88b32:	ea2e 0303 	bic.w	r3, lr, r3
   88b36:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   88b3a:	d104      	bne.n	88b46 <memchr+0x76>
   88b3c:	3904      	subs	r1, #4
   88b3e:	2903      	cmp	r1, #3
   88b40:	4610      	mov	r0, r2
   88b42:	d8f0      	bhi.n	88b26 <memchr+0x56>
   88b44:	b151      	cbz	r1, 88b5c <memchr+0x8c>
   88b46:	4603      	mov	r3, r0
   88b48:	4401      	add	r1, r0
   88b4a:	e001      	b.n	88b50 <memchr+0x80>
   88b4c:	428b      	cmp	r3, r1
   88b4e:	d005      	beq.n	88b5c <memchr+0x8c>
   88b50:	4618      	mov	r0, r3
   88b52:	f813 2b01 	ldrb.w	r2, [r3], #1
   88b56:	4562      	cmp	r2, ip
   88b58:	d1f8      	bne.n	88b4c <memchr+0x7c>
   88b5a:	bd10      	pop	{r4, pc}
   88b5c:	2000      	movs	r0, #0
   88b5e:	bd10      	pop	{r4, pc}

00088b60 <memmove>:
   88b60:	4288      	cmp	r0, r1
   88b62:	d90d      	bls.n	88b80 <memmove+0x20>
   88b64:	188b      	adds	r3, r1, r2
   88b66:	4283      	cmp	r3, r0
   88b68:	d90a      	bls.n	88b80 <memmove+0x20>
   88b6a:	eb00 0c02 	add.w	ip, r0, r2
   88b6e:	b1ba      	cbz	r2, 88ba0 <memmove+0x40>
   88b70:	4662      	mov	r2, ip
   88b72:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   88b76:	4299      	cmp	r1, r3
   88b78:	f802 cd01 	strb.w	ip, [r2, #-1]!
   88b7c:	d1f9      	bne.n	88b72 <memmove+0x12>
   88b7e:	4770      	bx	lr
   88b80:	2a0f      	cmp	r2, #15
   88b82:	d80e      	bhi.n	88ba2 <memmove+0x42>
   88b84:	4603      	mov	r3, r0
   88b86:	f102 3cff 	add.w	ip, r2, #4294967295
   88b8a:	b14a      	cbz	r2, 88ba0 <memmove+0x40>
   88b8c:	f10c 0c01 	add.w	ip, ip, #1
   88b90:	3b01      	subs	r3, #1
   88b92:	448c      	add	ip, r1
   88b94:	f811 2b01 	ldrb.w	r2, [r1], #1
   88b98:	4561      	cmp	r1, ip
   88b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
   88b9e:	d1f9      	bne.n	88b94 <memmove+0x34>
   88ba0:	4770      	bx	lr
   88ba2:	ea40 0301 	orr.w	r3, r0, r1
   88ba6:	079b      	lsls	r3, r3, #30
   88ba8:	d14f      	bne.n	88c4a <memmove+0xea>
   88baa:	f1a2 0310 	sub.w	r3, r2, #16
   88bae:	b570      	push	{r4, r5, r6, lr}
   88bb0:	f101 0c20 	add.w	ip, r1, #32
   88bb4:	f023 050f 	bic.w	r5, r3, #15
   88bb8:	f101 0e10 	add.w	lr, r1, #16
   88bbc:	f100 0410 	add.w	r4, r0, #16
   88bc0:	44ac      	add	ip, r5
   88bc2:	091b      	lsrs	r3, r3, #4
   88bc4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   88bc8:	f10e 0e10 	add.w	lr, lr, #16
   88bcc:	f844 5c10 	str.w	r5, [r4, #-16]
   88bd0:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   88bd4:	3410      	adds	r4, #16
   88bd6:	f844 5c1c 	str.w	r5, [r4, #-28]
   88bda:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   88bde:	f844 5c18 	str.w	r5, [r4, #-24]
   88be2:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   88be6:	45e6      	cmp	lr, ip
   88be8:	f844 5c14 	str.w	r5, [r4, #-20]
   88bec:	d1ea      	bne.n	88bc4 <memmove+0x64>
   88bee:	3301      	adds	r3, #1
   88bf0:	f012 0f0c 	tst.w	r2, #12
   88bf4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   88bf8:	f002 040f 	and.w	r4, r2, #15
   88bfc:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   88c00:	d027      	beq.n	88c52 <memmove+0xf2>
   88c02:	468e      	mov	lr, r1
   88c04:	3c04      	subs	r4, #4
   88c06:	f024 0603 	bic.w	r6, r4, #3
   88c0a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   88c0e:	441e      	add	r6, r3
   88c10:	1f1c      	subs	r4, r3, #4
   88c12:	f85e 5b04 	ldr.w	r5, [lr], #4
   88c16:	f844 5f04 	str.w	r5, [r4, #4]!
   88c1a:	42b4      	cmp	r4, r6
   88c1c:	d1f9      	bne.n	88c12 <memmove+0xb2>
   88c1e:	f10c 0401 	add.w	r4, ip, #1
   88c22:	f002 0203 	and.w	r2, r2, #3
   88c26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   88c2a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   88c2e:	f102 3cff 	add.w	ip, r2, #4294967295
   88c32:	b14a      	cbz	r2, 88c48 <memmove+0xe8>
   88c34:	f10c 0c01 	add.w	ip, ip, #1
   88c38:	3b01      	subs	r3, #1
   88c3a:	448c      	add	ip, r1
   88c3c:	f811 2b01 	ldrb.w	r2, [r1], #1
   88c40:	4561      	cmp	r1, ip
   88c42:	f803 2f01 	strb.w	r2, [r3, #1]!
   88c46:	d1f9      	bne.n	88c3c <memmove+0xdc>
   88c48:	bd70      	pop	{r4, r5, r6, pc}
   88c4a:	4603      	mov	r3, r0
   88c4c:	f102 3cff 	add.w	ip, r2, #4294967295
   88c50:	e79c      	b.n	88b8c <memmove+0x2c>
   88c52:	4622      	mov	r2, r4
   88c54:	e7eb      	b.n	88c2e <memmove+0xce>
   88c56:	bf00      	nop

00088c58 <__malloc_lock>:
   88c58:	4801      	ldr	r0, [pc, #4]	; (88c60 <__malloc_lock+0x8>)
   88c5a:	f7ff bbcb 	b.w	883f4 <__retarget_lock_acquire_recursive>
   88c5e:	bf00      	nop
   88c60:	20003724 	.word	0x20003724

00088c64 <__malloc_unlock>:
   88c64:	4801      	ldr	r0, [pc, #4]	; (88c6c <__malloc_unlock+0x8>)
   88c66:	f7ff bbc7 	b.w	883f8 <__retarget_lock_release_recursive>
   88c6a:	bf00      	nop
   88c6c:	20003724 	.word	0x20003724

00088c70 <_Balloc>:
   88c70:	b538      	push	{r3, r4, r5, lr}
   88c72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88c74:	4605      	mov	r5, r0
   88c76:	460c      	mov	r4, r1
   88c78:	b14b      	cbz	r3, 88c8e <_Balloc+0x1e>
   88c7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   88c7e:	b180      	cbz	r0, 88ca2 <_Balloc+0x32>
   88c80:	6802      	ldr	r2, [r0, #0]
   88c82:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   88c86:	2300      	movs	r3, #0
   88c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
   88c8c:	bd38      	pop	{r3, r4, r5, pc}
   88c8e:	2221      	movs	r2, #33	; 0x21
   88c90:	2104      	movs	r1, #4
   88c92:	f000 ff8d 	bl	89bb0 <_calloc_r>
   88c96:	4603      	mov	r3, r0
   88c98:	64e8      	str	r0, [r5, #76]	; 0x4c
   88c9a:	2800      	cmp	r0, #0
   88c9c:	d1ed      	bne.n	88c7a <_Balloc+0xa>
   88c9e:	2000      	movs	r0, #0
   88ca0:	bd38      	pop	{r3, r4, r5, pc}
   88ca2:	2101      	movs	r1, #1
   88ca4:	4628      	mov	r0, r5
   88ca6:	fa01 f504 	lsl.w	r5, r1, r4
   88caa:	1d6a      	adds	r2, r5, #5
   88cac:	0092      	lsls	r2, r2, #2
   88cae:	f000 ff7f 	bl	89bb0 <_calloc_r>
   88cb2:	2800      	cmp	r0, #0
   88cb4:	d0f3      	beq.n	88c9e <_Balloc+0x2e>
   88cb6:	e9c0 4501 	strd	r4, r5, [r0, #4]
   88cba:	e7e4      	b.n	88c86 <_Balloc+0x16>

00088cbc <_Bfree>:
   88cbc:	b131      	cbz	r1, 88ccc <_Bfree+0x10>
   88cbe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88cc0:	684a      	ldr	r2, [r1, #4]
   88cc2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88cc6:	6008      	str	r0, [r1, #0]
   88cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88ccc:	4770      	bx	lr
   88cce:	bf00      	nop

00088cd0 <__multadd>:
   88cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88cd4:	f04f 0e00 	mov.w	lr, #0
   88cd8:	460e      	mov	r6, r1
   88cda:	461c      	mov	r4, r3
   88cdc:	690d      	ldr	r5, [r1, #16]
   88cde:	4607      	mov	r7, r0
   88ce0:	f101 0014 	add.w	r0, r1, #20
   88ce4:	6801      	ldr	r1, [r0, #0]
   88ce6:	f10e 0e01 	add.w	lr, lr, #1
   88cea:	b28b      	uxth	r3, r1
   88cec:	fb02 4303 	mla	r3, r2, r3, r4
   88cf0:	0c09      	lsrs	r1, r1, #16
   88cf2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   88cf6:	fb02 cc01 	mla	ip, r2, r1, ip
   88cfa:	b29b      	uxth	r3, r3
   88cfc:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   88d00:	4575      	cmp	r5, lr
   88d02:	f840 3b04 	str.w	r3, [r0], #4
   88d06:	ea4f 441c 	mov.w	r4, ip, lsr #16
   88d0a:	dceb      	bgt.n	88ce4 <__multadd+0x14>
   88d0c:	b13c      	cbz	r4, 88d1e <__multadd+0x4e>
   88d0e:	68b3      	ldr	r3, [r6, #8]
   88d10:	42ab      	cmp	r3, r5
   88d12:	dd07      	ble.n	88d24 <__multadd+0x54>
   88d14:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   88d18:	3501      	adds	r5, #1
   88d1a:	615c      	str	r4, [r3, #20]
   88d1c:	6135      	str	r5, [r6, #16]
   88d1e:	4630      	mov	r0, r6
   88d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88d24:	6871      	ldr	r1, [r6, #4]
   88d26:	4638      	mov	r0, r7
   88d28:	3101      	adds	r1, #1
   88d2a:	f7ff ffa1 	bl	88c70 <_Balloc>
   88d2e:	4680      	mov	r8, r0
   88d30:	b1a8      	cbz	r0, 88d5e <__multadd+0x8e>
   88d32:	6932      	ldr	r2, [r6, #16]
   88d34:	f106 010c 	add.w	r1, r6, #12
   88d38:	3202      	adds	r2, #2
   88d3a:	0092      	lsls	r2, r2, #2
   88d3c:	300c      	adds	r0, #12
   88d3e:	f7fa ff2f 	bl	83ba0 <memcpy>
   88d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   88d44:	6872      	ldr	r2, [r6, #4]
   88d46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88d4a:	6031      	str	r1, [r6, #0]
   88d4c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   88d50:	4646      	mov	r6, r8
   88d52:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   88d56:	3501      	adds	r5, #1
   88d58:	615c      	str	r4, [r3, #20]
   88d5a:	6135      	str	r5, [r6, #16]
   88d5c:	e7df      	b.n	88d1e <__multadd+0x4e>
   88d5e:	4602      	mov	r2, r0
   88d60:	21b5      	movs	r1, #181	; 0xb5
   88d62:	4b02      	ldr	r3, [pc, #8]	; (88d6c <__multadd+0x9c>)
   88d64:	4802      	ldr	r0, [pc, #8]	; (88d70 <__multadd+0xa0>)
   88d66:	f000 ff03 	bl	89b70 <__assert_func>
   88d6a:	bf00      	nop
   88d6c:	0008ac70 	.word	0x0008ac70
   88d70:	0008ad14 	.word	0x0008ad14

00088d74 <__hi0bits>:
   88d74:	0c02      	lsrs	r2, r0, #16
   88d76:	0412      	lsls	r2, r2, #16
   88d78:	4603      	mov	r3, r0
   88d7a:	b9ca      	cbnz	r2, 88db0 <__hi0bits+0x3c>
   88d7c:	2010      	movs	r0, #16
   88d7e:	4083      	lsls	r3, r0
   88d80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88d84:	bf04      	itt	eq
   88d86:	021b      	lsleq	r3, r3, #8
   88d88:	3008      	addeq	r0, #8
   88d8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88d8e:	bf04      	itt	eq
   88d90:	011b      	lsleq	r3, r3, #4
   88d92:	3004      	addeq	r0, #4
   88d94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   88d98:	bf04      	itt	eq
   88d9a:	009b      	lsleq	r3, r3, #2
   88d9c:	3002      	addeq	r0, #2
   88d9e:	2b00      	cmp	r3, #0
   88da0:	db05      	blt.n	88dae <__hi0bits+0x3a>
   88da2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   88da6:	f100 0001 	add.w	r0, r0, #1
   88daa:	bf08      	it	eq
   88dac:	2020      	moveq	r0, #32
   88dae:	4770      	bx	lr
   88db0:	2000      	movs	r0, #0
   88db2:	e7e5      	b.n	88d80 <__hi0bits+0xc>

00088db4 <__lo0bits>:
   88db4:	6803      	ldr	r3, [r0, #0]
   88db6:	4602      	mov	r2, r0
   88db8:	f013 0007 	ands.w	r0, r3, #7
   88dbc:	d009      	beq.n	88dd2 <__lo0bits+0x1e>
   88dbe:	07d9      	lsls	r1, r3, #31
   88dc0:	d41f      	bmi.n	88e02 <__lo0bits+0x4e>
   88dc2:	0798      	lsls	r0, r3, #30
   88dc4:	bf4b      	itete	mi
   88dc6:	085b      	lsrmi	r3, r3, #1
   88dc8:	089b      	lsrpl	r3, r3, #2
   88dca:	2001      	movmi	r0, #1
   88dcc:	2002      	movpl	r0, #2
   88dce:	6013      	str	r3, [r2, #0]
   88dd0:	4770      	bx	lr
   88dd2:	b299      	uxth	r1, r3
   88dd4:	b909      	cbnz	r1, 88dda <__lo0bits+0x26>
   88dd6:	2010      	movs	r0, #16
   88dd8:	40c3      	lsrs	r3, r0
   88dda:	b2d9      	uxtb	r1, r3
   88ddc:	b909      	cbnz	r1, 88de2 <__lo0bits+0x2e>
   88dde:	3008      	adds	r0, #8
   88de0:	0a1b      	lsrs	r3, r3, #8
   88de2:	0719      	lsls	r1, r3, #28
   88de4:	bf04      	itt	eq
   88de6:	091b      	lsreq	r3, r3, #4
   88de8:	3004      	addeq	r0, #4
   88dea:	0799      	lsls	r1, r3, #30
   88dec:	bf04      	itt	eq
   88dee:	089b      	lsreq	r3, r3, #2
   88df0:	3002      	addeq	r0, #2
   88df2:	07d9      	lsls	r1, r3, #31
   88df4:	d403      	bmi.n	88dfe <__lo0bits+0x4a>
   88df6:	085b      	lsrs	r3, r3, #1
   88df8:	f100 0001 	add.w	r0, r0, #1
   88dfc:	d003      	beq.n	88e06 <__lo0bits+0x52>
   88dfe:	6013      	str	r3, [r2, #0]
   88e00:	4770      	bx	lr
   88e02:	2000      	movs	r0, #0
   88e04:	4770      	bx	lr
   88e06:	2020      	movs	r0, #32
   88e08:	4770      	bx	lr
   88e0a:	bf00      	nop

00088e0c <__i2b>:
   88e0c:	b538      	push	{r3, r4, r5, lr}
   88e0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88e10:	4604      	mov	r4, r0
   88e12:	460d      	mov	r5, r1
   88e14:	b14b      	cbz	r3, 88e2a <__i2b+0x1e>
   88e16:	6858      	ldr	r0, [r3, #4]
   88e18:	b1b0      	cbz	r0, 88e48 <__i2b+0x3c>
   88e1a:	6802      	ldr	r2, [r0, #0]
   88e1c:	605a      	str	r2, [r3, #4]
   88e1e:	2200      	movs	r2, #0
   88e20:	2301      	movs	r3, #1
   88e22:	6145      	str	r5, [r0, #20]
   88e24:	e9c0 2303 	strd	r2, r3, [r0, #12]
   88e28:	bd38      	pop	{r3, r4, r5, pc}
   88e2a:	2221      	movs	r2, #33	; 0x21
   88e2c:	2104      	movs	r1, #4
   88e2e:	f000 febf 	bl	89bb0 <_calloc_r>
   88e32:	4603      	mov	r3, r0
   88e34:	64e0      	str	r0, [r4, #76]	; 0x4c
   88e36:	2800      	cmp	r0, #0
   88e38:	d1ed      	bne.n	88e16 <__i2b+0xa>
   88e3a:	2200      	movs	r2, #0
   88e3c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   88e40:	4b07      	ldr	r3, [pc, #28]	; (88e60 <__i2b+0x54>)
   88e42:	4808      	ldr	r0, [pc, #32]	; (88e64 <__i2b+0x58>)
   88e44:	f000 fe94 	bl	89b70 <__assert_func>
   88e48:	221c      	movs	r2, #28
   88e4a:	2101      	movs	r1, #1
   88e4c:	4620      	mov	r0, r4
   88e4e:	f000 feaf 	bl	89bb0 <_calloc_r>
   88e52:	2800      	cmp	r0, #0
   88e54:	d0f1      	beq.n	88e3a <__i2b+0x2e>
   88e56:	2201      	movs	r2, #1
   88e58:	2302      	movs	r3, #2
   88e5a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   88e5e:	e7de      	b.n	88e1e <__i2b+0x12>
   88e60:	0008ac70 	.word	0x0008ac70
   88e64:	0008ad14 	.word	0x0008ad14

00088e68 <__multiply>:
   88e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88e6c:	690e      	ldr	r6, [r1, #16]
   88e6e:	6915      	ldr	r5, [r2, #16]
   88e70:	4688      	mov	r8, r1
   88e72:	42ae      	cmp	r6, r5
   88e74:	4614      	mov	r4, r2
   88e76:	b085      	sub	sp, #20
   88e78:	db05      	blt.n	88e86 <__multiply+0x1e>
   88e7a:	462a      	mov	r2, r5
   88e7c:	4623      	mov	r3, r4
   88e7e:	4635      	mov	r5, r6
   88e80:	460c      	mov	r4, r1
   88e82:	4616      	mov	r6, r2
   88e84:	4698      	mov	r8, r3
   88e86:	68a3      	ldr	r3, [r4, #8]
   88e88:	6861      	ldr	r1, [r4, #4]
   88e8a:	19af      	adds	r7, r5, r6
   88e8c:	42bb      	cmp	r3, r7
   88e8e:	bfb8      	it	lt
   88e90:	3101      	addlt	r1, #1
   88e92:	f7ff feed 	bl	88c70 <_Balloc>
   88e96:	9001      	str	r0, [sp, #4]
   88e98:	2800      	cmp	r0, #0
   88e9a:	f000 8087 	beq.w	88fac <__multiply+0x144>
   88e9e:	9b01      	ldr	r3, [sp, #4]
   88ea0:	f103 0914 	add.w	r9, r3, #20
   88ea4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   88ea8:	45d1      	cmp	r9, sl
   88eaa:	d205      	bcs.n	88eb8 <__multiply+0x50>
   88eac:	464b      	mov	r3, r9
   88eae:	2200      	movs	r2, #0
   88eb0:	f843 2b04 	str.w	r2, [r3], #4
   88eb4:	459a      	cmp	sl, r3
   88eb6:	d8fb      	bhi.n	88eb0 <__multiply+0x48>
   88eb8:	f108 0814 	add.w	r8, r8, #20
   88ebc:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   88ec0:	f104 0314 	add.w	r3, r4, #20
   88ec4:	45d8      	cmp	r8, fp
   88ec6:	461a      	mov	r2, r3
   88ec8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   88ecc:	d25f      	bcs.n	88f8e <__multiply+0x126>
   88ece:	1b2b      	subs	r3, r5, r4
   88ed0:	3b15      	subs	r3, #21
   88ed2:	f023 0303 	bic.w	r3, r3, #3
   88ed6:	3304      	adds	r3, #4
   88ed8:	3415      	adds	r4, #21
   88eda:	42a5      	cmp	r5, r4
   88edc:	bf38      	it	cc
   88ede:	2304      	movcc	r3, #4
   88ee0:	e9cd a702 	strd	sl, r7, [sp, #8]
   88ee4:	46ac      	mov	ip, r5
   88ee6:	461f      	mov	r7, r3
   88ee8:	4692      	mov	sl, r2
   88eea:	e005      	b.n	88ef8 <__multiply+0x90>
   88eec:	0c00      	lsrs	r0, r0, #16
   88eee:	d129      	bne.n	88f44 <__multiply+0xdc>
   88ef0:	45c3      	cmp	fp, r8
   88ef2:	f109 0904 	add.w	r9, r9, #4
   88ef6:	d948      	bls.n	88f8a <__multiply+0x122>
   88ef8:	f858 0b04 	ldr.w	r0, [r8], #4
   88efc:	b285      	uxth	r5, r0
   88efe:	2d00      	cmp	r5, #0
   88f00:	d0f4      	beq.n	88eec <__multiply+0x84>
   88f02:	4656      	mov	r6, sl
   88f04:	464c      	mov	r4, r9
   88f06:	2300      	movs	r3, #0
   88f08:	f856 0b04 	ldr.w	r0, [r6], #4
   88f0c:	6821      	ldr	r1, [r4, #0]
   88f0e:	b282      	uxth	r2, r0
   88f10:	fa1f fe81 	uxth.w	lr, r1
   88f14:	fb05 ee02 	mla	lr, r5, r2, lr
   88f18:	0c00      	lsrs	r0, r0, #16
   88f1a:	0c0a      	lsrs	r2, r1, #16
   88f1c:	fb05 2200 	mla	r2, r5, r0, r2
   88f20:	4473      	add	r3, lr
   88f22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88f26:	b29b      	uxth	r3, r3
   88f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88f2c:	45b4      	cmp	ip, r6
   88f2e:	f844 3b04 	str.w	r3, [r4], #4
   88f32:	ea4f 4312 	mov.w	r3, r2, lsr #16
   88f36:	d8e7      	bhi.n	88f08 <__multiply+0xa0>
   88f38:	f849 3007 	str.w	r3, [r9, r7]
   88f3c:	f858 0c04 	ldr.w	r0, [r8, #-4]
   88f40:	0c00      	lsrs	r0, r0, #16
   88f42:	d0d5      	beq.n	88ef0 <__multiply+0x88>
   88f44:	f8d9 3000 	ldr.w	r3, [r9]
   88f48:	4654      	mov	r4, sl
   88f4a:	4619      	mov	r1, r3
   88f4c:	464d      	mov	r5, r9
   88f4e:	2200      	movs	r2, #0
   88f50:	8826      	ldrh	r6, [r4, #0]
   88f52:	0c09      	lsrs	r1, r1, #16
   88f54:	fb00 1106 	mla	r1, r0, r6, r1
   88f58:	b29b      	uxth	r3, r3
   88f5a:	440a      	add	r2, r1
   88f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88f60:	f845 3b04 	str.w	r3, [r5], #4
   88f64:	f854 6b04 	ldr.w	r6, [r4], #4
   88f68:	6829      	ldr	r1, [r5, #0]
   88f6a:	0c36      	lsrs	r6, r6, #16
   88f6c:	b28b      	uxth	r3, r1
   88f6e:	fb00 3306 	mla	r3, r0, r6, r3
   88f72:	45a4      	cmp	ip, r4
   88f74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88f78:	ea4f 4213 	mov.w	r2, r3, lsr #16
   88f7c:	d8e8      	bhi.n	88f50 <__multiply+0xe8>
   88f7e:	45c3      	cmp	fp, r8
   88f80:	f849 3007 	str.w	r3, [r9, r7]
   88f84:	f109 0904 	add.w	r9, r9, #4
   88f88:	d8b6      	bhi.n	88ef8 <__multiply+0x90>
   88f8a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   88f8e:	2f00      	cmp	r7, #0
   88f90:	dc02      	bgt.n	88f98 <__multiply+0x130>
   88f92:	e005      	b.n	88fa0 <__multiply+0x138>
   88f94:	3f01      	subs	r7, #1
   88f96:	d003      	beq.n	88fa0 <__multiply+0x138>
   88f98:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   88f9c:	2b00      	cmp	r3, #0
   88f9e:	d0f9      	beq.n	88f94 <__multiply+0x12c>
   88fa0:	9b01      	ldr	r3, [sp, #4]
   88fa2:	4618      	mov	r0, r3
   88fa4:	611f      	str	r7, [r3, #16]
   88fa6:	b005      	add	sp, #20
   88fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88fac:	4602      	mov	r2, r0
   88fae:	f240 115d 	movw	r1, #349	; 0x15d
   88fb2:	4b02      	ldr	r3, [pc, #8]	; (88fbc <__multiply+0x154>)
   88fb4:	4802      	ldr	r0, [pc, #8]	; (88fc0 <__multiply+0x158>)
   88fb6:	f000 fddb 	bl	89b70 <__assert_func>
   88fba:	bf00      	nop
   88fbc:	0008ac70 	.word	0x0008ac70
   88fc0:	0008ad14 	.word	0x0008ad14

00088fc4 <__pow5mult>:
   88fc4:	f012 0303 	ands.w	r3, r2, #3
   88fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88fcc:	4614      	mov	r4, r2
   88fce:	4607      	mov	r7, r0
   88fd0:	d12e      	bne.n	89030 <__pow5mult+0x6c>
   88fd2:	460e      	mov	r6, r1
   88fd4:	10a4      	asrs	r4, r4, #2
   88fd6:	d01c      	beq.n	89012 <__pow5mult+0x4e>
   88fd8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   88fda:	b395      	cbz	r5, 89042 <__pow5mult+0x7e>
   88fdc:	07e3      	lsls	r3, r4, #31
   88fde:	f04f 0800 	mov.w	r8, #0
   88fe2:	d406      	bmi.n	88ff2 <__pow5mult+0x2e>
   88fe4:	1064      	asrs	r4, r4, #1
   88fe6:	d014      	beq.n	89012 <__pow5mult+0x4e>
   88fe8:	6828      	ldr	r0, [r5, #0]
   88fea:	b1a8      	cbz	r0, 89018 <__pow5mult+0x54>
   88fec:	4605      	mov	r5, r0
   88fee:	07e3      	lsls	r3, r4, #31
   88ff0:	d5f8      	bpl.n	88fe4 <__pow5mult+0x20>
   88ff2:	462a      	mov	r2, r5
   88ff4:	4631      	mov	r1, r6
   88ff6:	4638      	mov	r0, r7
   88ff8:	f7ff ff36 	bl	88e68 <__multiply>
   88ffc:	b1b6      	cbz	r6, 8902c <__pow5mult+0x68>
   88ffe:	6871      	ldr	r1, [r6, #4]
   89000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89002:	1064      	asrs	r4, r4, #1
   89004:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   89008:	6032      	str	r2, [r6, #0]
   8900a:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8900e:	4606      	mov	r6, r0
   89010:	d1ea      	bne.n	88fe8 <__pow5mult+0x24>
   89012:	4630      	mov	r0, r6
   89014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89018:	462a      	mov	r2, r5
   8901a:	4629      	mov	r1, r5
   8901c:	4638      	mov	r0, r7
   8901e:	f7ff ff23 	bl	88e68 <__multiply>
   89022:	6028      	str	r0, [r5, #0]
   89024:	4605      	mov	r5, r0
   89026:	f8c0 8000 	str.w	r8, [r0]
   8902a:	e7e0      	b.n	88fee <__pow5mult+0x2a>
   8902c:	4606      	mov	r6, r0
   8902e:	e7d9      	b.n	88fe4 <__pow5mult+0x20>
   89030:	4a0f      	ldr	r2, [pc, #60]	; (89070 <__pow5mult+0xac>)
   89032:	3b01      	subs	r3, #1
   89034:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89038:	2300      	movs	r3, #0
   8903a:	f7ff fe49 	bl	88cd0 <__multadd>
   8903e:	4606      	mov	r6, r0
   89040:	e7c8      	b.n	88fd4 <__pow5mult+0x10>
   89042:	2101      	movs	r1, #1
   89044:	4638      	mov	r0, r7
   89046:	f7ff fe13 	bl	88c70 <_Balloc>
   8904a:	4605      	mov	r5, r0
   8904c:	b140      	cbz	r0, 89060 <__pow5mult+0x9c>
   8904e:	f240 2371 	movw	r3, #625	; 0x271
   89052:	2201      	movs	r2, #1
   89054:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89058:	2300      	movs	r3, #0
   8905a:	64b8      	str	r0, [r7, #72]	; 0x48
   8905c:	6003      	str	r3, [r0, #0]
   8905e:	e7bd      	b.n	88fdc <__pow5mult+0x18>
   89060:	4602      	mov	r2, r0
   89062:	f44f 71a0 	mov.w	r1, #320	; 0x140
   89066:	4b03      	ldr	r3, [pc, #12]	; (89074 <__pow5mult+0xb0>)
   89068:	4803      	ldr	r0, [pc, #12]	; (89078 <__pow5mult+0xb4>)
   8906a:	f000 fd81 	bl	89b70 <__assert_func>
   8906e:	bf00      	nop
   89070:	0008ae88 	.word	0x0008ae88
   89074:	0008ac70 	.word	0x0008ac70
   89078:	0008ad14 	.word	0x0008ad14

0008907c <__lshift>:
   8907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89080:	460c      	mov	r4, r1
   89082:	6926      	ldr	r6, [r4, #16]
   89084:	68a3      	ldr	r3, [r4, #8]
   89086:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8908a:	1c75      	adds	r5, r6, #1
   8908c:	429d      	cmp	r5, r3
   8908e:	4690      	mov	r8, r2
   89090:	4607      	mov	r7, r0
   89092:	6849      	ldr	r1, [r1, #4]
   89094:	ea4f 1962 	mov.w	r9, r2, asr #5
   89098:	dd04      	ble.n	890a4 <__lshift+0x28>
   8909a:	005b      	lsls	r3, r3, #1
   8909c:	429d      	cmp	r5, r3
   8909e:	f101 0101 	add.w	r1, r1, #1
   890a2:	dcfa      	bgt.n	8909a <__lshift+0x1e>
   890a4:	4638      	mov	r0, r7
   890a6:	f7ff fde3 	bl	88c70 <_Balloc>
   890aa:	2800      	cmp	r0, #0
   890ac:	d051      	beq.n	89152 <__lshift+0xd6>
   890ae:	f1b9 0f00 	cmp.w	r9, #0
   890b2:	f100 0114 	add.w	r1, r0, #20
   890b6:	dd0f      	ble.n	890d8 <__lshift+0x5c>
   890b8:	460b      	mov	r3, r1
   890ba:	f04f 0c00 	mov.w	ip, #0
   890be:	f109 0205 	add.w	r2, r9, #5
   890c2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   890c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   890ca:	f843 cb04 	str.w	ip, [r3], #4
   890ce:	4293      	cmp	r3, r2
   890d0:	d1fb      	bne.n	890ca <__lshift+0x4e>
   890d2:	f1ae 0314 	sub.w	r3, lr, #20
   890d6:	4419      	add	r1, r3
   890d8:	6922      	ldr	r2, [r4, #16]
   890da:	f104 0314 	add.w	r3, r4, #20
   890de:	f018 081f 	ands.w	r8, r8, #31
   890e2:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   890e6:	d02c      	beq.n	89142 <__lshift+0xc6>
   890e8:	468e      	mov	lr, r1
   890ea:	f04f 0a00 	mov.w	sl, #0
   890ee:	f1c8 0920 	rsb	r9, r8, #32
   890f2:	681a      	ldr	r2, [r3, #0]
   890f4:	fa02 f208 	lsl.w	r2, r2, r8
   890f8:	ea42 020a 	orr.w	r2, r2, sl
   890fc:	f84e 2b04 	str.w	r2, [lr], #4
   89100:	f853 2b04 	ldr.w	r2, [r3], #4
   89104:	459c      	cmp	ip, r3
   89106:	fa22 fa09 	lsr.w	sl, r2, r9
   8910a:	d8f2      	bhi.n	890f2 <__lshift+0x76>
   8910c:	ebac 0304 	sub.w	r3, ip, r4
   89110:	3b15      	subs	r3, #21
   89112:	f023 0303 	bic.w	r3, r3, #3
   89116:	3304      	adds	r3, #4
   89118:	f104 0215 	add.w	r2, r4, #21
   8911c:	4594      	cmp	ip, r2
   8911e:	bf38      	it	cc
   89120:	2304      	movcc	r3, #4
   89122:	f1ba 0f00 	cmp.w	sl, #0
   89126:	bf18      	it	ne
   89128:	462e      	movne	r6, r5
   8912a:	f841 a003 	str.w	sl, [r1, r3]
   8912e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89130:	6862      	ldr	r2, [r4, #4]
   89132:	6106      	str	r6, [r0, #16]
   89134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89138:	6021      	str	r1, [r4, #0]
   8913a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89142:	3904      	subs	r1, #4
   89144:	f853 2b04 	ldr.w	r2, [r3], #4
   89148:	459c      	cmp	ip, r3
   8914a:	f841 2f04 	str.w	r2, [r1, #4]!
   8914e:	d8f9      	bhi.n	89144 <__lshift+0xc8>
   89150:	e7ed      	b.n	8912e <__lshift+0xb2>
   89152:	4602      	mov	r2, r0
   89154:	f240 11d9 	movw	r1, #473	; 0x1d9
   89158:	4b01      	ldr	r3, [pc, #4]	; (89160 <__lshift+0xe4>)
   8915a:	4802      	ldr	r0, [pc, #8]	; (89164 <__lshift+0xe8>)
   8915c:	f000 fd08 	bl	89b70 <__assert_func>
   89160:	0008ac70 	.word	0x0008ac70
   89164:	0008ad14 	.word	0x0008ad14

00089168 <__mcmp>:
   89168:	4684      	mov	ip, r0
   8916a:	690b      	ldr	r3, [r1, #16]
   8916c:	6900      	ldr	r0, [r0, #16]
   8916e:	1ac0      	subs	r0, r0, r3
   89170:	d115      	bne.n	8919e <__mcmp+0x36>
   89172:	f10c 0c14 	add.w	ip, ip, #20
   89176:	3114      	adds	r1, #20
   89178:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8917c:	b410      	push	{r4}
   8917e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   89182:	e001      	b.n	89188 <__mcmp+0x20>
   89184:	4594      	cmp	ip, r2
   89186:	d208      	bcs.n	8919a <__mcmp+0x32>
   89188:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8918c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   89190:	428c      	cmp	r4, r1
   89192:	d0f7      	beq.n	89184 <__mcmp+0x1c>
   89194:	d204      	bcs.n	891a0 <__mcmp+0x38>
   89196:	f04f 30ff 	mov.w	r0, #4294967295
   8919a:	bc10      	pop	{r4}
   8919c:	4770      	bx	lr
   8919e:	4770      	bx	lr
   891a0:	2001      	movs	r0, #1
   891a2:	bc10      	pop	{r4}
   891a4:	4770      	bx	lr
   891a6:	bf00      	nop

000891a8 <__mdiff>:
   891a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891ac:	690c      	ldr	r4, [r1, #16]
   891ae:	6913      	ldr	r3, [r2, #16]
   891b0:	4689      	mov	r9, r1
   891b2:	1ae4      	subs	r4, r4, r3
   891b4:	2c00      	cmp	r4, #0
   891b6:	4617      	mov	r7, r2
   891b8:	d17d      	bne.n	892b6 <__mdiff+0x10e>
   891ba:	f101 0614 	add.w	r6, r1, #20
   891be:	3214      	adds	r2, #20
   891c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   891c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   891c8:	e001      	b.n	891ce <__mdiff+0x26>
   891ca:	429e      	cmp	r6, r3
   891cc:	d276      	bcs.n	892bc <__mdiff+0x114>
   891ce:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   891d2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   891d6:	428d      	cmp	r5, r1
   891d8:	d0f7      	beq.n	891ca <__mdiff+0x22>
   891da:	d367      	bcc.n	892ac <__mdiff+0x104>
   891dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
   891e0:	f7ff fd46 	bl	88c70 <_Balloc>
   891e4:	2800      	cmp	r0, #0
   891e6:	d073      	beq.n	892d0 <__mdiff+0x128>
   891e8:	f8d9 5010 	ldr.w	r5, [r9, #16]
   891ec:	60c4      	str	r4, [r0, #12]
   891ee:	f100 0414 	add.w	r4, r0, #20
   891f2:	4626      	mov	r6, r4
   891f4:	f04f 0a00 	mov.w	sl, #0
   891f8:	693b      	ldr	r3, [r7, #16]
   891fa:	f109 0814 	add.w	r8, r9, #20
   891fe:	f107 0e14 	add.w	lr, r7, #20
   89202:	f109 0c10 	add.w	ip, r9, #16
   89206:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8920a:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8920e:	f85c bf04 	ldr.w	fp, [ip, #4]!
   89212:	f85e 1b04 	ldr.w	r1, [lr], #4
   89216:	fa1f f38b 	uxth.w	r3, fp
   8921a:	4453      	add	r3, sl
   8921c:	fa1f fa81 	uxth.w	sl, r1
   89220:	0c09      	lsrs	r1, r1, #16
   89222:	eba3 030a 	sub.w	r3, r3, sl
   89226:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8922a:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8922e:	b29b      	uxth	r3, r3
   89230:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89234:	45f1      	cmp	r9, lr
   89236:	f846 3b04 	str.w	r3, [r6], #4
   8923a:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8923e:	d8e6      	bhi.n	8920e <__mdiff+0x66>
   89240:	eba9 0107 	sub.w	r1, r9, r7
   89244:	3915      	subs	r1, #21
   89246:	3715      	adds	r7, #21
   89248:	45b9      	cmp	r9, r7
   8924a:	f021 0603 	bic.w	r6, r1, #3
   8924e:	f106 0604 	add.w	r6, r6, #4
   89252:	bf38      	it	cc
   89254:	2604      	movcc	r6, #4
   89256:	f021 0103 	bic.w	r1, r1, #3
   8925a:	bf38      	it	cc
   8925c:	2100      	movcc	r1, #0
   8925e:	44b0      	add	r8, r6
   89260:	4542      	cmp	r2, r8
   89262:	4426      	add	r6, r4
   89264:	440c      	add	r4, r1
   89266:	d918      	bls.n	8929a <__mdiff+0xf2>
   89268:	4637      	mov	r7, r6
   8926a:	4644      	mov	r4, r8
   8926c:	f854 1b04 	ldr.w	r1, [r4], #4
   89270:	b28b      	uxth	r3, r1
   89272:	4453      	add	r3, sl
   89274:	ea4f 4a23 	mov.w	sl, r3, asr #16
   89278:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8927c:	b29b      	uxth	r3, r3
   8927e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89282:	42a2      	cmp	r2, r4
   89284:	f847 3b04 	str.w	r3, [r7], #4
   89288:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8928c:	d8ee      	bhi.n	8926c <__mdiff+0xc4>
   8928e:	1e54      	subs	r4, r2, #1
   89290:	eba4 0408 	sub.w	r4, r4, r8
   89294:	f024 0403 	bic.w	r4, r4, #3
   89298:	4434      	add	r4, r6
   8929a:	b923      	cbnz	r3, 892a6 <__mdiff+0xfe>
   8929c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   892a0:	3d01      	subs	r5, #1
   892a2:	2b00      	cmp	r3, #0
   892a4:	d0fa      	beq.n	8929c <__mdiff+0xf4>
   892a6:	6105      	str	r5, [r0, #16]
   892a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   892ac:	464b      	mov	r3, r9
   892ae:	2401      	movs	r4, #1
   892b0:	46b9      	mov	r9, r7
   892b2:	461f      	mov	r7, r3
   892b4:	e792      	b.n	891dc <__mdiff+0x34>
   892b6:	dbf9      	blt.n	892ac <__mdiff+0x104>
   892b8:	2400      	movs	r4, #0
   892ba:	e78f      	b.n	891dc <__mdiff+0x34>
   892bc:	2100      	movs	r1, #0
   892be:	f7ff fcd7 	bl	88c70 <_Balloc>
   892c2:	b160      	cbz	r0, 892de <__mdiff+0x136>
   892c4:	2201      	movs	r2, #1
   892c6:	2300      	movs	r3, #0
   892c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   892cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   892d0:	4602      	mov	r2, r0
   892d2:	f44f 7110 	mov.w	r1, #576	; 0x240
   892d6:	4b05      	ldr	r3, [pc, #20]	; (892ec <__mdiff+0x144>)
   892d8:	4805      	ldr	r0, [pc, #20]	; (892f0 <__mdiff+0x148>)
   892da:	f000 fc49 	bl	89b70 <__assert_func>
   892de:	4602      	mov	r2, r0
   892e0:	f240 2132 	movw	r1, #562	; 0x232
   892e4:	4b01      	ldr	r3, [pc, #4]	; (892ec <__mdiff+0x144>)
   892e6:	4802      	ldr	r0, [pc, #8]	; (892f0 <__mdiff+0x148>)
   892e8:	f000 fc42 	bl	89b70 <__assert_func>
   892ec:	0008ac70 	.word	0x0008ac70
   892f0:	0008ad14 	.word	0x0008ad14

000892f4 <__d2b>:
   892f4:	b570      	push	{r4, r5, r6, lr}
   892f6:	2101      	movs	r1, #1
   892f8:	b082      	sub	sp, #8
   892fa:	4616      	mov	r6, r2
   892fc:	461d      	mov	r5, r3
   892fe:	f7ff fcb7 	bl	88c70 <_Balloc>
   89302:	4604      	mov	r4, r0
   89304:	2800      	cmp	r0, #0
   89306:	d04c      	beq.n	893a2 <__d2b+0xae>
   89308:	462b      	mov	r3, r5
   8930a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8930e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   89312:	b10d      	cbz	r5, 89318 <__d2b+0x24>
   89314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89318:	2e00      	cmp	r6, #0
   8931a:	9301      	str	r3, [sp, #4]
   8931c:	d022      	beq.n	89364 <__d2b+0x70>
   8931e:	4668      	mov	r0, sp
   89320:	9600      	str	r6, [sp, #0]
   89322:	f7ff fd47 	bl	88db4 <__lo0bits>
   89326:	2800      	cmp	r0, #0
   89328:	d037      	beq.n	8939a <__d2b+0xa6>
   8932a:	9b01      	ldr	r3, [sp, #4]
   8932c:	9900      	ldr	r1, [sp, #0]
   8932e:	f1c0 0220 	rsb	r2, r0, #32
   89332:	fa03 f202 	lsl.w	r2, r3, r2
   89336:	430a      	orrs	r2, r1
   89338:	40c3      	lsrs	r3, r0
   8933a:	9301      	str	r3, [sp, #4]
   8933c:	6162      	str	r2, [r4, #20]
   8933e:	2b00      	cmp	r3, #0
   89340:	bf14      	ite	ne
   89342:	2102      	movne	r1, #2
   89344:	2101      	moveq	r1, #1
   89346:	61a3      	str	r3, [r4, #24]
   89348:	6121      	str	r1, [r4, #16]
   8934a:	b1b5      	cbz	r5, 8937a <__d2b+0x86>
   8934c:	9b06      	ldr	r3, [sp, #24]
   8934e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   89352:	4405      	add	r5, r0
   89354:	601d      	str	r5, [r3, #0]
   89356:	9b07      	ldr	r3, [sp, #28]
   89358:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8935c:	6018      	str	r0, [r3, #0]
   8935e:	4620      	mov	r0, r4
   89360:	b002      	add	sp, #8
   89362:	bd70      	pop	{r4, r5, r6, pc}
   89364:	a801      	add	r0, sp, #4
   89366:	f7ff fd25 	bl	88db4 <__lo0bits>
   8936a:	2301      	movs	r3, #1
   8936c:	9a01      	ldr	r2, [sp, #4]
   8936e:	4619      	mov	r1, r3
   89370:	6162      	str	r2, [r4, #20]
   89372:	3020      	adds	r0, #32
   89374:	6123      	str	r3, [r4, #16]
   89376:	2d00      	cmp	r5, #0
   89378:	d1e8      	bne.n	8934c <__d2b+0x58>
   8937a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8937e:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   89382:	6910      	ldr	r0, [r2, #16]
   89384:	9a06      	ldr	r2, [sp, #24]
   89386:	6013      	str	r3, [r2, #0]
   89388:	f7ff fcf4 	bl	88d74 <__hi0bits>
   8938c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   89390:	4620      	mov	r0, r4
   89392:	9b07      	ldr	r3, [sp, #28]
   89394:	6019      	str	r1, [r3, #0]
   89396:	b002      	add	sp, #8
   89398:	bd70      	pop	{r4, r5, r6, pc}
   8939a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8939e:	6162      	str	r2, [r4, #20]
   893a0:	e7cd      	b.n	8933e <__d2b+0x4a>
   893a2:	4602      	mov	r2, r0
   893a4:	f240 310a 	movw	r1, #778	; 0x30a
   893a8:	4b01      	ldr	r3, [pc, #4]	; (893b0 <__d2b+0xbc>)
   893aa:	4802      	ldr	r0, [pc, #8]	; (893b4 <__d2b+0xc0>)
   893ac:	f000 fbe0 	bl	89b70 <__assert_func>
   893b0:	0008ac70 	.word	0x0008ac70
   893b4:	0008ad14 	.word	0x0008ad14

000893b8 <_realloc_r>:
   893b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   893bc:	4616      	mov	r6, r2
   893be:	2900      	cmp	r1, #0
   893c0:	f000 8098 	beq.w	894f4 <_realloc_r+0x13c>
   893c4:	f106 050b 	add.w	r5, r6, #11
   893c8:	4680      	mov	r8, r0
   893ca:	460c      	mov	r4, r1
   893cc:	f7ff fc44 	bl	88c58 <__malloc_lock>
   893d0:	2d16      	cmp	r5, #22
   893d2:	d85d      	bhi.n	89490 <_realloc_r+0xd8>
   893d4:	2510      	movs	r5, #16
   893d6:	462a      	mov	r2, r5
   893d8:	42ae      	cmp	r6, r5
   893da:	d85e      	bhi.n	8949a <_realloc_r+0xe2>
   893dc:	f854 1c04 	ldr.w	r1, [r4, #-4]
   893e0:	f1a4 0908 	sub.w	r9, r4, #8
   893e4:	f021 0703 	bic.w	r7, r1, #3
   893e8:	4297      	cmp	r7, r2
   893ea:	da62      	bge.n	894b2 <_realloc_r+0xfa>
   893ec:	4bbc      	ldr	r3, [pc, #752]	; (896e0 <_realloc_r+0x328>)
   893ee:	eb09 0007 	add.w	r0, r9, r7
   893f2:	f8d3 c008 	ldr.w	ip, [r3, #8]
   893f6:	4584      	cmp	ip, r0
   893f8:	f000 8097 	beq.w	8952a <_realloc_r+0x172>
   893fc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   89400:	f02c 0301 	bic.w	r3, ip, #1
   89404:	4403      	add	r3, r0
   89406:	685b      	ldr	r3, [r3, #4]
   89408:	07db      	lsls	r3, r3, #31
   8940a:	d468      	bmi.n	894de <_realloc_r+0x126>
   8940c:	f02c 0c03 	bic.w	ip, ip, #3
   89410:	eb07 030c 	add.w	r3, r7, ip
   89414:	4293      	cmp	r3, r2
   89416:	da47      	bge.n	894a8 <_realloc_r+0xf0>
   89418:	07cb      	lsls	r3, r1, #31
   8941a:	d410      	bmi.n	8943e <_realloc_r+0x86>
   8941c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89420:	eba9 0a03 	sub.w	sl, r9, r3
   89424:	f8da 3004 	ldr.w	r3, [sl, #4]
   89428:	f023 0103 	bic.w	r1, r3, #3
   8942c:	448c      	add	ip, r1
   8942e:	44bc      	add	ip, r7
   89430:	4594      	cmp	ip, r2
   89432:	f280 8111 	bge.w	89658 <_realloc_r+0x2a0>
   89436:	187b      	adds	r3, r7, r1
   89438:	4293      	cmp	r3, r2
   8943a:	f280 80e8 	bge.w	8960e <_realloc_r+0x256>
   8943e:	4631      	mov	r1, r6
   89440:	4640      	mov	r0, r8
   89442:	f7ff f883 	bl	8854c <_malloc_r>
   89446:	4606      	mov	r6, r0
   89448:	b1e0      	cbz	r0, 89484 <_realloc_r+0xcc>
   8944a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8944e:	f1a0 0208 	sub.w	r2, r0, #8
   89452:	f023 0301 	bic.w	r3, r3, #1
   89456:	444b      	add	r3, r9
   89458:	4293      	cmp	r3, r2
   8945a:	f000 80d2 	beq.w	89602 <_realloc_r+0x24a>
   8945e:	1f3a      	subs	r2, r7, #4
   89460:	2a24      	cmp	r2, #36	; 0x24
   89462:	f200 80f5 	bhi.w	89650 <_realloc_r+0x298>
   89466:	2a13      	cmp	r2, #19
   89468:	f200 80ac 	bhi.w	895c4 <_realloc_r+0x20c>
   8946c:	4603      	mov	r3, r0
   8946e:	4622      	mov	r2, r4
   89470:	6811      	ldr	r1, [r2, #0]
   89472:	6019      	str	r1, [r3, #0]
   89474:	6851      	ldr	r1, [r2, #4]
   89476:	6059      	str	r1, [r3, #4]
   89478:	6892      	ldr	r2, [r2, #8]
   8947a:	609a      	str	r2, [r3, #8]
   8947c:	4621      	mov	r1, r4
   8947e:	4640      	mov	r0, r8
   89480:	f7fe fd0e 	bl	87ea0 <_free_r>
   89484:	4640      	mov	r0, r8
   89486:	f7ff fbed 	bl	88c64 <__malloc_unlock>
   8948a:	4630      	mov	r0, r6
   8948c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89490:	f025 0507 	bic.w	r5, r5, #7
   89494:	2d00      	cmp	r5, #0
   89496:	462a      	mov	r2, r5
   89498:	da9e      	bge.n	893d8 <_realloc_r+0x20>
   8949a:	230c      	movs	r3, #12
   8949c:	2600      	movs	r6, #0
   8949e:	f8c8 3000 	str.w	r3, [r8]
   894a2:	4630      	mov	r0, r6
   894a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   894a8:	461f      	mov	r7, r3
   894aa:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   894ae:	60d3      	str	r3, [r2, #12]
   894b0:	609a      	str	r2, [r3, #8]
   894b2:	1b7b      	subs	r3, r7, r5
   894b4:	2b0f      	cmp	r3, #15
   894b6:	d822      	bhi.n	894fe <_realloc_r+0x146>
   894b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   894bc:	f003 0301 	and.w	r3, r3, #1
   894c0:	433b      	orrs	r3, r7
   894c2:	f8c9 3004 	str.w	r3, [r9, #4]
   894c6:	444f      	add	r7, r9
   894c8:	687b      	ldr	r3, [r7, #4]
   894ca:	f043 0301 	orr.w	r3, r3, #1
   894ce:	607b      	str	r3, [r7, #4]
   894d0:	4626      	mov	r6, r4
   894d2:	4640      	mov	r0, r8
   894d4:	f7ff fbc6 	bl	88c64 <__malloc_unlock>
   894d8:	4630      	mov	r0, r6
   894da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   894de:	07c9      	lsls	r1, r1, #31
   894e0:	d4ad      	bmi.n	8943e <_realloc_r+0x86>
   894e2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   894e6:	eba9 0a03 	sub.w	sl, r9, r3
   894ea:	f8da 1004 	ldr.w	r1, [sl, #4]
   894ee:	f021 0103 	bic.w	r1, r1, #3
   894f2:	e7a0      	b.n	89436 <_realloc_r+0x7e>
   894f4:	4611      	mov	r1, r2
   894f6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   894fa:	f7ff b827 	b.w	8854c <_malloc_r>
   894fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
   89502:	f043 0301 	orr.w	r3, r3, #1
   89506:	f001 0101 	and.w	r1, r1, #1
   8950a:	4329      	orrs	r1, r5
   8950c:	f8c9 1004 	str.w	r1, [r9, #4]
   89510:	eb09 0105 	add.w	r1, r9, r5
   89514:	604b      	str	r3, [r1, #4]
   89516:	444f      	add	r7, r9
   89518:	687b      	ldr	r3, [r7, #4]
   8951a:	4640      	mov	r0, r8
   8951c:	f043 0301 	orr.w	r3, r3, #1
   89520:	3108      	adds	r1, #8
   89522:	607b      	str	r3, [r7, #4]
   89524:	f7fe fcbc 	bl	87ea0 <_free_r>
   89528:	e7d2      	b.n	894d0 <_realloc_r+0x118>
   8952a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8952e:	f020 0b03 	bic.w	fp, r0, #3
   89532:	eb07 0c0b 	add.w	ip, r7, fp
   89536:	f105 0010 	add.w	r0, r5, #16
   8953a:	4584      	cmp	ip, r0
   8953c:	da4d      	bge.n	895da <_realloc_r+0x222>
   8953e:	07c9      	lsls	r1, r1, #31
   89540:	f53f af7d 	bmi.w	8943e <_realloc_r+0x86>
   89544:	f854 1c08 	ldr.w	r1, [r4, #-8]
   89548:	eba9 0a01 	sub.w	sl, r9, r1
   8954c:	f8da 1004 	ldr.w	r1, [sl, #4]
   89550:	f021 0103 	bic.w	r1, r1, #3
   89554:	448b      	add	fp, r1
   89556:	44bb      	add	fp, r7
   89558:	4558      	cmp	r0, fp
   8955a:	f73f af6c 	bgt.w	89436 <_realloc_r+0x7e>
   8955e:	4656      	mov	r6, sl
   89560:	f8da 100c 	ldr.w	r1, [sl, #12]
   89564:	f856 0f08 	ldr.w	r0, [r6, #8]!
   89568:	1f3a      	subs	r2, r7, #4
   8956a:	2a24      	cmp	r2, #36	; 0x24
   8956c:	60c1      	str	r1, [r0, #12]
   8956e:	6088      	str	r0, [r1, #8]
   89570:	f200 80db 	bhi.w	8972a <_realloc_r+0x372>
   89574:	2a13      	cmp	r2, #19
   89576:	f240 80d6 	bls.w	89726 <_realloc_r+0x36e>
   8957a:	6821      	ldr	r1, [r4, #0]
   8957c:	2a1b      	cmp	r2, #27
   8957e:	f8ca 1008 	str.w	r1, [sl, #8]
   89582:	6861      	ldr	r1, [r4, #4]
   89584:	f8ca 100c 	str.w	r1, [sl, #12]
   89588:	f200 80e0 	bhi.w	8974c <_realloc_r+0x394>
   8958c:	3408      	adds	r4, #8
   8958e:	f10a 0210 	add.w	r2, sl, #16
   89592:	6821      	ldr	r1, [r4, #0]
   89594:	6011      	str	r1, [r2, #0]
   89596:	6861      	ldr	r1, [r4, #4]
   89598:	6051      	str	r1, [r2, #4]
   8959a:	68a1      	ldr	r1, [r4, #8]
   8959c:	6091      	str	r1, [r2, #8]
   8959e:	ebab 0205 	sub.w	r2, fp, r5
   895a2:	eb0a 0105 	add.w	r1, sl, r5
   895a6:	f042 0201 	orr.w	r2, r2, #1
   895aa:	6099      	str	r1, [r3, #8]
   895ac:	604a      	str	r2, [r1, #4]
   895ae:	f8da 3004 	ldr.w	r3, [sl, #4]
   895b2:	4640      	mov	r0, r8
   895b4:	f003 0301 	and.w	r3, r3, #1
   895b8:	431d      	orrs	r5, r3
   895ba:	f8ca 5004 	str.w	r5, [sl, #4]
   895be:	f7ff fb51 	bl	88c64 <__malloc_unlock>
   895c2:	e76e      	b.n	894a2 <_realloc_r+0xea>
   895c4:	6823      	ldr	r3, [r4, #0]
   895c6:	2a1b      	cmp	r2, #27
   895c8:	6003      	str	r3, [r0, #0]
   895ca:	6863      	ldr	r3, [r4, #4]
   895cc:	6043      	str	r3, [r0, #4]
   895ce:	d868      	bhi.n	896a2 <_realloc_r+0x2ea>
   895d0:	f104 0208 	add.w	r2, r4, #8
   895d4:	f100 0308 	add.w	r3, r0, #8
   895d8:	e74a      	b.n	89470 <_realloc_r+0xb8>
   895da:	eb09 0205 	add.w	r2, r9, r5
   895de:	ebac 0c05 	sub.w	ip, ip, r5
   895e2:	609a      	str	r2, [r3, #8]
   895e4:	f04c 0301 	orr.w	r3, ip, #1
   895e8:	6053      	str	r3, [r2, #4]
   895ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   895ee:	4640      	mov	r0, r8
   895f0:	f003 0301 	and.w	r3, r3, #1
   895f4:	431d      	orrs	r5, r3
   895f6:	f844 5c04 	str.w	r5, [r4, #-4]
   895fa:	f7ff fb33 	bl	88c64 <__malloc_unlock>
   895fe:	4626      	mov	r6, r4
   89600:	e74f      	b.n	894a2 <_realloc_r+0xea>
   89602:	f850 3c04 	ldr.w	r3, [r0, #-4]
   89606:	f023 0303 	bic.w	r3, r3, #3
   8960a:	441f      	add	r7, r3
   8960c:	e751      	b.n	894b2 <_realloc_r+0xfa>
   8960e:	4656      	mov	r6, sl
   89610:	f8da 100c 	ldr.w	r1, [sl, #12]
   89614:	f856 0f08 	ldr.w	r0, [r6, #8]!
   89618:	1f3a      	subs	r2, r7, #4
   8961a:	2a24      	cmp	r2, #36	; 0x24
   8961c:	60c1      	str	r1, [r0, #12]
   8961e:	6088      	str	r0, [r1, #8]
   89620:	d84c      	bhi.n	896bc <_realloc_r+0x304>
   89622:	2a13      	cmp	r2, #19
   89624:	d948      	bls.n	896b8 <_realloc_r+0x300>
   89626:	6821      	ldr	r1, [r4, #0]
   89628:	2a1b      	cmp	r2, #27
   8962a:	f8ca 1008 	str.w	r1, [sl, #8]
   8962e:	6861      	ldr	r1, [r4, #4]
   89630:	f8ca 100c 	str.w	r1, [sl, #12]
   89634:	d856      	bhi.n	896e4 <_realloc_r+0x32c>
   89636:	3408      	adds	r4, #8
   89638:	f10a 0210 	add.w	r2, sl, #16
   8963c:	461f      	mov	r7, r3
   8963e:	6823      	ldr	r3, [r4, #0]
   89640:	46d1      	mov	r9, sl
   89642:	6013      	str	r3, [r2, #0]
   89644:	6863      	ldr	r3, [r4, #4]
   89646:	6053      	str	r3, [r2, #4]
   89648:	68a3      	ldr	r3, [r4, #8]
   8964a:	4634      	mov	r4, r6
   8964c:	6093      	str	r3, [r2, #8]
   8964e:	e730      	b.n	894b2 <_realloc_r+0xfa>
   89650:	4621      	mov	r1, r4
   89652:	f7ff fa85 	bl	88b60 <memmove>
   89656:	e711      	b.n	8947c <_realloc_r+0xc4>
   89658:	4656      	mov	r6, sl
   8965a:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8965e:	60cb      	str	r3, [r1, #12]
   89660:	6099      	str	r1, [r3, #8]
   89662:	f856 1f08 	ldr.w	r1, [r6, #8]!
   89666:	f8da 300c 	ldr.w	r3, [sl, #12]
   8966a:	1f3a      	subs	r2, r7, #4
   8966c:	2a24      	cmp	r2, #36	; 0x24
   8966e:	60cb      	str	r3, [r1, #12]
   89670:	6099      	str	r1, [r3, #8]
   89672:	d82d      	bhi.n	896d0 <_realloc_r+0x318>
   89674:	2a13      	cmp	r2, #19
   89676:	d929      	bls.n	896cc <_realloc_r+0x314>
   89678:	6823      	ldr	r3, [r4, #0]
   8967a:	2a1b      	cmp	r2, #27
   8967c:	f8ca 3008 	str.w	r3, [sl, #8]
   89680:	6863      	ldr	r3, [r4, #4]
   89682:	f8ca 300c 	str.w	r3, [sl, #12]
   89686:	d842      	bhi.n	8970e <_realloc_r+0x356>
   89688:	3408      	adds	r4, #8
   8968a:	f10a 0310 	add.w	r3, sl, #16
   8968e:	6822      	ldr	r2, [r4, #0]
   89690:	4667      	mov	r7, ip
   89692:	601a      	str	r2, [r3, #0]
   89694:	6862      	ldr	r2, [r4, #4]
   89696:	46d1      	mov	r9, sl
   89698:	605a      	str	r2, [r3, #4]
   8969a:	68a2      	ldr	r2, [r4, #8]
   8969c:	4634      	mov	r4, r6
   8969e:	609a      	str	r2, [r3, #8]
   896a0:	e707      	b.n	894b2 <_realloc_r+0xfa>
   896a2:	68a3      	ldr	r3, [r4, #8]
   896a4:	2a24      	cmp	r2, #36	; 0x24
   896a6:	6083      	str	r3, [r0, #8]
   896a8:	68e3      	ldr	r3, [r4, #12]
   896aa:	60c3      	str	r3, [r0, #12]
   896ac:	d026      	beq.n	896fc <_realloc_r+0x344>
   896ae:	f104 0210 	add.w	r2, r4, #16
   896b2:	f100 0310 	add.w	r3, r0, #16
   896b6:	e6db      	b.n	89470 <_realloc_r+0xb8>
   896b8:	4632      	mov	r2, r6
   896ba:	e7bf      	b.n	8963c <_realloc_r+0x284>
   896bc:	4621      	mov	r1, r4
   896be:	4630      	mov	r0, r6
   896c0:	461f      	mov	r7, r3
   896c2:	46d1      	mov	r9, sl
   896c4:	f7ff fa4c 	bl	88b60 <memmove>
   896c8:	4634      	mov	r4, r6
   896ca:	e6f2      	b.n	894b2 <_realloc_r+0xfa>
   896cc:	4633      	mov	r3, r6
   896ce:	e7de      	b.n	8968e <_realloc_r+0x2d6>
   896d0:	4621      	mov	r1, r4
   896d2:	4630      	mov	r0, r6
   896d4:	4667      	mov	r7, ip
   896d6:	46d1      	mov	r9, sl
   896d8:	f7ff fa42 	bl	88b60 <memmove>
   896dc:	4634      	mov	r4, r6
   896de:	e6e8      	b.n	894b2 <_realloc_r+0xfa>
   896e0:	20000998 	.word	0x20000998
   896e4:	68a1      	ldr	r1, [r4, #8]
   896e6:	2a24      	cmp	r2, #36	; 0x24
   896e8:	f8ca 1010 	str.w	r1, [sl, #16]
   896ec:	68e1      	ldr	r1, [r4, #12]
   896ee:	f8ca 1014 	str.w	r1, [sl, #20]
   896f2:	d020      	beq.n	89736 <_realloc_r+0x37e>
   896f4:	3410      	adds	r4, #16
   896f6:	f10a 0218 	add.w	r2, sl, #24
   896fa:	e79f      	b.n	8963c <_realloc_r+0x284>
   896fc:	6923      	ldr	r3, [r4, #16]
   896fe:	f104 0218 	add.w	r2, r4, #24
   89702:	6103      	str	r3, [r0, #16]
   89704:	6963      	ldr	r3, [r4, #20]
   89706:	6143      	str	r3, [r0, #20]
   89708:	f100 0318 	add.w	r3, r0, #24
   8970c:	e6b0      	b.n	89470 <_realloc_r+0xb8>
   8970e:	68a3      	ldr	r3, [r4, #8]
   89710:	2a24      	cmp	r2, #36	; 0x24
   89712:	f8ca 3010 	str.w	r3, [sl, #16]
   89716:	68e3      	ldr	r3, [r4, #12]
   89718:	f8ca 3014 	str.w	r3, [sl, #20]
   8971c:	d022      	beq.n	89764 <_realloc_r+0x3ac>
   8971e:	3410      	adds	r4, #16
   89720:	f10a 0318 	add.w	r3, sl, #24
   89724:	e7b3      	b.n	8968e <_realloc_r+0x2d6>
   89726:	4632      	mov	r2, r6
   89728:	e733      	b.n	89592 <_realloc_r+0x1da>
   8972a:	4621      	mov	r1, r4
   8972c:	4630      	mov	r0, r6
   8972e:	f7ff fa17 	bl	88b60 <memmove>
   89732:	4b17      	ldr	r3, [pc, #92]	; (89790 <_realloc_r+0x3d8>)
   89734:	e733      	b.n	8959e <_realloc_r+0x1e6>
   89736:	6922      	ldr	r2, [r4, #16]
   89738:	3418      	adds	r4, #24
   8973a:	f8ca 2018 	str.w	r2, [sl, #24]
   8973e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   89742:	f8ca 201c 	str.w	r2, [sl, #28]
   89746:	f10a 0220 	add.w	r2, sl, #32
   8974a:	e777      	b.n	8963c <_realloc_r+0x284>
   8974c:	68a1      	ldr	r1, [r4, #8]
   8974e:	2a24      	cmp	r2, #36	; 0x24
   89750:	f8ca 1010 	str.w	r1, [sl, #16]
   89754:	68e1      	ldr	r1, [r4, #12]
   89756:	f8ca 1014 	str.w	r1, [sl, #20]
   8975a:	d00e      	beq.n	8977a <_realloc_r+0x3c2>
   8975c:	3410      	adds	r4, #16
   8975e:	f10a 0218 	add.w	r2, sl, #24
   89762:	e716      	b.n	89592 <_realloc_r+0x1da>
   89764:	6923      	ldr	r3, [r4, #16]
   89766:	3418      	adds	r4, #24
   89768:	f8ca 3018 	str.w	r3, [sl, #24]
   8976c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89770:	f8ca 301c 	str.w	r3, [sl, #28]
   89774:	f10a 0320 	add.w	r3, sl, #32
   89778:	e789      	b.n	8968e <_realloc_r+0x2d6>
   8977a:	6922      	ldr	r2, [r4, #16]
   8977c:	3418      	adds	r4, #24
   8977e:	f8ca 2018 	str.w	r2, [sl, #24]
   89782:	f854 2c04 	ldr.w	r2, [r4, #-4]
   89786:	f8ca 201c 	str.w	r2, [sl, #28]
   8978a:	f10a 0220 	add.w	r2, sl, #32
   8978e:	e700      	b.n	89592 <_realloc_r+0x1da>
   89790:	20000998 	.word	0x20000998

00089794 <frexp>:
   89794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89796:	2700      	movs	r7, #0
   89798:	f8df c05c 	ldr.w	ip, [pc, #92]	; 897f8 <frexp+0x64>
   8979c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   897a0:	4563      	cmp	r3, ip
   897a2:	4604      	mov	r4, r0
   897a4:	460d      	mov	r5, r1
   897a6:	6017      	str	r7, [r2, #0]
   897a8:	dc23      	bgt.n	897f2 <frexp+0x5e>
   897aa:	4684      	mov	ip, r0
   897ac:	ea53 0c0c 	orrs.w	ip, r3, ip
   897b0:	d01f      	beq.n	897f2 <frexp+0x5e>
   897b2:	f8df c048 	ldr.w	ip, [pc, #72]	; 897fc <frexp+0x68>
   897b6:	4616      	mov	r6, r2
   897b8:	ea01 0c0c 	and.w	ip, r1, ip
   897bc:	460a      	mov	r2, r1
   897be:	f1bc 0f00 	cmp.w	ip, #0
   897c2:	d109      	bne.n	897d8 <frexp+0x44>
   897c4:	2200      	movs	r2, #0
   897c6:	4b0e      	ldr	r3, [pc, #56]	; (89800 <frexp+0x6c>)
   897c8:	f000 fd1a 	bl	8a200 <__aeabi_dmul>
   897cc:	f06f 0735 	mvn.w	r7, #53	; 0x35
   897d0:	4604      	mov	r4, r0
   897d2:	460a      	mov	r2, r1
   897d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   897d8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   897dc:	151b      	asrs	r3, r3, #20
   897de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   897e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   897e6:	443b      	add	r3, r7
   897e8:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   897ec:	6033      	str	r3, [r6, #0]
   897ee:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   897f2:	4620      	mov	r0, r4
   897f4:	4629      	mov	r1, r5
   897f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   897f8:	7fefffff 	.word	0x7fefffff
   897fc:	7ff00000 	.word	0x7ff00000
   89800:	43500000 	.word	0x43500000

00089804 <_sbrk_r>:
   89804:	2200      	movs	r2, #0
   89806:	b538      	push	{r3, r4, r5, lr}
   89808:	4d06      	ldr	r5, [pc, #24]	; (89824 <_sbrk_r+0x20>)
   8980a:	4604      	mov	r4, r0
   8980c:	4608      	mov	r0, r1
   8980e:	602a      	str	r2, [r5, #0]
   89810:	f7f9 ffc8 	bl	837a4 <_sbrk>
   89814:	1c43      	adds	r3, r0, #1
   89816:	d000      	beq.n	8981a <_sbrk_r+0x16>
   89818:	bd38      	pop	{r3, r4, r5, pc}
   8981a:	682b      	ldr	r3, [r5, #0]
   8981c:	2b00      	cmp	r3, #0
   8981e:	d0fb      	beq.n	89818 <_sbrk_r+0x14>
   89820:	6023      	str	r3, [r4, #0]
   89822:	bd38      	pop	{r3, r4, r5, pc}
   89824:	20003764 	.word	0x20003764

00089828 <__sread>:
   89828:	b510      	push	{r4, lr}
   8982a:	460c      	mov	r4, r1
   8982c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   89830:	f000 fac8 	bl	89dc4 <_read_r>
   89834:	2800      	cmp	r0, #0
   89836:	db03      	blt.n	89840 <__sread+0x18>
   89838:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8983a:	4403      	add	r3, r0
   8983c:	6523      	str	r3, [r4, #80]	; 0x50
   8983e:	bd10      	pop	{r4, pc}
   89840:	89a3      	ldrh	r3, [r4, #12]
   89842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   89846:	81a3      	strh	r3, [r4, #12]
   89848:	bd10      	pop	{r4, pc}
   8984a:	bf00      	nop

0008984c <__swrite>:
   8984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89850:	460c      	mov	r4, r1
   89852:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   89856:	461f      	mov	r7, r3
   89858:	05cb      	lsls	r3, r1, #23
   8985a:	4605      	mov	r5, r0
   8985c:	4616      	mov	r6, r2
   8985e:	d40b      	bmi.n	89878 <__swrite+0x2c>
   89860:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   89864:	81a1      	strh	r1, [r4, #12]
   89866:	463b      	mov	r3, r7
   89868:	4632      	mov	r2, r6
   8986a:	4628      	mov	r0, r5
   8986c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   89874:	f000 b920 	b.w	89ab8 <_write_r>
   89878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8987c:	2302      	movs	r3, #2
   8987e:	2200      	movs	r2, #0
   89880:	f000 fa8a 	bl	89d98 <_lseek_r>
   89884:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   89888:	e7ea      	b.n	89860 <__swrite+0x14>
   8988a:	bf00      	nop

0008988c <__sseek>:
   8988c:	b510      	push	{r4, lr}
   8988e:	460c      	mov	r4, r1
   89890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   89894:	f000 fa80 	bl	89d98 <_lseek_r>
   89898:	89a3      	ldrh	r3, [r4, #12]
   8989a:	1c42      	adds	r2, r0, #1
   8989c:	bf0e      	itee	eq
   8989e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   898a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   898a6:	6520      	strne	r0, [r4, #80]	; 0x50
   898a8:	81a3      	strh	r3, [r4, #12]
   898aa:	bd10      	pop	{r4, pc}

000898ac <__sclose>:
   898ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   898b0:	f000 b9ba 	b.w	89c28 <_close_r>

000898b4 <__ssprint_r>:
   898b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   898b8:	6893      	ldr	r3, [r2, #8]
   898ba:	4691      	mov	r9, r2
   898bc:	b083      	sub	sp, #12
   898be:	2b00      	cmp	r3, #0
   898c0:	d06e      	beq.n	899a0 <__ssprint_r+0xec>
   898c2:	6817      	ldr	r7, [r2, #0]
   898c4:	4680      	mov	r8, r0
   898c6:	460c      	mov	r4, r1
   898c8:	6808      	ldr	r0, [r1, #0]
   898ca:	688d      	ldr	r5, [r1, #8]
   898cc:	3708      	adds	r7, #8
   898ce:	e044      	b.n	8995a <__ssprint_r+0xa6>
   898d0:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   898d4:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   898d8:	d02e      	beq.n	89938 <__ssprint_r+0x84>
   898da:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   898de:	1a45      	subs	r5, r0, r1
   898e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   898e4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   898e8:	19aa      	adds	r2, r5, r6
   898ea:	ea4f 0a63 	mov.w	sl, r3, asr #1
   898ee:	1c53      	adds	r3, r2, #1
   898f0:	4553      	cmp	r3, sl
   898f2:	4652      	mov	r2, sl
   898f4:	bf84      	itt	hi
   898f6:	469a      	movhi	sl, r3
   898f8:	4652      	movhi	r2, sl
   898fa:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   898fe:	d036      	beq.n	8996e <__ssprint_r+0xba>
   89900:	4611      	mov	r1, r2
   89902:	4640      	mov	r0, r8
   89904:	f7fe fe22 	bl	8854c <_malloc_r>
   89908:	2800      	cmp	r0, #0
   8990a:	d03a      	beq.n	89982 <__ssprint_r+0xce>
   8990c:	462a      	mov	r2, r5
   8990e:	6921      	ldr	r1, [r4, #16]
   89910:	9001      	str	r0, [sp, #4]
   89912:	f7fa f945 	bl	83ba0 <memcpy>
   89916:	89a2      	ldrh	r2, [r4, #12]
   89918:	9b01      	ldr	r3, [sp, #4]
   8991a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8991e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89922:	81a2      	strh	r2, [r4, #12]
   89924:	1958      	adds	r0, r3, r5
   89926:	ebaa 0505 	sub.w	r5, sl, r5
   8992a:	60a5      	str	r5, [r4, #8]
   8992c:	f8c4 a014 	str.w	sl, [r4, #20]
   89930:	4635      	mov	r5, r6
   89932:	46b2      	mov	sl, r6
   89934:	6123      	str	r3, [r4, #16]
   89936:	6020      	str	r0, [r4, #0]
   89938:	4659      	mov	r1, fp
   8993a:	4652      	mov	r2, sl
   8993c:	f7ff f910 	bl	88b60 <memmove>
   89940:	f8d9 3008 	ldr.w	r3, [r9, #8]
   89944:	68a1      	ldr	r1, [r4, #8]
   89946:	6820      	ldr	r0, [r4, #0]
   89948:	1b4d      	subs	r5, r1, r5
   8994a:	4450      	add	r0, sl
   8994c:	1b9e      	subs	r6, r3, r6
   8994e:	60a5      	str	r5, [r4, #8]
   89950:	6020      	str	r0, [r4, #0]
   89952:	f8c9 6008 	str.w	r6, [r9, #8]
   89956:	b31e      	cbz	r6, 899a0 <__ssprint_r+0xec>
   89958:	3708      	adds	r7, #8
   8995a:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8995e:	2e00      	cmp	r6, #0
   89960:	d0fa      	beq.n	89958 <__ssprint_r+0xa4>
   89962:	42b5      	cmp	r5, r6
   89964:	46aa      	mov	sl, r5
   89966:	d9b3      	bls.n	898d0 <__ssprint_r+0x1c>
   89968:	4635      	mov	r5, r6
   8996a:	46b2      	mov	sl, r6
   8996c:	e7e4      	b.n	89938 <__ssprint_r+0x84>
   8996e:	4640      	mov	r0, r8
   89970:	f7ff fd22 	bl	893b8 <_realloc_r>
   89974:	4603      	mov	r3, r0
   89976:	2800      	cmp	r0, #0
   89978:	d1d4      	bne.n	89924 <__ssprint_r+0x70>
   8997a:	4640      	mov	r0, r8
   8997c:	6921      	ldr	r1, [r4, #16]
   8997e:	f7fe fa8f 	bl	87ea0 <_free_r>
   89982:	230c      	movs	r3, #12
   89984:	2200      	movs	r2, #0
   89986:	f04f 30ff 	mov.w	r0, #4294967295
   8998a:	f8c8 3000 	str.w	r3, [r8]
   8998e:	89a3      	ldrh	r3, [r4, #12]
   89990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89994:	81a3      	strh	r3, [r4, #12]
   89996:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8999a:	b003      	add	sp, #12
   8999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899a0:	2300      	movs	r3, #0
   899a2:	4618      	mov	r0, r3
   899a4:	f8c9 3004 	str.w	r3, [r9, #4]
   899a8:	b003      	add	sp, #12
   899aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899ae:	bf00      	nop

000899b0 <__swbuf_r>:
   899b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   899b2:	4606      	mov	r6, r0
   899b4:	460d      	mov	r5, r1
   899b6:	4614      	mov	r4, r2
   899b8:	b110      	cbz	r0, 899c0 <__swbuf_r+0x10>
   899ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   899bc:	2b00      	cmp	r3, #0
   899be:	d043      	beq.n	89a48 <__swbuf_r+0x98>
   899c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   899c4:	69a3      	ldr	r3, [r4, #24]
   899c6:	0710      	lsls	r0, r2, #28
   899c8:	60a3      	str	r3, [r4, #8]
   899ca:	b291      	uxth	r1, r2
   899cc:	d51b      	bpl.n	89a06 <__swbuf_r+0x56>
   899ce:	6923      	ldr	r3, [r4, #16]
   899d0:	b1cb      	cbz	r3, 89a06 <__swbuf_r+0x56>
   899d2:	b2ed      	uxtb	r5, r5
   899d4:	0489      	lsls	r1, r1, #18
   899d6:	462f      	mov	r7, r5
   899d8:	d522      	bpl.n	89a20 <__swbuf_r+0x70>
   899da:	6822      	ldr	r2, [r4, #0]
   899dc:	6961      	ldr	r1, [r4, #20]
   899de:	1ad3      	subs	r3, r2, r3
   899e0:	4299      	cmp	r1, r3
   899e2:	dd29      	ble.n	89a38 <__swbuf_r+0x88>
   899e4:	3301      	adds	r3, #1
   899e6:	68a1      	ldr	r1, [r4, #8]
   899e8:	3901      	subs	r1, #1
   899ea:	60a1      	str	r1, [r4, #8]
   899ec:	1c51      	adds	r1, r2, #1
   899ee:	6021      	str	r1, [r4, #0]
   899f0:	7015      	strb	r5, [r2, #0]
   899f2:	6962      	ldr	r2, [r4, #20]
   899f4:	429a      	cmp	r2, r3
   899f6:	d02a      	beq.n	89a4e <__swbuf_r+0x9e>
   899f8:	89a3      	ldrh	r3, [r4, #12]
   899fa:	07db      	lsls	r3, r3, #31
   899fc:	d501      	bpl.n	89a02 <__swbuf_r+0x52>
   899fe:	2d0a      	cmp	r5, #10
   89a00:	d025      	beq.n	89a4e <__swbuf_r+0x9e>
   89a02:	4638      	mov	r0, r7
   89a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89a06:	4621      	mov	r1, r4
   89a08:	4630      	mov	r0, r6
   89a0a:	f7fc ff91 	bl	86930 <__swsetup_r>
   89a0e:	bb20      	cbnz	r0, 89a5a <__swbuf_r+0xaa>
   89a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   89a14:	b2ed      	uxtb	r5, r5
   89a16:	b291      	uxth	r1, r2
   89a18:	0489      	lsls	r1, r1, #18
   89a1a:	462f      	mov	r7, r5
   89a1c:	6923      	ldr	r3, [r4, #16]
   89a1e:	d4dc      	bmi.n	899da <__swbuf_r+0x2a>
   89a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89a24:	81a2      	strh	r2, [r4, #12]
   89a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89a28:	6961      	ldr	r1, [r4, #20]
   89a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   89a2e:	6662      	str	r2, [r4, #100]	; 0x64
   89a30:	6822      	ldr	r2, [r4, #0]
   89a32:	1ad3      	subs	r3, r2, r3
   89a34:	4299      	cmp	r1, r3
   89a36:	dcd5      	bgt.n	899e4 <__swbuf_r+0x34>
   89a38:	4621      	mov	r1, r4
   89a3a:	4630      	mov	r0, r6
   89a3c:	f7fe f880 	bl	87b40 <_fflush_r>
   89a40:	b958      	cbnz	r0, 89a5a <__swbuf_r+0xaa>
   89a42:	2301      	movs	r3, #1
   89a44:	6822      	ldr	r2, [r4, #0]
   89a46:	e7ce      	b.n	899e6 <__swbuf_r+0x36>
   89a48:	f7fe f8ae 	bl	87ba8 <__sinit>
   89a4c:	e7b8      	b.n	899c0 <__swbuf_r+0x10>
   89a4e:	4621      	mov	r1, r4
   89a50:	4630      	mov	r0, r6
   89a52:	f7fe f875 	bl	87b40 <_fflush_r>
   89a56:	2800      	cmp	r0, #0
   89a58:	d0d3      	beq.n	89a02 <__swbuf_r+0x52>
   89a5a:	f04f 37ff 	mov.w	r7, #4294967295
   89a5e:	e7d0      	b.n	89a02 <__swbuf_r+0x52>

00089a60 <_wcrtomb_r>:
   89a60:	b570      	push	{r4, r5, r6, lr}
   89a62:	4605      	mov	r5, r0
   89a64:	461c      	mov	r4, r3
   89a66:	b084      	sub	sp, #16
   89a68:	b139      	cbz	r1, 89a7a <_wcrtomb_r+0x1a>
   89a6a:	4e0b      	ldr	r6, [pc, #44]	; (89a98 <_wcrtomb_r+0x38>)
   89a6c:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   89a70:	47b0      	blx	r6
   89a72:	1c43      	adds	r3, r0, #1
   89a74:	d009      	beq.n	89a8a <_wcrtomb_r+0x2a>
   89a76:	b004      	add	sp, #16
   89a78:	bd70      	pop	{r4, r5, r6, pc}
   89a7a:	460a      	mov	r2, r1
   89a7c:	4906      	ldr	r1, [pc, #24]	; (89a98 <_wcrtomb_r+0x38>)
   89a7e:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   89a82:	a901      	add	r1, sp, #4
   89a84:	47b0      	blx	r6
   89a86:	1c43      	adds	r3, r0, #1
   89a88:	d1f5      	bne.n	89a76 <_wcrtomb_r+0x16>
   89a8a:	2200      	movs	r2, #0
   89a8c:	238a      	movs	r3, #138	; 0x8a
   89a8e:	6022      	str	r2, [r4, #0]
   89a90:	602b      	str	r3, [r5, #0]
   89a92:	b004      	add	sp, #16
   89a94:	bd70      	pop	{r4, r5, r6, pc}
   89a96:	bf00      	nop
   89a98:	2000082c 	.word	0x2000082c

00089a9c <__ascii_wctomb>:
   89a9c:	4603      	mov	r3, r0
   89a9e:	b149      	cbz	r1, 89ab4 <__ascii_wctomb+0x18>
   89aa0:	2aff      	cmp	r2, #255	; 0xff
   89aa2:	d802      	bhi.n	89aaa <__ascii_wctomb+0xe>
   89aa4:	2001      	movs	r0, #1
   89aa6:	700a      	strb	r2, [r1, #0]
   89aa8:	4770      	bx	lr
   89aaa:	228a      	movs	r2, #138	; 0x8a
   89aac:	f04f 30ff 	mov.w	r0, #4294967295
   89ab0:	601a      	str	r2, [r3, #0]
   89ab2:	4770      	bx	lr
   89ab4:	4608      	mov	r0, r1
   89ab6:	4770      	bx	lr

00089ab8 <_write_r>:
   89ab8:	b538      	push	{r3, r4, r5, lr}
   89aba:	460c      	mov	r4, r1
   89abc:	4611      	mov	r1, r2
   89abe:	2200      	movs	r2, #0
   89ac0:	4684      	mov	ip, r0
   89ac2:	4d07      	ldr	r5, [pc, #28]	; (89ae0 <_write_r+0x28>)
   89ac4:	4620      	mov	r0, r4
   89ac6:	602a      	str	r2, [r5, #0]
   89ac8:	461a      	mov	r2, r3
   89aca:	4664      	mov	r4, ip
   89acc:	f7f9 f9d8 	bl	82e80 <_write>
   89ad0:	1c43      	adds	r3, r0, #1
   89ad2:	d000      	beq.n	89ad6 <_write_r+0x1e>
   89ad4:	bd38      	pop	{r3, r4, r5, pc}
   89ad6:	682b      	ldr	r3, [r5, #0]
   89ad8:	2b00      	cmp	r3, #0
   89ada:	d0fb      	beq.n	89ad4 <_write_r+0x1c>
   89adc:	6023      	str	r3, [r4, #0]
   89ade:	bd38      	pop	{r3, r4, r5, pc}
   89ae0:	20003764 	.word	0x20003764

00089ae4 <__register_exitproc>:
   89ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89ae8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 89b68 <__register_exitproc+0x84>
   89aec:	4606      	mov	r6, r0
   89aee:	f8da 0000 	ldr.w	r0, [sl]
   89af2:	4698      	mov	r8, r3
   89af4:	460f      	mov	r7, r1
   89af6:	4691      	mov	r9, r2
   89af8:	f7fe fc7c 	bl	883f4 <__retarget_lock_acquire_recursive>
   89afc:	4b1b      	ldr	r3, [pc, #108]	; (89b6c <__register_exitproc+0x88>)
   89afe:	681b      	ldr	r3, [r3, #0]
   89b00:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   89b04:	b324      	cbz	r4, 89b50 <__register_exitproc+0x6c>
   89b06:	6865      	ldr	r5, [r4, #4]
   89b08:	2d1f      	cmp	r5, #31
   89b0a:	dc26      	bgt.n	89b5a <__register_exitproc+0x76>
   89b0c:	b95e      	cbnz	r6, 89b26 <__register_exitproc+0x42>
   89b0e:	1c6b      	adds	r3, r5, #1
   89b10:	3502      	adds	r5, #2
   89b12:	f8da 0000 	ldr.w	r0, [sl]
   89b16:	6063      	str	r3, [r4, #4]
   89b18:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   89b1c:	f7fe fc6c 	bl	883f8 <__retarget_lock_release_recursive>
   89b20:	2000      	movs	r0, #0
   89b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89b26:	2301      	movs	r3, #1
   89b28:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   89b2c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   89b30:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   89b34:	40ab      	lsls	r3, r5
   89b36:	431a      	orrs	r2, r3
   89b38:	2e02      	cmp	r6, #2
   89b3a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   89b3e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   89b42:	d1e4      	bne.n	89b0e <__register_exitproc+0x2a>
   89b44:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   89b48:	4313      	orrs	r3, r2
   89b4a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   89b4e:	e7de      	b.n	89b0e <__register_exitproc+0x2a>
   89b50:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   89b54:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   89b58:	e7d5      	b.n	89b06 <__register_exitproc+0x22>
   89b5a:	f8da 0000 	ldr.w	r0, [sl]
   89b5e:	f7fe fc4b 	bl	883f8 <__retarget_lock_release_recursive>
   89b62:	f04f 30ff 	mov.w	r0, #4294967295
   89b66:	e7dc      	b.n	89b22 <__register_exitproc+0x3e>
   89b68:	20000828 	.word	0x20000828
   89b6c:	0008abd8 	.word	0x0008abd8

00089b70 <__assert_func>:
   89b70:	4614      	mov	r4, r2
   89b72:	b500      	push	{lr}
   89b74:	461a      	mov	r2, r3
   89b76:	4b0a      	ldr	r3, [pc, #40]	; (89ba0 <__assert_func+0x30>)
   89b78:	460d      	mov	r5, r1
   89b7a:	681b      	ldr	r3, [r3, #0]
   89b7c:	b085      	sub	sp, #20
   89b7e:	68de      	ldr	r6, [r3, #12]
   89b80:	4603      	mov	r3, r0
   89b82:	b14c      	cbz	r4, 89b98 <__assert_func+0x28>
   89b84:	4907      	ldr	r1, [pc, #28]	; (89ba4 <__assert_func+0x34>)
   89b86:	9101      	str	r1, [sp, #4]
   89b88:	4630      	mov	r0, r6
   89b8a:	4907      	ldr	r1, [pc, #28]	; (89ba8 <__assert_func+0x38>)
   89b8c:	9402      	str	r4, [sp, #8]
   89b8e:	9500      	str	r5, [sp, #0]
   89b90:	f000 f8c8 	bl	89d24 <fiprintf>
   89b94:	f000 f92c 	bl	89df0 <abort>
   89b98:	4904      	ldr	r1, [pc, #16]	; (89bac <__assert_func+0x3c>)
   89b9a:	460c      	mov	r4, r1
   89b9c:	e7f3      	b.n	89b86 <__assert_func+0x16>
   89b9e:	bf00      	nop
   89ba0:	200003fc 	.word	0x200003fc
   89ba4:	0008ae94 	.word	0x0008ae94
   89ba8:	0008aea4 	.word	0x0008aea4
   89bac:	0008abd4 	.word	0x0008abd4

00089bb0 <_calloc_r>:
   89bb0:	b538      	push	{r3, r4, r5, lr}
   89bb2:	fba1 1402 	umull	r1, r4, r1, r2
   89bb6:	bb84      	cbnz	r4, 89c1a <_calloc_r+0x6a>
   89bb8:	f7fe fcc8 	bl	8854c <_malloc_r>
   89bbc:	4605      	mov	r5, r0
   89bbe:	b1d8      	cbz	r0, 89bf8 <_calloc_r+0x48>
   89bc0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89bc4:	f022 0203 	bic.w	r2, r2, #3
   89bc8:	3a04      	subs	r2, #4
   89bca:	2a24      	cmp	r2, #36	; 0x24
   89bcc:	d816      	bhi.n	89bfc <_calloc_r+0x4c>
   89bce:	2a13      	cmp	r2, #19
   89bd0:	d919      	bls.n	89c06 <_calloc_r+0x56>
   89bd2:	2a1b      	cmp	r2, #27
   89bd4:	e9c0 4400 	strd	r4, r4, [r0]
   89bd8:	d91c      	bls.n	89c14 <_calloc_r+0x64>
   89bda:	2300      	movs	r3, #0
   89bdc:	2a24      	cmp	r2, #36	; 0x24
   89bde:	bf14      	ite	ne
   89be0:	f100 0210 	addne.w	r2, r0, #16
   89be4:	f100 0218 	addeq.w	r2, r0, #24
   89be8:	e9c0 4402 	strd	r4, r4, [r0, #8]
   89bec:	bf04      	itt	eq
   89bee:	6104      	streq	r4, [r0, #16]
   89bf0:	6144      	streq	r4, [r0, #20]
   89bf2:	e9c2 3300 	strd	r3, r3, [r2]
   89bf6:	6093      	str	r3, [r2, #8]
   89bf8:	4628      	mov	r0, r5
   89bfa:	bd38      	pop	{r3, r4, r5, pc}
   89bfc:	4621      	mov	r1, r4
   89bfe:	f7fa f845 	bl	83c8c <memset>
   89c02:	4628      	mov	r0, r5
   89c04:	bd38      	pop	{r3, r4, r5, pc}
   89c06:	4602      	mov	r2, r0
   89c08:	2300      	movs	r3, #0
   89c0a:	4628      	mov	r0, r5
   89c0c:	e9c2 3300 	strd	r3, r3, [r2]
   89c10:	6093      	str	r3, [r2, #8]
   89c12:	bd38      	pop	{r3, r4, r5, pc}
   89c14:	f100 0208 	add.w	r2, r0, #8
   89c18:	e7f6      	b.n	89c08 <_calloc_r+0x58>
   89c1a:	f000 f817 	bl	89c4c <__errno>
   89c1e:	230c      	movs	r3, #12
   89c20:	2500      	movs	r5, #0
   89c22:	6003      	str	r3, [r0, #0]
   89c24:	e7e8      	b.n	89bf8 <_calloc_r+0x48>
   89c26:	bf00      	nop

00089c28 <_close_r>:
   89c28:	2200      	movs	r2, #0
   89c2a:	b538      	push	{r3, r4, r5, lr}
   89c2c:	4d06      	ldr	r5, [pc, #24]	; (89c48 <_close_r+0x20>)
   89c2e:	4604      	mov	r4, r0
   89c30:	4608      	mov	r0, r1
   89c32:	602a      	str	r2, [r5, #0]
   89c34:	f7f9 fdd6 	bl	837e4 <_close>
   89c38:	1c43      	adds	r3, r0, #1
   89c3a:	d000      	beq.n	89c3e <_close_r+0x16>
   89c3c:	bd38      	pop	{r3, r4, r5, pc}
   89c3e:	682b      	ldr	r3, [r5, #0]
   89c40:	2b00      	cmp	r3, #0
   89c42:	d0fb      	beq.n	89c3c <_close_r+0x14>
   89c44:	6023      	str	r3, [r4, #0]
   89c46:	bd38      	pop	{r3, r4, r5, pc}
   89c48:	20003764 	.word	0x20003764

00089c4c <__errno>:
   89c4c:	4b01      	ldr	r3, [pc, #4]	; (89c54 <__errno+0x8>)
   89c4e:	6818      	ldr	r0, [r3, #0]
   89c50:	4770      	bx	lr
   89c52:	bf00      	nop
   89c54:	200003fc 	.word	0x200003fc

00089c58 <_fclose_r>:
   89c58:	b570      	push	{r4, r5, r6, lr}
   89c5a:	2900      	cmp	r1, #0
   89c5c:	d04b      	beq.n	89cf6 <_fclose_r+0x9e>
   89c5e:	4606      	mov	r6, r0
   89c60:	460c      	mov	r4, r1
   89c62:	b110      	cbz	r0, 89c6a <_fclose_r+0x12>
   89c64:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89c66:	2b00      	cmp	r3, #0
   89c68:	d048      	beq.n	89cfc <_fclose_r+0xa4>
   89c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89c6c:	07d8      	lsls	r0, r3, #31
   89c6e:	d534      	bpl.n	89cda <_fclose_r+0x82>
   89c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c74:	2b00      	cmp	r3, #0
   89c76:	d03e      	beq.n	89cf6 <_fclose_r+0x9e>
   89c78:	4621      	mov	r1, r4
   89c7a:	4630      	mov	r0, r6
   89c7c:	f7fd fece 	bl	87a1c <__sflush_r>
   89c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   89c82:	4605      	mov	r5, r0
   89c84:	b133      	cbz	r3, 89c94 <_fclose_r+0x3c>
   89c86:	4630      	mov	r0, r6
   89c88:	69e1      	ldr	r1, [r4, #28]
   89c8a:	4798      	blx	r3
   89c8c:	2800      	cmp	r0, #0
   89c8e:	bfb8      	it	lt
   89c90:	f04f 35ff 	movlt.w	r5, #4294967295
   89c94:	89a3      	ldrh	r3, [r4, #12]
   89c96:	061a      	lsls	r2, r3, #24
   89c98:	d43b      	bmi.n	89d12 <_fclose_r+0xba>
   89c9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89c9c:	b141      	cbz	r1, 89cb0 <_fclose_r+0x58>
   89c9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89ca2:	4299      	cmp	r1, r3
   89ca4:	d002      	beq.n	89cac <_fclose_r+0x54>
   89ca6:	4630      	mov	r0, r6
   89ca8:	f7fe f8fa 	bl	87ea0 <_free_r>
   89cac:	2300      	movs	r3, #0
   89cae:	6323      	str	r3, [r4, #48]	; 0x30
   89cb0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   89cb2:	b121      	cbz	r1, 89cbe <_fclose_r+0x66>
   89cb4:	4630      	mov	r0, r6
   89cb6:	f7fe f8f3 	bl	87ea0 <_free_r>
   89cba:	2300      	movs	r3, #0
   89cbc:	6463      	str	r3, [r4, #68]	; 0x44
   89cbe:	f7fd fff9 	bl	87cb4 <__sfp_lock_acquire>
   89cc2:	2200      	movs	r2, #0
   89cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89cc6:	81a2      	strh	r2, [r4, #12]
   89cc8:	07db      	lsls	r3, r3, #31
   89cca:	d527      	bpl.n	89d1c <_fclose_r+0xc4>
   89ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89cce:	f7fe fb8f 	bl	883f0 <__retarget_lock_close_recursive>
   89cd2:	f7fd fff5 	bl	87cc0 <__sfp_lock_release>
   89cd6:	4628      	mov	r0, r5
   89cd8:	bd70      	pop	{r4, r5, r6, pc}
   89cda:	89a3      	ldrh	r3, [r4, #12]
   89cdc:	0599      	lsls	r1, r3, #22
   89cde:	d4cb      	bmi.n	89c78 <_fclose_r+0x20>
   89ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89ce2:	f7fe fb87 	bl	883f4 <__retarget_lock_acquire_recursive>
   89ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89cea:	2b00      	cmp	r3, #0
   89cec:	d1c4      	bne.n	89c78 <_fclose_r+0x20>
   89cee:	6e65      	ldr	r5, [r4, #100]	; 0x64
   89cf0:	f015 0501 	ands.w	r5, r5, #1
   89cf4:	d008      	beq.n	89d08 <_fclose_r+0xb0>
   89cf6:	2500      	movs	r5, #0
   89cf8:	4628      	mov	r0, r5
   89cfa:	bd70      	pop	{r4, r5, r6, pc}
   89cfc:	f7fd ff54 	bl	87ba8 <__sinit>
   89d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89d02:	07d8      	lsls	r0, r3, #31
   89d04:	d4b4      	bmi.n	89c70 <_fclose_r+0x18>
   89d06:	e7e8      	b.n	89cda <_fclose_r+0x82>
   89d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89d0a:	f7fe fb75 	bl	883f8 <__retarget_lock_release_recursive>
   89d0e:	4628      	mov	r0, r5
   89d10:	bd70      	pop	{r4, r5, r6, pc}
   89d12:	4630      	mov	r0, r6
   89d14:	6921      	ldr	r1, [r4, #16]
   89d16:	f7fe f8c3 	bl	87ea0 <_free_r>
   89d1a:	e7be      	b.n	89c9a <_fclose_r+0x42>
   89d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89d1e:	f7fe fb6b 	bl	883f8 <__retarget_lock_release_recursive>
   89d22:	e7d3      	b.n	89ccc <_fclose_r+0x74>

00089d24 <fiprintf>:
   89d24:	b40e      	push	{r1, r2, r3}
   89d26:	b500      	push	{lr}
   89d28:	4a07      	ldr	r2, [pc, #28]	; (89d48 <fiprintf+0x24>)
   89d2a:	b082      	sub	sp, #8
   89d2c:	ab03      	add	r3, sp, #12
   89d2e:	4601      	mov	r1, r0
   89d30:	6810      	ldr	r0, [r2, #0]
   89d32:	f853 2b04 	ldr.w	r2, [r3], #4
   89d36:	9301      	str	r3, [sp, #4]
   89d38:	f7fb feec 	bl	85b14 <_vfiprintf_r>
   89d3c:	b002      	add	sp, #8
   89d3e:	f85d eb04 	ldr.w	lr, [sp], #4
   89d42:	b003      	add	sp, #12
   89d44:	4770      	bx	lr
   89d46:	bf00      	nop
   89d48:	200003fc 	.word	0x200003fc

00089d4c <_fstat_r>:
   89d4c:	b570      	push	{r4, r5, r6, lr}
   89d4e:	2600      	movs	r6, #0
   89d50:	4d07      	ldr	r5, [pc, #28]	; (89d70 <_fstat_r+0x24>)
   89d52:	4604      	mov	r4, r0
   89d54:	4608      	mov	r0, r1
   89d56:	4611      	mov	r1, r2
   89d58:	602e      	str	r6, [r5, #0]
   89d5a:	f7f9 fd47 	bl	837ec <_fstat>
   89d5e:	1c43      	adds	r3, r0, #1
   89d60:	d000      	beq.n	89d64 <_fstat_r+0x18>
   89d62:	bd70      	pop	{r4, r5, r6, pc}
   89d64:	682b      	ldr	r3, [r5, #0]
   89d66:	2b00      	cmp	r3, #0
   89d68:	d0fb      	beq.n	89d62 <_fstat_r+0x16>
   89d6a:	6023      	str	r3, [r4, #0]
   89d6c:	bd70      	pop	{r4, r5, r6, pc}
   89d6e:	bf00      	nop
   89d70:	20003764 	.word	0x20003764

00089d74 <_isatty_r>:
   89d74:	2200      	movs	r2, #0
   89d76:	b538      	push	{r3, r4, r5, lr}
   89d78:	4d06      	ldr	r5, [pc, #24]	; (89d94 <_isatty_r+0x20>)
   89d7a:	4604      	mov	r4, r0
   89d7c:	4608      	mov	r0, r1
   89d7e:	602a      	str	r2, [r5, #0]
   89d80:	f7f9 fd3a 	bl	837f8 <_isatty>
   89d84:	1c43      	adds	r3, r0, #1
   89d86:	d000      	beq.n	89d8a <_isatty_r+0x16>
   89d88:	bd38      	pop	{r3, r4, r5, pc}
   89d8a:	682b      	ldr	r3, [r5, #0]
   89d8c:	2b00      	cmp	r3, #0
   89d8e:	d0fb      	beq.n	89d88 <_isatty_r+0x14>
   89d90:	6023      	str	r3, [r4, #0]
   89d92:	bd38      	pop	{r3, r4, r5, pc}
   89d94:	20003764 	.word	0x20003764

00089d98 <_lseek_r>:
   89d98:	b538      	push	{r3, r4, r5, lr}
   89d9a:	460c      	mov	r4, r1
   89d9c:	4611      	mov	r1, r2
   89d9e:	2200      	movs	r2, #0
   89da0:	4684      	mov	ip, r0
   89da2:	4d07      	ldr	r5, [pc, #28]	; (89dc0 <_lseek_r+0x28>)
   89da4:	4620      	mov	r0, r4
   89da6:	602a      	str	r2, [r5, #0]
   89da8:	461a      	mov	r2, r3
   89daa:	4664      	mov	r4, ip
   89dac:	f7f9 fd26 	bl	837fc <_lseek>
   89db0:	1c43      	adds	r3, r0, #1
   89db2:	d000      	beq.n	89db6 <_lseek_r+0x1e>
   89db4:	bd38      	pop	{r3, r4, r5, pc}
   89db6:	682b      	ldr	r3, [r5, #0]
   89db8:	2b00      	cmp	r3, #0
   89dba:	d0fb      	beq.n	89db4 <_lseek_r+0x1c>
   89dbc:	6023      	str	r3, [r4, #0]
   89dbe:	bd38      	pop	{r3, r4, r5, pc}
   89dc0:	20003764 	.word	0x20003764

00089dc4 <_read_r>:
   89dc4:	b538      	push	{r3, r4, r5, lr}
   89dc6:	460c      	mov	r4, r1
   89dc8:	4611      	mov	r1, r2
   89dca:	2200      	movs	r2, #0
   89dcc:	4684      	mov	ip, r0
   89dce:	4d07      	ldr	r5, [pc, #28]	; (89dec <_read_r+0x28>)
   89dd0:	4620      	mov	r0, r4
   89dd2:	602a      	str	r2, [r5, #0]
   89dd4:	461a      	mov	r2, r3
   89dd6:	4664      	mov	r4, ip
   89dd8:	f7f9 fdba 	bl	83950 <_read>
   89ddc:	1c43      	adds	r3, r0, #1
   89dde:	d000      	beq.n	89de2 <_read_r+0x1e>
   89de0:	bd38      	pop	{r3, r4, r5, pc}
   89de2:	682b      	ldr	r3, [r5, #0]
   89de4:	2b00      	cmp	r3, #0
   89de6:	d0fb      	beq.n	89de0 <_read_r+0x1c>
   89de8:	6023      	str	r3, [r4, #0]
   89dea:	bd38      	pop	{r3, r4, r5, pc}
   89dec:	20003764 	.word	0x20003764

00089df0 <abort>:
   89df0:	2006      	movs	r0, #6
   89df2:	b508      	push	{r3, lr}
   89df4:	f000 f804 	bl	89e00 <raise>
   89df8:	2001      	movs	r0, #1
   89dfa:	f7f9 fd01 	bl	83800 <_exit>
   89dfe:	bf00      	nop

00089e00 <raise>:
   89e00:	b538      	push	{r3, r4, r5, lr}
   89e02:	4b15      	ldr	r3, [pc, #84]	; (89e58 <raise+0x58>)
   89e04:	281f      	cmp	r0, #31
   89e06:	681d      	ldr	r5, [r3, #0]
   89e08:	d820      	bhi.n	89e4c <raise+0x4c>
   89e0a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   89e0e:	4604      	mov	r4, r0
   89e10:	b162      	cbz	r2, 89e2c <raise+0x2c>
   89e12:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   89e16:	b14b      	cbz	r3, 89e2c <raise+0x2c>
   89e18:	2b01      	cmp	r3, #1
   89e1a:	d015      	beq.n	89e48 <raise+0x48>
   89e1c:	1c59      	adds	r1, r3, #1
   89e1e:	d00f      	beq.n	89e40 <raise+0x40>
   89e20:	2500      	movs	r5, #0
   89e22:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   89e26:	4798      	blx	r3
   89e28:	4628      	mov	r0, r5
   89e2a:	bd38      	pop	{r3, r4, r5, pc}
   89e2c:	4628      	mov	r0, r5
   89e2e:	f000 f829 	bl	89e84 <_getpid_r>
   89e32:	4622      	mov	r2, r4
   89e34:	4601      	mov	r1, r0
   89e36:	4628      	mov	r0, r5
   89e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   89e3c:	f000 b80e 	b.w	89e5c <_kill_r>
   89e40:	2316      	movs	r3, #22
   89e42:	2001      	movs	r0, #1
   89e44:	602b      	str	r3, [r5, #0]
   89e46:	bd38      	pop	{r3, r4, r5, pc}
   89e48:	2000      	movs	r0, #0
   89e4a:	bd38      	pop	{r3, r4, r5, pc}
   89e4c:	2316      	movs	r3, #22
   89e4e:	f04f 30ff 	mov.w	r0, #4294967295
   89e52:	602b      	str	r3, [r5, #0]
   89e54:	bd38      	pop	{r3, r4, r5, pc}
   89e56:	bf00      	nop
   89e58:	200003fc 	.word	0x200003fc

00089e5c <_kill_r>:
   89e5c:	b570      	push	{r4, r5, r6, lr}
   89e5e:	2600      	movs	r6, #0
   89e60:	4d07      	ldr	r5, [pc, #28]	; (89e80 <_kill_r+0x24>)
   89e62:	4604      	mov	r4, r0
   89e64:	4608      	mov	r0, r1
   89e66:	4611      	mov	r1, r2
   89e68:	602e      	str	r6, [r5, #0]
   89e6a:	f7f9 fcd3 	bl	83814 <_kill>
   89e6e:	1c43      	adds	r3, r0, #1
   89e70:	d000      	beq.n	89e74 <_kill_r+0x18>
   89e72:	bd70      	pop	{r4, r5, r6, pc}
   89e74:	682b      	ldr	r3, [r5, #0]
   89e76:	2b00      	cmp	r3, #0
   89e78:	d0fb      	beq.n	89e72 <_kill_r+0x16>
   89e7a:	6023      	str	r3, [r4, #0]
   89e7c:	bd70      	pop	{r4, r5, r6, pc}
   89e7e:	bf00      	nop
   89e80:	20003764 	.word	0x20003764

00089e84 <_getpid_r>:
   89e84:	f7f9 bcc8 	b.w	83818 <_getpid>

00089e88 <__aeabi_drsub>:
   89e88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   89e8c:	e002      	b.n	89e94 <__adddf3>
   89e8e:	bf00      	nop

00089e90 <__aeabi_dsub>:
   89e90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00089e94 <__adddf3>:
   89e94:	b530      	push	{r4, r5, lr}
   89e96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   89e9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   89e9e:	ea94 0f05 	teq	r4, r5
   89ea2:	bf08      	it	eq
   89ea4:	ea90 0f02 	teqeq	r0, r2
   89ea8:	bf1f      	itttt	ne
   89eaa:	ea54 0c00 	orrsne.w	ip, r4, r0
   89eae:	ea55 0c02 	orrsne.w	ip, r5, r2
   89eb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   89eb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89eba:	f000 80e2 	beq.w	8a082 <__adddf3+0x1ee>
   89ebe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   89ec2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   89ec6:	bfb8      	it	lt
   89ec8:	426d      	neglt	r5, r5
   89eca:	dd0c      	ble.n	89ee6 <__adddf3+0x52>
   89ecc:	442c      	add	r4, r5
   89ece:	ea80 0202 	eor.w	r2, r0, r2
   89ed2:	ea81 0303 	eor.w	r3, r1, r3
   89ed6:	ea82 0000 	eor.w	r0, r2, r0
   89eda:	ea83 0101 	eor.w	r1, r3, r1
   89ede:	ea80 0202 	eor.w	r2, r0, r2
   89ee2:	ea81 0303 	eor.w	r3, r1, r3
   89ee6:	2d36      	cmp	r5, #54	; 0x36
   89ee8:	bf88      	it	hi
   89eea:	bd30      	pophi	{r4, r5, pc}
   89eec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   89ef4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   89ef8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   89efc:	d002      	beq.n	89f04 <__adddf3+0x70>
   89efe:	4240      	negs	r0, r0
   89f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89f04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   89f08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   89f0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   89f10:	d002      	beq.n	89f18 <__adddf3+0x84>
   89f12:	4252      	negs	r2, r2
   89f14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89f18:	ea94 0f05 	teq	r4, r5
   89f1c:	f000 80a7 	beq.w	8a06e <__adddf3+0x1da>
   89f20:	f1a4 0401 	sub.w	r4, r4, #1
   89f24:	f1d5 0e20 	rsbs	lr, r5, #32
   89f28:	db0d      	blt.n	89f46 <__adddf3+0xb2>
   89f2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   89f2e:	fa22 f205 	lsr.w	r2, r2, r5
   89f32:	1880      	adds	r0, r0, r2
   89f34:	f141 0100 	adc.w	r1, r1, #0
   89f38:	fa03 f20e 	lsl.w	r2, r3, lr
   89f3c:	1880      	adds	r0, r0, r2
   89f3e:	fa43 f305 	asr.w	r3, r3, r5
   89f42:	4159      	adcs	r1, r3
   89f44:	e00e      	b.n	89f64 <__adddf3+0xd0>
   89f46:	f1a5 0520 	sub.w	r5, r5, #32
   89f4a:	f10e 0e20 	add.w	lr, lr, #32
   89f4e:	2a01      	cmp	r2, #1
   89f50:	fa03 fc0e 	lsl.w	ip, r3, lr
   89f54:	bf28      	it	cs
   89f56:	f04c 0c02 	orrcs.w	ip, ip, #2
   89f5a:	fa43 f305 	asr.w	r3, r3, r5
   89f5e:	18c0      	adds	r0, r0, r3
   89f60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   89f64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89f68:	d507      	bpl.n	89f7a <__adddf3+0xe6>
   89f6a:	f04f 0e00 	mov.w	lr, #0
   89f6e:	f1dc 0c00 	rsbs	ip, ip, #0
   89f72:	eb7e 0000 	sbcs.w	r0, lr, r0
   89f76:	eb6e 0101 	sbc.w	r1, lr, r1
   89f7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   89f7e:	d31b      	bcc.n	89fb8 <__adddf3+0x124>
   89f80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   89f84:	d30c      	bcc.n	89fa0 <__adddf3+0x10c>
   89f86:	0849      	lsrs	r1, r1, #1
   89f88:	ea5f 0030 	movs.w	r0, r0, rrx
   89f8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   89f90:	f104 0401 	add.w	r4, r4, #1
   89f94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   89f98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   89f9c:	f080 809a 	bcs.w	8a0d4 <__adddf3+0x240>
   89fa0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   89fa4:	bf08      	it	eq
   89fa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   89faa:	f150 0000 	adcs.w	r0, r0, #0
   89fae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89fb2:	ea41 0105 	orr.w	r1, r1, r5
   89fb6:	bd30      	pop	{r4, r5, pc}
   89fb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   89fbc:	4140      	adcs	r0, r0
   89fbe:	eb41 0101 	adc.w	r1, r1, r1
   89fc2:	3c01      	subs	r4, #1
   89fc4:	bf28      	it	cs
   89fc6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   89fca:	d2e9      	bcs.n	89fa0 <__adddf3+0x10c>
   89fcc:	f091 0f00 	teq	r1, #0
   89fd0:	bf04      	itt	eq
   89fd2:	4601      	moveq	r1, r0
   89fd4:	2000      	moveq	r0, #0
   89fd6:	fab1 f381 	clz	r3, r1
   89fda:	bf08      	it	eq
   89fdc:	3320      	addeq	r3, #32
   89fde:	f1a3 030b 	sub.w	r3, r3, #11
   89fe2:	f1b3 0220 	subs.w	r2, r3, #32
   89fe6:	da0c      	bge.n	8a002 <__adddf3+0x16e>
   89fe8:	320c      	adds	r2, #12
   89fea:	dd08      	ble.n	89ffe <__adddf3+0x16a>
   89fec:	f102 0c14 	add.w	ip, r2, #20
   89ff0:	f1c2 020c 	rsb	r2, r2, #12
   89ff4:	fa01 f00c 	lsl.w	r0, r1, ip
   89ff8:	fa21 f102 	lsr.w	r1, r1, r2
   89ffc:	e00c      	b.n	8a018 <__adddf3+0x184>
   89ffe:	f102 0214 	add.w	r2, r2, #20
   8a002:	bfd8      	it	le
   8a004:	f1c2 0c20 	rsble	ip, r2, #32
   8a008:	fa01 f102 	lsl.w	r1, r1, r2
   8a00c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a010:	bfdc      	itt	le
   8a012:	ea41 010c 	orrle.w	r1, r1, ip
   8a016:	4090      	lslle	r0, r2
   8a018:	1ae4      	subs	r4, r4, r3
   8a01a:	bfa2      	ittt	ge
   8a01c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8a020:	4329      	orrge	r1, r5
   8a022:	bd30      	popge	{r4, r5, pc}
   8a024:	ea6f 0404 	mvn.w	r4, r4
   8a028:	3c1f      	subs	r4, #31
   8a02a:	da1c      	bge.n	8a066 <__adddf3+0x1d2>
   8a02c:	340c      	adds	r4, #12
   8a02e:	dc0e      	bgt.n	8a04e <__adddf3+0x1ba>
   8a030:	f104 0414 	add.w	r4, r4, #20
   8a034:	f1c4 0220 	rsb	r2, r4, #32
   8a038:	fa20 f004 	lsr.w	r0, r0, r4
   8a03c:	fa01 f302 	lsl.w	r3, r1, r2
   8a040:	ea40 0003 	orr.w	r0, r0, r3
   8a044:	fa21 f304 	lsr.w	r3, r1, r4
   8a048:	ea45 0103 	orr.w	r1, r5, r3
   8a04c:	bd30      	pop	{r4, r5, pc}
   8a04e:	f1c4 040c 	rsb	r4, r4, #12
   8a052:	f1c4 0220 	rsb	r2, r4, #32
   8a056:	fa20 f002 	lsr.w	r0, r0, r2
   8a05a:	fa01 f304 	lsl.w	r3, r1, r4
   8a05e:	ea40 0003 	orr.w	r0, r0, r3
   8a062:	4629      	mov	r1, r5
   8a064:	bd30      	pop	{r4, r5, pc}
   8a066:	fa21 f004 	lsr.w	r0, r1, r4
   8a06a:	4629      	mov	r1, r5
   8a06c:	bd30      	pop	{r4, r5, pc}
   8a06e:	f094 0f00 	teq	r4, #0
   8a072:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8a076:	bf06      	itte	eq
   8a078:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8a07c:	3401      	addeq	r4, #1
   8a07e:	3d01      	subne	r5, #1
   8a080:	e74e      	b.n	89f20 <__adddf3+0x8c>
   8a082:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a086:	bf18      	it	ne
   8a088:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a08c:	d029      	beq.n	8a0e2 <__adddf3+0x24e>
   8a08e:	ea94 0f05 	teq	r4, r5
   8a092:	bf08      	it	eq
   8a094:	ea90 0f02 	teqeq	r0, r2
   8a098:	d005      	beq.n	8a0a6 <__adddf3+0x212>
   8a09a:	ea54 0c00 	orrs.w	ip, r4, r0
   8a09e:	bf04      	itt	eq
   8a0a0:	4619      	moveq	r1, r3
   8a0a2:	4610      	moveq	r0, r2
   8a0a4:	bd30      	pop	{r4, r5, pc}
   8a0a6:	ea91 0f03 	teq	r1, r3
   8a0aa:	bf1e      	ittt	ne
   8a0ac:	2100      	movne	r1, #0
   8a0ae:	2000      	movne	r0, #0
   8a0b0:	bd30      	popne	{r4, r5, pc}
   8a0b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a0b6:	d105      	bne.n	8a0c4 <__adddf3+0x230>
   8a0b8:	0040      	lsls	r0, r0, #1
   8a0ba:	4149      	adcs	r1, r1
   8a0bc:	bf28      	it	cs
   8a0be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a0c2:	bd30      	pop	{r4, r5, pc}
   8a0c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a0c8:	bf3c      	itt	cc
   8a0ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a0ce:	bd30      	popcc	{r4, r5, pc}
   8a0d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a0d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a0d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a0dc:	f04f 0000 	mov.w	r0, #0
   8a0e0:	bd30      	pop	{r4, r5, pc}
   8a0e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a0e6:	bf1a      	itte	ne
   8a0e8:	4619      	movne	r1, r3
   8a0ea:	4610      	movne	r0, r2
   8a0ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a0f0:	bf1c      	itt	ne
   8a0f2:	460b      	movne	r3, r1
   8a0f4:	4602      	movne	r2, r0
   8a0f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a0fa:	bf06      	itte	eq
   8a0fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a100:	ea91 0f03 	teqeq	r1, r3
   8a104:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a108:	bd30      	pop	{r4, r5, pc}
   8a10a:	bf00      	nop

0008a10c <__aeabi_ui2d>:
   8a10c:	f090 0f00 	teq	r0, #0
   8a110:	bf04      	itt	eq
   8a112:	2100      	moveq	r1, #0
   8a114:	4770      	bxeq	lr
   8a116:	b530      	push	{r4, r5, lr}
   8a118:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a11c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a120:	f04f 0500 	mov.w	r5, #0
   8a124:	f04f 0100 	mov.w	r1, #0
   8a128:	e750      	b.n	89fcc <__adddf3+0x138>
   8a12a:	bf00      	nop

0008a12c <__aeabi_i2d>:
   8a12c:	f090 0f00 	teq	r0, #0
   8a130:	bf04      	itt	eq
   8a132:	2100      	moveq	r1, #0
   8a134:	4770      	bxeq	lr
   8a136:	b530      	push	{r4, r5, lr}
   8a138:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a13c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a140:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a144:	bf48      	it	mi
   8a146:	4240      	negmi	r0, r0
   8a148:	f04f 0100 	mov.w	r1, #0
   8a14c:	e73e      	b.n	89fcc <__adddf3+0x138>
   8a14e:	bf00      	nop

0008a150 <__aeabi_f2d>:
   8a150:	0042      	lsls	r2, r0, #1
   8a152:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a156:	ea4f 0131 	mov.w	r1, r1, rrx
   8a15a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a15e:	bf1f      	itttt	ne
   8a160:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a164:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a168:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a16c:	4770      	bxne	lr
   8a16e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8a172:	bf08      	it	eq
   8a174:	4770      	bxeq	lr
   8a176:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8a17a:	bf04      	itt	eq
   8a17c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8a180:	4770      	bxeq	lr
   8a182:	b530      	push	{r4, r5, lr}
   8a184:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a18c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a190:	e71c      	b.n	89fcc <__adddf3+0x138>
   8a192:	bf00      	nop

0008a194 <__aeabi_ul2d>:
   8a194:	ea50 0201 	orrs.w	r2, r0, r1
   8a198:	bf08      	it	eq
   8a19a:	4770      	bxeq	lr
   8a19c:	b530      	push	{r4, r5, lr}
   8a19e:	f04f 0500 	mov.w	r5, #0
   8a1a2:	e00a      	b.n	8a1ba <__aeabi_l2d+0x16>

0008a1a4 <__aeabi_l2d>:
   8a1a4:	ea50 0201 	orrs.w	r2, r0, r1
   8a1a8:	bf08      	it	eq
   8a1aa:	4770      	bxeq	lr
   8a1ac:	b530      	push	{r4, r5, lr}
   8a1ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a1b2:	d502      	bpl.n	8a1ba <__aeabi_l2d+0x16>
   8a1b4:	4240      	negs	r0, r0
   8a1b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a1ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a1be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a1c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a1c6:	f43f aed8 	beq.w	89f7a <__adddf3+0xe6>
   8a1ca:	f04f 0203 	mov.w	r2, #3
   8a1ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a1d2:	bf18      	it	ne
   8a1d4:	3203      	addne	r2, #3
   8a1d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a1da:	bf18      	it	ne
   8a1dc:	3203      	addne	r2, #3
   8a1de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a1e2:	f1c2 0320 	rsb	r3, r2, #32
   8a1e6:	fa00 fc03 	lsl.w	ip, r0, r3
   8a1ea:	fa20 f002 	lsr.w	r0, r0, r2
   8a1ee:	fa01 fe03 	lsl.w	lr, r1, r3
   8a1f2:	ea40 000e 	orr.w	r0, r0, lr
   8a1f6:	fa21 f102 	lsr.w	r1, r1, r2
   8a1fa:	4414      	add	r4, r2
   8a1fc:	e6bd      	b.n	89f7a <__adddf3+0xe6>
   8a1fe:	bf00      	nop

0008a200 <__aeabi_dmul>:
   8a200:	b570      	push	{r4, r5, r6, lr}
   8a202:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a20a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a20e:	bf1d      	ittte	ne
   8a210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a214:	ea94 0f0c 	teqne	r4, ip
   8a218:	ea95 0f0c 	teqne	r5, ip
   8a21c:	f000 f8de 	bleq	8a3dc <__aeabi_dmul+0x1dc>
   8a220:	442c      	add	r4, r5
   8a222:	ea81 0603 	eor.w	r6, r1, r3
   8a226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8a22a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8a22e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8a232:	bf18      	it	ne
   8a234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8a238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a23c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a240:	d038      	beq.n	8a2b4 <__aeabi_dmul+0xb4>
   8a242:	fba0 ce02 	umull	ip, lr, r0, r2
   8a246:	f04f 0500 	mov.w	r5, #0
   8a24a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8a24e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8a252:	fbe0 e503 	umlal	lr, r5, r0, r3
   8a256:	f04f 0600 	mov.w	r6, #0
   8a25a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8a25e:	f09c 0f00 	teq	ip, #0
   8a262:	bf18      	it	ne
   8a264:	f04e 0e01 	orrne.w	lr, lr, #1
   8a268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8a26c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8a270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8a274:	d204      	bcs.n	8a280 <__aeabi_dmul+0x80>
   8a276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8a27a:	416d      	adcs	r5, r5
   8a27c:	eb46 0606 	adc.w	r6, r6, r6
   8a280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8a284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8a288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8a28c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8a290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8a294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a298:	bf88      	it	hi
   8a29a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a29e:	d81e      	bhi.n	8a2de <__aeabi_dmul+0xde>
   8a2a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8a2a4:	bf08      	it	eq
   8a2a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8a2aa:	f150 0000 	adcs.w	r0, r0, #0
   8a2ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a2b2:	bd70      	pop	{r4, r5, r6, pc}
   8a2b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8a2b8:	ea46 0101 	orr.w	r1, r6, r1
   8a2bc:	ea40 0002 	orr.w	r0, r0, r2
   8a2c0:	ea81 0103 	eor.w	r1, r1, r3
   8a2c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8a2c8:	bfc2      	ittt	gt
   8a2ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a2ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a2d2:	bd70      	popgt	{r4, r5, r6, pc}
   8a2d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a2d8:	f04f 0e00 	mov.w	lr, #0
   8a2dc:	3c01      	subs	r4, #1
   8a2de:	f300 80ab 	bgt.w	8a438 <__aeabi_dmul+0x238>
   8a2e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8a2e6:	bfde      	ittt	le
   8a2e8:	2000      	movle	r0, #0
   8a2ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8a2ee:	bd70      	pople	{r4, r5, r6, pc}
   8a2f0:	f1c4 0400 	rsb	r4, r4, #0
   8a2f4:	3c20      	subs	r4, #32
   8a2f6:	da35      	bge.n	8a364 <__aeabi_dmul+0x164>
   8a2f8:	340c      	adds	r4, #12
   8a2fa:	dc1b      	bgt.n	8a334 <__aeabi_dmul+0x134>
   8a2fc:	f104 0414 	add.w	r4, r4, #20
   8a300:	f1c4 0520 	rsb	r5, r4, #32
   8a304:	fa00 f305 	lsl.w	r3, r0, r5
   8a308:	fa20 f004 	lsr.w	r0, r0, r4
   8a30c:	fa01 f205 	lsl.w	r2, r1, r5
   8a310:	ea40 0002 	orr.w	r0, r0, r2
   8a314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8a318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a31c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a320:	fa21 f604 	lsr.w	r6, r1, r4
   8a324:	eb42 0106 	adc.w	r1, r2, r6
   8a328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a32c:	bf08      	it	eq
   8a32e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a332:	bd70      	pop	{r4, r5, r6, pc}
   8a334:	f1c4 040c 	rsb	r4, r4, #12
   8a338:	f1c4 0520 	rsb	r5, r4, #32
   8a33c:	fa00 f304 	lsl.w	r3, r0, r4
   8a340:	fa20 f005 	lsr.w	r0, r0, r5
   8a344:	fa01 f204 	lsl.w	r2, r1, r4
   8a348:	ea40 0002 	orr.w	r0, r0, r2
   8a34c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a354:	f141 0100 	adc.w	r1, r1, #0
   8a358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a35c:	bf08      	it	eq
   8a35e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a362:	bd70      	pop	{r4, r5, r6, pc}
   8a364:	f1c4 0520 	rsb	r5, r4, #32
   8a368:	fa00 f205 	lsl.w	r2, r0, r5
   8a36c:	ea4e 0e02 	orr.w	lr, lr, r2
   8a370:	fa20 f304 	lsr.w	r3, r0, r4
   8a374:	fa01 f205 	lsl.w	r2, r1, r5
   8a378:	ea43 0302 	orr.w	r3, r3, r2
   8a37c:	fa21 f004 	lsr.w	r0, r1, r4
   8a380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a384:	fa21 f204 	lsr.w	r2, r1, r4
   8a388:	ea20 0002 	bic.w	r0, r0, r2
   8a38c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8a390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a394:	bf08      	it	eq
   8a396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a39a:	bd70      	pop	{r4, r5, r6, pc}
   8a39c:	f094 0f00 	teq	r4, #0
   8a3a0:	d10f      	bne.n	8a3c2 <__aeabi_dmul+0x1c2>
   8a3a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8a3a6:	0040      	lsls	r0, r0, #1
   8a3a8:	eb41 0101 	adc.w	r1, r1, r1
   8a3ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a3b0:	bf08      	it	eq
   8a3b2:	3c01      	subeq	r4, #1
   8a3b4:	d0f7      	beq.n	8a3a6 <__aeabi_dmul+0x1a6>
   8a3b6:	ea41 0106 	orr.w	r1, r1, r6
   8a3ba:	f095 0f00 	teq	r5, #0
   8a3be:	bf18      	it	ne
   8a3c0:	4770      	bxne	lr
   8a3c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8a3c6:	0052      	lsls	r2, r2, #1
   8a3c8:	eb43 0303 	adc.w	r3, r3, r3
   8a3cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8a3d0:	bf08      	it	eq
   8a3d2:	3d01      	subeq	r5, #1
   8a3d4:	d0f7      	beq.n	8a3c6 <__aeabi_dmul+0x1c6>
   8a3d6:	ea43 0306 	orr.w	r3, r3, r6
   8a3da:	4770      	bx	lr
   8a3dc:	ea94 0f0c 	teq	r4, ip
   8a3e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a3e4:	bf18      	it	ne
   8a3e6:	ea95 0f0c 	teqne	r5, ip
   8a3ea:	d00c      	beq.n	8a406 <__aeabi_dmul+0x206>
   8a3ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a3f0:	bf18      	it	ne
   8a3f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a3f6:	d1d1      	bne.n	8a39c <__aeabi_dmul+0x19c>
   8a3f8:	ea81 0103 	eor.w	r1, r1, r3
   8a3fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a400:	f04f 0000 	mov.w	r0, #0
   8a404:	bd70      	pop	{r4, r5, r6, pc}
   8a406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a40a:	bf06      	itte	eq
   8a40c:	4610      	moveq	r0, r2
   8a40e:	4619      	moveq	r1, r3
   8a410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a414:	d019      	beq.n	8a44a <__aeabi_dmul+0x24a>
   8a416:	ea94 0f0c 	teq	r4, ip
   8a41a:	d102      	bne.n	8a422 <__aeabi_dmul+0x222>
   8a41c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8a420:	d113      	bne.n	8a44a <__aeabi_dmul+0x24a>
   8a422:	ea95 0f0c 	teq	r5, ip
   8a426:	d105      	bne.n	8a434 <__aeabi_dmul+0x234>
   8a428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8a42c:	bf1c      	itt	ne
   8a42e:	4610      	movne	r0, r2
   8a430:	4619      	movne	r1, r3
   8a432:	d10a      	bne.n	8a44a <__aeabi_dmul+0x24a>
   8a434:	ea81 0103 	eor.w	r1, r1, r3
   8a438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a43c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a444:	f04f 0000 	mov.w	r0, #0
   8a448:	bd70      	pop	{r4, r5, r6, pc}
   8a44a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a44e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8a452:	bd70      	pop	{r4, r5, r6, pc}

0008a454 <__aeabi_ddiv>:
   8a454:	b570      	push	{r4, r5, r6, lr}
   8a456:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a45a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a45e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a462:	bf1d      	ittte	ne
   8a464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a468:	ea94 0f0c 	teqne	r4, ip
   8a46c:	ea95 0f0c 	teqne	r5, ip
   8a470:	f000 f8a7 	bleq	8a5c2 <__aeabi_ddiv+0x16e>
   8a474:	eba4 0405 	sub.w	r4, r4, r5
   8a478:	ea81 0e03 	eor.w	lr, r1, r3
   8a47c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a480:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a484:	f000 8088 	beq.w	8a598 <__aeabi_ddiv+0x144>
   8a488:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a48c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8a490:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8a494:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8a498:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8a49c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8a4a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8a4a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8a4a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8a4ac:	429d      	cmp	r5, r3
   8a4ae:	bf08      	it	eq
   8a4b0:	4296      	cmpeq	r6, r2
   8a4b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8a4b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8a4ba:	d202      	bcs.n	8a4c2 <__aeabi_ddiv+0x6e>
   8a4bc:	085b      	lsrs	r3, r3, #1
   8a4be:	ea4f 0232 	mov.w	r2, r2, rrx
   8a4c2:	1ab6      	subs	r6, r6, r2
   8a4c4:	eb65 0503 	sbc.w	r5, r5, r3
   8a4c8:	085b      	lsrs	r3, r3, #1
   8a4ca:	ea4f 0232 	mov.w	r2, r2, rrx
   8a4ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8a4d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8a4d6:	ebb6 0e02 	subs.w	lr, r6, r2
   8a4da:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a4de:	bf22      	ittt	cs
   8a4e0:	1ab6      	subcs	r6, r6, r2
   8a4e2:	4675      	movcs	r5, lr
   8a4e4:	ea40 000c 	orrcs.w	r0, r0, ip
   8a4e8:	085b      	lsrs	r3, r3, #1
   8a4ea:	ea4f 0232 	mov.w	r2, r2, rrx
   8a4ee:	ebb6 0e02 	subs.w	lr, r6, r2
   8a4f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a4f6:	bf22      	ittt	cs
   8a4f8:	1ab6      	subcs	r6, r6, r2
   8a4fa:	4675      	movcs	r5, lr
   8a4fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8a500:	085b      	lsrs	r3, r3, #1
   8a502:	ea4f 0232 	mov.w	r2, r2, rrx
   8a506:	ebb6 0e02 	subs.w	lr, r6, r2
   8a50a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a50e:	bf22      	ittt	cs
   8a510:	1ab6      	subcs	r6, r6, r2
   8a512:	4675      	movcs	r5, lr
   8a514:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8a518:	085b      	lsrs	r3, r3, #1
   8a51a:	ea4f 0232 	mov.w	r2, r2, rrx
   8a51e:	ebb6 0e02 	subs.w	lr, r6, r2
   8a522:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a526:	bf22      	ittt	cs
   8a528:	1ab6      	subcs	r6, r6, r2
   8a52a:	4675      	movcs	r5, lr
   8a52c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8a530:	ea55 0e06 	orrs.w	lr, r5, r6
   8a534:	d018      	beq.n	8a568 <__aeabi_ddiv+0x114>
   8a536:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8a53a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8a53e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8a542:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8a546:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8a54a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8a54e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8a552:	d1c0      	bne.n	8a4d6 <__aeabi_ddiv+0x82>
   8a554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a558:	d10b      	bne.n	8a572 <__aeabi_ddiv+0x11e>
   8a55a:	ea41 0100 	orr.w	r1, r1, r0
   8a55e:	f04f 0000 	mov.w	r0, #0
   8a562:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8a566:	e7b6      	b.n	8a4d6 <__aeabi_ddiv+0x82>
   8a568:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a56c:	bf04      	itt	eq
   8a56e:	4301      	orreq	r1, r0
   8a570:	2000      	moveq	r0, #0
   8a572:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a576:	bf88      	it	hi
   8a578:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a57c:	f63f aeaf 	bhi.w	8a2de <__aeabi_dmul+0xde>
   8a580:	ebb5 0c03 	subs.w	ip, r5, r3
   8a584:	bf04      	itt	eq
   8a586:	ebb6 0c02 	subseq.w	ip, r6, r2
   8a58a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a58e:	f150 0000 	adcs.w	r0, r0, #0
   8a592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a596:	bd70      	pop	{r4, r5, r6, pc}
   8a598:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8a59c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8a5a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8a5a4:	bfc2      	ittt	gt
   8a5a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a5aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a5ae:	bd70      	popgt	{r4, r5, r6, pc}
   8a5b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a5b4:	f04f 0e00 	mov.w	lr, #0
   8a5b8:	3c01      	subs	r4, #1
   8a5ba:	e690      	b.n	8a2de <__aeabi_dmul+0xde>
   8a5bc:	ea45 0e06 	orr.w	lr, r5, r6
   8a5c0:	e68d      	b.n	8a2de <__aeabi_dmul+0xde>
   8a5c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a5c6:	ea94 0f0c 	teq	r4, ip
   8a5ca:	bf08      	it	eq
   8a5cc:	ea95 0f0c 	teqeq	r5, ip
   8a5d0:	f43f af3b 	beq.w	8a44a <__aeabi_dmul+0x24a>
   8a5d4:	ea94 0f0c 	teq	r4, ip
   8a5d8:	d10a      	bne.n	8a5f0 <__aeabi_ddiv+0x19c>
   8a5da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a5de:	f47f af34 	bne.w	8a44a <__aeabi_dmul+0x24a>
   8a5e2:	ea95 0f0c 	teq	r5, ip
   8a5e6:	f47f af25 	bne.w	8a434 <__aeabi_dmul+0x234>
   8a5ea:	4610      	mov	r0, r2
   8a5ec:	4619      	mov	r1, r3
   8a5ee:	e72c      	b.n	8a44a <__aeabi_dmul+0x24a>
   8a5f0:	ea95 0f0c 	teq	r5, ip
   8a5f4:	d106      	bne.n	8a604 <__aeabi_ddiv+0x1b0>
   8a5f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a5fa:	f43f aefd 	beq.w	8a3f8 <__aeabi_dmul+0x1f8>
   8a5fe:	4610      	mov	r0, r2
   8a600:	4619      	mov	r1, r3
   8a602:	e722      	b.n	8a44a <__aeabi_dmul+0x24a>
   8a604:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a608:	bf18      	it	ne
   8a60a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a60e:	f47f aec5 	bne.w	8a39c <__aeabi_dmul+0x19c>
   8a612:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8a616:	f47f af0d 	bne.w	8a434 <__aeabi_dmul+0x234>
   8a61a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8a61e:	f47f aeeb 	bne.w	8a3f8 <__aeabi_dmul+0x1f8>
   8a622:	e712      	b.n	8a44a <__aeabi_dmul+0x24a>

0008a624 <__gedf2>:
   8a624:	f04f 3cff 	mov.w	ip, #4294967295
   8a628:	e006      	b.n	8a638 <__cmpdf2+0x4>
   8a62a:	bf00      	nop

0008a62c <__ledf2>:
   8a62c:	f04f 0c01 	mov.w	ip, #1
   8a630:	e002      	b.n	8a638 <__cmpdf2+0x4>
   8a632:	bf00      	nop

0008a634 <__cmpdf2>:
   8a634:	f04f 0c01 	mov.w	ip, #1
   8a638:	f84d cd04 	str.w	ip, [sp, #-4]!
   8a63c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a648:	bf18      	it	ne
   8a64a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8a64e:	d01b      	beq.n	8a688 <__cmpdf2+0x54>
   8a650:	b001      	add	sp, #4
   8a652:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8a656:	bf0c      	ite	eq
   8a658:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8a65c:	ea91 0f03 	teqne	r1, r3
   8a660:	bf02      	ittt	eq
   8a662:	ea90 0f02 	teqeq	r0, r2
   8a666:	2000      	moveq	r0, #0
   8a668:	4770      	bxeq	lr
   8a66a:	f110 0f00 	cmn.w	r0, #0
   8a66e:	ea91 0f03 	teq	r1, r3
   8a672:	bf58      	it	pl
   8a674:	4299      	cmppl	r1, r3
   8a676:	bf08      	it	eq
   8a678:	4290      	cmpeq	r0, r2
   8a67a:	bf2c      	ite	cs
   8a67c:	17d8      	asrcs	r0, r3, #31
   8a67e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8a682:	f040 0001 	orr.w	r0, r0, #1
   8a686:	4770      	bx	lr
   8a688:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a68c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a690:	d102      	bne.n	8a698 <__cmpdf2+0x64>
   8a692:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a696:	d107      	bne.n	8a6a8 <__cmpdf2+0x74>
   8a698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a69c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a6a0:	d1d6      	bne.n	8a650 <__cmpdf2+0x1c>
   8a6a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a6a6:	d0d3      	beq.n	8a650 <__cmpdf2+0x1c>
   8a6a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   8a6ac:	4770      	bx	lr
   8a6ae:	bf00      	nop

0008a6b0 <__aeabi_cdrcmple>:
   8a6b0:	4684      	mov	ip, r0
   8a6b2:	4610      	mov	r0, r2
   8a6b4:	4662      	mov	r2, ip
   8a6b6:	468c      	mov	ip, r1
   8a6b8:	4619      	mov	r1, r3
   8a6ba:	4663      	mov	r3, ip
   8a6bc:	e000      	b.n	8a6c0 <__aeabi_cdcmpeq>
   8a6be:	bf00      	nop

0008a6c0 <__aeabi_cdcmpeq>:
   8a6c0:	b501      	push	{r0, lr}
   8a6c2:	f7ff ffb7 	bl	8a634 <__cmpdf2>
   8a6c6:	2800      	cmp	r0, #0
   8a6c8:	bf48      	it	mi
   8a6ca:	f110 0f00 	cmnmi.w	r0, #0
   8a6ce:	bd01      	pop	{r0, pc}

0008a6d0 <__aeabi_dcmpeq>:
   8a6d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a6d4:	f7ff fff4 	bl	8a6c0 <__aeabi_cdcmpeq>
   8a6d8:	bf0c      	ite	eq
   8a6da:	2001      	moveq	r0, #1
   8a6dc:	2000      	movne	r0, #0
   8a6de:	f85d fb08 	ldr.w	pc, [sp], #8
   8a6e2:	bf00      	nop

0008a6e4 <__aeabi_dcmplt>:
   8a6e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a6e8:	f7ff ffea 	bl	8a6c0 <__aeabi_cdcmpeq>
   8a6ec:	bf34      	ite	cc
   8a6ee:	2001      	movcc	r0, #1
   8a6f0:	2000      	movcs	r0, #0
   8a6f2:	f85d fb08 	ldr.w	pc, [sp], #8
   8a6f6:	bf00      	nop

0008a6f8 <__aeabi_dcmple>:
   8a6f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a6fc:	f7ff ffe0 	bl	8a6c0 <__aeabi_cdcmpeq>
   8a700:	bf94      	ite	ls
   8a702:	2001      	movls	r0, #1
   8a704:	2000      	movhi	r0, #0
   8a706:	f85d fb08 	ldr.w	pc, [sp], #8
   8a70a:	bf00      	nop

0008a70c <__aeabi_dcmpge>:
   8a70c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a710:	f7ff ffce 	bl	8a6b0 <__aeabi_cdrcmple>
   8a714:	bf94      	ite	ls
   8a716:	2001      	movls	r0, #1
   8a718:	2000      	movhi	r0, #0
   8a71a:	f85d fb08 	ldr.w	pc, [sp], #8
   8a71e:	bf00      	nop

0008a720 <__aeabi_dcmpgt>:
   8a720:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a724:	f7ff ffc4 	bl	8a6b0 <__aeabi_cdrcmple>
   8a728:	bf34      	ite	cc
   8a72a:	2001      	movcc	r0, #1
   8a72c:	2000      	movcs	r0, #0
   8a72e:	f85d fb08 	ldr.w	pc, [sp], #8
   8a732:	bf00      	nop

0008a734 <__aeabi_dcmpun>:
   8a734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a73c:	d102      	bne.n	8a744 <__aeabi_dcmpun+0x10>
   8a73e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a742:	d10a      	bne.n	8a75a <__aeabi_dcmpun+0x26>
   8a744:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a748:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a74c:	d102      	bne.n	8a754 <__aeabi_dcmpun+0x20>
   8a74e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a752:	d102      	bne.n	8a75a <__aeabi_dcmpun+0x26>
   8a754:	f04f 0000 	mov.w	r0, #0
   8a758:	4770      	bx	lr
   8a75a:	f04f 0001 	mov.w	r0, #1
   8a75e:	4770      	bx	lr

0008a760 <__aeabi_d2iz>:
   8a760:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a764:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a768:	d215      	bcs.n	8a796 <__aeabi_d2iz+0x36>
   8a76a:	d511      	bpl.n	8a790 <__aeabi_d2iz+0x30>
   8a76c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a770:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a774:	d912      	bls.n	8a79c <__aeabi_d2iz+0x3c>
   8a776:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a77a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a77e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a782:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a786:	fa23 f002 	lsr.w	r0, r3, r2
   8a78a:	bf18      	it	ne
   8a78c:	4240      	negne	r0, r0
   8a78e:	4770      	bx	lr
   8a790:	f04f 0000 	mov.w	r0, #0
   8a794:	4770      	bx	lr
   8a796:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a79a:	d105      	bne.n	8a7a8 <__aeabi_d2iz+0x48>
   8a79c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8a7a0:	bf08      	it	eq
   8a7a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a7a6:	4770      	bx	lr
   8a7a8:	f04f 0000 	mov.w	r0, #0
   8a7ac:	4770      	bx	lr
   8a7ae:	bf00      	nop

0008a7b0 <__aeabi_uldivmod>:
   8a7b0:	b953      	cbnz	r3, 8a7c8 <__aeabi_uldivmod+0x18>
   8a7b2:	b94a      	cbnz	r2, 8a7c8 <__aeabi_uldivmod+0x18>
   8a7b4:	2900      	cmp	r1, #0
   8a7b6:	bf08      	it	eq
   8a7b8:	2800      	cmpeq	r0, #0
   8a7ba:	bf1c      	itt	ne
   8a7bc:	f04f 31ff 	movne.w	r1, #4294967295
   8a7c0:	f04f 30ff 	movne.w	r0, #4294967295
   8a7c4:	f000 b976 	b.w	8aab4 <__aeabi_idiv0>
   8a7c8:	f1ad 0c08 	sub.w	ip, sp, #8
   8a7cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8a7d0:	f000 f806 	bl	8a7e0 <__udivmoddi4>
   8a7d4:	f8dd e004 	ldr.w	lr, [sp, #4]
   8a7d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a7dc:	b004      	add	sp, #16
   8a7de:	4770      	bx	lr

0008a7e0 <__udivmoddi4>:
   8a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a7e4:	9e08      	ldr	r6, [sp, #32]
   8a7e6:	460d      	mov	r5, r1
   8a7e8:	4604      	mov	r4, r0
   8a7ea:	4688      	mov	r8, r1
   8a7ec:	2b00      	cmp	r3, #0
   8a7ee:	d14d      	bne.n	8a88c <__udivmoddi4+0xac>
   8a7f0:	428a      	cmp	r2, r1
   8a7f2:	4694      	mov	ip, r2
   8a7f4:	d968      	bls.n	8a8c8 <__udivmoddi4+0xe8>
   8a7f6:	fab2 f282 	clz	r2, r2
   8a7fa:	b152      	cbz	r2, 8a812 <__udivmoddi4+0x32>
   8a7fc:	fa01 f302 	lsl.w	r3, r1, r2
   8a800:	f1c2 0120 	rsb	r1, r2, #32
   8a804:	fa20 f101 	lsr.w	r1, r0, r1
   8a808:	fa0c fc02 	lsl.w	ip, ip, r2
   8a80c:	ea41 0803 	orr.w	r8, r1, r3
   8a810:	4094      	lsls	r4, r2
   8a812:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8a816:	fbb8 f7f1 	udiv	r7, r8, r1
   8a81a:	fa1f fe8c 	uxth.w	lr, ip
   8a81e:	fb01 8817 	mls	r8, r1, r7, r8
   8a822:	fb07 f00e 	mul.w	r0, r7, lr
   8a826:	0c23      	lsrs	r3, r4, #16
   8a828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8a82c:	4298      	cmp	r0, r3
   8a82e:	d90a      	bls.n	8a846 <__udivmoddi4+0x66>
   8a830:	eb1c 0303 	adds.w	r3, ip, r3
   8a834:	f107 35ff 	add.w	r5, r7, #4294967295
   8a838:	f080 811e 	bcs.w	8aa78 <__udivmoddi4+0x298>
   8a83c:	4298      	cmp	r0, r3
   8a83e:	f240 811b 	bls.w	8aa78 <__udivmoddi4+0x298>
   8a842:	3f02      	subs	r7, #2
   8a844:	4463      	add	r3, ip
   8a846:	1a1b      	subs	r3, r3, r0
   8a848:	fbb3 f0f1 	udiv	r0, r3, r1
   8a84c:	fb01 3310 	mls	r3, r1, r0, r3
   8a850:	fb00 fe0e 	mul.w	lr, r0, lr
   8a854:	b2a4      	uxth	r4, r4
   8a856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8a85a:	45a6      	cmp	lr, r4
   8a85c:	d90a      	bls.n	8a874 <__udivmoddi4+0x94>
   8a85e:	eb1c 0404 	adds.w	r4, ip, r4
   8a862:	f100 33ff 	add.w	r3, r0, #4294967295
   8a866:	f080 8109 	bcs.w	8aa7c <__udivmoddi4+0x29c>
   8a86a:	45a6      	cmp	lr, r4
   8a86c:	f240 8106 	bls.w	8aa7c <__udivmoddi4+0x29c>
   8a870:	4464      	add	r4, ip
   8a872:	3802      	subs	r0, #2
   8a874:	2100      	movs	r1, #0
   8a876:	eba4 040e 	sub.w	r4, r4, lr
   8a87a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8a87e:	b11e      	cbz	r6, 8a888 <__udivmoddi4+0xa8>
   8a880:	2300      	movs	r3, #0
   8a882:	40d4      	lsrs	r4, r2
   8a884:	e9c6 4300 	strd	r4, r3, [r6]
   8a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a88c:	428b      	cmp	r3, r1
   8a88e:	d908      	bls.n	8a8a2 <__udivmoddi4+0xc2>
   8a890:	2e00      	cmp	r6, #0
   8a892:	f000 80ee 	beq.w	8aa72 <__udivmoddi4+0x292>
   8a896:	2100      	movs	r1, #0
   8a898:	e9c6 0500 	strd	r0, r5, [r6]
   8a89c:	4608      	mov	r0, r1
   8a89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a8a2:	fab3 f183 	clz	r1, r3
   8a8a6:	2900      	cmp	r1, #0
   8a8a8:	d14a      	bne.n	8a940 <__udivmoddi4+0x160>
   8a8aa:	42ab      	cmp	r3, r5
   8a8ac:	d302      	bcc.n	8a8b4 <__udivmoddi4+0xd4>
   8a8ae:	4282      	cmp	r2, r0
   8a8b0:	f200 80fc 	bhi.w	8aaac <__udivmoddi4+0x2cc>
   8a8b4:	1a84      	subs	r4, r0, r2
   8a8b6:	eb65 0303 	sbc.w	r3, r5, r3
   8a8ba:	2001      	movs	r0, #1
   8a8bc:	4698      	mov	r8, r3
   8a8be:	2e00      	cmp	r6, #0
   8a8c0:	d0e2      	beq.n	8a888 <__udivmoddi4+0xa8>
   8a8c2:	e9c6 4800 	strd	r4, r8, [r6]
   8a8c6:	e7df      	b.n	8a888 <__udivmoddi4+0xa8>
   8a8c8:	b902      	cbnz	r2, 8a8cc <__udivmoddi4+0xec>
   8a8ca:	deff      	udf	#255	; 0xff
   8a8cc:	fab2 f282 	clz	r2, r2
   8a8d0:	2a00      	cmp	r2, #0
   8a8d2:	f040 8091 	bne.w	8a9f8 <__udivmoddi4+0x218>
   8a8d6:	eba1 000c 	sub.w	r0, r1, ip
   8a8da:	2101      	movs	r1, #1
   8a8dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8a8e0:	fa1f fe8c 	uxth.w	lr, ip
   8a8e4:	fbb0 f3f7 	udiv	r3, r0, r7
   8a8e8:	fb07 0013 	mls	r0, r7, r3, r0
   8a8ec:	0c25      	lsrs	r5, r4, #16
   8a8ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8a8f2:	fb0e f003 	mul.w	r0, lr, r3
   8a8f6:	42a8      	cmp	r0, r5
   8a8f8:	d908      	bls.n	8a90c <__udivmoddi4+0x12c>
   8a8fa:	eb1c 0505 	adds.w	r5, ip, r5
   8a8fe:	f103 38ff 	add.w	r8, r3, #4294967295
   8a902:	d202      	bcs.n	8a90a <__udivmoddi4+0x12a>
   8a904:	42a8      	cmp	r0, r5
   8a906:	f200 80ce 	bhi.w	8aaa6 <__udivmoddi4+0x2c6>
   8a90a:	4643      	mov	r3, r8
   8a90c:	1a2d      	subs	r5, r5, r0
   8a90e:	fbb5 f0f7 	udiv	r0, r5, r7
   8a912:	fb07 5510 	mls	r5, r7, r0, r5
   8a916:	fb0e fe00 	mul.w	lr, lr, r0
   8a91a:	b2a4      	uxth	r4, r4
   8a91c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8a920:	45a6      	cmp	lr, r4
   8a922:	d908      	bls.n	8a936 <__udivmoddi4+0x156>
   8a924:	eb1c 0404 	adds.w	r4, ip, r4
   8a928:	f100 35ff 	add.w	r5, r0, #4294967295
   8a92c:	d202      	bcs.n	8a934 <__udivmoddi4+0x154>
   8a92e:	45a6      	cmp	lr, r4
   8a930:	f200 80b6 	bhi.w	8aaa0 <__udivmoddi4+0x2c0>
   8a934:	4628      	mov	r0, r5
   8a936:	eba4 040e 	sub.w	r4, r4, lr
   8a93a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8a93e:	e79e      	b.n	8a87e <__udivmoddi4+0x9e>
   8a940:	f1c1 0720 	rsb	r7, r1, #32
   8a944:	408b      	lsls	r3, r1
   8a946:	fa22 fc07 	lsr.w	ip, r2, r7
   8a94a:	ea4c 0c03 	orr.w	ip, ip, r3
   8a94e:	fa25 fa07 	lsr.w	sl, r5, r7
   8a952:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8a956:	fbba f8f9 	udiv	r8, sl, r9
   8a95a:	fa20 f307 	lsr.w	r3, r0, r7
   8a95e:	fb09 aa18 	mls	sl, r9, r8, sl
   8a962:	408d      	lsls	r5, r1
   8a964:	fa1f fe8c 	uxth.w	lr, ip
   8a968:	431d      	orrs	r5, r3
   8a96a:	fa00 f301 	lsl.w	r3, r0, r1
   8a96e:	fb08 f00e 	mul.w	r0, r8, lr
   8a972:	0c2c      	lsrs	r4, r5, #16
   8a974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8a978:	42a0      	cmp	r0, r4
   8a97a:	fa02 f201 	lsl.w	r2, r2, r1
   8a97e:	d90b      	bls.n	8a998 <__udivmoddi4+0x1b8>
   8a980:	eb1c 0404 	adds.w	r4, ip, r4
   8a984:	f108 3aff 	add.w	sl, r8, #4294967295
   8a988:	f080 8088 	bcs.w	8aa9c <__udivmoddi4+0x2bc>
   8a98c:	42a0      	cmp	r0, r4
   8a98e:	f240 8085 	bls.w	8aa9c <__udivmoddi4+0x2bc>
   8a992:	f1a8 0802 	sub.w	r8, r8, #2
   8a996:	4464      	add	r4, ip
   8a998:	1a24      	subs	r4, r4, r0
   8a99a:	fbb4 f0f9 	udiv	r0, r4, r9
   8a99e:	fb09 4410 	mls	r4, r9, r0, r4
   8a9a2:	fb00 fe0e 	mul.w	lr, r0, lr
   8a9a6:	b2ad      	uxth	r5, r5
   8a9a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8a9ac:	45a6      	cmp	lr, r4
   8a9ae:	d908      	bls.n	8a9c2 <__udivmoddi4+0x1e2>
   8a9b0:	eb1c 0404 	adds.w	r4, ip, r4
   8a9b4:	f100 35ff 	add.w	r5, r0, #4294967295
   8a9b8:	d26c      	bcs.n	8aa94 <__udivmoddi4+0x2b4>
   8a9ba:	45a6      	cmp	lr, r4
   8a9bc:	d96a      	bls.n	8aa94 <__udivmoddi4+0x2b4>
   8a9be:	3802      	subs	r0, #2
   8a9c0:	4464      	add	r4, ip
   8a9c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8a9c6:	fba0 9502 	umull	r9, r5, r0, r2
   8a9ca:	eba4 040e 	sub.w	r4, r4, lr
   8a9ce:	42ac      	cmp	r4, r5
   8a9d0:	46c8      	mov	r8, r9
   8a9d2:	46ae      	mov	lr, r5
   8a9d4:	d356      	bcc.n	8aa84 <__udivmoddi4+0x2a4>
   8a9d6:	d053      	beq.n	8aa80 <__udivmoddi4+0x2a0>
   8a9d8:	2e00      	cmp	r6, #0
   8a9da:	d069      	beq.n	8aab0 <__udivmoddi4+0x2d0>
   8a9dc:	ebb3 0208 	subs.w	r2, r3, r8
   8a9e0:	eb64 040e 	sbc.w	r4, r4, lr
   8a9e4:	fa22 f301 	lsr.w	r3, r2, r1
   8a9e8:	fa04 f707 	lsl.w	r7, r4, r7
   8a9ec:	431f      	orrs	r7, r3
   8a9ee:	40cc      	lsrs	r4, r1
   8a9f0:	e9c6 7400 	strd	r7, r4, [r6]
   8a9f4:	2100      	movs	r1, #0
   8a9f6:	e747      	b.n	8a888 <__udivmoddi4+0xa8>
   8a9f8:	fa0c fc02 	lsl.w	ip, ip, r2
   8a9fc:	f1c2 0120 	rsb	r1, r2, #32
   8aa00:	fa25 f301 	lsr.w	r3, r5, r1
   8aa04:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8aa08:	fa20 f101 	lsr.w	r1, r0, r1
   8aa0c:	4095      	lsls	r5, r2
   8aa0e:	430d      	orrs	r5, r1
   8aa10:	fbb3 f1f7 	udiv	r1, r3, r7
   8aa14:	fb07 3311 	mls	r3, r7, r1, r3
   8aa18:	fa1f fe8c 	uxth.w	lr, ip
   8aa1c:	0c28      	lsrs	r0, r5, #16
   8aa1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8aa22:	fb01 f30e 	mul.w	r3, r1, lr
   8aa26:	4283      	cmp	r3, r0
   8aa28:	fa04 f402 	lsl.w	r4, r4, r2
   8aa2c:	d908      	bls.n	8aa40 <__udivmoddi4+0x260>
   8aa2e:	eb1c 0000 	adds.w	r0, ip, r0
   8aa32:	f101 38ff 	add.w	r8, r1, #4294967295
   8aa36:	d22f      	bcs.n	8aa98 <__udivmoddi4+0x2b8>
   8aa38:	4283      	cmp	r3, r0
   8aa3a:	d92d      	bls.n	8aa98 <__udivmoddi4+0x2b8>
   8aa3c:	3902      	subs	r1, #2
   8aa3e:	4460      	add	r0, ip
   8aa40:	1ac0      	subs	r0, r0, r3
   8aa42:	fbb0 f3f7 	udiv	r3, r0, r7
   8aa46:	fb07 0013 	mls	r0, r7, r3, r0
   8aa4a:	b2ad      	uxth	r5, r5
   8aa4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8aa50:	fb03 f00e 	mul.w	r0, r3, lr
   8aa54:	42a8      	cmp	r0, r5
   8aa56:	d908      	bls.n	8aa6a <__udivmoddi4+0x28a>
   8aa58:	eb1c 0505 	adds.w	r5, ip, r5
   8aa5c:	f103 38ff 	add.w	r8, r3, #4294967295
   8aa60:	d216      	bcs.n	8aa90 <__udivmoddi4+0x2b0>
   8aa62:	42a8      	cmp	r0, r5
   8aa64:	d914      	bls.n	8aa90 <__udivmoddi4+0x2b0>
   8aa66:	3b02      	subs	r3, #2
   8aa68:	4465      	add	r5, ip
   8aa6a:	1a28      	subs	r0, r5, r0
   8aa6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8aa70:	e738      	b.n	8a8e4 <__udivmoddi4+0x104>
   8aa72:	4631      	mov	r1, r6
   8aa74:	4630      	mov	r0, r6
   8aa76:	e707      	b.n	8a888 <__udivmoddi4+0xa8>
   8aa78:	462f      	mov	r7, r5
   8aa7a:	e6e4      	b.n	8a846 <__udivmoddi4+0x66>
   8aa7c:	4618      	mov	r0, r3
   8aa7e:	e6f9      	b.n	8a874 <__udivmoddi4+0x94>
   8aa80:	454b      	cmp	r3, r9
   8aa82:	d2a9      	bcs.n	8a9d8 <__udivmoddi4+0x1f8>
   8aa84:	ebb9 0802 	subs.w	r8, r9, r2
   8aa88:	eb65 0e0c 	sbc.w	lr, r5, ip
   8aa8c:	3801      	subs	r0, #1
   8aa8e:	e7a3      	b.n	8a9d8 <__udivmoddi4+0x1f8>
   8aa90:	4643      	mov	r3, r8
   8aa92:	e7ea      	b.n	8aa6a <__udivmoddi4+0x28a>
   8aa94:	4628      	mov	r0, r5
   8aa96:	e794      	b.n	8a9c2 <__udivmoddi4+0x1e2>
   8aa98:	4641      	mov	r1, r8
   8aa9a:	e7d1      	b.n	8aa40 <__udivmoddi4+0x260>
   8aa9c:	46d0      	mov	r8, sl
   8aa9e:	e77b      	b.n	8a998 <__udivmoddi4+0x1b8>
   8aaa0:	4464      	add	r4, ip
   8aaa2:	3802      	subs	r0, #2
   8aaa4:	e747      	b.n	8a936 <__udivmoddi4+0x156>
   8aaa6:	3b02      	subs	r3, #2
   8aaa8:	4465      	add	r5, ip
   8aaaa:	e72f      	b.n	8a90c <__udivmoddi4+0x12c>
   8aaac:	4608      	mov	r0, r1
   8aaae:	e706      	b.n	8a8be <__udivmoddi4+0xde>
   8aab0:	4631      	mov	r1, r6
   8aab2:	e6e9      	b.n	8a888 <__udivmoddi4+0xa8>

0008aab4 <__aeabi_idiv0>:
   8aab4:	4770      	bx	lr
   8aab6:	bf00      	nop
   8aab8:	78383025 	.word	0x78383025
   8aabc:	00000000 	.word	0x00000000
   8aac0:	2072614d 	.word	0x2072614d
   8aac4:	32203820 	.word	0x32203820
   8aac8:	00323230 	.word	0x00323230
   8aacc:	333a3331 	.word	0x333a3331
   8aad0:	34353a31 	.word	0x34353a31
   8aad4:	00000000 	.word	0x00000000
   8aad8:	70696843 	.word	0x70696843
   8aadc:	554f4853 	.word	0x554f4853
   8aae0:	20524554 	.word	0x20524554
   8aae4:	31323543 	.word	0x31323543
   8aae8:	6c614220 	.word	0x6c614220
   8aaec:	7473696c 	.word	0x7473696c
   8aaf0:	47206369 	.word	0x47206369
   8aaf4:	4f206c65 	.word	0x4f206c65
   8aaf8:	6e696c6e 	.word	0x6e696c6e
   8aafc:	46202e65 	.word	0x46202e65
   8ab00:	776d7269 	.word	0x776d7269
   8ab04:	20657261 	.word	0x20657261
   8ab08:	6c697562 	.word	0x6c697562
   8ab0c:	25203a64 	.word	0x25203a64
   8ab10:	73252f73 	.word	0x73252f73
   8ab14:	0000000a 	.word	0x0000000a
   8ab18:	69726553 	.word	0x69726553
   8ab1c:	6e206c61 	.word	0x6e206c61
   8ab20:	65626d75 	.word	0x65626d75
   8ab24:	25203a72 	.word	0x25203a72
   8ab28:	00000a73 	.word	0x00000a73
   8ab2c:	74746553 	.word	0x74746553
   8ab30:	20676e69 	.word	0x20676e69
   8ab34:	53207075 	.word	0x53207075
   8ab38:	204d4152 	.word	0x204d4152
   8ab3c:	6d6d6f43 	.word	0x6d6d6f43
   8ab40:	63696e75 	.word	0x63696e75
   8ab44:	6f697461 	.word	0x6f697461
   8ab48:	00000a6e 	.word	0x00000a6e
   8ab4c:	6e657645 	.word	0x6e657645
   8ab50:	6f4c2074 	.word	0x6f4c2074
   8ab54:	4520706f 	.word	0x4520706f
   8ab58:	7265746e 	.word	0x7265746e
   8ab5c:	202c6465 	.word	0x202c6465
   8ab60:	74696177 	.word	0x74696177
   8ab64:	2e676e69 	.word	0x2e676e69
   8ab68:	000a2e2e 	.word	0x000a2e2e

0008ab6c <BUILD_DATE>:
   8ab6c:	2072614d 32203820 00323230              Mar  8 2022.

0008ab78 <BUILD_TIME>:
   8ab78:	333a3331 35353a31 00000000 00000000     13:31:55........
   8ab88:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8ab98:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8aba8:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8abb8:	0000007e 74697845 20676e69 68746977     ~...Exiting with
   8abc8:	61747320 20737574 0a2e6425 00000000      status %d......

0008abd8 <_global_impure_ptr>:
   8abd8:	20000400 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8abe8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8abf8:	66656463 00000000 33323130 37363534     cdef....01234567
   8ac08:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8ac18:	0000296c 00000030                       l)..0...

0008ac20 <blanks.1>:
   8ac20:	20202020 20202020 20202020 20202020                     

0008ac30 <zeroes.0>:
   8ac30:	30303030 30303030 30303030 30303030     0000000000000000

0008ac40 <blanks.1>:
   8ac40:	20202020 20202020 20202020 20202020                     

0008ac50 <zeroes.0>:
   8ac50:	30303030 30303030 30303030 30303030     0000000000000000
   8ac60:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8ac70:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8ac80:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ac90:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8aca0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8acb0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8acc0:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8acd0:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8ace0:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8acf0:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8ad00:	00000063 00000043 49534f50 00000058     c...C...POSIX...
   8ad10:	0000002e 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ad20:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8ad30:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8ad40:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8ad50:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8ad60:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8ad70:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8ad80:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8ad90:	0000632e 00000000                       .c......

0008ad98 <__mprec_bigtens>:
   8ad98:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8ada8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8adb8:	7f73bf3c 75154fdd                       <.s..O.u

0008adc0 <__mprec_tens>:
   8adc0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8add0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8ade0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8adf0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8ae00:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ae10:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ae20:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ae30:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ae40:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ae50:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8ae60:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ae70:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8ae80:	79d99db4 44ea7843                       ...yCx.D

0008ae88 <p05.0>:
   8ae88:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8ae98:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8aea8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8aeb8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8aec8:	2520656e 25732564 00000a73              ne %d%s%s...

0008aed4 <_ctype_>:
   8aed4:	20202000 20202020 28282020 20282828     .         ((((( 
   8aee4:	20202020 20202020 20202020 20202020                     
   8aef4:	10108820 10101010 10101010 10101010      ...............
   8af04:	04040410 04040404 10040404 10101010     ................
   8af14:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8af24:	01010101 01010101 01010101 10101010     ................
   8af34:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8af44:	02020202 02020202 02020202 10101010     ................
   8af54:	00000020 00000000 00000000 00000000      ...............
   8af64:	00000000 00000000 00000000 00000000     ................
   8af74:	00000000 00000000 00000000 00000000     ................
   8af84:	00000000 00000000 00000000 00000000     ................
   8af94:	00000000 00000000 00000000 00000000     ................
   8afa4:	00000000 00000000 00000000 00000000     ................
   8afb4:	00000000 00000000 00000000 00000000     ................
   8afc4:	00000000 00000000 00000000 00000000     ................
   8afd4:	00000000                                ....

0008afd8 <_init>:
   8afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8afda:	bf00      	nop
   8afdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8afde:	bc08      	pop	{r3}
   8afe0:	469e      	mov	lr, r3
   8afe2:	4770      	bx	lr

0008afe4 <__init_array_start>:
   8afe4:	00086a05 	.word	0x00086a05

0008afe8 <__frame_dummy_init_array_entry>:
   8afe8:	000800e1                                ....

0008afec <_fini>:
   8afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8afee:	bf00      	nop
   8aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aff2:	bc08      	pop	{r3}
   8aff4:	469e      	mov	lr, r3
   8aff6:	4770      	bx	lr

0008aff8 <__do_global_dtors_aux_fini_array_entry>:
   8aff8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20000004:	4c33      	ldr	r4, [pc, #204]	; (200000d4 <efc_perform_read_sequence+0xd4>)
{
20000006:	b082      	sub	sp, #8
			(uint32_t *) ((p_efc == EFC0) ?
20000008:	42a0      	cmp	r0, r4
2000000a:	bf0c      	ite	eq
2000000c:	f44f 2e00 	moveq.w	lr, #524288	; 0x80000
20000010:	f44f 1e80 	movne.w	lr, #1048576	; 0x100000
{
20000014:	9f08      	ldr	r7, [sp, #32]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000016:	2b00      	cmp	r3, #0
20000018:	d057      	beq.n	200000ca <efc_perform_read_sequence+0xca>
2000001a:	4684      	mov	ip, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001c:	6800      	ldr	r0, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001e:	b2c9      	uxtb	r1, r1
20000020:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20000024:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20000028:	f8cc 0000 	str.w	r0, [ip]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000002c:	f8cc 1004 	str.w	r1, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000030:	f8dc 1008 	ldr.w	r1, [ip, #8]
20000034:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000036:	9801      	ldr	r0, [sp, #4]
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d1f8      	bne.n	20000030 <efc_perform_read_sequence+0x30>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	b31f      	cbz	r7, 20000088 <efc_perform_read_sequence+0x88>
20000040:	1e79      	subs	r1, r7, #1
20000042:	290a      	cmp	r1, #10
20000044:	f3c3 0402 	ubfx	r4, r3, #0, #3
20000048:	bf94      	ite	ls
2000004a:	2100      	movls	r1, #0
2000004c:	2101      	movhi	r1, #1
2000004e:	2c00      	cmp	r4, #0
20000050:	bf18      	it	ne
20000052:	2100      	movne	r1, #0
20000054:	b361      	cbz	r1, 200000b0 <efc_perform_read_sequence+0xb0>
20000056:	f10e 0104 	add.w	r1, lr, #4
2000005a:	428b      	cmp	r3, r1
2000005c:	d028      	beq.n	200000b0 <efc_perform_read_sequence+0xb0>
2000005e:	4619      	mov	r1, r3
20000060:	ea4f 0857 	mov.w	r8, r7, lsr #1
20000064:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
20000068:	f1ae 0608 	sub.w	r6, lr, #8
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000006c:	e9f6 4502 	ldrd	r4, r5, [r6, #8]!
20000070:	e8e1 4502 	strd	r4, r5, [r1], #8
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000074:	4541      	cmp	r1, r8
20000076:	d1f9      	bne.n	2000006c <efc_perform_read_sequence+0x6c>
20000078:	07fc      	lsls	r4, r7, #31
2000007a:	f027 0101 	bic.w	r1, r7, #1
2000007e:	d503      	bpl.n	20000088 <efc_perform_read_sequence+0x88>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000080:	f85e 4021 	ldr.w	r4, [lr, r1, lsl #2]
20000084:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000088:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000008a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000008e:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000092:	f8dc 3008 	ldr.w	r3, [ip, #8]
20000096:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000098:	9b01      	ldr	r3, [sp, #4]
2000009a:	07db      	lsls	r3, r3, #31
2000009c:	d5f9      	bpl.n	20000092 <efc_perform_read_sequence+0x92>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000009e:	f8dc 3000 	ldr.w	r3, [ip]
200000a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200000a6:	f8cc 3000 	str.w	r3, [ip]

	return EFC_RC_OK;
}
200000aa:	b002      	add	sp, #8
200000ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
200000b0:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
200000b4:	3b04      	subs	r3, #4
200000b6:	f1ae 0e04 	sub.w	lr, lr, #4
200000ba:	3f04      	subs	r7, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
200000bc:	f85e 1f04 	ldr.w	r1, [lr, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
200000c0:	45be      	cmp	lr, r7
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
200000c2:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
200000c6:	d1f9      	bne.n	200000bc <efc_perform_read_sequence+0xbc>
200000c8:	e7de      	b.n	20000088 <efc_perform_read_sequence+0x88>
		return EFC_RC_INVALID;
200000ca:	2002      	movs	r0, #2
}
200000cc:	b002      	add	sp, #8
200000ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
200000d2:	bf00      	nop
200000d4:	400e0800 	.word	0x400e0800

200000d8 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
200000d8:	6001      	str	r1, [r0, #0]
}
200000da:	4770      	bx	lr

200000dc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000dc:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000de:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000e0:	6883      	ldr	r3, [r0, #8]
200000e2:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000e4:	9b01      	ldr	r3, [sp, #4]
200000e6:	07db      	lsls	r3, r3, #31
200000e8:	d5fa      	bpl.n	200000e0 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
200000ea:	9801      	ldr	r0, [sp, #4]
}
200000ec:	f000 0006 	and.w	r0, r0, #6
200000f0:	b002      	add	sp, #8
200000f2:	4770      	bx	lr

200000f4 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
200000f8:	4819      	ldr	r0, [pc, #100]	; (20000160 <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000fa:	491a      	ldr	r1, [pc, #104]	; (20000164 <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000fc:	4a1a      	ldr	r2, [pc, #104]	; (20000168 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000fe:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000100:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000102:	6a13      	ldr	r3, [r2, #32]
20000104:	01db      	lsls	r3, r3, #7
20000106:	d404      	bmi.n	20000112 <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000108:	4b18      	ldr	r3, [pc, #96]	; (2000016c <SystemInit+0x78>)
2000010a:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000010c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000010e:	07d8      	lsls	r0, r3, #31
20000110:	d5fc      	bpl.n	2000010c <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000112:	4a15      	ldr	r2, [pc, #84]	; (20000168 <SystemInit+0x74>)
20000114:	4b16      	ldr	r3, [pc, #88]	; (20000170 <SystemInit+0x7c>)
20000116:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000118:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000011a:	03d9      	lsls	r1, r3, #15
2000011c:	d5fc      	bpl.n	20000118 <SystemInit+0x24>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000011e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000120:	4811      	ldr	r0, [pc, #68]	; (20000168 <SystemInit+0x74>)
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000122:	f023 0303 	bic.w	r3, r3, #3
20000126:	f043 0301 	orr.w	r3, r3, #1
2000012a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000012c:	6e83      	ldr	r3, [r0, #104]	; 0x68
2000012e:	071b      	lsls	r3, r3, #28
20000130:	d5fc      	bpl.n	2000012c <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000132:	4b10      	ldr	r3, [pc, #64]	; (20000174 <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000134:	490c      	ldr	r1, [pc, #48]	; (20000168 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000136:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000138:	6e8b      	ldr	r3, [r1, #104]	; 0x68
2000013a:	0798      	lsls	r0, r3, #30
2000013c:	d5fc      	bpl.n	20000138 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000013e:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000140:	4a09      	ldr	r2, [pc, #36]	; (20000168 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000142:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000146:	0719      	lsls	r1, r3, #28
20000148:	d5fc      	bpl.n	20000144 <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000014a:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000014c:	4906      	ldr	r1, [pc, #24]	; (20000168 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000014e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000150:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20000152:	071b      	lsls	r3, r3, #28
20000154:	d5fc      	bpl.n	20000150 <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000156:	4b08      	ldr	r3, [pc, #32]	; (20000178 <SystemInit+0x84>)
20000158:	4a08      	ldr	r2, [pc, #32]	; (2000017c <SystemInit+0x88>)
2000015a:	601a      	str	r2, [r3, #0]
}
2000015c:	4770      	bx	lr
2000015e:	bf00      	nop
20000160:	400e0800 	.word	0x400e0800
20000164:	400e0a00 	.word	0x400e0a00
20000168:	400e0400 	.word	0x400e0400
2000016c:	00370809 	.word	0x00370809
20000170:	01370809 	.word	0x01370809
20000174:	200f3f01 	.word	0x200f3f01
20000178:	200003f8 	.word	0x200003f8
2000017c:	05b8d800 	.word	0x05b8d800

20000180 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000180:	4b14      	ldr	r3, [pc, #80]	; (200001d4 <system_init_flash+0x54>)
20000182:	4298      	cmp	r0, r3
20000184:	d205      	bcs.n	20000192 <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000186:	2300      	movs	r3, #0
20000188:	4913      	ldr	r1, [pc, #76]	; (200001d8 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000018a:	4a14      	ldr	r2, [pc, #80]	; (200001dc <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000018c:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000018e:	6013      	str	r3, [r2, #0]
20000190:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000192:	4b13      	ldr	r3, [pc, #76]	; (200001e0 <system_init_flash+0x60>)
20000194:	4298      	cmp	r0, r3
20000196:	d206      	bcs.n	200001a6 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000198:	f44f 7380 	mov.w	r3, #256	; 0x100
2000019c:	490e      	ldr	r1, [pc, #56]	; (200001d8 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000019e:	4a0f      	ldr	r2, [pc, #60]	; (200001dc <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001a0:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001a2:	6013      	str	r3, [r2, #0]
200001a4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001a6:	4b0f      	ldr	r3, [pc, #60]	; (200001e4 <system_init_flash+0x64>)
200001a8:	4298      	cmp	r0, r3
200001aa:	d806      	bhi.n	200001ba <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001ac:	f44f 7300 	mov.w	r3, #512	; 0x200
200001b0:	4909      	ldr	r1, [pc, #36]	; (200001d8 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200001b2:	4a0a      	ldr	r2, [pc, #40]	; (200001dc <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001b4:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200001b6:	6013      	str	r3, [r2, #0]
200001b8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200001ba:	4b0b      	ldr	r3, [pc, #44]	; (200001e8 <system_init_flash+0x68>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200001bc:	4906      	ldr	r1, [pc, #24]	; (200001d8 <system_init_flash+0x58>)
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200001be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200001c0:	bf94      	ite	ls
200001c2:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200001c6:	f44f 6380 	movhi.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200001ca:	4a04      	ldr	r2, [pc, #16]	; (200001dc <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200001cc:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200001ce:	6013      	str	r3, [r2, #0]
	}
}
200001d0:	4770      	bx	lr
200001d2:	bf00      	nop
200001d4:	016e3600 	.word	0x016e3600
200001d8:	400e0800 	.word	0x400e0800
200001dc:	400e0a00 	.word	0x400e0a00
200001e0:	02625a00 	.word	0x02625a00
200001e4:	044aa1ff 	.word	0x044aa1ff
200001e8:	0501bcff 	.word	0x0501bcff

200001ec <usb_serial_number>:
200001ec:	30303030 30303030 30303030 44414544     000000000000DEAD
200001fc:	46454542 00000000 00000000 00000000     BEEF............
2000020c:	00000000                                ....

20000210 <sram_size>:
20000210:	00400000                                ..@.

20000214 <main_b_vendor_enable>:
20000214:	00000001                                ....

20000218 <MS_BOS_PACKET>:
20000218:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000228:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
20000238:	00000000                                ....

2000023c <MS_OS_DESC>:
2000023c:	0000000a 06030000 0014009e 49570003     ..............WI
2000024c:	4253554e 00000000 00000000 00800000     NUSB............
2000025c:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
2000026c:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
2000027c:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
2000028c:	0030007b 00430041 00320045 00330042     {.0.A.C.E.2.B.3.
2000029c:	002d0045 00420032 00450033 0032002d     E.-.2.B.3.E.-.2.
200002ac:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
200002bc:	0034002d 00320035 00300031 00430041     -.4.5.2.1.0.A.C.
200002cc:	00320045 00330042 007d0045 00000000     E.2.B.3.E.}.....

200002dc <udc_string_desc>:
200002dc:	00000300 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000 00000000 00000000 00000000     ................
2000030c:	00000000 00000000 00000000 00000000     ................
2000031c:	00000000                                ....

20000320 <udc_string_desc_languageid>:
20000320:	04090304                                ....

20000324 <udc_string_manufacturer_name>:
20000324:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000334:	636e4920 0000002e                        Inc....

2000033c <udc_string_product_name>:
2000033c:	6c6c6142 69747369 65472063 5743206c     Ballistic Gel CW
2000034c:	00313235                                521.

20000350 <xram>:
20000350:	60000000                                ...`

20000354 <udi_api_vendor>:
20000354:	0008327d 00083239 0008324d 0008322d     }2..92..M2..-2..
20000364:	00000000                                ....

20000368 <g_interrupt_enabled>:
20000368:	00000001                                ....

2000036c <udc_config>:
2000036c:	200003d4 2000038c 200003d4 200003e8     ... ... ... ... 
2000037c:	20000384 00000000                       ... ....

20000384 <udc_config_hs>:
20000384:	200003b4 200003f4                       ... ... 

2000038c <udc_config_lsfs>:
2000038c:	20000394 200003f4                       ... ... 

20000394 <udc_desc_fs>:
20000394:	00200209 80000101 000409fa ffff0200     .. .............
200003a4:	050700ff 00400281 02050700 00004002     ......@......@..

200003b4 <udc_desc_hs>:
200003b4:	00200209 80000101 000409fa ffff0200     .. .............
200003c4:	050700ff 02000281 02050700 00020002     ................

200003d4 <udc_device_desc>:
200003d4:	02000112 40000000 c5212b3e 02010100     .......@>+!.....
200003e4:	00000103                                ....

200003e8 <udc_device_qual>:
200003e8:	0200060a 40000000 00000001              .......@....

200003f4 <udi_apis>:
200003f4:	20000354                                T.. 

200003f8 <SystemCoreClock>:
200003f8:	003d0900                                ..=.

200003fc <_impure_ptr>:
200003fc:	20000400                                ... 

20000400 <impure_data>:
20000400:	00000000 200006ec 20000754 200007bc     ....... T.. ... 
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000000 00000000     ................
20000460:	00000000 00000000 00000000 00000000     ................
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000001 00000000     ................
200004b0:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000 00000000 00000000     ................
200007e0:	00000000 00000000 00000000 00000000     ................
200007f0:	00000000 00000000 00000000 00000000     ................
20000800:	00000000 00000000 00000000 00000000     ................
20000810:	00000000 00000000 00000000 00000000     ................
20000820:	00000000 00000000                       ........

20000828 <__atexit_recursive_mutex>:
20000828:	20003720                                 7. 

2000082c <__global_locale>:
2000082c:	00000043 00000000 00000000 00000000     C...............
2000083c:	00000000 00000000 00000000 00000000     ................
2000084c:	00000043 00000000 00000000 00000000     C...............
2000085c:	00000000 00000000 00000000 00000000     ................
2000086c:	00000043 00000000 00000000 00000000     C...............
2000087c:	00000000 00000000 00000000 00000000     ................
2000088c:	00000043 00000000 00000000 00000000     C...............
2000089c:	00000000 00000000 00000000 00000000     ................
200008ac:	00000043 00000000 00000000 00000000     C...............
200008bc:	00000000 00000000 00000000 00000000     ................
200008cc:	00000043 00000000 00000000 00000000     C...............
200008dc:	00000000 00000000 00000000 00000000     ................
200008ec:	00000043 00000000 00000000 00000000     C...............
200008fc:	00000000 00000000 00000000 00000000     ................
2000090c:	00089a9d 00088aa5 00000000 0008aed4     ................
2000091c:	0008ad10 0008abd4 0008abd4 0008abd4     ................
2000092c:	0008abd4 0008abd4 0008abd4 0008abd4     ................
2000093c:	0008abd4 0008abd4 ffffffff ffffffff     ................
2000094c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
2000095c:	00000000 00000000 00000000 00000000     ................
2000096c:	00000000 00000000 53410000 00494943     ..........ASCII.
2000097c:	00000000 00000000 00000000 00000000     ................
2000098c:	00000000 00000000 00000000              ............

20000998 <__malloc_av_>:
20000998:	00000000 00000000 20000998 20000998     ........... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90                       ... ... 

20000da0 <__malloc_sbrk_base>:
20000da0:	ffffffff                                ....

20000da4 <__malloc_trim_threshold>:
20000da4:	00020000                                ....
